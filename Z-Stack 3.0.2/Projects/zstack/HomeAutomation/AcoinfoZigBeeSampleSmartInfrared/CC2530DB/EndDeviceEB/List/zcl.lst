###############################################################################
#
# IAR C/C++ Compiler V10.10.1.4655 for 8051               21/Jul/2021  15:47:09
# Copyright 2004-2017 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Components\stack\zcl\zcl.c
#    Command line       =  
#        -f C:\Users\WenHao\AppData\Local\Temp\EWD15E.tmp
#        ("D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Components\stack\zcl\zcl.c" -D CSTX_BOARD -D SECURE=1 -D
#        TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D xPOWER_SAVING -D
#        NWK_AUTO_POLL -D xZTOOL_P1 -D xMT_TASK -D xMT_APP_FUNC -D xMT_SYS_FUNC
#        -D xMT_ZDO_FUNC -D xMT_ZDO_MGMT -D xMT_APP_CNF_FUNC -D
#        LCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D ZCL_IDENTIFY -D
#        ZCL_READ -D ZCL_DISCOVER -D ZCL_WRITE -D ZCL_BASIC -D
#        ZCL_REPORTING_DEVICE -D HAL_LED=TRUE -D HAL_UART=TRUE -D HAL_KEY=TRUE
#        -D ISR_KEYINTERRUPT -lC "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\EndDeviceEB\List"
#        -lA "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\EndDeviceEB\List"
#        --diag_suppress Pe001,Pa010 -o
#        "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\EndDeviceEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f
#        "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f
#        "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00100000 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000 -DENABLE_LED4_DISABLE_S1)
#        -f "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\Source\"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\Source\"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\stack\gp\"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes)
#    Locale             =  Chinese (Simplified)_China.936
#    List file          =  
#        D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\EndDeviceEB\List\zcl.lst
#    Object file        =  
#        D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\EndDeviceEB\Obj\zcl.r51
#
###############################################################################

D:\work\zigbee\ti_cc2530_zstack\Z-Stack 3.0.2\Components\stack\zcl\zcl.c
      1          /**************************************************************************************************
      2            Filename:       zcl.c
      3            Revised:        $Date: 2015-09-09 11:51:49 -0700 (Wed, 09 Sep 2015) $
      4            Revision:       $Revision: 44489 $
      5          
      6            Description:    This file contains the Zigbee Cluster Library Foundation functions.
      7          
      8          
      9            Copyright 2006-2015 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          #include "ZComDef.h"
     44          #include "AF.h"
     45          #include "APS.h"
     46          #include "zcl.h"
     47          #include "zcl_general.h"
     48          
     49          #if defined ( INTER_PAN )
     50            #include "stub_aps.h"
     51          #endif
     52             
     53          #ifdef BDB_REPORTING
     54            #include "bdb_Reporting.h"
     55          #endif
     56          #include "bdb_interface.h"
     57          
     58          #include "zcl_green_power.h"
     59          
     60          /*********************************************************************
     61           * MACROS
     62           */
     63          /*** Frame Control ***/
     64          #define zcl_FCType( a )               ( (a) & ZCL_FRAME_CONTROL_TYPE )
     65          #define zcl_FCManuSpecific( a )       ( (a) & ZCL_FRAME_CONTROL_MANU_SPECIFIC )
     66          #define zcl_FCDirection( a )          ( (a) & ZCL_FRAME_CONTROL_DIRECTION )
     67          #define zcl_FCDisableDefaultRsp( a )  ( (a) & ZCL_FRAME_CONTROL_DISABLE_DEFAULT_RSP )
     68          
     69          /*** Attribute Access Control ***/
     70          #define zcl_AccessCtrlRead( a )       ( (a) & ACCESS_CONTROL_READ )
     71          #define zcl_AccessCtrlWrite( a )      ( (a) & ACCESS_CONTROL_WRITE )
     72          #define zcl_AccessCtrlCmd( a )        ( (a) & ACCESS_CONTROL_CMD )
     73          #define zcl_AccessCtrlAuthRead( a )   ( (a) & ACCESS_CONTROL_AUTH_READ )
     74          #define zcl_AccessCtrlAuthWrite( a )  ( (a) & ACCESS_CONTROL_AUTH_WRITE )
     75          #define zcl_AccessClient( a )         ( (a) & ACCESS_CLIENT )
     76          
     77          #define zclParseCmd( a, b )           zclCmdTable[(a)].pfnParseInProfile( (b) )
     78          #define zclProcessCmd( a, b )         zclCmdTable[(a)].pfnProcessInProfile( (b) )
     79          
     80          #define zcl_DefaultRspCmd( zclHdr )   ( zcl_ProfileCmd( (zclHdr).fc.type )     && \
     81                                                  (zclHdr).fc.manuSpecific == 0          && \
     82                                                  (zclHdr).commandID == ZCL_CMD_DEFAULT_RSP )
     83          
     84          // Commands that have corresponding responses (ZCL_CMD_WRITE_NO_RSP, does not have response, but must not send default response)
     85          #define CMD_HAS_RSP( cmd )            ( (cmd) == ZCL_CMD_READ                   || \
     86                                                  (cmd) == ZCL_CMD_WRITE                  || \
     87                                                  (cmd) == ZCL_CMD_WRITE_UNDIVIDED        || \
     88                                                  (cmd) == ZCL_CMD_WRITE_NO_RSP           || \
     89                                                  (cmd) == ZCL_CMD_CONFIG_REPORT          || \
     90                                                  (cmd) == ZCL_CMD_READ_REPORT_CFG        || \
     91                                                  (cmd) == ZCL_CMD_DISCOVER_ATTRS         || \
     92                                                  (cmd) == ZCL_CMD_DISCOVER_CMDS_RECEIVED || \
     93                                                  (cmd) == ZCL_CMD_DISCOVER_CMDS_GEN      || \
     94                                                  (cmd) == ZCL_CMD_DISCOVER_ATTRS_EXT     || \
     95                                                  (cmd) == ZCL_CMD_DEFAULT_RSP ) // exception
     96          #define  ZCL_VALID_MIN_HEADER_LEN  3
     97          
     98          /*********************************************************************
     99           * CONSTANTS
    100           */
    101          
    102          /*********************************************************************
    103           * TYPEDEFS
    104           */
    105          typedef struct zclLibPlugin
    106          {
    107            struct zclLibPlugin *next;
    108            uint16              startClusterID;    // starting cluster ID
    109            uint16              endClusterID;      // ending cluster ID
    110            zclInHdlr_t         pfnIncomingHdlr;    // function to handle incoming message
    111          } zclLibPlugin_t;
    112          
    113          // Command record list
    114          typedef struct zclCmdRecsList
    115          {
    116            struct zclCmdRecsList *pNext;
    117            uint8                 endpoint;
    118            uint8                 numCommands;
    119            CONST zclCommandRec_t *pCmdRecs;
    120          } zclCmdRecsList_t;
    121          
    122          
    123          // Cluster option list item
    124          typedef struct zclClusterOptionList
    125          {
    126            struct zclClusterOptionList *next;
    127            uint8                       endpoint;   // Used to link it into the endpoint descriptor
    128            uint8                       numOptions; // Number of the following records
    129            zclOptionRec_t              *options;   // option records
    130          } zclClusterOptionList;
    131          
    132          typedef void *(*zclParseInProfileCmd_t)( zclParseCmd_t *pCmd );
    133          typedef uint8 (*zclProcessInProfileCmd_t)( zclIncoming_t *pInMsg );
    134          
    135          typedef struct
    136          {
    137            zclParseInProfileCmd_t   pfnParseInProfile;
    138            zclProcessInProfileCmd_t pfnProcessInProfile;
    139          } zclCmdItems_t;
    140          
    141          
    142          // List record for external handler for unhandled ZCL Foundation commands/rsps
    143          typedef struct zclExternalFoundationHandlerList
    144          {
    145              struct zclExternalFoundationHandlerList *next;
    146              uint8 zcl_ExternalTaskID;
    147              uint8 zcl_ExternalEndPoint;
    148          } zclExternalFoundationHandlerList;
    149          
    150          
    151          /*********************************************************************
    152           * GLOBAL VARIABLES
    153           */
    154          
    155          #if !defined ( ZCL_STANDALONE )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    156            uint8 zcl_TaskID;
   \                     zcl_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    157          #endif
    158          
    159          // The Application should register its attribute data validation function

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    160          zclValidateAttrData_t zcl_ValidateAttrDataCB = (zclValidateAttrData_t)NULL;
   \                     zcl_ValidateAttrDataCB:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    161          
    162          // ZCL Sequence number
    163          //uint8 zcl_SeqNum = 0x00;  //Not longer used, refer to bdb_getZCLFrameCounter() in bdb_interface.h

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    164          uint8 zcl_InSeqNum = 0x00;
   \                     zcl_InSeqNum:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    165          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    166          uint8 zcl_radius = AF_DEFAULT_RADIUS;
   \                     zcl_radius:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zcl_radius>`
   \   000001                REQUIRE __INIT_XDATA_I
    167          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    168          static uint8 savedZCLTransSeqNum = 0;
   \                     savedZCLTransSeqNum:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    169          
    170          /*********************************************************************
    171           * EXTERNAL VARIABLES
    172           */
    173          
    174          /*********************************************************************
    175           * EXTERNAL FUNCTIONS
    176           */
    177          
    178          /*********************************************************************
    179           * LOCAL VARIABLES
    180           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    181          static zclLibPlugin_t *plugins = (zclLibPlugin_t *)NULL;
   \                     plugins:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    182          
    183          #if defined ( ZCL_DISCOVER )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    184            static zclCmdRecsList_t *gpCmdList = (zclCmdRecsList_t *)NULL;
   \                     gpCmdList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    185          #endif
    186          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    187          static zclAttrRecsList *attrList = (zclAttrRecsList *)NULL;
   \                     attrList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    188          static zclClusterOptionList *clusterOptionList = (zclClusterOptionList *)NULL;
   \                     clusterOptionList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    189          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    190          static afIncomingMSGPacket_t *rawAFMsg = (afIncomingMSGPacket_t *)NULL;
   \                     rawAFMsg:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    191          
    192          #if !defined ( ZCL_STANDALONE )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    193          static zclExternalFoundationHandlerList *externalEndPointHandlerList = (zclExternalFoundationHandlerList *)NULL;
   \                     externalEndPointHandlerList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    194          #endif
    195          
    196          /*********************************************************************
    197           * LOCAL FUNCTIONS
    198           */
    199          static uint8 *zclBuildHdr( zclFrameHdr_t *hdr, uint8 *pData );
    200          static uint8 zclCalcHdrSize( zclFrameHdr_t *hdr );
    201          static zclLibPlugin_t *zclFindPlugin( uint16 clusterID, uint16 profileID );
    202          
    203          #if !defined ( ZCL_STANDALONE )
    204          static uint8 zcl_addExternalFoundationHandler( uint8 taskId, uint8 endPointId );
    205          static uint8 zcl_getExternalFoundationHandler( afIncomingMSGPacket_t *pInMsg );
    206          #endif // !defined ( ZCL_STANDALONE )
    207          
    208          #if defined ( ZCL_DISCOVER )
    209            static zclCmdRecsList_t *zclFindCmdRecsList( uint8 endpoint );
    210          #endif
    211          
    212          zclAttrRecsList *zclFindAttrRecsList( uint8 endpoint );
    213          static zclOptionRec_t *zclFindClusterOption( uint8 endpoint, uint16 clusterID );
    214          static uint8 zclGetClusterOption( uint8 endpoint, uint16 clusterID );
    215          static void zclSetSecurityOption( uint8 endpoint, uint16 clusterID, uint8 enable );
    216          
    217          static uint8 zcl_DeviceOperational( uint8 srcEP, uint16 clusterID, uint8 frameType, uint8 cmd, uint16 profileID );
    218          
    219          #if defined ( ZCL_READ ) || defined ( ZCL_WRITE )
    220          static zclReadWriteCB_t zclGetReadWriteCB( uint8 endpoint );
    221          static zclAuthorizeCB_t zclGetAuthorizeCB( uint8 endpoint );
    222          #endif // ZCL_READ || ZCL_WRITE
    223          
    224          #ifdef ZCL_READ
    225          ZStatus_t zclReadAttrData( uint8 *pAttrData, zclAttrRec_t *pAttr, uint16 *pDataLen );
    226          static uint16 zclGetAttrDataLengthUsingCB( uint8 endpoint, uint16 clusterID, uint16 attrId );
    227          static ZStatus_t zclReadAttrDataUsingCB( uint8 endpoint, uint16 clusterId, uint16 attrId,
    228                                                   uint8 *pAttrData, uint16 *pDataLen );
    229          static ZStatus_t zclAuthorizeRead( uint8 endpoint, afAddrType_t *srcAddr, zclAttrRec_t *pAttr );
    230          static void *zclParseInReadRspCmd( zclParseCmd_t *pCmd );
    231          static uint8 zclProcessInReadCmd( zclIncoming_t *pInMsg );
    232          #endif // ZCL_READ
    233          
    234          #ifdef ZCL_WRITE
    235          static ZStatus_t zclWriteAttrData( uint8 endpoint, afAddrType_t *srcAddr,
    236                                             zclAttrRec_t *pAttr, zclWriteRec_t *pWriteRec );
    237          static ZStatus_t zclWriteAttrDataUsingCB( uint8 endpoint, afAddrType_t *srcAddr,
    238                                                    zclAttrRec_t *pAttr, uint8 *pAttrData );
    239          static ZStatus_t zclAuthorizeWrite( uint8 endpoint, afAddrType_t *srcAddr, zclAttrRec_t *pAttr );
    240          static void *zclParseInWriteRspCmd( zclParseCmd_t *pCmd );
    241          static uint8 zclProcessInWriteCmd( zclIncoming_t *pInMsg );
    242          static uint8 zclProcessInWriteUndividedCmd( zclIncoming_t *pInMsg );
    243          #endif // ZCL_WRITE
    244          
    245          #ifdef ZCL_REPORT_CONFIGURING_DEVICE
    246          static void *zclParseInConfigReportRspCmd( zclParseCmd_t *pCmd );
    247          static void *zclParseInReadReportCfgRspCmd( zclParseCmd_t *pCmd );
    248          #endif
    249          
    250          static void *zclParseInDefaultRspCmd( zclParseCmd_t *pCmd );
    251          
    252          #ifdef ZCL_DISCOVER
    253          static uint8 zclFindNextCmdRec( uint8 endpoint, uint16 clusterID, uint8 commandID, uint8 direction, uint8 *pCmdID, zclCommandRec_t *pCmd );
    254          static uint8 zclFindNextAttrRec( uint8 endpoint, uint16 clusterID, uint8 direction, uint16 *attrId, zclAttrRec_t *pAttr );
    255          static void *zclParseInDiscCmdsRspCmd( zclParseCmd_t *pCmd );
    256          static void *zclParseInDiscAttrsRspCmd( zclParseCmd_t *pCmd );
    257          static void *zclParseInDiscAttrsExtRspCmd( zclParseCmd_t *pCmd );
    258          static uint8 zclProcessInDiscCmd( zclIncoming_t *pInMsg );
    259          static uint8 zclProcessInDiscAttrs( zclIncoming_t *pInMsg );
    260          static void zclProcessInDiscAttrsCmd( zclIncoming_t *pInMsg, zclDiscoverAttrsCmd_t *pDiscoverCmd, uint8 attrLenBuf );
    261          static void zclProcessInDiscAttrsExtCmd( zclIncoming_t *pInMsg, zclDiscoverAttrsCmd_t *pDiscoverCmd, uint8 attrLenBuf );
    262          #endif // ZCL_DISCOVER
    263          
    264          /*********************************************************************
    265           * Parse Profile Command Function Table
    266           */
    267          

   \                                 In  segment CODE_C, align 1
    268          static CONST zclCmdItems_t zclCmdTable[] =
   \                     zclCmdTable:
   \   000000   ....         DW `??zclParseInReadCmd::?relay`
   \   000002   ....         DW `??zclProcessInReadCmd::?relay`
   \   000004   ....         DW `??zclParseInReadRspCmd::?relay`
   \   000006   ....         DW `??zcl_HandleExternal::?relay`
   \   000008   ....         DW `??zclParseInWriteCmd::?relay`
   \   00000A   ....         DW `??zclProcessInWriteCmd::?relay`
   \   00000C   ....         DW `??zclParseInWriteCmd::?relay`
   \   00000E   ....         DW `??zclProcessInWriteUndividedCmd::?relay`
   \   000010   ....         DW `??zclParseInWriteRspCmd::?relay`
   \   000012   ....         DW `??zcl_HandleExternal::?relay`
   \   000014   ....         DW `??zclParseInWriteCmd::?relay`
   \   000016   ....         DW `??zclProcessInWriteCmd::?relay`
   \   000018   ....         DW `??zclParseInConfigReportCmd::?relay`
   \   00001A   ....         DW `??zcl_HandleExternal::?relay`
   \   00001C   0000         DW 0H
   \   00001E   0000         DW 0H
   \   000020   ....         DW `??zclParseInReadReportCfgCmd::?relay`
   \   000022   ....         DW `??zcl_HandleExternal::?relay`
   \   000024   0000         DW 0H
   \   000026   0000         DW 0H
   \   000028   0000         DW 0H
   \   00002A   0000         DW 0H
   \   00002C   ....         DW `??zclParseInDefaultRspCmd::?relay`
   \   00002E   ....         DW `??zcl_HandleExternal::?relay`
   \   000030   ....         DW `??zclParseInDiscAttrsCmd::?relay`
   \   000032   ....         DW `??zclProcessInDiscAttrs::?relay`
   \   000034   ....         DW `??zclParseInDiscAttrsRspCmd::?relay`
   \   000036   ....         DW `??zcl_HandleExternal::?relay`
   \   000038   0000         DW 0H
   \   00003A   0000         DW 0H
   \   00003C   0000         DW 0H
   \   00003E   0000         DW 0H
   \   000040   0000         DW 0H
   \   000042   0000         DW 0H
   \   000044   ....         DW `??zclParseInDiscCmdsCmd::?relay`
   \   000046   ....         DW `??zclProcessInDiscCmd::?relay`
   \   000048   ....         DW `??zclParseInDiscCmdsRspCmd::?relay`
   \   00004A   ....         DW `??zcl_HandleExternal::?relay`
   \   00004C   ....         DW `??zclParseInDiscCmdsCmd::?relay`
   \   00004E   ....         DW `??zclProcessInDiscCmd::?relay`
   \   000050   ....         DW `??zclParseInDiscCmdsRspCmd::?relay`
   \   000052   ....         DW `??zcl_HandleExternal::?relay`
   \   000054   ....         DW `??zclParseInDiscAttrsCmd::?relay`
   \   000056   ....         DW `??zclProcessInDiscAttrs::?relay`
   \   000058   ....         DW `??zclParseInDiscAttrsExtRspCmd::?relay`
   \   00005A   ....         DW `??zcl_HandleExternal::?relay`
    269          {
    270          #ifdef ZCL_READ
    271            /* ZCL_CMD_READ */                { zclParseInReadCmd,             zclProcessInReadCmd             },
    272            /* ZCL_CMD_READ_RSP */            { zclParseInReadRspCmd,          zcl_HandleExternal              },
    273          #else
    274            /* ZCL_CMD_READ */                { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
    275            /* ZCL_CMD_READ_RSP */            { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
    276          #endif // ZCL_READ
    277          
    278          #ifdef ZCL_WRITE
    279            /* ZCL_CMD_WRITE */               { zclParseInWriteCmd,            zclProcessInWriteCmd            },
    280            /* ZCL_CMD_WRITE_UNDIVIDED */     { zclParseInWriteCmd,            zclProcessInWriteUndividedCmd   },
    281            /* ZCL_CMD_WRITE_RSP */           { zclParseInWriteRspCmd,         zcl_HandleExternal              },
    282            /* ZCL_CMD_WRITE_NO_RSP */        { zclParseInWriteCmd,            zclProcessInWriteCmd            },
    283          #else
    284            /* ZCL_CMD_WRITE */               { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
    285            /* ZCL_CMD_WRITE_UNDIVIDED */     { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
    286            /* ZCL_CMD_WRITE_RSP */           { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
    287            /* ZCL_CMD_WRITE_NO_RSP */        { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
    288          #endif // ZCL_WRITE
    289          
    290          #ifdef ZCL_REPORTING_DEVICE
    291              /* ZCL_CMD_CONFIG_REPORT */       { zclParseInConfigReportCmd,     zcl_HandleExternal              },
    292          #else
    293              /* ZCL_CMD_CONFIG_REPORT */       { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
    294          #endif
    295          
    296          #ifdef ZCL_REPORT_CONFIGURING_DEVICE
    297              /* ZCL_CMD_CONFIG_REPORT_RSP */   { zclParseInConfigReportRspCmd,  zcl_HandleExternal              },
    298          #else
    299              /* ZCL_CMD_CONFIG_REPORT_RSP */   { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
    300          #endif
    301          
    302          #ifdef ZCL_REPORTING_DEVICE
    303              /* ZCL_CMD_READ_REPORT_CFG */     { zclParseInReadReportCfgCmd,    zcl_HandleExternal              },
    304          #else
    305              /* ZCL_CMD_READ_REPORT_CFG */     { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
    306          #endif
    307          
    308          #ifdef ZCL_REPORT_CONFIGURING_DEVICE
    309              /* ZCL_CMD_READ_REPORT_CFG_RSP */ { zclParseInReadReportCfgRspCmd, zcl_HandleExternal              },
    310          #else
    311              /* ZCL_CMD_READ_REPORT_CFG_RSP */ { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
    312          #endif
    313          
    314          #ifdef ZCL_REPORT_DESTINATION_DEVICE
    315              /* ZCL_CMD_REPORT */              { zclParseInReportCmd,           zcl_HandleExternal              },
    316          #else
    317              /* ZCL_CMD_REPORT */              { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
    318          #endif
    319          
    320            /* ZCL_CMD_DEFAULT_RSP */         { zclParseInDefaultRspCmd,       zcl_HandleExternal              },
    321          
    322          #ifdef ZCL_DISCOVER
    323            /* ZCL_CMD_DISCOVER_ATTRS */                { zclParseInDiscAttrsCmd,         zclProcessInDiscAttrs           },
    324            /* ZCL_CMD_DISCOVER_ATTRS_RSP */            { zclParseInDiscAttrsRspCmd,      zcl_HandleExternal              },
    325            /* *not supported* READ_ATTRS_STRCT */      { NULL,                           (zclProcessInProfileCmd_t)NULL  },
    326            /* *not supported* WRITE_ATTRS_STRCT */     { NULL,                           (zclProcessInProfileCmd_t)NULL  },
    327            /* *not supported* WRITE_ATTRS_STRCT_RSP */ { NULL,                           (zclProcessInProfileCmd_t)NULL  },
    328            /* ZCL_CMD_DISCOVER_CMDS_RECEIVED */        { zclParseInDiscCmdsCmd,          zclProcessInDiscCmd             },
    329            /* ZCL_CMD_DISCOVER_CMDS_RECEIVED_RSP */    { zclParseInDiscCmdsRspCmd,       zcl_HandleExternal              },
    330            /* ZCL_CMD_DISCOVER_CMDS_GEN */             { zclParseInDiscCmdsCmd,          zclProcessInDiscCmd             },
    331            /* ZCL_CMD_DISCOVER_CMDS_GEN_RSP */         { zclParseInDiscCmdsRspCmd,       zcl_HandleExternal              },
    332            /* ZCL_CMD_DISCOVER_ATTRS_EXT */            { zclParseInDiscAttrsCmd,         zclProcessInDiscAttrs           },
    333            /* ZCL_CMD_DISCOVER_ATTRS_EXT_RSP */        { zclParseInDiscAttrsExtRspCmd,   zcl_HandleExternal              },
    334          #else
    335            /* ZCL_CMD_DISCOVER_ATTRS */                { (zclParseInProfileCmd_t)NULL,    (zclProcessInProfileCmd_t)NULL  },
    336            /* ZCL_CMD_DISCOVER_ATTRS_RSP */            { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
    337            /* *not supported* READ_ATTRS_STRCT */      { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
    338            /* *not supported* WRITE_ATTRS_STRCT */     { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
    339            /* *not supported* WRITE_ATTRS_STRCT_RSP */ { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
    340            /* ZCL_CMD_DISCOVER_CMDS_RECEIVED */        { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
    341            /* ZCL_CMD_DISCOVER_CMDS_RECEIVED_RSP */    { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
    342            /* ZCL_CMD_DISCOVER_CMDS_GEN */             { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
    343            /* ZCL_CMD_DISCOVER_CMDS_GEN_RSP */         { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
    344            /* ZCL_CMD_DISCOVER_ATTRS_EXT */            { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
    345            /* ZCL_CMD_DISCOVER_ATTRS_EXT_RSP */        { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
    346          #endif // ZCL_DISCOVER
    347          };
    348          
    349          /*********************************************************************
    350           * PUBLIC FUNCTIONS
    351           *********************************************************************/
    352          
    353          #if !defined ( ZCL_STANDALONE )
    354          /*********************************************************************
    355           * @fn          zcl_Init
    356           *
    357           * @brief       Initialization function for the zcl layer.
    358           *
    359           * @param       task_id - ZCL task id
    360           *
    361           * @return      none
    362           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    363          void zcl_Init( uint8 task_id )
   \                     zcl_Init:
    364          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    365            zcl_TaskID = task_id;
   \   000004   E9           MOV       A,R1
   \   000005   90....       MOV       DPTR,#zcl_TaskID
   \   000008   F0           MOVX      @DPTR,A
    366          }
   \   000009   02....       LJMP      ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   D083         POP       DPH
   \   000002   D082         POP       DPL
   \   000004   02....       LJMP      ?BRET
    367          #endif
    368          
    369          #if !defined ( ZCL_STANDALONE )
    370          /*********************************************************************
    371           * @fn          zcl_event_loop
    372           *
    373           * @brief       Event Loop Processor for zcl.
    374           *
    375           * @param       task_id - task id
    376           * @param       events - event bitmap
    377           *
    378           * @return      unprocessed events
    379           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    380          uint16 zcl_event_loop( uint8 task_id, uint16 events )
   \                     zcl_event_loop:
    381          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
    382            uint8 *msgPtr;
    383          
    384            (void)task_id;  // Intentionally unreferenced parameter
    385          
    386            if ( events & SYS_EVENT_MSG )
   \   000009   EB           MOV       A,R3
   \   00000A   5480         ANL       A,#0x80
   \   00000C   604D         JZ        ??zcl_event_loop_0
    387            {
    388              msgPtr = osal_msg_receive( zcl_TaskID );
   \   00000E                ; Setup parameters for call to function osal_msg_receive
   \   00000E   800E         SJMP      ??zcl_event_loop_1
    389              while ( msgPtr != NULL )
    390              {
    391                uint8 dealloc = TRUE;
    392          
    393                if ( *msgPtr == AF_INCOMING_MSG_CMD )
    394                {
    395                  zcl_ProcessMessageMSG( (afIncomingMSGPacket_t *)msgPtr );
   \                     ??zcl_event_loop_2:
   \   000010                ; Setup parameters for call to function zcl_ProcessMessageMSG
   \   000010   EE           MOV       A,R6
   \   000011   FA           MOV       R2,A
   \   000012   EF           MOV       A,R7
   \   000013   FB           MOV       R3,A
   \   000014   12....       LCALL     `??zcl_ProcessMessageMSG::?relay`; Banked call to: zcl_ProcessMessageMSG
    396                }
    397                else
    398                {
    399                  uint8 taskID;
    400                  taskID = zcl_getExternalFoundationHandler( (afIncomingMSGPacket_t *)msgPtr );
    401          
    402                  if ( taskID != TASK_NO_TASK )
    403                  {
    404                    // send it to another task to process.
    405                    osal_msg_send( taskID, msgPtr );
    406                    dealloc = FALSE;
    407                  }
    408                }
    409          
    410                // Release the memory
    411                if ( dealloc )
    412                {
    413                  osal_msg_deallocate( msgPtr );
   \                     ??zcl_event_loop_3:
   \   000017                ; Setup parameters for call to function osal_msg_deallocate
   \   000017   EE           MOV       A,R6
   \   000018   FA           MOV       R2,A
   \   000019   EF           MOV       A,R7
   \   00001A   FB           MOV       R3,A
   \   00001B   12....       LCALL     `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
    414                }
    415          
    416                // Next
    417                msgPtr = osal_msg_receive( zcl_TaskID );
   \                     ??zcl_event_loop_1:
   \   00001E                ; Setup parameters for call to function osal_msg_receive
   \   00001E   90....       MOV       DPTR,#zcl_TaskID
   \   000021   E0           MOVX      A,@DPTR
   \   000022   F9           MOV       R1,A
   \   000023   12....       LCALL     `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
   \   000026   8A..         MOV       ?V2,R2
   \   000028   8B..         MOV       ?V3,R3
   \   00002A   AE..         MOV       R6,?V2
   \   00002C   AF..         MOV       R7,?V3
   \   00002E   EE           MOV       A,R6
   \   00002F   4F           ORL       A,R7
   \   000030   6020         JZ        ??zcl_event_loop_4
   \   000032   8E82         MOV       DPL,R6
   \   000034   8F83         MOV       DPH,R7
   \   000036   E0           MOVX      A,@DPTR
   \   000037   641A         XRL       A,#0x1a
   \   000039   60D5         JZ        ??zcl_event_loop_2
   \   00003B                ; Setup parameters for call to function zcl_getExternalFoundationHandler
   \   00003B   EE           MOV       A,R6
   \   00003C   FA           MOV       R2,A
   \   00003D   EF           MOV       A,R7
   \   00003E   FB           MOV       R3,A
   \   00003F   12....       LCALL     `??zcl_getExternalFoundationHandler::?relay`; Banked call to: zcl_getExternalFoundationHandler
   \   000042   E9           MOV       A,R1
   \   000043   F9           MOV       R1,A
   \   000044   74FF         MOV       A,#-0x1
   \   000046   69           XRL       A,R1
   \   000047   60CE         JZ        ??zcl_event_loop_3
   \   000049                ; Setup parameters for call to function osal_msg_send
   \   000049   EE           MOV       A,R6
   \   00004A   FA           MOV       R2,A
   \   00004B   EF           MOV       A,R7
   \   00004C   FB           MOV       R3,A
   \   00004D   12....       LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   \   000050   80CC         SJMP      ??zcl_event_loop_1
    418              }
    419          
    420              // return unprocessed events
    421              return (events ^ SYS_EVENT_MSG);
   \                     ??zcl_event_loop_4:
   \   000052   AA..         MOV       R2,?V0
   \   000054   E5..         MOV       A,?V1
   \   000056   6480         XRL       A,#0x80
   \   000058   FB           MOV       R3,A
   \   000059   8004         SJMP      ??zcl_event_loop_5
    422            }
    423          
    424          #if !defined (DISABLE_GREENPOWER_BASIC_PROXY) && (ZG_BUILD_RTR_TYPE)
    425            if ( events & ZCL_DATABUF_SEND )
    426            {
    427              gpNotificationMsg_t *gpNotification = NULL;
    428              gpCmdPayloadMsg_t *pCmdPayloadMsgCurr = NULL;
    429              gpd_ID_t gpd_ID;
    430              uint8 *pgpdid;
    431              uint8 entry[PROXY_TBL_ENTRY_LEN];
    432              uint8 appId;
    433              uint8 nwkSeqNum;
    434              uint8 apsSecNum;
    435              uint16 nwkAddr;
    436              
    437              gpNotification = gp_GetHeadNotificationMsg( );
    438              
    439              if ( gpNotification == NULL )
    440              {
    441                return 0;
    442              }
    443              
    444              pCmdPayloadMsgCurr = ( gpCmdPayloadMsg_t* ) gpNotification->pMsg ;
    445              appId = PROXY_TBL_GET_APPLICTION_ID((uint16)*pCmdPayloadMsgCurr->pMsg);
    446              
    447              // To save the NIB nwk sequense number and use the GP alias nwk sequence number
    448              // for the GP notification
    449              nwkSeqNum = _NIB.SequenceNum;
    450              _NIB.SequenceNum = pCmdPayloadMsgCurr->secNum;
    451              
    452              // To save the NIB nwk address and use the GP alias nwk address for the GP notification
    453              nwkAddr = _NIB.nwkDevAddress;
    454              
    455              if( appId == GP_OPT_APP_ID_GPD )
    456              {
    457                pgpdid = pCmdPayloadMsgCurr->pMsg + sizeof( uint16 );
    458                
    459                osal_memcpy( &_NIB.nwkDevAddress, pgpdid, sizeof(uint16) );
    460                gpd_ID.AppID = GP_OPT_APP_ID_GPD;
    461                osal_memcpy( &gpd_ID.GPDId.SrcID, pgpdid, sizeof( uint32 ) );
    462              }
    463              else if( appId == GP_OPT_APP_ID_IEEE )
    464              {
    465                pgpdid = pCmdPayloadMsgCurr->pMsg + Z_EXTADDR_LEN;
    466                
    467                osal_revmemcpy( &_NIB.nwkDevAddress,(pCmdPayloadMsgCurr->pMsg + Z_EXTADDR_LEN), sizeof(uint16) );
    468                
    469                gpd_ID.AppID = GP_OPT_APP_ID_IEEE;
    470          
    471                pgpdid = pCmdPayloadMsgCurr->pMsg + sizeof( uint16 );
    472                osal_memcpy( gpd_ID.GPDId.GPDExtAddr, pgpdid, Z_EXTADDR_LEN );
    473              }
    474              
    475              gp_getProxyTableByGpId(&gpd_ID, entry, NULL);
    476          
    477              if ( PROXY_TBL_GET_ASSIGNED_ALIAS( entry[PROXY_TBL_ENTRY_OPT + 1] ) )
    478              {
    479                _NIB.nwkDevAddress = 0;
    480                osal_memcpy( (uint8*)&_NIB.nwkDevAddress, &entry[PROXY_TBL_ENTRY_ALIAS], sizeof(uint16));
    481              }
    482              
    483              // save aps sequence number
    484              apsSecNum = APS_Counter;
    485              APS_Counter = pCmdPayloadMsgCurr->secNum;
    486              
    487              // Set nwk radius for zcl frame
    488              if ( entry[PROXY_TBL_ENTRY_GRP_RAD] != 0xFF)
    489              {
    490                zcl_radius =  entry[PROXY_TBL_ENTRY_GRP_RAD];
    491              }
    492              
    493              zcl_SendCommand( GREEN_POWER_INTERNAL_ENDPOINT, &gpNotification->addr, ZCL_CLUSTER_ID_GREEN_POWER,
    494                                    COMMAND_GP_NOTIFICATION, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
    495                                    TRUE, 0,  bdb_getZCLFrameCounter(), pCmdPayloadMsgCurr->lenght, pCmdPayloadMsgCurr->pMsg );
    496              
    497              // restore nwk radius
    498              zcl_radius = AF_DEFAULT_RADIUS;
    499              
    500              // restore aps sequence number
    501              APS_Counter = apsSecNum;
    502               
    503              // Restore the NIB nwk sequence number
    504              _NIB.SequenceNum = nwkSeqNum;
    505              
    506              // Restore the NIB nwk address
    507              _NIB.nwkDevAddress = nwkAddr;
    508              
    509              gp_NotificationMsgClean( gp_GetPHeadNotification ( ) );
    510              
    511              if ( gp_GetHeadNotificationMsg ( ) != NULL )
    512              {
    513                osal_start_timerEx( zcl_TaskID, ZCL_DATABUF_SEND, 50 );
    514              }
    515            }
    516          #endif
    517          
    518            // Discard unknown events
    519            return 0;
   \                     ??zcl_event_loop_0:
   \   00005B   7A00         MOV       R2,#0x0
   \   00005D   7B00         MOV       R3,#0x0
   \                     ??zcl_event_loop_5:
   \   00005F   02....       LJMP      ??Subroutine198_0 & 0xFFFF
    520          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine198_0:
   \   000000   7F04         MOV       R7,#0x4
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    521          #endif
    522          
    523          #if !defined ( ZCL_STANDALONE )
    524          /*********************************************************************
    525           * @fn      zcl_registerForMsg
    526           *
    527           * @brief   The ZCL is setup to send all incoming Foundation Command/Response
    528           *          messages that aren't processed to one task (if a task is
    529           *          registered).
    530           *
    531           * @param   taskId - task Id of the Application where commands will be sent to
    532           *
    533           * @return  TRUE if task registeration successful, FALSE otherwise
    534           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    535          uint8 zcl_registerForMsg( uint8 taskId )
   \                     zcl_registerForMsg:
    536          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    537            return zcl_addExternalFoundationHandler( taskId, AF_BROADCAST_ENDPOINT );
   \   000005                ; Setup parameters for call to function zcl_addExternalFoundationHandler
   \   000005   7AFF         MOV       R2,#-0x1
   \   000007   02....       LJMP      ?Subroutine2 & 0xFFFF
    538          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   12....       LCALL     `??zcl_addExternalFoundationHandler::?relay`; Banked call to: zcl_addExternalFoundationHandler
   \   000003                REQUIRE ??Subroutine215_0
   \   000003                ; // Fall through to label ??Subroutine215_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine215_0:
   \   000000   7F01         MOV       R7,#0x1
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    539          
    540          /*********************************************************************
    541           * @fn      zcl_registerForMsgExt
    542           *
    543           * @brief   This function enables a Task to register to recieve all
    544           *          incoming Foundation Command/Response messages, for a particular
    545           *          End Point, that aren't processed by ZCL.
    546           *
    547           *          NOTE: Any Task registered for a unique end point will take
    548           *          priority over any Task registered with the AF_BROADCAST_ENDPOINT
    549           *          value.  ie. If task A registers for End Point 1, task B registers
    550           *          for AF_BROADCAST_ENDPOINT,  commands addressed to End Point 1 will be
    551           *          sent to Task A and NOT Task B.
    552           *
    553           * @param   taskId - task Id of the Application where commands will be sent to
    554           * @param   endPointId - end point Id of interest
    555           *
    556           * @return  TRUE if task registeration successful, FALSE otherwise
    557           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    558          uint8 zcl_registerForMsgExt( uint8 taskId, uint8 endPointId  )
   \                     zcl_registerForMsgExt:
    559          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    560            return ( zcl_addExternalFoundationHandler( taskId, endPointId  ) );
   \   000005                ; Setup parameters for call to function zcl_addExternalFoundationHandler
   \   000005   02....       LJMP      ?Subroutine2 & 0xFFFF
    561          }
    562          
    563          /*********************************************************************
    564           * @fn      zcl_addExternalFoundationHandler
    565           *
    566           * @brief   This function adds a record to the internal list of external
    567           *          handlers of unhandled incoming Foundation Command/Response messages.
    568           *
    569           * @param   taskId - task Id of the Application where commands will be sent to
    570           * @param   endPointId - end point Id of interest
    571           *
    572           * @return  TRUE if task registeration successful, FALSE otherwise
    573           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    574          uint8 zcl_addExternalFoundationHandler( uint8 taskId, uint8 endPointId  )
   \                     zcl_addExternalFoundationHandler:
    575          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   \   000007   EA           MOV       A,R2
   \   000008   FF           MOV       R7,A
    576            zclExternalFoundationHandlerList *pNewItem;
    577            zclExternalFoundationHandlerList *pLoop;
    578            zclExternalFoundationHandlerList *pLoopPrev;
    579          
    580            // Fill in the new endpoint registrant list
    581            pNewItem = zcl_mem_alloc( sizeof( zclExternalFoundationHandlerList ) );
   \   000009                ; Setup parameters for call to function osal_mem_alloc
   \   000009   7A04         MOV       R2,#0x4
   \   00000B   7B00         MOV       R3,#0x0
   \   00000D   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
    582            if ( pNewItem == NULL )
   \   000010   EA           MOV       A,R2
   \   000011   4B           ORL       A,R3
   \   000012   6035         JZ        ??zcl_addExternalFoundationHandler_0
    583            {
    584              return ( false );
    585            }
    586          
    587            pNewItem->zcl_ExternalEndPoint = endPointId;
   \   000014   EF           MOV       A,R7
   \   000015   8A82         MOV       DPL,R2
   \   000017   8B83         MOV       DPH,R3
   \   000019   A3           INC       DPTR
   \   00001A   A3           INC       DPTR
   \   00001B   A3           INC       DPTR
   \   00001C   F0           MOVX      @DPTR,A
    588            pNewItem->zcl_ExternalTaskID = taskId;
   \   00001D   EE           MOV       A,R6
   \   00001E   8A82         MOV       DPL,R2
   \   000020   8B83         MOV       DPH,R3
   \   000022   A3           INC       DPTR
   \   000023   A3           INC       DPTR
   \   000024   12....       LCALL     ?Subroutine42 & 0xFFFF
    589            pNewItem->next = NULL;
   \                     ??CrossCallReturnLabel_52:
   \   000027   F0           MOVX      @DPTR,A
    590          
    591            // Add to the list
    592            if ( externalEndPointHandlerList == NULL )
   \   000028   90....       MOV       DPTR,#externalEndPointHandlerList
   \   00002B   12....       LCALL     ??Subroutine218_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_427:
   \   00002E   7009         JNZ       ??zcl_addExternalFoundationHandler_1
    593            {
    594              externalEndPointHandlerList = pNewItem;
   \   000030   90....       MOV       DPTR,#externalEndPointHandlerList
   \   000033   EA           MOV       A,R2
   \   000034   F0           MOVX      @DPTR,A
   \   000035   A3           INC       DPTR
   \   000036   EB           MOV       A,R3
   \   000037   8047         SJMP      ??zcl_addExternalFoundationHandler_2
    595            }
    596            else
    597            {
    598              // make sure no one else tried to register for this endpoint
    599              pLoop = externalEndPointHandlerList;
   \                     ??zcl_addExternalFoundationHandler_1:
   \   000039   E0           MOVX      A,@DPTR
   \   00003A   F9           MOV       R1,A
    600              pLoopPrev = externalEndPointHandlerList;
    601          
    602              while ( pLoop != NULL )
    603              {
    604                if ( ( pLoop->zcl_ExternalEndPoint ) == endPointId )
   \                     ??zcl_addExternalFoundationHandler_3:
   \   00003B   8882         MOV       DPL,R0
   \   00003D   8983         MOV       DPH,R1
   \   00003F   A3           INC       DPTR
   \   000040   A3           INC       DPTR
   \   000041   A3           INC       DPTR
   \   000042   E0           MOVX      A,@DPTR
   \   000043   6F           XRL       A,R7
   \   000044   7007         JNZ       ??zcl_addExternalFoundationHandler_4
    605                {
    606                  zcl_mem_free(pNewItem);
   \   000046                ; Setup parameters for call to function osal_mem_free
   \   000046   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    607                  return ( false );
   \                     ??zcl_addExternalFoundationHandler_0:
   \   000049   7900         MOV       R1,#0x0
   \   00004B   8036         SJMP      ??zcl_addExternalFoundationHandler_5
    608                }
    609                pLoopPrev = pLoop;
   \                     ??zcl_addExternalFoundationHandler_4:
   \   00004D   E8           MOV       A,R0
   \   00004E   FC           MOV       R4,A
   \   00004F   E9           MOV       A,R1
   \   000050   FD           MOV       R5,A
    610                pLoop = pLoop->next;
   \   000051   8882         MOV       DPL,R0
   \   000053   8983         MOV       DPH,R1
   \   000055   12....       LCALL     ??Subroutine218_0 & 0xFFFF
    611              }
   \                     ??CrossCallReturnLabel_422:
   \   000058   70E1         JNZ       ??zcl_addExternalFoundationHandler_3
    612          
    613              if ( endPointId == AF_BROADCAST_ENDPOINT )
   \   00005A   74FF         MOV       A,#-0x1
   \   00005C   6F           XRL       A,R7
   \   00005D   700D         JNZ       ??zcl_addExternalFoundationHandler_6
    614              {
    615                // put new registration at the end of the list
    616                pLoopPrev->next = pNewItem;
   \   00005F   8C82         MOV       DPL,R4
   \   000061   8D83         MOV       DPH,R5
   \   000063   EA           MOV       A,R2
   \   000064   F0           MOVX      @DPTR,A
   \   000065   A3           INC       DPTR
   \   000066   EB           MOV       A,R3
   \   000067   12....       LCALL     ?Subroutine42 & 0xFFFF
    617                pNewItem->next = NULL;
    618              }
   \                     ??CrossCallReturnLabel_53:
   \   00006A   8014         SJMP      ??zcl_addExternalFoundationHandler_2
    619              else
    620              {
    621                // put new registration at the front of the list
    622                zclExternalFoundationHandlerList *temp = externalEndPointHandlerList;
   \                     ??zcl_addExternalFoundationHandler_6:
   \   00006C   90....       MOV       DPTR,#externalEndPointHandlerList
   \   00006F   12....       LCALL     ??Subroutine228_0 & 0xFFFF
    623                externalEndPointHandlerList = pNewItem;
   \                     ??CrossCallReturnLabel_484:
   \   000072   90....       MOV       DPTR,#externalEndPointHandlerList
   \   000075   12....       LCALL     ??Subroutine244_0 & 0xFFFF
    624                pNewItem->next = temp;
   \                     ??CrossCallReturnLabel_573:
   \   000078   8A82         MOV       DPL,R2
   \   00007A   8B83         MOV       DPH,R3
   \   00007C   E8           MOV       A,R0
   \   00007D   F0           MOVX      @DPTR,A
   \   00007E   A3           INC       DPTR
   \   00007F   E9           MOV       A,R1
   \                     ??zcl_addExternalFoundationHandler_2:
   \   000080   F0           MOVX      @DPTR,A
    625              }
    626            }
    627          
    628            return ( true );
   \   000081   7901         MOV       R1,#0x1
   \                     ??zcl_addExternalFoundationHandler_5:
   \   000083   02....       LJMP      ?Subroutine3 & 0xFFFF
    629          
    630          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   12....       LCALL     ?Subroutine151 & 0xFFFF
   \                     ??CrossCallReturnLabel_418:
   \   000003   E4           CLR       A
   \   000004   F0           MOVX      @DPTR,A
   \   000005   A3           INC       DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine151:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine218_0:
   \   000000   12....       LCALL     ?Subroutine172 & 0xFFFF
   \                     ??CrossCallReturnLabel_500:
   \   000003   E8           MOV       A,R0
   \   000004   49           ORL       A,R1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   7F02         MOV       R7,#0x2
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine194:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine228_0:
   \   000000   12....       LCALL     ?Subroutine172 & 0xFFFF
   \                     ??CrossCallReturnLabel_501:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine172:
   \   000000   12....       LCALL     ?Subroutine194 & 0xFFFF
   \                     ??CrossCallReturnLabel_508:
   \   000003   F9           MOV       R1,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine244_0:
   \   000000   EA           MOV       A,R2
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   EB           MOV       A,R3
   \   000004   F0           MOVX      @DPTR,A
   \   000005   22           RET
    631          
    632          /*********************************************************************
    633           * @fn      zcl_getExternalFoundationHandler
    634           *
    635           * @brief   This function retrieves the Task ID of the task registered
    636           *          to received unhandled incoming Foundation Command/Response messages
    637           *          for a particular End Point ID.
    638           *
    639           * @param   pInMsg - recevied ZCL command
    640           *
    641           * @return  TASK ID of registered task.  If no task is reigistered, it returns
    642           *          TASK_NO_TASK.
    643           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    644          static uint8 zcl_getExternalFoundationHandler( afIncomingMSGPacket_t *pInMsg )
   \                     zcl_getExternalFoundationHandler:
    645          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    646            zclExternalFoundationHandlerList *pLoop;
    647            uint8 addressedEndPointId = pInMsg->endPoint;
   \   000004   EA           MOV       A,R2
   \   000005   12....       LCALL     ?Subroutine129 & 0xFFFF
   \                     ??CrossCallReturnLabel_226:
   \   000008   3B           ADDC      A,R3
   \   000009   F583         MOV       DPH,A
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   FA           MOV       R2,A
    648          
    649            // make sure no one else tried to register for this endpoint
    650            pLoop = externalEndPointHandlerList;
   \   00000D   90....       MOV       DPTR,#externalEndPointHandlerList
   \   000010   8004         SJMP      ??zcl_getExternalFoundationHandler_0
    651          
    652            while ( pLoop != NULL )
    653            {
    654              if ( ( ( pLoop->zcl_ExternalEndPoint ) == addressedEndPointId ) ||
    655                   ( ( pLoop->zcl_ExternalEndPoint ) == AF_BROADCAST_ENDPOINT ) )
    656              {
    657                return ( pLoop->zcl_ExternalTaskID );
    658              }
    659              pLoop = pLoop->next;
   \                     ??zcl_getExternalFoundationHandler_1:
   \   000012   8882         MOV       DPL,R0
   \   000014   8983         MOV       DPH,R1
   \                     ??zcl_getExternalFoundationHandler_0:
   \   000016   12....       LCALL     ??Subroutine218_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_423:
   \   000019   601C         JZ        ??zcl_getExternalFoundationHandler_2
   \   00001B   8882         MOV       DPL,R0
   \   00001D   8983         MOV       DPH,R1
   \   00001F   A3           INC       DPTR
   \   000020   A3           INC       DPTR
   \   000021   A3           INC       DPTR
   \   000022   E0           MOVX      A,@DPTR
   \   000023   FB           MOV       R3,A
   \   000024   EA           MOV       A,R2
   \   000025   6B           XRL       A,R3
   \   000026   6005         JZ        ??zcl_getExternalFoundationHandler_3
   \   000028   74FF         MOV       A,#-0x1
   \   00002A   6B           XRL       A,R3
   \   00002B   70E5         JNZ       ??zcl_getExternalFoundationHandler_1
   \                     ??zcl_getExternalFoundationHandler_3:
   \   00002D   8882         MOV       DPL,R0
   \   00002F   8983         MOV       DPH,R1
   \   000031   A3           INC       DPTR
   \   000032   A3           INC       DPTR
   \   000033   E0           MOVX      A,@DPTR
   \   000034   F9           MOV       R1,A
   \   000035   8002         SJMP      ??zcl_getExternalFoundationHandler_4
    660            }
    661          
    662            return ( TASK_NO_TASK );
   \                     ??zcl_getExternalFoundationHandler_2:
   \   000037   79FF         MOV       R1,#-0x1
   \                     ??zcl_getExternalFoundationHandler_4:
   \   000039   02....       LJMP      ?Subroutine0 & 0xFFFF
    663          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine129:
   \   000000   12....       LCALL     ?Subroutine187 & 0xFFFF
   \                     ??CrossCallReturnLabel_603:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine187:
   \   000000   2414         ADD       A,#0x14
   \   000002   F582         MOV       DPL,A
   \   000004   E4           CLR       A
   \   000005   22           RET
    664          #endif
    665          
    666          #if !defined ( ZCL_STANDALONE )
    667          /*********************************************************************
    668           * @fn      zcl_HandleExternal
    669           *
    670           * @brief
    671           *
    672           * @param   pInMsg - incoming message to process
    673           *
    674           * @return  TRUE
    675           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    676          uint8 zcl_HandleExternal( zclIncoming_t *pInMsg )
   \                     zcl_HandleExternal:
    677          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    678            zclIncomingMsg_t *pCmd;
    679            uint8 taskID;
    680          
    681            taskID = zcl_getExternalFoundationHandler( pInMsg->msg );
   \   000009                ; Setup parameters for call to function zcl_getExternalFoundationHandler
   \   000009   8E82         MOV       DPL,R6
   \   00000B   8F83         MOV       DPH,R7
   \   00000D   12....       LCALL     ??Subroutine224_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_449:
   \   000010   12....       LCALL     `??zcl_getExternalFoundationHandler::?relay`; Banked call to: zcl_getExternalFoundationHandler
   \   000013   E9           MOV       A,R1
   \   000014   F5..         MOV       ?V0,A
    682          
    683            if ( taskID == TASK_NO_TASK )
   \   000016   74FF         MOV       A,#-0x1
   \   000018   65..         XRL       A,?V0
   \   00001A   7003         JNZ       $+5
   \   00001C   02....       LJMP      ??zcl_HandleExternal_0 & 0xFFFF
    684            {
    685              return ( TRUE );
    686            }
    687          
    688            pCmd = (zclIncomingMsg_t *)osal_msg_allocate( sizeof ( zclIncomingMsg_t ) );
   \   00001F                ; Setup parameters for call to function osal_msg_allocate
   \   00001F   7A19         MOV       R2,#0x19
   \   000021   7B00         MOV       R3,#0x0
   \   000023   12....       LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
    689            if ( pCmd != NULL )
   \   000026   EA           MOV       A,R2
   \   000027   4B           ORL       A,R3
   \   000028   7003         JNZ       $+5
   \   00002A   02....       LJMP      ??zcl_HandleExternal_0 & 0xFFFF
    690            {
    691              // fill in the message
    692              pCmd->hdr.event = ZCL_INCOMING_MSG;
   \   00002D   8A82         MOV       DPL,R2
   \   00002F   8B83         MOV       DPH,R3
   \   000031   7434         MOV       A,#0x34
   \   000033   12....       LCALL     ?Subroutine39 & 0xFFFF
    693              pCmd->zclHdr    = pInMsg->hdr;
   \                     ??CrossCallReturnLabel_47:
   \   000036   A3           INC       DPTR
   \   000037   EA           MOV       A,R2
   \   000038   2402         ADD       A,#0x2
   \   00003A   FC           MOV       R4,A
   \   00003B   E4           CLR       A
   \   00003C   3B           ADDC      A,R3
   \   00003D   FD           MOV       R5,A
   \   00003E   7406         MOV       A,#0x6
   \   000040   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    694              pCmd->clusterId = pInMsg->msg->clusterId;
   \   000043   8E82         MOV       DPL,R6
   \   000045   8F83         MOV       DPH,R7
   \   000047   12....       LCALL     ?Subroutine102 & 0xFFFF
   \                     ??CrossCallReturnLabel_173:
   \   00004A   12....       LCALL     ?Subroutine107 & 0xFFFF
   \                     ??CrossCallReturnLabel_547:
   \   00004D   8A82         MOV       DPL,R2
   \   00004F   8B83         MOV       DPH,R3
   \   000051   A3           INC       DPTR
   \   000052   A3           INC       DPTR
   \   000053   A3           INC       DPTR
   \   000054   A3           INC       DPTR
   \   000055   A3           INC       DPTR
   \   000056   A3           INC       DPTR
   \   000057   A3           INC       DPTR
   \   000058   A3           INC       DPTR
   \   000059   EC           MOV       A,R4
   \   00005A   F0           MOVX      @DPTR,A
   \   00005B   A3           INC       DPTR
   \   00005C   ED           MOV       A,R5
   \   00005D   12....       LCALL     ?Subroutine35 & 0xFFFF
    695              pCmd->srcAddr   = pInMsg->msg->srcAddr;
   \                     ??CrossCallReturnLabel_40:
   \   000060   A3           INC       DPTR
   \   000061   EA           MOV       A,R2
   \   000062   240A         ADD       A,#0xa
   \   000064   FC           MOV       R4,A
   \   000065   E4           CLR       A
   \   000066   3B           ADDC      A,R3
   \   000067   FD           MOV       R5,A
   \   000068   740C         MOV       A,#0xc
   \   00006A   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    696              pCmd->endPoint  = pInMsg->msg->endPoint;
   \   00006D   8E82         MOV       DPL,R6
   \   00006F   8F83         MOV       DPH,R7
   \   000071   12....       LCALL     ?Subroutine194 & 0xFFFF
   \                     ??CrossCallReturnLabel_502:
   \   000074   C8           XCH       A,R0
   \   000075   12....       LCALL     ?Subroutine129 & 0xFFFF
   \                     ??CrossCallReturnLabel_227:
   \   000078   38           ADDC      A,R0
   \   000079   F583         MOV       DPH,A
   \   00007B   E0           MOVX      A,@DPTR
   \   00007C   C0E0         PUSH      A
   \   00007E   EA           MOV       A,R2
   \   00007F   2416         ADD       A,#0x16
   \   000081   F582         MOV       DPL,A
   \   000083   E4           CLR       A
   \   000084   3B           ADDC      A,R3
   \   000085   F583         MOV       DPH,A
   \   000087   D0E0         POP       A
   \   000089   F0           MOVX      @DPTR,A
    697              pCmd->attrCmd   = pInMsg->attrCmd;
   \   00008A   EE           MOV       A,R6
   \   00008B   240C         ADD       A,#0xc
   \   00008D   F8           MOV       R0,A
   \   00008E   E4           CLR       A
   \   00008F   3F           ADDC      A,R7
   \   000090   F9           MOV       R1,A
   \   000091   8882         MOV       DPL,R0
   \   000093   8983         MOV       DPH,R1
   \   000095   12....       LCALL     ??Subroutine235_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_542:
   \   000098   EA           MOV       A,R2
   \   000099   2417         ADD       A,#0x17
   \   00009B   F582         MOV       DPL,A
   \   00009D   E4           CLR       A
   \   00009E   3B           ADDC      A,R3
   \   00009F   F583         MOV       DPH,A
   \   0000A1   EC           MOV       A,R4
   \   0000A2   F0           MOVX      @DPTR,A
   \   0000A3   A3           INC       DPTR
   \   0000A4   ED           MOV       A,R5
   \   0000A5   F0           MOVX      @DPTR,A
    698              
    699          #ifdef BDB_REPORTING
    700              if(pCmd->zclHdr.commandID == ZCL_CMD_CONFIG_REPORT)
    701              {
    702                bdb_ProcessInConfigReportCmd(pCmd);
    703                osal_msg_deallocate((uint8*)pCmd);
    704                return TRUE;          
    705              }
    706              if(pCmd->zclHdr.commandID == ZCL_CMD_READ_REPORT_CFG)
    707              {
    708                bdb_ProcessInReadReportCfgCmd(pCmd);
    709                osal_msg_deallocate((uint8*)pCmd);
    710                return TRUE;
    711              }
    712          #endif
    713              // Application will free the attrCmd buffer
    714              pInMsg->attrCmd = NULL;
   \   0000A6   8882         MOV       DPL,R0
   \   0000A8   8983         MOV       DPH,R1
   \   0000AA   E4           CLR       A
   \   0000AB   F0           MOVX      @DPTR,A
   \   0000AC   A3           INC       DPTR
   \   0000AD   F0           MOVX      @DPTR,A
    715          
    716              /* send message through task message */
    717              osal_msg_send( taskID, (uint8 *)pCmd );
   \   0000AE                ; Setup parameters for call to function osal_msg_send
   \   0000AE   A9..         MOV       R1,?V0
   \   0000B0   12....       LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
    718            }
    719          
    720            return ( TRUE );
   \                     ??zcl_HandleExternal_0:
   \   0000B3   7901         MOV       R1,#0x1
   \   0000B5   02....       LJMP      ??Subroutine198_0 & 0xFFFF
    721          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   12....       LCALL     ?Subroutine150 & 0xFFFF
   \                     ??CrossCallReturnLabel_270:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine150:
   \   000000   12....       LCALL     ?Subroutine190 & 0xFFFF
   \                     ??CrossCallReturnLabel_327:
   \   000003   A3           INC       DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine190:
   \   000000   12....       LCALL     ?Subroutine197 & 0xFFFF
   \                     ??CrossCallReturnLabel_372:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine202_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FB           MOV       R3,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine197:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8882         MOV       DPL,R0
   \   000003   8983         MOV       DPH,R1
   \   000005   A3           INC       DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine102:
   \   000000   12....       LCALL     ?Subroutine158 & 0xFFFF
   \                     ??CrossCallReturnLabel_409:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine158:
   \   000000   12....       LCALL     ?Subroutine194 & 0xFFFF
   \                     ??CrossCallReturnLabel_507:
   \   000003   F9           MOV       R1,A
   \   000004   8882         MOV       DPL,R0
   \   000006   8983         MOV       DPH,R1
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   12....       LCALL     ?Subroutine155 & 0xFFFF
   \                     ??CrossCallReturnLabel_275:
   \   000003   A3           INC       DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine224_0:
   \   000000   12....       LCALL     ??Subroutine202_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_610:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine155:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8E82         MOV       DPL,R6
   \   000003   8F83         MOV       DPH,R7
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine107:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002                REQUIRE ??Subroutine234_0
   \   000002                ; // Fall through to label ??Subroutine234_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine234_0:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002                REQUIRE ??Subroutine235_0
   \   000002                ; // Fall through to label ??Subroutine235_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine235_0:
   \   000000   12....       LCALL     ??Subroutine242_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_571:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine242_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FC           MOV       R4,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FD           MOV       R5,A
   \   000005   22           RET
    722          #endif
    723          
    724          
    725          /*********************************************************************
    726           * @fn          zcl_getRawAFMsg
    727           *
    728           * @brief       Call to get original unprocessed AF message
    729           *              (not parsed by ZCL).
    730           *
    731           *   NOTE:  This function can only be called during a ZCL callback function
    732           *          and the calling function must NOT change any data in the message.
    733           *
    734           * @param       none
    735           *
    736           * @return      pointer to original AF message, NULL if not processing
    737           *              AF message.
    738           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    739          afIncomingMSGPacket_t *zcl_getRawAFMsg( void )
   \                     zcl_getRawAFMsg:
    740          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    741            return ( rawAFMsg );
   \   000004   90....       MOV       DPTR,#rawAFMsg
   \   000007   12....       LCALL     ??Subroutine224_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_450:
   \   00000A   02....       LJMP      ?Subroutine0 & 0xFFFF
    742          }
    743          
    744          /*********************************************************************
    745           * @fn          zcl_getParsedTransSeqNum
    746           *
    747           * @brief       Call to the get the transaction sequence number from
    748           *              the incoming message.
    749           *
    750           *   NOTE:  This function can only be called during a ZCL callback function
    751           *          and the calling function must NOT change any data in the message.
    752           *
    753           * @param       none
    754           *
    755           * @return      transaction sequence number.
    756           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    757          uint8 zcl_getParsedTransSeqNum( void )
   \                     zcl_getParsedTransSeqNum:
    758          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    759            return ( savedZCLTransSeqNum );
   \   000004   90....       MOV       DPTR,#savedZCLTransSeqNum
   \   000007   E0           MOVX      A,@DPTR
   \   000008   F9           MOV       R1,A
   \   000009   02....       LJMP      ?Subroutine0 & 0xFFFF
    760          }
    761          
    762          /*********************************************************************
    763           * @fn          zcl_registerPlugin
    764           *
    765           * @brief       Add a Cluster Library handler
    766           *
    767           * @param       startClusterID - starting cluster ID
    768           * @param       endClusterID - ending cluster ID
    769           * @param       pfnHdlr - function pointer to incoming message handler
    770           *
    771           * @return      ZSuccess if OK
    772           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    773          ZStatus_t zcl_registerPlugin( uint16 startClusterID,
   \                     zcl_registerPlugin:
    774                    uint16 endClusterID, zclInHdlr_t pfnIncomingHdlr )
    775          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   EC           MOV       A,R4
   \   00000A   FE           MOV       R6,A
   \   00000B   ED           MOV       A,R5
   \   00000C   FF           MOV       R7,A
    776            zclLibPlugin_t *pNewItem;
    777            zclLibPlugin_t *pLoop;
    778          
    779            // Fill in the new profile list
    780            pNewItem = zcl_mem_alloc( sizeof( zclLibPlugin_t ) );
   \   00000D                ; Setup parameters for call to function osal_mem_alloc
   \   00000D   7A08         MOV       R2,#0x8
   \   00000F   7B00         MOV       R3,#0x0
   \   000011   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000014   8A..         MOV       ?V2,R2
   \   000016   8B..         MOV       ?V3,R3
   \   000018   A8..         MOV       R0,?V2
   \   00001A   A9..         MOV       R1,?V3
    781            if ( pNewItem == NULL )
   \   00001C   E8           MOV       A,R0
   \   00001D   49           ORL       A,R1
   \   00001E   7004         JNZ       ??zcl_registerPlugin_0
    782            {
    783              return (ZMemError);
   \   000020   7910         MOV       R1,#0x10
   \   000022   8038         SJMP      ??CrossCallReturnLabel_26
    784            }
    785          
    786            // Fill in the plugin record.
    787            pNewItem->next = (zclLibPlugin_t *)NULL;
   \                     ??zcl_registerPlugin_0:
   \   000024   12....       LCALL     ?Subroutine28 & 0xFFFF
    788            pNewItem->startClusterID = startClusterID;
   \                     ??CrossCallReturnLabel_24:
   \   000027   12....       LCALL     ?Subroutine148 & 0xFFFF
    789            pNewItem->endClusterID = endClusterID;
    790            pNewItem->pfnIncomingHdlr = pfnIncomingHdlr;
   \                     ??CrossCallReturnLabel_265:
   \   00002A   740C         MOV       A,#0xc
   \   00002C   12....       LCALL     ?XSTACK_DISP0_8
   \   00002F   12....       LCALL     ??Subroutine224_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_451:
   \   000032   8882         MOV       DPL,R0
   \   000034   8983         MOV       DPH,R1
   \   000036   A3           INC       DPTR
   \   000037   A3           INC       DPTR
   \   000038   A3           INC       DPTR
   \   000039   A3           INC       DPTR
   \   00003A   12....       LCALL     ??Subroutine243_0 & 0xFFFF
    791          
    792            // Find spot in list
    793            if (  plugins == NULL )
   \                     ??CrossCallReturnLabel_579:
   \   00003D   90....       MOV       DPTR,#plugins
   \   000040   12....       LCALL     ??Subroutine199_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_348:
   \   000043   90....       MOV       DPTR,#plugins
   \   000046   6011         JZ        ??zcl_registerPlugin_1
    794            {
    795              plugins = pNewItem;
    796            }
    797            else
    798            {
    799              // Look for end of list
    800              pLoop = plugins;
   \   000048   12....       LCALL     ?Subroutine174 & 0xFFFF
   \                     ??CrossCallReturnLabel_301:
   \   00004B   8003         SJMP      ??zcl_registerPlugin_2
    801              while ( pLoop->next != NULL )
    802              {
    803                pLoop = pLoop->next;
   \                     ??zcl_registerPlugin_3:
   \   00004D   EA           MOV       A,R2
   \   00004E   FC           MOV       R4,A
   \   00004F   EB           MOV       A,R3
    804              }
   \                     ??zcl_registerPlugin_2:
   \   000050   12....       LCALL     ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_342:
   \   000053   70F8         JNZ       ??zcl_registerPlugin_3
    805          
    806              // Put new item at end of list
    807              pLoop->next = pNewItem;
   \   000055   8C82         MOV       DPL,R4
   \   000057   8D83         MOV       DPH,R5
    808            }
   \                     ??zcl_registerPlugin_1:
   \   000059   12....       LCALL     ?Subroutine29 & 0xFFFF
    809          
    810            return ( ZSuccess );
   \                     ??CrossCallReturnLabel_26:
   \   00005C   02....       LJMP      ??Subroutine198_0 & 0xFFFF
    811          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   E8           MOV       A,R0
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   E9           MOV       A,R1
   \   000004   F0           MOVX      @DPTR,A
   \   000005   7900         MOV       R1,#0x0
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   12....       LCALL     ?Subroutine149 & 0xFFFF
   \                     ??CrossCallReturnLabel_267:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine149:
   \   000000   8882         MOV       DPL,R0
   \   000002   8983         MOV       DPH,R1
   \   000004   E4           CLR       A
   \   000005   F0           MOVX      @DPTR,A
   \   000006   A3           INC       DPTR
   \   000007   12....       LCALL     ?Subroutine197 & 0xFFFF
   \                     ??CrossCallReturnLabel_371:
   \   00000A   A3           INC       DPTR
   \   00000B   E5..         MOV       A,?V0
   \   00000D   F0           MOVX      @DPTR,A
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine174:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FC           MOV       R4,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine148:
   \   000000   A3           INC       DPTR
   \   000001   E5..         MOV       A,?V1
   \   000003   12....       LCALL     ?Subroutine190 & 0xFFFF
   \                     ??CrossCallReturnLabel_326:
   \   000006   EE           MOV       A,R6
   \   000007   F0           MOVX      @DPTR,A
   \   000008   A3           INC       DPTR
   \   000009   EF           MOV       A,R7
   \   00000A   F0           MOVX      @DPTR,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine51:
   \   000000   FD           MOV       R5,A
   \   000001   8C82         MOV       DPL,R4
   \   000003   8D83         MOV       DPH,R5
   \   000005                REQUIRE ??Subroutine199_0
   \   000005                ; // Fall through to label ??Subroutine199_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine199_0:
   \   000000   12....       LCALL     ??Subroutine202_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_609:
   \   000003   EA           MOV       A,R2
   \   000004   4B           ORL       A,R3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine243_0:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002                REQUIRE ??Subroutine244_0
   \   000002                ; // Fall through to label ??Subroutine244_0
    812          
    813          #ifdef ZCL_DISCOVER
    814          /*********************************************************************
    815           * @fn          zcl_registerCmdList
    816           *
    817           * @brief       Register a Command List with ZCL Foundation
    818           *
    819           * @param       endpoint - endpoint the attribute list belongs to
    820           * @param       newCmdList - array of command records
    821           *
    822           * @return      ZSuccess if OK
    823           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    824          ZStatus_t zcl_registerCmdList( uint8 endpoint, CONST uint8 cmdListSize, CONST zclCommandRec_t newCmdList[] )
   \                     zcl_registerCmdList:
    825          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V0,R1
   \   000007   8A..         MOV       ?V1,R2
   \   000009   EC           MOV       A,R4
   \   00000A   FE           MOV       R6,A
   \   00000B   ED           MOV       A,R5
   \   00000C   FF           MOV       R7,A
    826            zclCmdRecsList_t *pNewItem;
    827            zclCmdRecsList_t *pLoop;
    828          
    829            // Fill in the new profile list
    830            pNewItem = zcl_mem_alloc( sizeof( zclCmdRecsList_t ) );
   \   00000D                ; Setup parameters for call to function osal_mem_alloc
   \   00000D   7A06         MOV       R2,#0x6
   \   00000F   7B00         MOV       R3,#0x0
   \   000011   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000014   8A..         MOV       ?V2,R2
   \   000016   8B..         MOV       ?V3,R3
   \   000018   A8..         MOV       R0,?V2
   \   00001A   A9..         MOV       R1,?V3
    831            if ( pNewItem == NULL )
   \   00001C   E8           MOV       A,R0
   \   00001D   49           ORL       A,R1
   \   00001E   7004         JNZ       ??zcl_registerCmdList_0
    832            {
    833              return (ZMemError);
   \   000020   7910         MOV       R1,#0x10
   \   000022   8022         SJMP      ??CrossCallReturnLabel_27
    834            }
    835          
    836            pNewItem->pNext = (zclCmdRecsList_t *)NULL;
   \                     ??zcl_registerCmdList_0:
   \   000024   12....       LCALL     ?Subroutine15 & 0xFFFF
    837            pNewItem->endpoint = endpoint;
    838            pNewItem->numCommands = cmdListSize;
    839            pNewItem->pCmdRecs = newCmdList;
    840          
    841            // Find spot in list
    842            if ( gpCmdList == NULL )
   \                     ??CrossCallReturnLabel_2:
   \   000027   90....       MOV       DPTR,#gpCmdList
   \   00002A   12....       LCALL     ??Subroutine199_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_349:
   \   00002D   90....       MOV       DPTR,#gpCmdList
   \   000030   6011         JZ        ??zcl_registerCmdList_1
    843            {
    844              gpCmdList = pNewItem;
    845            }
    846            else
    847            {
    848              // Look for end of list
    849              pLoop = gpCmdList;
   \   000032   12....       LCALL     ?Subroutine174 & 0xFFFF
   \                     ??CrossCallReturnLabel_302:
   \   000035   8003         SJMP      ??zcl_registerCmdList_2
    850              while ( pLoop->pNext != NULL )
    851              {
    852                pLoop = pLoop->pNext;
   \                     ??zcl_registerCmdList_3:
   \   000037   EA           MOV       A,R2
   \   000038   FC           MOV       R4,A
   \   000039   EB           MOV       A,R3
    853              }
   \                     ??zcl_registerCmdList_2:
   \   00003A   12....       LCALL     ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_343:
   \   00003D   70F8         JNZ       ??zcl_registerCmdList_3
    854          
    855              // Put new item at end of list
    856              pLoop->pNext = pNewItem;
   \   00003F   8C82         MOV       DPL,R4
   \   000041   8D83         MOV       DPH,R5
    857            }
   \                     ??zcl_registerCmdList_1:
   \   000043   12....       LCALL     ?Subroutine29 & 0xFFFF
    858          
    859            return ( ZSuccess );
   \                     ??CrossCallReturnLabel_27:
   \   000046   02....       LJMP      ??Subroutine198_0 & 0xFFFF
    860          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   12....       LCALL     ?Subroutine149 & 0xFFFF
   \                     ??CrossCallReturnLabel_268:
   \   000003   8882         MOV       DPL,R0
   \   000005   8983         MOV       DPH,R1
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   12....       LCALL     ?Subroutine148 & 0xFFFF
   \                     ??CrossCallReturnLabel_266:
   \   00000C   22           RET
    861          #endif  // ZCL_DISCOVER
    862          
    863          /*********************************************************************
    864           * @fn          zcl_registerAttrList
    865           *
    866           * @brief       Register an Attribute List with ZCL Foundation
    867           *
    868           * @param       endpoint - endpoint the attribute list belongs to
    869           * @param       numAttr - number of attributes in list
    870           * @param       newAttrList - array of Attribute records.
    871           *                            NOTE: THE ATTRIBUTE IDs (FOR A CLUSTER) MUST BE IN
    872           *                            ASCENDING ORDER. OTHERWISE, THE DISCOVERY RESPONSE
    873           *                            COMMAND WILL NOT HAVE THE RIGHT ATTRIBUTE INFO
    874           *
    875           * @return      ZSuccess if OK
    876           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    877          ZStatus_t zcl_registerAttrList( uint8 endpoint, uint8 numAttr, CONST zclAttrRec_t newAttrList[] )
   \                     zcl_registerAttrList:
    878          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V0,R1
   \   000007   8A..         MOV       ?V1,R2
   \   000009   EC           MOV       A,R4
   \   00000A   FE           MOV       R6,A
   \   00000B   ED           MOV       A,R5
   \   00000C   FF           MOV       R7,A
    879            zclAttrRecsList *pNewItem;
    880            zclAttrRecsList *pLoop;
    881          
    882            // Fill in the new profile list
    883            pNewItem = zcl_mem_alloc( sizeof( zclAttrRecsList ) );
   \   00000D                ; Setup parameters for call to function osal_mem_alloc
   \   00000D   7A0A         MOV       R2,#0xa
   \   00000F   7B00         MOV       R3,#0x0
   \   000011   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000014   8A..         MOV       ?V2,R2
   \   000016   8B..         MOV       ?V3,R3
   \   000018   A8..         MOV       R0,?V2
   \   00001A   A9..         MOV       R1,?V3
    884            if ( pNewItem == NULL )
   \   00001C   E8           MOV       A,R0
   \   00001D   49           ORL       A,R1
   \   00001E   7004         JNZ       ??zcl_registerAttrList_0
    885            {
    886              return (ZMemError);
   \   000020   7910         MOV       R1,#0x10
   \   000022   803A         SJMP      ??CrossCallReturnLabel_28
    887            }
    888          
    889            pNewItem->next = (zclAttrRecsList *)NULL;
   \                     ??zcl_registerAttrList_0:
   \   000024   12....       LCALL     ?Subroutine28 & 0xFFFF
    890            pNewItem->endpoint = endpoint;
    891            pNewItem->pfnReadWriteCB = NULL;
   \                     ??CrossCallReturnLabel_25:
   \   000027   8882         MOV       DPL,R0
   \   000029   8983         MOV       DPH,R1
   \   00002B   A3           INC       DPTR
   \   00002C   A3           INC       DPTR
   \   00002D   A3           INC       DPTR
   \   00002E   E4           CLR       A
   \   00002F   F0           MOVX      @DPTR,A
   \   000030   A3           INC       DPTR
   \   000031   12....       LCALL     ?Subroutine31 & 0xFFFF
    892            pNewItem->numAttributes = numAttr;
   \                     ??CrossCallReturnLabel_34:
   \   000034   E5..         MOV       A,?V1
   \   000036   12....       LCALL     ?Subroutine31 & 0xFFFF
    893            pNewItem->attrs = newAttrList;
   \                     ??CrossCallReturnLabel_35:
   \   000039   A3           INC       DPTR
   \   00003A   EE           MOV       A,R6
   \   00003B   F0           MOVX      @DPTR,A
   \   00003C   A3           INC       DPTR
   \   00003D   EF           MOV       A,R7
   \   00003E   F0           MOVX      @DPTR,A
    894          
    895            // Find spot in list
    896            if ( attrList == NULL )
   \   00003F   90....       MOV       DPTR,#attrList
   \   000042   12....       LCALL     ??Subroutine199_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_350:
   \   000045   90....       MOV       DPTR,#attrList
   \   000048   6011         JZ        ??zcl_registerAttrList_1
    897            {
    898              attrList = pNewItem;
    899            }
    900            else
    901            {
    902              // Look for end of list
    903              pLoop = attrList;
   \   00004A   12....       LCALL     ?Subroutine174 & 0xFFFF
   \                     ??CrossCallReturnLabel_303:
   \   00004D   8003         SJMP      ??zcl_registerAttrList_2
    904              while ( pLoop->next != NULL )
    905              {
    906                pLoop = pLoop->next;
   \                     ??zcl_registerAttrList_3:
   \   00004F   EA           MOV       A,R2
   \   000050   FC           MOV       R4,A
   \   000051   EB           MOV       A,R3
    907              }
   \                     ??zcl_registerAttrList_2:
   \   000052   12....       LCALL     ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_344:
   \   000055   70F8         JNZ       ??zcl_registerAttrList_3
    908          
    909              // Put new item at end of list
    910              pLoop->next = pNewItem;
   \   000057   8C82         MOV       DPL,R4
   \   000059   8D83         MOV       DPH,R5
    911            }
   \                     ??zcl_registerAttrList_1:
   \   00005B   12....       LCALL     ?Subroutine29 & 0xFFFF
    912          
    913            return ( ZSuccess );
   \                     ??CrossCallReturnLabel_28:
   \   00005E   80..         SJMP      ??Subroutine198_0
    914          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   12....       LCALL     ?Subroutine150 & 0xFFFF
   \                     ??CrossCallReturnLabel_269:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   22           RET
    915          
    916          /*********************************************************************
    917           * @fn          zcl_registerClusterOptionList
    918           *
    919           * @brief       Register a Cluster Option List with ZCL Foundation
    920           *
    921           * @param       endpoint - endpoint the option list belongs to
    922           * @param       numOption - number of options in list
    923           * @param       optionList - array of cluster option records.
    924           *
    925           *              NOTE: This API should be called to enable 'Application
    926           *                    Link Key' security and/or 'APS ACK' for a specific
    927           *                    Cluster. The 'Application Link Key' is discarded
    928           *                    if security isn't enabled on the device.
    929           *                    The default behavior is 'Network Key' when security
    930           *                    is enabled and no 'APS ACK' for the ZCL messages.
    931           *
    932           * @return      ZSuccess if OK
    933           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    934          ZStatus_t zcl_registerClusterOptionList( uint8 endpoint, uint8 numOption, zclOptionRec_t optionList[] )
   \                     zcl_registerClusterOptionList:
    935          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V0,R1
   \   000007   8A..         MOV       ?V1,R2
   \   000009   EC           MOV       A,R4
   \   00000A   FE           MOV       R6,A
   \   00000B   ED           MOV       A,R5
   \   00000C   FF           MOV       R7,A
    936            zclClusterOptionList *pNewItem;
    937            zclClusterOptionList *pLoop;
    938          
    939            // Fill in the new profile list
    940            pNewItem = zcl_mem_alloc( sizeof( zclClusterOptionList ) );
   \   00000D                ; Setup parameters for call to function osal_mem_alloc
   \   00000D   7A06         MOV       R2,#0x6
   \   00000F   7B00         MOV       R3,#0x0
   \   000011   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000014   8A..         MOV       ?V2,R2
   \   000016   8B..         MOV       ?V3,R3
   \   000018   A8..         MOV       R0,?V2
   \   00001A   A9..         MOV       R1,?V3
    941            if ( pNewItem == NULL )
   \   00001C   E8           MOV       A,R0
   \   00001D   49           ORL       A,R1
   \   00001E   7004         JNZ       ??zcl_registerClusterOptionList_0
    942            {
    943              return (ZMemError);
   \   000020   7910         MOV       R1,#0x10
   \   000022   8022         SJMP      ??CrossCallReturnLabel_29
    944            }
    945          
    946            pNewItem->next = (zclClusterOptionList *)NULL;
   \                     ??zcl_registerClusterOptionList_0:
   \   000024   12....       LCALL     ?Subroutine15 & 0xFFFF
    947            pNewItem->endpoint = endpoint;
    948            pNewItem->numOptions = numOption;
    949            pNewItem->options = optionList;
    950          
    951            // Find spot in list
    952            if ( clusterOptionList == NULL )
   \                     ??CrossCallReturnLabel_3:
   \   000027   90....       MOV       DPTR,#clusterOptionList
   \   00002A   12....       LCALL     ??Subroutine199_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_351:
   \   00002D   90....       MOV       DPTR,#clusterOptionList
   \   000030   6011         JZ        ??zcl_registerClusterOptionList_1
    953            {
    954              clusterOptionList = pNewItem;
    955            }
    956            else
    957            {
    958              // Look for end of list
    959              pLoop = clusterOptionList;
   \   000032   12....       LCALL     ?Subroutine174 & 0xFFFF
   \                     ??CrossCallReturnLabel_304:
   \   000035   8003         SJMP      ??zcl_registerClusterOptionList_2
    960              while ( pLoop->next != NULL )
    961              {
    962                pLoop = pLoop->next;
   \                     ??zcl_registerClusterOptionList_3:
   \   000037   EA           MOV       A,R2
   \   000038   FC           MOV       R4,A
   \   000039   EB           MOV       A,R3
    963              }
   \                     ??zcl_registerClusterOptionList_2:
   \   00003A   12....       LCALL     ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_345:
   \   00003D   70F8         JNZ       ??zcl_registerClusterOptionList_3
    964          
    965              // Put new item at end of list
    966              pLoop->next = pNewItem;
   \   00003F   8C82         MOV       DPL,R4
   \   000041   8D83         MOV       DPH,R5
    967            }
   \                     ??zcl_registerClusterOptionList_1:
   \   000043   12....       LCALL     ?Subroutine29 & 0xFFFF
    968          
    969            return ( ZSuccess );
   \                     ??CrossCallReturnLabel_29:
   \   000046   80..         SJMP      ??Subroutine198_0
    970          }
    971          
    972          /*********************************************************************
    973           * @fn          zcl_registerValidateAttrData
    974           *
    975           * @brief       Add a validation function for attribute data
    976           *
    977           * @param       pfnValidateAttrData - function pointer to validate routine
    978           *
    979           * @return      ZSuccess if OK
    980           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    981          ZStatus_t zcl_registerValidateAttrData( zclValidateAttrData_t pfnValidateAttrData )
   \                     zcl_registerValidateAttrData:
    982          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    983            zcl_ValidateAttrDataCB = pfnValidateAttrData;
   \   000004   90....       MOV       DPTR,#zcl_ValidateAttrDataCB
   \   000007   12....       LCALL     ??Subroutine244_0 & 0xFFFF
    984          
    985            return ( ZSuccess );
   \                     ??CrossCallReturnLabel_574:
   \   00000A   7900         MOV       R1,#0x0
   \   00000C                REQUIRE ?Subroutine0
   \   00000C                ; // Fall through to label ?Subroutine0
    986          }
    987          
    988          /*********************************************************************
    989           * @fn          zcl_registerReadWriteCB
    990           *
    991           * @brief       Register the application's callback function to read/write
    992           *              attribute data, and authorize read/write operation.
    993           *
    994           *              Note: The pfnReadWriteCB callback function is only required
    995           *                    when the attribute data format is unknown to ZCL. The
    996           *                    callback function gets called when the pointer 'dataPtr'
    997           *                    to the attribute value is NULL in the attribute database
    998           *                    registered with the ZCL.
    999           *
   1000           *              Note: The pfnAuthorizeCB callback function is only required
   1001           *                    when the Read/Write operation on an attribute requires
   1002           *                    authorization (i.e., attributes with ACCESS_CONTROL_AUTH_READ
   1003           *                    or ACCESS_CONTROL_AUTH_WRITE access permissions).
   1004           *
   1005           * @param       endpoint - application's endpoint
   1006           * @param       pfnReadWriteCB - function pointer to read/write routine
   1007           * @param       pfnAuthorizeCB - function pointer to authorize read/write operation
   1008           *
   1009           * @return      ZSuccess if successful. ZFailure, otherwise.
   1010           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1011          ZStatus_t zcl_registerReadWriteCB( uint8 endpoint, zclReadWriteCB_t pfnReadWriteCB,
   \                     zcl_registerReadWriteCB:
   1012                                             zclAuthorizeCB_t pfnAuthorizeCB )
   1013          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   8C..         MOV       ?V0,R4
   \   00000B   8D..         MOV       ?V1,R5
   1014            zclAttrRecsList *pRec = zclFindAttrRecsList( endpoint );
   \   00000D                ; Setup parameters for call to function zclFindAttrRecsList
   \   00000D   12....       LCALL     `??zclFindAttrRecsList::?relay`; Banked call to: zclFindAttrRecsList
   \   000010   8A..         MOV       ?V4,R2
   \   000012   8B..         MOV       ?V5,R3
   \   000014   A8..         MOV       R0,?V4
   \   000016   A9..         MOV       R1,?V5
   1015          
   1016            if ( pRec != NULL )
   \   000018   E8           MOV       A,R0
   \   000019   49           ORL       A,R1
   \   00001A   6019         JZ        ??zcl_registerReadWriteCB_0
   1017            {
   1018              pRec->pfnReadWriteCB = pfnReadWriteCB;
   \   00001C   8882         MOV       DPL,R0
   \   00001E   8983         MOV       DPH,R1
   \   000020   A3           INC       DPTR
   \   000021   A3           INC       DPTR
   \   000022   A3           INC       DPTR
   \   000023   EE           MOV       A,R6
   \   000024   F0           MOVX      @DPTR,A
   \   000025   A3           INC       DPTR
   \   000026   EF           MOV       A,R7
   \   000027   12....       LCALL     ?Subroutine35 & 0xFFFF
   1019              pRec->pfnAuthorizeCB = pfnAuthorizeCB;
   \                     ??CrossCallReturnLabel_41:
   \   00002A   E5..         MOV       A,?V0
   \   00002C   F0           MOVX      @DPTR,A
   \   00002D   A3           INC       DPTR
   \   00002E   E5..         MOV       A,?V1
   \   000030   F0           MOVX      @DPTR,A
   1020          
   1021              return ( ZSuccess );
   \   000031   7900         MOV       R1,#0x0
   \   000033   8002         SJMP      ??zcl_registerReadWriteCB_1
   1022            }
   1023          
   1024            return ( ZFailure );
   \                     ??zcl_registerReadWriteCB_0:
   \   000035   7901         MOV       R1,#0x1
   \                     ??zcl_registerReadWriteCB_1:
   \   000037   02....       LJMP      ?Subroutine4 & 0xFFFF
   1025          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   7F06         MOV       R7,#0x6
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
   1026          
   1027          /*********************************************************************
   1028           * @fn      zcl_DeviceOperational
   1029           *
   1030           * @brief   Used to see whether or not the device can send or respond
   1031           *          to application level commands.
   1032           *
   1033           * @param   srcEP - source endpoint
   1034           * @param   clusterID - cluster ID
   1035           * @param   frameType - command type
   1036           * @param   cmd - command ID
   1037           *
   1038           * @return  TRUE if device is operational, FALSE otherwise
   1039           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine198_0
   \   000003                ; // Fall through to label ??Subroutine198_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1040          static uint8 zcl_DeviceOperational( uint8 srcEP, uint16 clusterID,
   \                     zcl_DeviceOperational:
   1041                                              uint8 frameType, uint8 cmd, uint16 profileID )
   1042          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV       A,#-0x9
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
   \   00000C   EC           MOV       A,R4
   \   00000D   FF           MOV       R7,A
   1043            zclAttrRec_t attrRec;
   1044            uint8 deviceEnabled = DEVICE_ENABLED; // default value
   \   00000E   85..82       MOV       DPL,?XSP + 0
   \   000011   85..83       MOV       DPH,?XSP + 1
   \   000014   7401         MOV       A,#0x1
   \   000016   F0           MOVX      @DPTR,A
   1045          
   1046            (void)profileID;  // Intentionally unreferenced parameter
   1047          
   1048            // If the device is Disabled (DeviceEnabled attribute is set to Disabled), it
   1049            // cannot send or respond to application level commands, other than commands
   1050            // to read or write attributes. Note that the Identify cluster cannot be
   1051            // disabled, and remains functional regardless of this setting.
   1052            if ( zcl_ProfileCmd( frameType ) && cmd <= ZCL_CMD_WRITE_NO_RSP )
   \   000017   EF           MOV       A,R7
   \   000018   7006         JNZ       ??zcl_DeviceOperational_0
   \   00001A   ED           MOV       A,R5
   \   00001B   C3           CLR       C
   \   00001C   9406         SUBB      A,#0x6
   \   00001E   4050         JC        ??zcl_DeviceOperational_1
   1053            {
   1054              return ( TRUE );
   1055            }
   1056          
   1057            if ( clusterID == ZCL_CLUSTER_ID_GEN_IDENTIFY )
   \                     ??zcl_DeviceOperational_0:
   \   000020   7403         MOV       A,#0x3
   \   000022   6A           XRL       A,R2
   \   000023   4B           ORL       A,R3
   \   000024   604A         JZ        ??zcl_DeviceOperational_1
   1058            {
   1059              return ( TRUE );
   1060            }
   1061          
   1062            // Is device enabled?
   1063            if ( zclFindAttrRec( srcEP, ZCL_CLUSTER_ID_GEN_BASIC,
   1064                                 ATTRID_BASIC_DEVICE_ENABLED, &attrRec ) )
   \   000026                ; Setup parameters for call to function zclFindAttrRec
   \   000026   7401         MOV       A,#0x1
   \   000028   12....       LCALL     ?XSTACK_DISP100_8
   \   00002B   88..         MOV       ?V2,R0
   \   00002D   89..         MOV       ?V3,R1
   \   00002F   78..         MOV       R0,#?V2
   \   000031   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000034   7C12         MOV       R4,#0x12
   \   000036   7D00         MOV       R5,#0x0
   \   000038   7A00         MOV       R2,#0x0
   \   00003A   7B00         MOV       R3,#0x0
   \   00003C   EE           MOV       A,R6
   \   00003D   F9           MOV       R1,A
   \   00003E   12....       LCALL     `??zclFindAttrRec::?relay`; Banked call to: zclFindAttrRec
   \   000041   7402         MOV       A,#0x2
   \   000043   12....       LCALL     ?DEALLOC_XSTACK8
   \   000046   E9           MOV       A,R1
   \   000047   601C         JZ        ??zcl_DeviceOperational_2
   1065            {
   1066          #ifdef ZCL_READ
   1067              zclReadAttrData( &deviceEnabled, &attrRec, NULL );
   \   000049                ; Setup parameters for call to function zclReadAttrData
   \   000049   E4           CLR       A
   \   00004A   F5..         MOV       ?V2,A
   \   00004C   F5..         MOV       ?V3,A
   \   00004E   78..         MOV       R0,#?V2
   \   000050   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000053   7403         MOV       A,#0x3
   \   000055   12....       LCALL     ?XSTACK_DISP102_8
   \   000058   7402         MOV       A,#0x2
   \   00005A   12....       LCALL     ?XSTACK_DISP101_8
   \   00005D   12....       LCALL     `??zclReadAttrData::?relay`; Banked call to: zclReadAttrData
   \   000060   7402         MOV       A,#0x2
   \   000062   12....       LCALL     ?DEALLOC_XSTACK8
   1068          #endif
   1069            }
   1070          
   1071            return ( deviceEnabled == DEVICE_ENABLED ? TRUE : FALSE );
   \                     ??zcl_DeviceOperational_2:
   \   000065   85..82       MOV       DPL,?XSP + 0
   \   000068   85..83       MOV       DPH,?XSP + 1
   \   00006B   E0           MOVX      A,@DPTR
   \   00006C   6401         XRL       A,#0x1
   \   00006E   7004         JNZ       ??zcl_DeviceOperational_3
   \                     ??zcl_DeviceOperational_1:
   \   000070   7901         MOV       R1,#0x1
   \   000072   8002         SJMP      ??zcl_DeviceOperational_4
   \                     ??zcl_DeviceOperational_3:
   \   000074   7900         MOV       R1,#0x0
   \                     ??zcl_DeviceOperational_4:
   \   000076   7409         MOV       A,#0x9
   \   000078   02....       LJMP      ?Subroutine1 & 0xFFFF
   1072          }
   1073          
   1074          /*********************************************************************
   1075           * @fn      zcl_SendCommand
   1076           *
   1077           * @brief   Used to send Profile and Cluster Specific Command messages.
   1078           *
   1079           *          NOTE: The calling application is responsible for incrementing
   1080           *                the Sequence Number.
   1081           *
   1082           * @param   srcEp - source endpoint
   1083           * @param   destAddr - destination address
   1084           * @param   clusterID - cluster ID
   1085           * @param   cmd - command ID
   1086           * @param   specific - whether the command is Cluster Specific
   1087           * @param   direction - client/server direction of the command
   1088           * @param   disableDefaultRsp - disable Default Response command
   1089           * @param   manuCode - manufacturer code for proprietary extensions to a profile
   1090           * @param   seqNumber - identification number for the transaction
   1091           * @param   cmdFormatLen - length of the command to be sent
   1092           * @param   cmdFormat - command to be sent
   1093           *
   1094           * @return  ZSuccess if OK
   1095           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1096          ZStatus_t zcl_SendCommand( uint8 srcEP, afAddrType_t *destAddr,
   \                     zcl_SendCommand:
   1097                                     uint16 clusterID, uint8 cmd, uint8 specific, uint8 direction,
   1098                                     uint8 disableDefaultRsp, uint16 manuCode, uint8 seqNum,
   1099                                     uint16 cmdFormatLen, uint8 *cmdFormat )
   1100          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV       A,#-0x18
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 6
   \   000005   74FA         MOV       A,#-0x6
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V10,R1
   \   00000C   8A..         MOV       ?V14,R2
   \   00000E   8B..         MOV       ?V15,R3
   \   000010   8C..         MOV       ?V0,R4
   \   000012   8D..         MOV       ?V1,R5
   1101            endPointDesc_t *epDesc;
   1102            zclFrameHdr_t hdr;
   1103            uint8 *msgBuf;
   1104            uint16 msgLen;
   1105            uint8 *pBuf;
   1106            uint8 options;
   1107            ZStatus_t status;
   1108          
   1109            epDesc = afFindEndPointDesc( srcEP );
   \   000014                ; Setup parameters for call to function afFindEndPointDesc
   \   000014   12....       LCALL     `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   000017   8A..         MOV       ?V12,R2
   \   000019   8B..         MOV       ?V13,R3
   1110            if ( epDesc == NULL )
   \   00001B   EA           MOV       A,R2
   \   00001C   45..         ORL       A,?V13
   \   00001E   7005         JNZ       ??zcl_SendCommand_0
   1111            {
   1112              return ( ZInvalidParameter ); // EMBEDDED RETURN
   \   000020   7902         MOV       R1,#0x2
   \   000022   02....       LJMP      ??zcl_SendCommand_1 & 0xFFFF
   1113            }
   1114          
   1115          #if defined ( INTER_PAN )
   1116            if ( StubAPS_InterPan( destAddr->panId, destAddr->endPoint ) )
   1117            {
   1118              options = AF_TX_OPTIONS_NONE;
   1119            }
   1120            else
   1121          #endif
   1122            {
   1123              options = zclGetClusterOption( srcEP, clusterID );
   \                     ??zcl_SendCommand_0:
   \   000025                ; Setup parameters for call to function zclGetClusterOption
   \   000025   AA..         MOV       R2,?V0
   \   000027   AB..         MOV       R3,?V1
   \   000029   A9..         MOV       R1,?V10
   \   00002B   12....       LCALL     `??zclGetClusterOption::?relay`; Banked call to: zclGetClusterOption
   \   00002E   E9           MOV       A,R1
   \   00002F   F5..         MOV       ?V7,A
   1124          
   1125              // The cluster might not have been defined to use security but if this message
   1126              // is in response to another message that was using APS security this message
   1127              // will be sent with APS security
   1128              if ( !( options & AF_EN_SECURITY ) )
   \   000031   A2E6         MOV       C,0xE0 /* A   */.6
   \   000033   401C         JC        ??zcl_SendCommand_2
   1129              {
   1130                afIncomingMSGPacket_t *origPkt = zcl_getRawAFMsg();
   \   000035   90....       MOV       DPTR,#rawAFMsg
   \   000038   12....       LCALL     ??Subroutine218_0 & 0xFFFF
   1131          
   1132                if ( ( origPkt != NULL ) && ( origPkt->SecurityUse == TRUE ) )
   \                     ??CrossCallReturnLabel_424:
   \   00003B   6014         JZ        ??zcl_SendCommand_2
   \   00003D   E8           MOV       A,R0
   \   00003E   2419         ADD       A,#0x19
   \   000040   F582         MOV       DPL,A
   \   000042   E4           CLR       A
   \   000043   39           ADDC      A,R1
   \   000044   F583         MOV       DPH,A
   \   000046   E0           MOVX      A,@DPTR
   \   000047   6401         XRL       A,#0x1
   \   000049   7006         JNZ       ??zcl_SendCommand_2
   1133                {
   1134                  options |= AF_EN_SECURITY;
   \   00004B   E5..         MOV       A,?V7
   \   00004D   D2E6         SETB      0xE0 /* A   */.6
   \   00004F   F5..         MOV       ?V7,A
   1135                }
   1136              }
   1137            }
   1138          
   1139            zcl_memset( &hdr, 0, sizeof( zclFrameHdr_t ) );
   \                     ??zcl_SendCommand_2:
   \   000051                ; Setup parameters for call to function osal_memset
   \   000051   7C06         MOV       R4,#0x6
   \   000053   7D00         MOV       R5,#0x0
   \   000055   7900         MOV       R1,#0x0
   \   000057   AA..         MOV       R2,?XSP + 0
   \   000059   AB..         MOV       R3,?XSP + 1
   \   00005B   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   1140          
   1141            // Not Profile wide command (like READ, WRITE)
   1142            if ( specific )
   \   00005E   741F         MOV       A,#0x1f
   \   000060   12....       LCALL     ?XSTACK_DISP0_8
   \   000063   12....       LCALL     ?Subroutine120 & 0xFFFF
   \                     ??CrossCallReturnLabel_207:
   \   000066   6009         JZ        ??zcl_SendCommand_3
   1143            {
   1144              hdr.fc.type = ZCL_FRAME_TYPE_SPECIFIC_CMD;
   \   000068   E0           MOVX      A,@DPTR
   \   000069   54FC         ANL       A,#0xfc
   \   00006B   F0           MOVX      @DPTR,A
   \   00006C   E0           MOVX      A,@DPTR
   \   00006D   4401         ORL       A,#0x1
   \   00006F   8003         SJMP      ??zcl_SendCommand_4
   1145            }
   1146            else
   1147            {
   1148              hdr.fc.type = ZCL_FRAME_TYPE_PROFILE_CMD;
   \                     ??zcl_SendCommand_3:
   \   000071   E0           MOVX      A,@DPTR
   \   000072   54FC         ANL       A,#0xfc
   1149            }
   \                     ??zcl_SendCommand_4:
   \   000074   12....       LCALL     ?Subroutine191 & 0xFFFF
   1150          
   1151            if ( ( epDesc->simpleDesc == NULL ) ||
   1152                 ( zcl_DeviceOperational( srcEP, clusterID, hdr.fc.type,
   1153                                          cmd, epDesc->simpleDesc->AppProfId ) == FALSE ) )
   \                     ??CrossCallReturnLabel_328:
   \   000077   A3           INC       DPTR
   \   000078   12....       LCALL     ??Subroutine217_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_435:
   \   00007B   602B         JZ        ??zcl_SendCommand_5
   \   00007D   741E         MOV       A,#0x1e
   \   00007F   12....       LCALL     ?XSTACK_DISP0_8
   \   000082   E0           MOVX      A,@DPTR
   \   000083   FE           MOV       R6,A
   \   000084                ; Setup parameters for call to function zcl_DeviceOperational
   \   000084   8882         MOV       DPL,R0
   \   000086   8983         MOV       DPH,R1
   \   000088   A3           INC       DPTR
   \   000089   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   00008C   EE           MOV       A,R6
   \   00008D   FD           MOV       R5,A
   \   00008E   7402         MOV       A,#0x2
   \   000090   12....       LCALL     ?XSTACK_DISP0_8
   \   000093   E0           MOVX      A,@DPTR
   \   000094   5403         ANL       A,#0x3
   \   000096   FC           MOV       R4,A
   \   000097   AA..         MOV       R2,?V0
   \   000099   AB..         MOV       R3,?V1
   \   00009B   A9..         MOV       R1,?V10
   \   00009D   12....       LCALL     `??zcl_DeviceOperational::?relay`; Banked call to: zcl_DeviceOperational
   \   0000A0   7402         MOV       A,#0x2
   \   0000A2   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000A5   E9           MOV       A,R1
   \   0000A6   7005         JNZ       ??zcl_SendCommand_6
   1154            {
   1155              return ( ZFailure ); // EMBEDDED RETURN
   \                     ??zcl_SendCommand_5:
   \   0000A8   7901         MOV       R1,#0x1
   \   0000AA   02....       LJMP      ??zcl_SendCommand_1 & 0xFFFF
   1156            }
   \                     ??zcl_SendCommand_6:
   \   0000AD   7422         MOV       A,#0x22
   \   0000AF   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B2   12....       LCALL     ??Subroutine218_0 & 0xFFFF
   1157          
   1158            // Fill in the Maufacturer Code
   1159            if ( manuCode != 0 )
   \                     ??CrossCallReturnLabel_425:
   \   0000B5   6012         JZ        ??CrossCallReturnLabel_516
   1160            {
   1161              hdr.fc.manuSpecific = 1;
   \   0000B7   85..82       MOV       DPL,?XSP + 0
   \   0000BA   85..83       MOV       DPH,?XSP + 1
   \   0000BD   E0           MOVX      A,@DPTR
   \   0000BE   4404         ORL       A,#0x4
   \   0000C0   F0           MOVX      @DPTR,A
   1162              hdr.manuCode = manuCode;
   \   0000C1   7402         MOV       A,#0x2
   \   0000C3   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C6   12....       LCALL     ??Subroutine230_0 & 0xFFFF
   1163            }
   1164          
   1165            // Set the Command Direction
   1166            if ( direction )
   \                     ??CrossCallReturnLabel_516:
   \   0000C9   7420         MOV       A,#0x20
   \   0000CB   12....       LCALL     ?XSTACK_DISP0_8
   \   0000CE   12....       LCALL     ?Subroutine120 & 0xFFFF
   \                     ??CrossCallReturnLabel_208:
   \   0000D1   6005         JZ        ??zcl_SendCommand_7
   1167            {
   1168              hdr.fc.direction = ZCL_FRAME_SERVER_CLIENT_DIR;
   \   0000D3   E0           MOVX      A,@DPTR
   \   0000D4   4408         ORL       A,#0x8
   \   0000D6   8003         SJMP      ??zcl_SendCommand_8
   1169            }
   1170            else
   1171            {
   1172              hdr.fc.direction = ZCL_FRAME_CLIENT_SERVER_DIR;
   \                     ??zcl_SendCommand_7:
   \   0000D8   E0           MOVX      A,@DPTR
   \   0000D9   54F7         ANL       A,#0xf7
   \                     ??zcl_SendCommand_8:
   \   0000DB   F0           MOVX      @DPTR,A
   1173            }
   1174          
   1175            // Set the Disable Default Response field
   1176            if ( disableDefaultRsp )
   \   0000DC   7421         MOV       A,#0x21
   \   0000DE   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E1   12....       LCALL     ?Subroutine120 & 0xFFFF
   \                     ??CrossCallReturnLabel_209:
   \   0000E4   6005         JZ        ??zcl_SendCommand_9
   1177            {
   1178              hdr.fc.disableDefaultRsp = 1;
   \   0000E6   E0           MOVX      A,@DPTR
   \   0000E7   4410         ORL       A,#0x10
   \   0000E9   8003         SJMP      ??zcl_SendCommand_10
   1179            }
   1180            else
   1181            {
   1182              hdr.fc.disableDefaultRsp = 0;
   \                     ??zcl_SendCommand_9:
   \   0000EB   E0           MOVX      A,@DPTR
   \   0000EC   54EF         ANL       A,#0xef
   \                     ??zcl_SendCommand_10:
   \   0000EE   F0           MOVX      @DPTR,A
   1183            }
   1184          
   1185            // Fill in the Transaction Sequence Number
   1186            hdr.transSeqNum = seqNum;
   \   0000EF   7424         MOV       A,#0x24
   \   0000F1   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F4   E0           MOVX      A,@DPTR
   \   0000F5   C0E0         PUSH      A
   \   0000F7   7404         MOV       A,#0x4
   \   0000F9   12....       LCALL     ?XSTACK_DISP0_8
   \   0000FC   D0E0         POP       A
   \   0000FE   F0           MOVX      @DPTR,A
   1187          
   1188            // Fill in the command
   1189            hdr.commandID = cmd;
   \   0000FF   7405         MOV       A,#0x5
   \   000101   12....       LCALL     ?XSTACK_DISP0_8
   \   000104   EE           MOV       A,R6
   \   000105   F0           MOVX      @DPTR,A
   1190          
   1191            // calculate the needed buffer size
   1192            msgLen = zclCalcHdrSize( &hdr );
   \   000106   7803         MOV       R0,#0x3
   \   000108   85..82       MOV       DPL,?XSP + 0
   \   00010B   85..83       MOV       DPH,?XSP + 1
   \   00010E   E0           MOVX      A,@DPTR
   \   00010F   5404         ANL       A,#0x4
   \   000111   6002         JZ        ??zcl_SendCommand_11
   \   000113   7805         MOV       R0,#0x5
   \                     ??zcl_SendCommand_11:
   \   000115   7425         MOV       A,#0x25
   \   000117   12....       LCALL     ?XSTACK_DISP0_8
   \   00011A   12....       LCALL     ??Subroutine233_0 & 0xFFFF
   1193            msgLen += cmdFormatLen;
   \                     ??CrossCallReturnLabel_535:
   \   00011D   E8           MOV       A,R0
   \   00011E   25..         ADD       A,?V8
   \   000120   FE           MOV       R6,A
   \   000121   E4           CLR       A
   \   000122   35..         ADDC      A,?V9
   \   000124   FF           MOV       R7,A
   1194          
   1195            // Allocate the buffer needed
   1196            msgBuf = zcl_mem_alloc( msgLen );
   \   000125                ; Setup parameters for call to function osal_mem_alloc
   \   000125   EE           MOV       A,R6
   \   000126   FA           MOV       R2,A
   \   000127   EF           MOV       A,R7
   \   000128   FB           MOV       R3,A
   \   000129   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00012C   8A..         MOV       ?V2,R2
   \   00012E   8B..         MOV       ?V3,R3
   1197            if ( msgBuf != NULL )
   \   000130   EA           MOV       A,R2
   \   000131   45..         ORL       A,?V3
   \   000133   6068         JZ        ??zcl_SendCommand_12
   1198            {
   1199              // Fill in the ZCL Header
   1200              pBuf = zclBuildHdr( &hdr, msgBuf );
   \   000135                ; Setup parameters for call to function zclBuildHdr
   \   000135   AC..         MOV       R4,?V2
   \   000137   AD..         MOV       R5,?V3
   \   000139   AA..         MOV       R2,?XSP + 0
   \   00013B   AB..         MOV       R3,?XSP + 1
   \   00013D   12....       LCALL     `??zclBuildHdr::?relay`; Banked call to: zclBuildHdr
   1201          
   1202              // Fill in the command frame
   1203              zcl_memcpy( pBuf, cmdFormat, cmdFormatLen );
   \   000140                ; Setup parameters for call to function osal_memcpy
   \   000140   7427         MOV       A,#0x27
   \   000142   12....       LCALL     ?XSTACK_DISP0_8
   \   000145   12....       LCALL     ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_105:
   \   000148   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00014B   AC..         MOV       R4,?V8
   \   00014D   AD..         MOV       R5,?V9
   \   00014F   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000152   7403         MOV       A,#0x3
   \   000154   12....       LCALL     ?DEALLOC_XSTACK8
   1204          
   1205              status = AF_DataRequest( destAddr, epDesc, clusterID, msgLen, msgBuf,
   1206                                       &APS_Counter, options, zcl_radius );
   \   000157                ; Setup parameters for call to function AF_DataRequest
   \   000157   90....       MOV       DPTR,#zcl_radius
   \   00015A   E0           MOVX      A,@DPTR
   \   00015B   F5..         MOV       ?V4,A
   \   00015D   78..         MOV       R0,#?V4
   \   00015F   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000162   75....       MOV       ?V4,#APS_Counter & 0xff
   \   000165   75....       MOV       ?V5,#(APS_Counter >> 8) & 0xff
   \   000168   78..         MOV       R0,#?V4
   \   00016A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00016D   78..         MOV       R0,#?V2
   \   00016F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000172   8E..         MOV       ?V4,R6
   \   000174   8F..         MOV       ?V5,R7
   \   000176   78..         MOV       R0,#?V4
   \   000178   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00017B   78..         MOV       R0,#?V0
   \   00017D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000180   A9..         MOV       R1,?V7
   \   000182   AC..         MOV       R4,?V12
   \   000184   AD..         MOV       R5,?V13
   \   000186   AA..         MOV       R2,?V14
   \   000188   AB..         MOV       R3,?V15
   \   00018A   12....       LCALL     `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
   \   00018D   7409         MOV       A,#0x9
   \   00018F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000192   E9           MOV       A,R1
   \   000193   FE           MOV       R6,A
   1207              zcl_mem_free ( msgBuf );
   \   000194                ; Setup parameters for call to function osal_mem_free
   \   000194   AA..         MOV       R2,?V2
   \   000196   AB..         MOV       R3,?V3
   \   000198   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   00019B   8002         SJMP      ??zcl_SendCommand_13
   1208            }
   1209            else
   1210            {
   1211              status = ZMemError;
   \                     ??zcl_SendCommand_12:
   \   00019D   7E10         MOV       R6,#0x10
   1212            }
   1213          
   1214            return ( status );
   \                     ??zcl_SendCommand_13:
   \   00019F   EE           MOV       A,R6
   \   0001A0   F9           MOV       R1,A
   \                     ??zcl_SendCommand_1:
   \   0001A1   7406         MOV       A,#0x6
   \   0001A3   02....       LJMP      ?Subroutine5 & 0xFFFF
   1215          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine120:
   \   000000   12....       LCALL     ?Subroutine192 & 0xFFFF
   \                     ??CrossCallReturnLabel_331:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine192:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   85..82       MOV       DPL,?XSP + 0
   \   000004   85..83       MOV       DPH,?XSP + 1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine191:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   85..82       MOV       DPL,?V12
   \   000004   85..83       MOV       DPH,?V13
   \   000007   A3           INC       DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine167:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V4,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F5..         MOV       ?V5,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine217_0:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002                REQUIRE ??Subroutine218_0
   \   000002                ; // Fall through to label ??Subroutine218_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine65:
   \   000000   12....       LCALL     ?Subroutine167 & 0xFFFF
   \                     ??CrossCallReturnLabel_294:
   \   000003   75..00       MOV       ?V6,#0x0
   \   000006   78..         MOV       R0,#?V4
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine230_0:
   \   000000   E8           MOV       A,R0
   \   000001                REQUIRE ??Subroutine231_0
   \   000001                ; // Fall through to label ??Subroutine231_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine231_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   A3           INC       DPTR
   \   000002   E9           MOV       A,R1
   \   000003   F0           MOVX      @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine238_0
   \   000003                ; // Fall through to label ??Subroutine238_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine238_0:
   \   000000   7F10         MOV       R7,#0x10
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
   1216          
   1217          #ifdef ZCL_READ
   1218          /*********************************************************************
   1219           * @fn      zcl_SendRead
   1220           *
   1221           * @brief   Send a Read command
   1222           *
   1223           * @param   srcEP - Application's endpoint
   1224           * @param   dstAddr - destination address
   1225           * @param   clusterID - cluster ID
   1226           * @param   readCmd - read command to be sent
   1227           * @param   direction - direction of the command
   1228           * @param   seqNum - transaction sequence number
   1229           *
   1230           * @return  ZSuccess if OK
   1231           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1232          ZStatus_t zcl_SendRead( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zcl_SendRead:
   1233                                  uint16 clusterID, zclReadCmd_t *readCmd,
   1234                                  uint8 direction, uint8 disableDefaultRsp, uint8 seqNum)
   1235          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V2,R1
   \   000007   8A..         MOV       ?V8,R2
   \   000009   8B..         MOV       ?V9,R3
   \   00000B   EC           MOV       A,R4
   \   00000C   FE           MOV       R6,A
   \   00000D   ED           MOV       A,R5
   \   00000E   FF           MOV       R7,A
   \   00000F   7414         MOV       A,#0x14
   \   000011   12....       LCALL     ?XSTACK_DISP0_8
   \   000014   12....       LCALL     ?Subroutine62 & 0xFFFF
   1236            uint16 dataLen;
   1237            uint8 *buf;
   1238            uint8 *pBuf;
   1239            ZStatus_t status;
   1240          
   1241            dataLen = readCmd->numAttr * 2; // Attribute ID
   \                     ??CrossCallReturnLabel_88:
   \   000017   25E0         ADD       A,0xE0 /* A   */
   \   000019   F5..         MOV       ?V6,A
   \   00001B   E4           CLR       A
   \   00001C   33           RLC       A
   \   00001D   F5..         MOV       ?V7,A
   1242          
   1243            buf = zcl_mem_alloc( dataLen );
   \   00001F                ; Setup parameters for call to function osal_mem_alloc
   \   00001F   AA..         MOV       R2,?V6
   \   000021   FB           MOV       R3,A
   \   000022   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000025   8A..         MOV       ?V0,R2
   \   000027   8B..         MOV       ?V1,R3
   1244            if ( buf != NULL )
   \   000029   EA           MOV       A,R2
   \   00002A   45..         ORL       A,?V1
   \   00002C   7003         JNZ       $+5
   \   00002E   02....       LJMP      ??zcl_SendRead_0 & 0xFFFF
   1245            {
   1246              uint8 i;
   1247          
   1248              // Load the buffer - serially
   1249              pBuf = buf;
   \   000031   A8..         MOV       R0,?V0
   \   000033   A9..         MOV       R1,?V1
   1250              for (i = 0; i < readCmd->numAttr; i++)
   \   000035   7C00         MOV       R4,#0x0
   \   000037   801D         SJMP      ??zcl_SendRead_1
   1251              {
   1252                *pBuf++ = LO_UINT16( readCmd->attrID[i] );
   \                     ??zcl_SendRead_2:
   \   000039   EC           MOV       A,R4
   \   00003A   25E0         ADD       A,0xE0 /* A   */
   \   00003C   FA           MOV       R2,A
   \   00003D   E4           CLR       A
   \   00003E   33           RLC       A
   \   00003F   FB           MOV       R3,A
   \   000040   12....       LCALL     ?Subroutine181 & 0xFFFF
   1253                *pBuf++ = HI_UINT16( readCmd->attrID[i] );
   1254              }
   \                     ??CrossCallReturnLabel_318:
   \   000043   AA82         MOV       R2,DPL
   \   000045   AB83         MOV       R3,DPH
   \   000047   12....       LCALL     ?Subroutine111 & 0xFFFF
   \                     ??CrossCallReturnLabel_189:
   \   00004A   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   00004D   F0           MOVX      @DPTR,A
   \   00004E   E8           MOV       A,R0
   \   00004F   2402         ADD       A,#0x2
   \   000051   F8           MOV       R0,A
   \   000052   5001         JNC       ??zcl_SendRead_3
   \   000054   09           INC       R1
   \                     ??zcl_SendRead_3:
   \   000055   0C           INC       R4
   \                     ??zcl_SendRead_1:
   \   000056   85..82       MOV       DPL,?V4
   \   000059   85..83       MOV       DPH,?V5
   \   00005C   E0           MOVX      A,@DPTR
   \   00005D   FA           MOV       R2,A
   \   00005E   EC           MOV       A,R4
   \   00005F   C3           CLR       C
   \   000060   9A           SUBB      A,R2
   \   000061   40D6         JC        ??zcl_SendRead_2
   1255          
   1256              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_READ, FALSE,
   1257                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
   \   000063                ; Setup parameters for call to function zcl_SendCommand
   \   000063   78..         MOV       R0,#?V0
   \   000065   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000068   78..         MOV       R0,#?V6
   \   00006A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00006D   741C         MOV       A,#0x1c
   \   00006F   12....       LCALL     ?XSTACK_DISP0_8
   \   000072   12....       LCALL     ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   000075   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000078   E4           CLR       A
   \   000079   F5..         MOV       ?V4,A
   \   00007B   F5..         MOV       ?V5,A
   \   00007D   78..         MOV       R0,#?V4
   \   00007F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000082   741E         MOV       A,#0x1e
   \   000084   12....       LCALL     ?XSTACK_DISP0_8
   \   000087   12....       LCALL     ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   00008A   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00008D   741E         MOV       A,#0x1e
   \   00008F   12....       LCALL     ?XSTACK_DISP0_8
   \   000092   12....       LCALL     ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   000095   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000098   75..00       MOV       ?V3,#0x0
   \   00009B   78..         MOV       R0,#?V3
   \   00009D   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000A0   78..         MOV       R0,#?V3
   \   0000A2   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000A5   EE           MOV       A,R6
   \   0000A6   FC           MOV       R4,A
   \   0000A7   EF           MOV       A,R7
   \   0000A8   FD           MOV       R5,A
   \   0000A9   AA..         MOV       R2,?V8
   \   0000AB   AB..         MOV       R3,?V9
   \   0000AD   A9..         MOV       R1,?V2
   \   0000AF   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   0000B2   740B         MOV       A,#0xb
   \   0000B4   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000B7   E9           MOV       A,R1
   \   0000B8   FE           MOV       R6,A
   1258              zcl_mem_free( buf );
   \   0000B9                ; Setup parameters for call to function osal_mem_free
   \   0000B9   AA..         MOV       R2,?V0
   \   0000BB   AB..         MOV       R3,?V1
   \   0000BD   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0000C0   8002         SJMP      ??zcl_SendRead_4
   1259            }
   1260            else
   1261            {
   1262              status = ZMemError;
   \                     ??zcl_SendRead_0:
   \   0000C2   7E10         MOV       R6,#0x10
   1263            }
   1264          
   1265            return ( status );
   \                     ??zcl_SendRead_4:
   \   0000C4                REQUIRE ?Subroutine10
   \   0000C4                ; // Fall through to label ?Subroutine10
   1266          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   EE           MOV       A,R6
   \   000001   F9           MOV       R1,A
   \   000002   02....       LJMP      ??Subroutine237_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine62:
   \   000000   12....       LCALL     ?Subroutine164 & 0xFFFF
   \                     ??CrossCallReturnLabel_286:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   12....       LCALL     ?Subroutine151 & 0xFFFF
   \                     ??CrossCallReturnLabel_419:
   \   000003   A3           INC       DPTR
   \   000004   12....       LCALL     ?Subroutine165 & 0xFFFF
   \                     ??CrossCallReturnLabel_290:
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine165:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8882         MOV       DPL,R0
   \   000003   8983         MOV       DPH,R1
   \   000005   A3           INC       DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine56:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V3,A
   \   000003   78..         MOV       R0,#?V3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine181:
   \   000000   E5..         MOV       A,?V4
   \   000002   2A           ADD       A,R2
   \   000003   F582         MOV       DPL,A
   \   000005   E5..         MOV       A,?V5
   \   000007   3B           ADDC      A,R3
   \   000008   F583         MOV       DPH,A
   \   00000A   A3           INC       DPTR
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine111:
   \   000000   12....       LCALL     ?Subroutine173 & 0xFFFF
   \                     ??CrossCallReturnLabel_361:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine173:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8882         MOV       DPL,R0
   \   000003   8983         MOV       DPH,R1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine164:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V4,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F5..         MOV       ?V5,A
   \   000007   85..82       MOV       DPL,?V4
   \   00000A   F583         MOV       DPH,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine237_0:
   \   000000   7F0C         MOV       R7,#0xc
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
   1267          
   1268          /*********************************************************************
   1269           * @fn      zcl_SendReadRsp
   1270           *
   1271           * @brief   Send a Read Response command.
   1272           *
   1273           * @param   srcEP - Application's endpoint
   1274           * @param   dstAddr - destination address
   1275           * @param   clusterID - cluster ID
   1276           * @param   readRspCmd - read response command to be sent
   1277           * @param   direction - direction of the command
   1278           * @param   seqNum - transaction sequence number
   1279           *
   1280           * @return  ZSuccess if OK
   1281           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1282          ZStatus_t zcl_SendReadRsp( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zcl_SendReadRsp:
   1283                                     uint16 clusterID, zclReadRspCmd_t *readRspCmd,
   1284                                     uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
   1285          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV       A,#-0x16
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V3,R1
   \   00000C   8A..         MOV       ?V12,R2
   \   00000E   8B..         MOV       ?V13,R3
   \   000010   8C..         MOV       ?V6,R4
   \   000012   8D..         MOV       ?V7,R5
   1286            uint8 *buf;
   1287            uint16 len = 0;
   \   000014   7E00         MOV       R6,#0x0
   \   000016   7F00         MOV       R7,#0x0
   1288            ZStatus_t status;
   1289            uint8 i;
   1290          
   1291            // calculate the size of the command
   1292            for ( i = 0; i < readRspCmd->numAttr; i++ )
   \   000018   75..00       MOV       ?V2,#0x0
   \   00001B   7418         MOV       A,#0x18
   \   00001D   12....       LCALL     ?XSTACK_DISP0_8
   \   000020   12....       LCALL     ??Subroutine233_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_536:
   \   000023   8011         SJMP      ??zcl_SendReadRsp_0
   1293            {
   1294              zclReadRspStatus_t *statusRec = &(readRspCmd->attrList[i]);
   1295          
   1296              len += 2 + 1; // Attribute ID + Status
   1297          
   1298              if ( statusRec->status == ZCL_STATUS_SUCCESS )
   1299              {
   1300                len++; // Attribute Data Type length
   1301          
   1302                // Attribute Data length
   1303                if ( statusRec->data != NULL )
   1304                {
   1305                  len += zclGetAttrDataLength( statusRec->dataType, statusRec->data );
   1306                }
   1307                else
   1308                {
   1309                  len += zclGetAttrDataLengthUsingCB( srcEP, clusterID, statusRec->attrID );
   \                     ??zcl_SendReadRsp_1:
   \   000025                ; Setup parameters for call to function zclGetAttrDataLengthUsingCB
   \   000025   12....       LCALL     ?Subroutine92 & 0xFFFF
   1310                }
   \                     ??CrossCallReturnLabel_154:
   \   000028   12....       LCALL     `??zclGetAttrDataLengthUsingCB::?relay`; Banked call to: zclGetAttrDataLengthUsingCB
   \                     ??zcl_SendReadRsp_2:
   \   00002B   8B..         MOV       ?V1,R3
   \   00002D   EE           MOV       A,R6
   \   00002E   2A           ADD       A,R2
   \   00002F   FE           MOV       R6,A
   \   000030   EF           MOV       A,R7
   \   000031   35..         ADDC      A,?V1
   \   000033   FF           MOV       R7,A
   \                     ??zcl_SendReadRsp_3:
   \   000034   05..         INC       ?V2
   \                     ??zcl_SendReadRsp_0:
   \   000036   12....       LCALL     ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_513:
   \   000039   5033         JNC       ??zcl_SendReadRsp_4
   \   00003B   E5..         MOV       A,?V2
   \   00003D   75F006       MOV       B,#0x6
   \   000040   12....       LCALL     ?Subroutine138 & 0xFFFF
   \                     ??CrossCallReturnLabel_245:
   \   000043   2403         ADD       A,#0x3
   \   000045   FE           MOV       R6,A
   \   000046   E4           CLR       A
   \   000047   3F           ADDC      A,R7
   \   000048   FF           MOV       R7,A
   \   000049   A3           INC       DPTR
   \   00004A   A3           INC       DPTR
   \   00004B   E0           MOVX      A,@DPTR
   \   00004C   70E6         JNZ       ??zcl_SendReadRsp_3
   \   00004E   0E           INC       R6
   \   00004F   EE           MOV       A,R6
   \   000050   7001         JNZ       ??zcl_SendReadRsp_5
   \   000052   0F           INC       R7
   \                     ??zcl_SendReadRsp_5:
   \   000053   8882         MOV       DPL,R0
   \   000055   8983         MOV       DPH,R1
   \   000057   A3           INC       DPTR
   \   000058   A3           INC       DPTR
   \   000059   A3           INC       DPTR
   \   00005A   A3           INC       DPTR
   \   00005B   12....       LCALL     ??Subroutine199_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_352:
   \   00005E   8882         MOV       DPL,R0
   \   000060   8983         MOV       DPH,R1
   \   000062   60C1         JZ        ??zcl_SendReadRsp_1
   \   000064                ; Setup parameters for call to function zclGetAttrDataLength
   \   000064   A3           INC       DPTR
   \   000065   A3           INC       DPTR
   \   000066   A3           INC       DPTR
   \   000067   E0           MOVX      A,@DPTR
   \   000068   F9           MOV       R1,A
   \   000069   12....       LCALL     `??zclGetAttrDataLength::?relay`; Banked call to: zclGetAttrDataLength
   \   00006C   80BD         SJMP      ??zcl_SendReadRsp_2
   1311              }
   1312            }
   1313          
   1314            buf = zcl_mem_alloc( len );
   \                     ??zcl_SendReadRsp_4:
   \   00006E                ; Setup parameters for call to function osal_mem_alloc
   \   00006E   EE           MOV       A,R6
   \   00006F   FA           MOV       R2,A
   \   000070   EF           MOV       A,R7
   \   000071   FB           MOV       R3,A
   \   000072   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000075   8A..         MOV       ?V0,R2
   \   000077   8B..         MOV       ?V1,R3
   \   000079   8A..         MOV       ?V4,R2
   \   00007B   8B..         MOV       ?V5,R3
   1315            if ( buf != NULL )
   \   00007D   EA           MOV       A,R2
   \   00007E   45..         ORL       A,?V5
   \   000080   7003         JNZ       $+5
   \   000082   02....       LJMP      ??zcl_SendReadRsp_6 & 0xFFFF
   1316            {
   1317              // Load the buffer - serially
   1318              uint8 *pBuf = buf;
   1319          
   1320              for ( i = 0; i < readRspCmd->numAttr; i++ )
   \   000085   75..00       MOV       ?V2,#0x0
   \   000088   8030         SJMP      ??zcl_SendReadRsp_7
   1321              {
   1322                zclReadRspStatus_t *statusRec = &(readRspCmd->attrList[i]);
   1323          
   1324                *pBuf++ = LO_UINT16( statusRec->attrID );
   1325                *pBuf++ = HI_UINT16( statusRec->attrID );
   1326                *pBuf++ = statusRec->status;
   1327          
   1328                if ( statusRec->status == ZCL_STATUS_SUCCESS )
   1329                {
   1330                  *pBuf++ = statusRec->dataType;
   1331          
   1332                  if ( statusRec->data != NULL )
   1333                  {
   1334                    // Copy attribute data to the buffer to be sent out
   1335                    pBuf = zclSerializeData( statusRec->dataType, statusRec->data, pBuf );
   1336                  }
   1337                  else
   1338                  {
   1339                    uint16 dataLen;
   1340          
   1341                    // Read attribute data directly into the buffer to be sent out
   1342                    zclReadAttrDataUsingCB( srcEP, clusterID, statusRec->attrID, pBuf, &dataLen );
   \                     ??zcl_SendReadRsp_8:
   \   00008A                ; Setup parameters for call to function zclReadAttrDataUsingCB
   \   00008A   A8..         MOV       R0,?XSP + 0
   \   00008C   A9..         MOV       R1,?XSP + 1
   \   00008E   88..         MOV       ?V10,R0
   \   000090   89..         MOV       ?V11,R1
   \   000092   78..         MOV       R0,#?V10
   \   000094   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000097   78..         MOV       R0,#?V0
   \   000099   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00009C   8A82         MOV       DPL,R2
   \   00009E   8B83         MOV       DPH,R3
   \   0000A0   12....       LCALL     ?Subroutine92 & 0xFFFF
   \                     ??CrossCallReturnLabel_155:
   \   0000A3   12....       LCALL     `??zclReadAttrDataUsingCB::?relay`; Banked call to: zclReadAttrDataUsingCB
   \   0000A6   7404         MOV       A,#0x4
   \   0000A8   12....       LCALL     ?DEALLOC_XSTACK8
   1343                    pBuf += dataLen;
   \   0000AB   12....       LCALL     ?Subroutine105 & 0xFFFF
   1344                  }
   \                     ??CrossCallReturnLabel_492:
   \   0000AE   E5..         MOV       A,?V0
   \   0000B0   28           ADD       A,R0
   \   0000B1   F5..         MOV       ?V0,A
   \   0000B3   E5..         MOV       A,?V1
   \   0000B5   39           ADDC      A,R1
   \   0000B6   F5..         MOV       ?V1,A
   \                     ??zcl_SendReadRsp_9:
   \   0000B8   05..         INC       ?V2
   \                     ??zcl_SendReadRsp_7:
   \   0000BA   12....       LCALL     ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_514:
   \   0000BD   506F         JNC       ??zcl_SendReadRsp_10
   \   0000BF   E5..         MOV       A,?V2
   \   0000C1   75F006       MOV       B,#0x6
   \   0000C4   12....       LCALL     ?Subroutine182 & 0xFFFF
   \                     ??CrossCallReturnLabel_320:
   \   0000C7   12....       LCALL     ?Subroutine139 & 0xFFFF
   \                     ??CrossCallReturnLabel_247:
   \   0000CA   12....       LCALL     ?Subroutine193 & 0xFFFF
   \                     ??CrossCallReturnLabel_333:
   \   0000CD   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   0000D0   12....       LCALL     ?Subroutine123 & 0xFFFF
   \                     ??CrossCallReturnLabel_212:
   \   0000D3   F0           MOVX      @DPTR,A
   \   0000D4   12....       LCALL     ?Subroutine131 & 0xFFFF
   \                     ??CrossCallReturnLabel_233:
   \   0000D7   12....       LCALL     ?Subroutine123 & 0xFFFF
   \                     ??CrossCallReturnLabel_213:
   \   0000DA   A3           INC       DPTR
   \   0000DB   F0           MOVX      @DPTR,A
   \   0000DC   E5..         MOV       A,?V0
   \   0000DE   2403         ADD       A,#0x3
   \   0000E0   F5..         MOV       ?V0,A
   \   0000E2   5002         JNC       ??zcl_SendReadRsp_11
   \   0000E4   05..         INC       ?V1
   \                     ??zcl_SendReadRsp_11:
   \   0000E6   8882         MOV       DPL,R0
   \   0000E8   8983         MOV       DPH,R1
   \   0000EA   E0           MOVX      A,@DPTR
   \   0000EB   70CB         JNZ       ??zcl_SendReadRsp_9
   \   0000ED   EA           MOV       A,R2
   \   0000EE   2403         ADD       A,#0x3
   \   0000F0   08           INC       R0
   \   0000F1   E4           CLR       A
   \   0000F2   3B           ADDC      A,R3
   \   0000F3   F9           MOV       R1,A
   \   0000F4   8882         MOV       DPL,R0
   \   0000F6   8983         MOV       DPH,R1
   \   0000F8   12....       LCALL     ?Subroutine193 & 0xFFFF
   \                     ??CrossCallReturnLabel_334:
   \   0000FB   F0           MOVX      @DPTR,A
   \   0000FC   A3           INC       DPTR
   \   0000FD   8582..       MOV       ?V0,DPL
   \   000100   8583..       MOV       ?V1,DPH
   \   000103   8A82         MOV       DPL,R2
   \   000105   8B83         MOV       DPH,R3
   \   000107   12....       LCALL     ?Subroutine107 & 0xFFFF
   \                     ??CrossCallReturnLabel_548:
   \   00010A   8C82         MOV       DPL,R4
   \   00010C   8D83         MOV       DPH,R5
   \   00010E   E582         MOV       A,DPL
   \   000110   4583         ORL       A,DPH
   \   000112   7003         JNZ       $+5
   \   000114   02....       LJMP      ??zcl_SendReadRsp_8 & 0xFFFF
   \   000117                ; Setup parameters for call to function zclSerializeData
   \   000117   AC..         MOV       R4,?V0
   \   000119   AD..         MOV       R5,?V1
   \   00011B   AA82         MOV       R2,DPL
   \   00011D   AB83         MOV       R3,DPH
   \   00011F   8882         MOV       DPL,R0
   \   000121   8983         MOV       DPH,R1
   \   000123   E0           MOVX      A,@DPTR
   \   000124   F9           MOV       R1,A
   \   000125   12....       LCALL     `??zclSerializeData::?relay`; Banked call to: zclSerializeData
   \   000128   8A..         MOV       ?V0,R2
   \   00012A   8B..         MOV       ?V1,R3
   \   00012C   808A         SJMP      ??zcl_SendReadRsp_9
   1345                }
   1346              } // for loop
   1347          
   1348              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_READ_RSP, FALSE,
   1349                                        direction, disableDefaultRsp, 0, seqNum, len, buf );
   \                     ??zcl_SendReadRsp_10:
   \   00012E                ; Setup parameters for call to function zcl_SendCommand
   \   00012E   78..         MOV       R0,#?V4
   \   000130   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000133   8E..         MOV       ?V0,R6
   \   000135   8F..         MOV       ?V1,R7
   \   000137   78..         MOV       R0,#?V0
   \   000139   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00013C   7420         MOV       A,#0x20
   \   00013E   12....       LCALL     ?XSTACK_DISP0_8
   \   000141   12....       LCALL     ?Subroutine63 & 0xFFFF
   \                     ??CrossCallReturnLabel_91:
   \   000144   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000147   E4           CLR       A
   \   000148   F5..         MOV       ?V0,A
   \   00014A   F5..         MOV       ?V1,A
   \   00014C   78..         MOV       R0,#?V0
   \   00014E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000151   7422         MOV       A,#0x22
   \   000153   12....       LCALL     ?XSTACK_DISP0_8
   \   000156   12....       LCALL     ?Subroutine63 & 0xFFFF
   \                     ??CrossCallReturnLabel_92:
   \   000159   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00015C   7422         MOV       A,#0x22
   \   00015E   12....       LCALL     ?XSTACK_DISP0_8
   \   000161   12....       LCALL     ?Subroutine63 & 0xFFFF
   \                     ??CrossCallReturnLabel_93:
   \   000164   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000167   75..00       MOV       ?V0,#0x0
   \   00016A   78..         MOV       R0,#?V0
   \   00016C   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00016F   75..01       MOV       ?V0,#0x1
   \   000172   78..         MOV       R0,#?V0
   \   000174   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000177   AC..         MOV       R4,?V6
   \   000179   AD..         MOV       R5,?V7
   \   00017B   AA..         MOV       R2,?V12
   \   00017D   AB..         MOV       R3,?V13
   \   00017F   A9..         MOV       R1,?V3
   \   000181   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   000184   740B         MOV       A,#0xb
   \   000186   12....       LCALL     ?DEALLOC_XSTACK8
   \   000189   E9           MOV       A,R1
   \   00018A   FE           MOV       R6,A
   1350              zcl_mem_free( buf );
   \   00018B                ; Setup parameters for call to function osal_mem_free
   \   00018B   AA..         MOV       R2,?V4
   \   00018D   AB..         MOV       R3,?V5
   \   00018F   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000192   8002         SJMP      ??zcl_SendReadRsp_12
   1351            }
   1352            else
   1353            {
   1354              status = ZMemError;
   \                     ??zcl_SendReadRsp_6:
   \   000194   7E10         MOV       R6,#0x10
   1355            }
   1356          
   1357            return ( status );
   \                     ??zcl_SendReadRsp_12:
   \   000196   EE           MOV       A,R6
   \   000197   F9           MOV       R1,A
   \   000198   02....       LJMP      ?Subroutine7 & 0xFFFF
   1358          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine123:
   \   000000   12....       LCALL     ?Subroutine176 & 0xFFFF
   \                     ??CrossCallReturnLabel_310:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine176:
   \   000000   12....       LCALL     ?Subroutine193 & 0xFFFF
   \                     ??CrossCallReturnLabel_335:
   \   000003   A3           INC       DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine193:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   85..82       MOV       DPL,?V0
   \   000004   85..83       MOV       DPH,?V1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine92:
   \   000000   12....       LCALL     ??Subroutine242_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_566:
   \   000003   AA..         MOV       R2,?V6
   \   000005   AB..         MOV       R3,?V7
   \   000007   A9..         MOV       R1,?V3
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine138:
   \   000000   12....       LCALL     ?Subroutine182 & 0xFFFF
   \                     ??CrossCallReturnLabel_323:
   \   000003   12....       LCALL     ?Subroutine180 & 0xFFFF
   \                     ??CrossCallReturnLabel_317:
   \   000006   EE           MOV       A,R6
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine182:
   \   000000   A4           MUL       AB
   \   000001   F8           MOV       R0,A
   \   000002   A9F0         MOV       R1,B
   \   000004   E5..         MOV       A,?V8
   \   000006   28           ADD       A,R0
   \   000007   F582         MOV       DPL,A
   \   000009   E5..         MOV       A,?V9
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   12....       LCALL     ?Subroutine151 & 0xFFFF
   \                     ??CrossCallReturnLabel_420:
   \   000003   A3           INC       DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine180:
   \   000000   12....       LCALL     ?Subroutine196 & 0xFFFF
   \                     ??CrossCallReturnLabel_341:
   \   000003   A882         MOV       R0,DPL
   \   000005   A983         MOV       R1,DPH
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   7402         MOV       A,#0x2
   \   000002   12....       LCALL     ?DEALLOC_XSTACK8
   \   000005                REQUIRE ??Subroutine203_0
   \   000005                ; // Fall through to label ??Subroutine203_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine203_0:
   \   000000   7F0E         MOV       R7,#0xe
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine63:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V0,A
   \   000003   78..         MOV       R0,#?V0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine131:
   \   000000   EA           MOV       A,R2
   \   000001   2402         ADD       A,#0x2
   \   000003   F8           MOV       R0,A
   \   000004   E4           CLR       A
   \   000005   3B           ADDC      A,R3
   \   000006   F9           MOV       R1,A
   \   000007   8882         MOV       DPL,R0
   \   000009   8983         MOV       DPH,R1
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine196:
   \   000000   39           ADDC      A,R1
   \   000001   F583         MOV       DPH,A
   \   000003   A3           INC       DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine139:
   \   000000   12....       LCALL     ?Subroutine196 & 0xFFFF
   \                     ??CrossCallReturnLabel_340:
   \   000003   AA82         MOV       R2,DPL
   \   000005   AB83         MOV       R3,DPH
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine105:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine228_0
   \   000006                ; // Fall through to label ??Subroutine228_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine70:
   \   000000   85..82       MOV       DPL,?V8
   \   000003   85..83       MOV       DPH,?V9
   \   000006                REQUIRE ??Subroutine229_0
   \   000006                ; // Fall through to label ??Subroutine229_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine229_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   E5..         MOV       A,?V2
   \   000004   C3           CLR       C
   \   000005   98           SUBB      A,R0
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine233_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V8,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F5..         MOV       ?V9,A
   \   000007   22           RET
   1359          #endif // ZCL_READ
   1360          
   1361          #ifdef ZCL_WRITE
   1362          /*********************************************************************
   1363           * @fn      sendWriteRequest
   1364           *
   1365           * @brief   Send a Write command
   1366           *
   1367           * @param   dstAddr - destination address
   1368           * @param   clusterID - cluster ID
   1369           * @param   writeCmd - write command to be sent
   1370           * @param   cmd - ZCL_CMD_WRITE, ZCL_CMD_WRITE_UNDIVIDED or ZCL_CMD_WRITE_NO_RSP
   1371           * @param   direction - direction of the command
   1372           * @param   seqNum - transaction sequence number
   1373           *
   1374           * @return  ZSuccess if OK
   1375           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1376          ZStatus_t zcl_SendWriteRequest( uint8 srcEP, afAddrType_t *dstAddr, uint16 clusterID,
   \                     zcl_SendWriteRequest:
   1377                                          zclWriteCmd_t *writeCmd, uint8 cmd, uint8 direction,
   1378                                          uint8 disableDefaultRsp, uint8 seqNum )
   1379          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV       A,#-0x16
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V3,R1
   \   000007   8A..         MOV       ?V8,R2
   \   000009   8B..         MOV       ?V9,R3
   \   00000B   8C..         MOV       ?V6,R4
   \   00000D   8D..         MOV       ?V7,R5
   1380            uint8 *buf;
   1381            uint16 dataLen = 0;
   \   00000F   7E00         MOV       R6,#0x0
   \   000011   7F00         MOV       R7,#0x0
   1382            ZStatus_t status;
   1383            uint8 i;
   1384          
   1385            for ( i = 0; i < writeCmd->numAttr; i++ )
   \   000013   75..00       MOV       ?V2,#0x0
   \   000016   7416         MOV       A,#0x16
   \   000018   12....       LCALL     ?XSTACK_DISP0_8
   \   00001B   12....       LCALL     ?Subroutine109 & 0xFFFF
   \                     ??CrossCallReturnLabel_182:
   \   00001E   8009         SJMP      ??CrossCallReturnLabel_249
   1386            {
   1387              zclWriteRec_t *statusRec = &(writeCmd->attrList[i]);
   \                     ??zcl_SendWriteRequest_0:
   \   000020   12....       LCALL     ?Subroutine78 & 0xFFFF
   1388          
   1389              dataLen += 2 + 1; // Attribute ID + Attribute Type
   1390          
   1391              // Attribute Data
   1392              dataLen += zclGetAttrDataLength( statusRec->dataType, statusRec->attrData );
   1393            }
   \                     ??CrossCallReturnLabel_131:
   \   000023   12....       LCALL     `??zclGetAttrDataLength::?relay`; Banked call to: zclGetAttrDataLength
   \   000026   12....       LCALL     ?Subroutine140 & 0xFFFF
   \                     ??CrossCallReturnLabel_249:
   \   000029   85..82       MOV       DPL,?V4
   \   00002C   85..83       MOV       DPH,?V5
   \   00002F   12....       LCALL     ??Subroutine229_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_509:
   \   000032   40EC         JC        ??zcl_SendWriteRequest_0
   1394          
   1395            buf = zcl_mem_alloc( dataLen );
   \   000034                ; Setup parameters for call to function osal_mem_alloc
   \   000034   EE           MOV       A,R6
   \   000035   FA           MOV       R2,A
   \   000036   EF           MOV       A,R7
   \   000037   FB           MOV       R3,A
   \   000038   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00003B   8A..         MOV       ?V0,R2
   \   00003D   8B..         MOV       ?V1,R3
   1396            if ( buf != NULL )
   \   00003F   EA           MOV       A,R2
   \   000040   45..         ORL       A,?V1
   \   000042   7003         JNZ       $+5
   \   000044   02....       LJMP      ??zcl_SendWriteRequest_1 & 0xFFFF
   1397            {
   1398              // Load the buffer - serially
   1399              uint8 *pBuf = buf;
   \   000047   A8..         MOV       R0,?V0
   \   000049   A9..         MOV       R1,?V1
   1400              for ( i = 0; i < writeCmd->numAttr; i++ )
   \   00004B   75..00       MOV       ?V2,#0x0
   \   00004E   8010         SJMP      ??zcl_SendWriteRequest_2
   1401              {
   1402                zclWriteRec_t *statusRec = &(writeCmd->attrList[i]);
   \                     ??zcl_SendWriteRequest_3:
   \   000050   12....       LCALL     ?Subroutine14 & 0xFFFF
   1403          
   1404                *pBuf++ = LO_UINT16( statusRec->attrID );
   1405                *pBuf++ = HI_UINT16( statusRec->attrID );
   1406                *pBuf++ = statusRec->dataType;
   1407          
   1408                pBuf = zclSerializeData( statusRec->dataType, statusRec->attrData, pBuf );
   1409              }
   \                     ??CrossCallReturnLabel_0:
   \   000053   12....       LCALL     `??zclSerializeData::?relay`; Banked call to: zclSerializeData
   \   000056   8A..         MOV       ?V10,R2
   \   000058   8B..         MOV       ?V11,R3
   \   00005A   A8..         MOV       R0,?V10
   \   00005C   A9..         MOV       R1,?V11
   \   00005E   05..         INC       ?V2
   \                     ??zcl_SendWriteRequest_2:
   \   000060   85..82       MOV       DPL,?V4
   \   000063   85..83       MOV       DPH,?V5
   \   000066   E0           MOVX      A,@DPTR
   \   000067   FA           MOV       R2,A
   \   000068   E5..         MOV       A,?V2
   \   00006A   C3           CLR       C
   \   00006B   9A           SUBB      A,R2
   \   00006C   40E2         JC        ??zcl_SendWriteRequest_3
   1410          
   1411              status = zcl_SendCommand( srcEP, dstAddr, clusterID, cmd, FALSE,
   1412                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
   \   00006E                ; Setup parameters for call to function zcl_SendCommand
   \   00006E   78..         MOV       R0,#?V0
   \   000070   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000073   8E..         MOV       ?V4,R6
   \   000075   8F..         MOV       ?V5,R7
   \   000077   78..         MOV       R0,#?V4
   \   000079   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00007C   741F         MOV       A,#0x1f
   \   00007E   12....       LCALL     ?XSTACK_DISP0_8
   \   000081   12....       LCALL     ??Subroutine207_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_380:
   \   000084   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000087   E4           CLR       A
   \   000088   F5..         MOV       ?V4,A
   \   00008A   F5..         MOV       ?V5,A
   \   00008C   78..         MOV       R0,#?V4
   \   00008E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000091   7421         MOV       A,#0x21
   \   000093   12....       LCALL     ?XSTACK_DISP0_8
   \   000096   12....       LCALL     ??Subroutine207_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_381:
   \   000099   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00009C   7421         MOV       A,#0x21
   \   00009E   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A1   12....       LCALL     ??Subroutine207_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_382:
   \   0000A4   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000A7   75..00       MOV       ?V2,#0x0
   \   0000AA   78..         MOV       R0,#?V2
   \   0000AC   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000AF   7422         MOV       A,#0x22
   \   0000B1   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B4   12....       LCALL     ??Subroutine207_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_383:
   \   0000B7   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000BA   AC..         MOV       R4,?V6
   \   0000BC   AD..         MOV       R5,?V7
   \   0000BE   AA..         MOV       R2,?V8
   \   0000C0   AB..         MOV       R3,?V9
   \   0000C2   A9..         MOV       R1,?V3
   \   0000C4   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   0000C7   740B         MOV       A,#0xb
   \   0000C9   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000CC   E9           MOV       A,R1
   \   0000CD   FE           MOV       R6,A
   1413              zcl_mem_free( buf );
   \   0000CE                ; Setup parameters for call to function osal_mem_free
   \   0000CE   AA..         MOV       R2,?V0
   \   0000D0   AB..         MOV       R3,?V1
   \   0000D2   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0000D5   8002         SJMP      ??zcl_SendWriteRequest_4
   1414            }
   1415            else
   1416            {
   1417              status = ZMemError;
   \                     ??zcl_SendWriteRequest_1:
   \   0000D7   7E10         MOV       R6,#0x10
   1418            }
   1419          
   1420            return ( status);
   \                     ??zcl_SendWriteRequest_4:
   \   0000D9                REQUIRE ?Subroutine12
   \   0000D9                ; // Fall through to label ?Subroutine12
   1421          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   EE           MOV       A,R6
   \   000001   F9           MOV       R1,A
   \   000002   02....       LJMP      ??Subroutine203_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine140:
   \   000000   8B..         MOV       ?V1,R3
   \   000002   EA           MOV       A,R2
   \   000003   2403         ADD       A,#0x3
   \   000005   F8           MOV       R0,A
   \   000006   E4           CLR       A
   \   000007   35..         ADDC      A,?V1
   \   000009   F9           MOV       R1,A
   \   00000A   EE           MOV       A,R6
   \   00000B   28           ADD       A,R0
   \   00000C   FE           MOV       R6,A
   \   00000D   EF           MOV       A,R7
   \   00000E   39           ADDC      A,R1
   \   00000F   FF           MOV       R7,A
   \   000010   05..         INC       ?V2
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine78:
   \   000000   E5..         MOV       A,?V2
   \   000002   75F005       MOV       B,#0x5
   \   000005   A4           MUL       AB
   \   000006   F8           MOV       R0,A
   \   000007   A9F0         MOV       R1,B
   \   000009   E5..         MOV       A,?V4
   \   00000B   28           ADD       A,R0
   \   00000C   F582         MOV       DPL,A
   \   00000E   E5..         MOV       A,?V5
   \   000010   12....       LCALL     ?Subroutine180 & 0xFFFF
   \                     ??CrossCallReturnLabel_316:
   \   000013                ; Setup parameters for call to function zclGetAttrDataLength
   \   000013                ; Setup parameters for call to function zclGetAttrDataLength
   \   000013   A3           INC       DPTR
   \   000014   A3           INC       DPTR
   \   000015   A3           INC       DPTR
   \   000016   12....       LCALL     ?Subroutine169 & 0xFFFF
   \                     ??CrossCallReturnLabel_298:
   \   000019   A3           INC       DPTR
   \   00001A   A3           INC       DPTR
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   F9           MOV       R1,A
   \   00001D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   E5..         MOV       A,?V2
   \   000002   75F005       MOV       B,#0x5
   \   000005   A4           MUL       AB
   \   000006   FA           MOV       R2,A
   \   000007   ABF0         MOV       R3,B
   \   000009   12....       LCALL     ?Subroutine181 & 0xFFFF
   \                     ??CrossCallReturnLabel_319:
   \   00000C   8582..       MOV       ?V12,DPL
   \   00000F   8583..       MOV       ?V13,DPH
   \   000012   12....       LCALL     ?Subroutine173 & 0xFFFF
   \                     ??CrossCallReturnLabel_359:
   \   000015   12....       LCALL     ?Subroutine153 & 0xFFFF
   \                     ??CrossCallReturnLabel_271:
   \   000018   8882         MOV       DPL,R0
   \   00001A   8983         MOV       DPH,R1
   \   00001C   A3           INC       DPTR
   \   00001D   F0           MOVX      @DPTR,A
   \   00001E   E5..         MOV       A,?V12
   \   000020   2402         ADD       A,#0x2
   \   000022   FA           MOV       R2,A
   \   000023   E4           CLR       A
   \   000024   35..         ADDC      A,?V13
   \   000026   FB           MOV       R3,A
   \   000027   8A..         MOV       ?V10,R2
   \   000029   8B..         MOV       ?V11,R3
   \   00002B   8A82         MOV       DPL,R2
   \   00002D   F583         MOV       DPH,A
   \   00002F   12....       LCALL     ?Subroutine165 & 0xFFFF
   \                     ??CrossCallReturnLabel_288:
   \   000032   A3           INC       DPTR
   \   000033   F0           MOVX      @DPTR,A
   \   000034                ; Setup parameters for call to function zclSerializeData
   \   000034                ; Setup parameters for call to function zclSerializeData
   \   000034   E8           MOV       A,R0
   \   000035   2403         ADD       A,#0x3
   \   000037   FC           MOV       R4,A
   \   000038   E4           CLR       A
   \   000039   39           ADDC      A,R1
   \   00003A   FD           MOV       R5,A
   \   00003B   85..82       MOV       DPL,?V12
   \   00003E   85..83       MOV       DPH,?V13
   \   000041   12....       LCALL     ??Subroutine201_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_611:
   \   000044   85..82       MOV       DPL,?V10
   \   000047   85..83       MOV       DPH,?V11
   \   00004A   E0           MOVX      A,@DPTR
   \   00004B   F9           MOV       R1,A
   \   00004C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine201_0:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003                REQUIRE ??Subroutine202_0
   \   000003                ; // Fall through to label ??Subroutine202_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine207_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V2,A
   \   000003   78..         MOV       R0,#?V2
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine153:
   \   000000   12....       LCALL     ?Subroutine191 & 0xFFFF
   \                     ??CrossCallReturnLabel_329:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine109:
   \   000000   12....       LCALL     ?Subroutine167 & 0xFFFF
   \                     ??CrossCallReturnLabel_296:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine169:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FB           MOV       R3,A
   \   000005   8882         MOV       DPL,R0
   \   000007   8983         MOV       DPH,R1
   \   000009   22           RET
   1422          
   1423          /*********************************************************************
   1424           * @fn      zcl_SendWriteRsp
   1425           *
   1426           * @brief   Send a Write Response command
   1427           *
   1428           * @param   dstAddr - destination address
   1429           * @param   clusterID - cluster ID
   1430           * @param   wrtieRspCmd - write response command to be sent
   1431           * @param   direction - direction of the command
   1432           * @param   seqNum - transaction sequence number
   1433           *
   1434           * @return  ZSuccess if OK
   1435           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1436          ZStatus_t zcl_SendWriteRsp( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zcl_SendWriteRsp:
   1437                                      uint16 clusterID, zclWriteRspCmd_t *writeRspCmd,
   1438                                      uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
   1439          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V2,R1
   \   000007   8A..         MOV       ?V8,R2
   \   000009   8B..         MOV       ?V9,R3
   \   00000B   EC           MOV       A,R4
   \   00000C   FE           MOV       R6,A
   \   00000D   ED           MOV       A,R5
   \   00000E   FF           MOV       R7,A
   \   00000F   7414         MOV       A,#0x14
   \   000011   12....       LCALL     ?XSTACK_DISP0_8
   \   000014   12....       LCALL     ?Subroutine62 & 0xFFFF
   1440            uint16 dataLen;
   1441            uint8 *buf;
   1442            ZStatus_t status;
   1443          
   1444            dataLen = writeRspCmd->numAttr * ( 1 + 2 ); // status + attribute id
   \                     ??CrossCallReturnLabel_89:
   \   000017   75F003       MOV       B,#0x3
   \   00001A   A4           MUL       AB
   \   00001B   F5..         MOV       ?V6,A
   \   00001D   E5F0         MOV       A,B
   \   00001F   F5..         MOV       ?V7,A
   1445          
   1446            buf = zcl_mem_alloc( dataLen );
   \   000021                ; Setup parameters for call to function osal_mem_alloc
   \   000021   AA..         MOV       R2,?V6
   \   000023   FB           MOV       R3,A
   \   000024   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000027   8A..         MOV       ?V0,R2
   \   000029   8B..         MOV       ?V1,R3
   1447            if ( buf != NULL )
   \   00002B   EA           MOV       A,R2
   \   00002C   45..         ORL       A,?V1
   \   00002E   7003         JNZ       $+5
   \   000030   02....       LJMP      ??zcl_SendWriteRsp_0 & 0xFFFF
   1448            {
   1449              // Load the buffer - serially
   1450              uint8 i;
   1451              uint8 *pBuf = buf;
   \   000033   A8..         MOV       R0,?V0
   \   000035   A9..         MOV       R1,?V1
   1452              for ( i = 0; i < writeRspCmd->numAttr; i++ )
   \   000037   7C00         MOV       R4,#0x0
   \   000039   8034         SJMP      ??zcl_SendWriteRsp_1
   1453              {
   1454                *pBuf++ = writeRspCmd->attrList[i].status;
   \                     ??zcl_SendWriteRsp_2:
   \   00003B   EC           MOV       A,R4
   \   00003C   75F003       MOV       B,#0x3
   \   00003F   A4           MUL       AB
   \   000040   FA           MOV       R2,A
   \   000041   ABF0         MOV       R3,B
   \   000043   E5..         MOV       A,?V4
   \   000045   2A           ADD       A,R2
   \   000046   FA           MOV       R2,A
   \   000047   E5..         MOV       A,?V5
   \   000049   3B           ADDC      A,R3
   \   00004A   FB           MOV       R3,A
   \   00004B   8A82         MOV       DPL,R2
   \   00004D   8B83         MOV       DPH,R3
   \   00004F   A3           INC       DPTR
   \   000050   12....       LCALL     ??Subroutine200_0 & 0xFFFF
   1455                *pBuf++ = LO_UINT16( writeRspCmd->attrList[i].attrID );
   \                     ??CrossCallReturnLabel_355:
   \   000053   EA           MOV       A,R2
   \   000054   2402         ADD       A,#0x2
   \   000056   FA           MOV       R2,A
   \   000057   5001         JNC       ??zcl_SendWriteRsp_3
   \   000059   0B           INC       R3
   \                     ??zcl_SendWriteRsp_3:
   \   00005A   8A82         MOV       DPL,R2
   \   00005C   8B83         MOV       DPH,R3
   \   00005E   12....       LCALL     ?Subroutine111 & 0xFFFF
   1456                *pBuf++ = HI_UINT16( writeRspCmd->attrList[i].attrID );
   1457              }
   \                     ??CrossCallReturnLabel_190:
   \   000061   A3           INC       DPTR
   \   000062   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   000065   A3           INC       DPTR
   \   000066   F0           MOVX      @DPTR,A
   \   000067   E8           MOV       A,R0
   \   000068   2403         ADD       A,#0x3
   \   00006A   F8           MOV       R0,A
   \   00006B   5001         JNC       ??zcl_SendWriteRsp_4
   \   00006D   09           INC       R1
   \                     ??zcl_SendWriteRsp_4:
   \   00006E   0C           INC       R4
   \                     ??zcl_SendWriteRsp_1:
   \   00006F   85..82       MOV       DPL,?V4
   \   000072   85..83       MOV       DPH,?V5
   \   000075   E0           MOVX      A,@DPTR
   \   000076   FA           MOV       R2,A
   \   000077   EC           MOV       A,R4
   \   000078   C3           CLR       C
   \   000079   9A           SUBB      A,R2
   \   00007A   40BF         JC        ??zcl_SendWriteRsp_2
   1458          
   1459              // If there's only a single status record and its status field is set to
   1460              // SUCCESS then omit the attribute ID field.
   1461              if ( writeRspCmd->numAttr == 1 && writeRspCmd->attrList[0].status == ZCL_STATUS_SUCCESS )
   \   00007C   7401         MOV       A,#0x1
   \   00007E   6A           XRL       A,R2
   \   00007F   700A         JNZ       ??zcl_SendWriteRsp_5
   \   000081   A3           INC       DPTR
   \   000082   E0           MOVX      A,@DPTR
   \   000083   7006         JNZ       ??zcl_SendWriteRsp_5
   1462              {
   1463                dataLen = 1;
   \   000085   75..01       MOV       ?V6,#0x1
   \   000088   75..00       MOV       ?V7,#0x0
   1464              }
   1465          
   1466              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_WRITE_RSP, FALSE,
   1467                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
   \                     ??zcl_SendWriteRsp_5:
   \   00008B                ; Setup parameters for call to function zcl_SendCommand
   \   00008B   78..         MOV       R0,#?V0
   \   00008D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000090   78..         MOV       R0,#?V6
   \   000092   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000095   741C         MOV       A,#0x1c
   \   000097   12....       LCALL     ?XSTACK_DISP0_8
   \   00009A   12....       LCALL     ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   00009D   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000A0   E4           CLR       A
   \   0000A1   F5..         MOV       ?V4,A
   \   0000A3   F5..         MOV       ?V5,A
   \   0000A5   78..         MOV       R0,#?V4
   \   0000A7   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000AA   741E         MOV       A,#0x1e
   \   0000AC   12....       LCALL     ?XSTACK_DISP0_8
   \   0000AF   12....       LCALL     ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   0000B2   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000B5   741E         MOV       A,#0x1e
   \   0000B7   12....       LCALL     ?XSTACK_DISP0_8
   \   0000BA   12....       LCALL     ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   0000BD   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000C0   75..00       MOV       ?V3,#0x0
   \   0000C3   78..         MOV       R0,#?V3
   \   0000C5   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000C8   75..04       MOV       ?V3,#0x4
   \   0000CB   78..         MOV       R0,#?V3
   \   0000CD   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000D0   EE           MOV       A,R6
   \   0000D1   FC           MOV       R4,A
   \   0000D2   EF           MOV       A,R7
   \   0000D3   FD           MOV       R5,A
   \   0000D4   AA..         MOV       R2,?V8
   \   0000D6   AB..         MOV       R3,?V9
   \   0000D8   A9..         MOV       R1,?V2
   \   0000DA   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   0000DD   740B         MOV       A,#0xb
   \   0000DF   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000E2   E9           MOV       A,R1
   \   0000E3   FE           MOV       R6,A
   1468              zcl_mem_free( buf );
   \   0000E4                ; Setup parameters for call to function osal_mem_free
   \   0000E4   AA..         MOV       R2,?V0
   \   0000E6   AB..         MOV       R3,?V1
   \   0000E8   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0000EB   8002         SJMP      ??zcl_SendWriteRsp_6
   1469            }
   1470            else
   1471            {
   1472              status = ZMemError;
   \                     ??zcl_SendWriteRsp_0:
   \   0000ED   7E10         MOV       R6,#0x10
   1473            }
   1474          
   1475            return ( status );
   \                     ??zcl_SendWriteRsp_6:
   \   0000EF   02....       LJMP      ?Subroutine10 & 0xFFFF
   1476          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine200_0:
   \   000000   12....       LCALL     ?Subroutine173 & 0xFFFF
   \                     ??CrossCallReturnLabel_362:
   \   000003   F0           MOVX      @DPTR,A
   \   000004   22           RET
   1477          #endif // ZCL_WRITE
   1478          
   1479          #ifdef ZCL_REPORT_CONFIGURING_DEVICE
   1480          /*********************************************************************
   1481           * @fn      zcl_SendConfigReportCmd
   1482           *
   1483           * @brief   Send a Configure Reporting command
   1484           *
   1485           * @param   dstAddr - destination address
   1486           * @param   clusterID - cluster ID
   1487           * @param   cfgReportCmd - configure reporting command to be sent
   1488           * @param   direction - direction of the command
   1489           * @param   seqNum - transaction sequence number
   1490           *
   1491           * @return  ZSuccess if OK
   1492           */
   1493          ZStatus_t zcl_SendConfigReportCmd( uint8 srcEP, afAddrType_t *dstAddr,
   1494                                    uint16 clusterID, zclCfgReportCmd_t *cfgReportCmd,
   1495                                    uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
   1496          {
   1497            uint8 *buf;
   1498            uint16 dataLen = 0;
   1499            ZStatus_t status;
   1500            uint8 i;
   1501          
   1502            // Find out the data length
   1503            for ( i = 0; i < cfgReportCmd->numAttr; i++ )
   1504            {
   1505              zclCfgReportRec_t *reportRec = &(cfgReportCmd->attrList[i]);
   1506          
   1507              dataLen += 1 + 2; // Direction + Attribute ID
   1508          
   1509              if ( reportRec->direction == ZCL_SEND_ATTR_REPORTS )
   1510              {
   1511                dataLen += 1 + 2 + 2; // Data Type + Min + Max Reporting Intervals
   1512          
   1513                // Find out the size of the Reportable Change field (for Analog data types)
   1514                if ( zclAnalogDataType( reportRec->dataType ) )
   1515                {
   1516                  dataLen += zclGetDataTypeLength( reportRec->dataType );
   1517                }
   1518              }
   1519              else
   1520              {
   1521                dataLen += 2; // Timeout Period
   1522              }
   1523            }
   1524          
   1525            buf = zcl_mem_alloc( dataLen );
   1526            if ( buf != NULL )
   1527            {
   1528              // Load the buffer - serially
   1529              uint8 *pBuf = buf;
   1530          
   1531              for ( i = 0; i < cfgReportCmd->numAttr; i++ )
   1532              {
   1533                zclCfgReportRec_t *reportRec = &(cfgReportCmd->attrList[i]);
   1534          
   1535                *pBuf++ = reportRec->direction;
   1536                *pBuf++ = LO_UINT16( reportRec->attrID );
   1537                *pBuf++ = HI_UINT16( reportRec->attrID );
   1538          
   1539                if ( reportRec->direction == ZCL_SEND_ATTR_REPORTS )
   1540                {
   1541                  *pBuf++ = reportRec->dataType;
   1542                  *pBuf++ = LO_UINT16( reportRec->minReportInt );
   1543                  *pBuf++ = HI_UINT16( reportRec->minReportInt );
   1544                  *pBuf++ = LO_UINT16( reportRec->maxReportInt );
   1545                  *pBuf++ = HI_UINT16( reportRec->maxReportInt );
   1546          
   1547                  if ( zclAnalogDataType( reportRec->dataType ) )
   1548                  {
   1549                    pBuf = zclSerializeData( reportRec->dataType, reportRec->reportableChange, pBuf );
   1550                  }
   1551                }
   1552                else
   1553                {
   1554                  *pBuf++ = LO_UINT16( reportRec->timeoutPeriod );
   1555                  *pBuf++ = HI_UINT16( reportRec->timeoutPeriod );
   1556                }
   1557              } // for loop
   1558          
   1559              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_CONFIG_REPORT, FALSE,
   1560                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
   1561              zcl_mem_free( buf );
   1562            }
   1563            else
   1564            {
   1565              status = ZMemError;
   1566            }
   1567          
   1568            return ( status );
   1569          }
   1570          #endif
   1571          
   1572          #ifdef ZCL_REPORTING_DEVICE
   1573          /*********************************************************************
   1574           * @fn      zcl_SendConfigReportRspCmd
   1575           *
   1576           * @brief   Send a Configure Reporting Response command
   1577           *
   1578           * @param   dstAddr - destination address
   1579           * @param   clusterID - cluster ID
   1580           * @param   cfgReportRspCmd - configure reporting response command to be sent
   1581           * @param   direction - direction of the command
   1582           * @param   seqNum - transaction sequence number
   1583           *
   1584           * @return  ZSuccess if OK
   1585           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1586          ZStatus_t zcl_SendConfigReportRspCmd( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zcl_SendConfigReportRspCmd:
   1587                              uint16 clusterID, zclCfgReportRspCmd_t *cfgReportRspCmd,
   1588                              uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
   1589          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V2,R1
   \   000007   8A..         MOV       ?V8,R2
   \   000009   8B..         MOV       ?V9,R3
   \   00000B   EC           MOV       A,R4
   \   00000C   FE           MOV       R6,A
   \   00000D   ED           MOV       A,R5
   \   00000E   FF           MOV       R7,A
   \   00000F   7414         MOV       A,#0x14
   \   000011   12....       LCALL     ?XSTACK_DISP0_8
   \   000014   12....       LCALL     ?Subroutine62 & 0xFFFF
   1590            uint16 dataLen;
   1591            uint8 *buf;
   1592            ZStatus_t status;
   1593          
   1594            // Atrribute list (Status, Direction and Attribute ID)
   1595            dataLen = cfgReportRspCmd->numAttr * ( 1 + 1 + 2 );
   \                     ??CrossCallReturnLabel_90:
   \   000017   F5..         MOV       ?V0,A
   \   000019   75..00       MOV       ?V1,#0x0
   \   00001C   7402         MOV       A,#0x2
   \   00001E   78..         MOV       R0,#?V0
   \   000020   12....       LCALL     ?S_SHL
   \   000023   85....       MOV       ?V6,?V0
   \   000026   85....       MOV       ?V7,?V1
   1596          
   1597            buf = zcl_mem_alloc( dataLen );
   \   000029                ; Setup parameters for call to function osal_mem_alloc
   \   000029   AA..         MOV       R2,?V6
   \   00002B   AB..         MOV       R3,?V7
   \   00002D   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000030   8A..         MOV       ?V0,R2
   \   000032   8B..         MOV       ?V1,R3
   1598            if ( buf != NULL )
   \   000034   EA           MOV       A,R2
   \   000035   45..         ORL       A,?V1
   \   000037   7003         JNZ       $+5
   \   000039   02....       LJMP      ??zcl_SendConfigReportRspCmd_0 & 0xFFFF
   1599            {
   1600              // Load the buffer - serially
   1601              uint8 *pBuf = buf;
   1602              uint8 i;
   1603          
   1604              for ( i = 0; i < cfgReportRspCmd->numAttr; i++ )
   \   00003C   7900         MOV       R1,#0x0
   \   00003E   803E         SJMP      ??zcl_SendConfigReportRspCmd_1
   1605              {
   1606                *pBuf++ = cfgReportRspCmd->attrList[i].status;
   \                     ??zcl_SendConfigReportRspCmd_2:
   \   000040   E9           MOV       A,R1
   \   000041   F5..         MOV       ?V10,A
   \   000043   75..00       MOV       ?V11,#0x0
   \   000046   7402         MOV       A,#0x2
   \   000048   78..         MOV       R0,#?V10
   \   00004A   12....       LCALL     ?S_SHL
   \   00004D   E5..         MOV       A,?V4
   \   00004F   25..         ADD       A,?V10
   \   000051   FC           MOV       R4,A
   \   000052   E5..         MOV       A,?V5
   \   000054   35..         ADDC      A,?V11
   \   000056   FD           MOV       R5,A
   \   000057   8C82         MOV       DPL,R4
   \   000059   8D83         MOV       DPH,R5
   \   00005B   A3           INC       DPTR
   \   00005C   12....       LCALL     ??Subroutine205_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_374:
   \   00005F   12....       LCALL     ??Subroutine208_0 & 0xFFFF
   1607                *pBuf++ = cfgReportRspCmd->attrList[i].direction;
   \                     ??CrossCallReturnLabel_398:
   \   000062   A3           INC       DPTR
   \   000063   12....       LCALL     ??Subroutine205_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_375:
   \   000066   A3           INC       DPTR
   \   000067   F0           MOVX      @DPTR,A
   1608                *pBuf++ = LO_UINT16( cfgReportRspCmd->attrList[i].attrID );
   \   000068   EC           MOV       A,R4
   \   000069   2403         ADD       A,#0x3
   \   00006B   FC           MOV       R4,A
   \   00006C   5001         JNC       ??zcl_SendConfigReportRspCmd_3
   \   00006E   0D           INC       R5
   \                     ??zcl_SendConfigReportRspCmd_3:
   \   00006F   8C82         MOV       DPL,R4
   \   000071   8D83         MOV       DPH,R5
   \   000073   E0           MOVX      A,@DPTR
   \   000074   12....       LCALL     ?Subroutine41 & 0xFFFF
   1609                *pBuf++ = HI_UINT16( cfgReportRspCmd->attrList[i].attrID );
   1610              }
   \                     ??CrossCallReturnLabel_396:
   \   000077   12....       LCALL     ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_137:
   \   00007A   5001         JNC       ??zcl_SendConfigReportRspCmd_4
   \   00007C   0B           INC       R3
   \                     ??zcl_SendConfigReportRspCmd_4:
   \   00007D   09           INC       R1
   \                     ??zcl_SendConfigReportRspCmd_1:
   \   00007E   85..82       MOV       DPL,?V4
   \   000081   85..83       MOV       DPH,?V5
   \   000084   E0           MOVX      A,@DPTR
   \   000085   F8           MOV       R0,A
   \   000086   E9           MOV       A,R1
   \   000087   C3           CLR       C
   \   000088   98           SUBB      A,R0
   \   000089   40B5         JC        ??zcl_SendConfigReportRspCmd_2
   1611          
   1612              // If there's only a single status record and its status field is set to
   1613              // SUCCESS then omit the attribute ID field.
   1614              if ( cfgReportRspCmd->numAttr == 1 && cfgReportRspCmd->attrList[0].status == ZCL_STATUS_SUCCESS )
   \   00008B   7401         MOV       A,#0x1
   \   00008D   68           XRL       A,R0
   \   00008E   700A         JNZ       ??zcl_SendConfigReportRspCmd_5
   \   000090   A3           INC       DPTR
   \   000091   E0           MOVX      A,@DPTR
   \   000092   7006         JNZ       ??zcl_SendConfigReportRspCmd_5
   1615              {
   1616                dataLen = 1;
   \   000094   75..01       MOV       ?V6,#0x1
   \   000097   75..00       MOV       ?V7,#0x0
   1617              }
   1618          
   1619              status = zcl_SendCommand( srcEP, dstAddr, clusterID,
   1620                                        ZCL_CMD_CONFIG_REPORT_RSP, FALSE, direction,
   1621                                        disableDefaultRsp, 0, seqNum, dataLen, buf );
   \                     ??zcl_SendConfigReportRspCmd_5:
   \   00009A                ; Setup parameters for call to function zcl_SendCommand
   \   00009A   78..         MOV       R0,#?V0
   \   00009C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00009F   78..         MOV       R0,#?V6
   \   0000A1   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000A4   741C         MOV       A,#0x1c
   \   0000A6   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A9   12....       LCALL     ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   0000AC   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000AF   E4           CLR       A
   \   0000B0   F5..         MOV       ?V4,A
   \   0000B2   F5..         MOV       ?V5,A
   \   0000B4   78..         MOV       R0,#?V4
   \   0000B6   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000B9   741E         MOV       A,#0x1e
   \   0000BB   12....       LCALL     ?XSTACK_DISP0_8
   \   0000BE   12....       LCALL     ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   0000C1   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000C4   741E         MOV       A,#0x1e
   \   0000C6   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C9   12....       LCALL     ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   0000CC   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000CF   75..00       MOV       ?V3,#0x0
   \   0000D2   78..         MOV       R0,#?V3
   \   0000D4   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000D7   75..07       MOV       ?V3,#0x7
   \   0000DA   78..         MOV       R0,#?V3
   \   0000DC   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000DF   EE           MOV       A,R6
   \   0000E0   FC           MOV       R4,A
   \   0000E1   EF           MOV       A,R7
   \   0000E2   FD           MOV       R5,A
   \   0000E3   AA..         MOV       R2,?V8
   \   0000E5   AB..         MOV       R3,?V9
   \   0000E7   A9..         MOV       R1,?V2
   \   0000E9   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   0000EC   740B         MOV       A,#0xb
   \   0000EE   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000F1   E9           MOV       A,R1
   \   0000F2   FE           MOV       R6,A
   1622              zcl_mem_free( buf );
   \   0000F3                ; Setup parameters for call to function osal_mem_free
   \   0000F3   AA..         MOV       R2,?V0
   \   0000F5   AB..         MOV       R3,?V1
   \   0000F7   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0000FA   8002         SJMP      ??zcl_SendConfigReportRspCmd_6
   1623            }
   1624            else
   1625            {
   1626              status = ZMemError;
   \                     ??zcl_SendConfigReportRspCmd_0:
   \   0000FC   7E10         MOV       R6,#0x10
   1627            }
   1628          
   1629            return ( status );
   \                     ??zcl_SendConfigReportRspCmd_6:
   \   0000FE   02....       LJMP      ?Subroutine10 & 0xFFFF
   1630          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine205_0:
   \   000000   12....       LCALL     ??Subroutine221_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_448:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine82:
   \   000000   12....       LCALL     ??Subroutine221_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_444:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   F0           MOVX      @DPTR,A
   \   000007   EA           MOV       A,R2
   \   000008   2404         ADD       A,#0x4
   \   00000A   FA           MOV       R2,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   8A82         MOV       DPL,R2
   \   000002   8B83         MOV       DPH,R3
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006                REQUIRE ??Subroutine208_0
   \   000006                ; // Fall through to label ??Subroutine208_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine208_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8C82         MOV       DPL,R4
   \   000003   8D83         MOV       DPH,R5
   \   000005   A3           INC       DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine221_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   22           RET
   1631          #endif
   1632          
   1633          #ifdef ZCL_REPORT_CONFIGURING_DEVICE
   1634          /*********************************************************************
   1635           * @fn      zcl_SendReadReportCfgCmd
   1636           *
   1637           * @brief   Send a Read Reporting Configuration command
   1638           *
   1639           * @param   dstAddr - destination address
   1640           * @param   clusterID - cluster ID
   1641           * @param   readReportCfgCmd - read reporting configuration command to be sent
   1642           * @param   direction - direction of the command
   1643           * @param   seqNum - transaction sequence number
   1644           *
   1645           * @return  ZSuccess if OK
   1646           */
   1647          ZStatus_t zcl_SendReadReportCfgCmd( uint8 srcEP, afAddrType_t *dstAddr,
   1648                            uint16 clusterID, zclReadReportCfgCmd_t *readReportCfgCmd,
   1649                            uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
   1650          {
   1651            uint16 dataLen;
   1652            uint8 *buf;
   1653            ZStatus_t status;
   1654          
   1655            dataLen = readReportCfgCmd->numAttr * ( 1 + 2 ); // Direction + Atrribute ID
   1656          
   1657            buf = zcl_mem_alloc( dataLen );
   1658            if ( buf != NULL )
   1659            {
   1660              // Load the buffer - serially
   1661              uint8 *pBuf = buf;
   1662              uint8 i;
   1663          
   1664              for ( i = 0; i < readReportCfgCmd->numAttr; i++ )
   1665              {
   1666                *pBuf++ = readReportCfgCmd->attrList[i].direction;
   1667                *pBuf++ = LO_UINT16( readReportCfgCmd->attrList[i].attrID );
   1668                *pBuf++ = HI_UINT16( readReportCfgCmd->attrList[i].attrID );
   1669              }
   1670          
   1671              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_READ_REPORT_CFG, FALSE,
   1672                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
   1673              zcl_mem_free( buf );
   1674            }
   1675            else
   1676            {
   1677              status = ZMemError;
   1678            }
   1679          
   1680            return ( status );
   1681          }
   1682          #endif
   1683          
   1684          #ifdef ZCL_REPORTING_DEVICE
   1685          /*********************************************************************
   1686           * @fn      zcl_SendReadReportCfgRspCmd
   1687           *
   1688           * @brief   Send a Read Reporting Configuration Response command
   1689           *
   1690           * @param   dstAddr - destination address
   1691           * @param   clusterID - cluster ID
   1692           * @param   readReportCfgRspCmd - read reporting configuration response command to be sent
   1693           * @param   direction - direction of the command
   1694           * @param   seqNum - transaction sequence number
   1695           *
   1696           * @return  ZSuccess if OK
   1697           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1698          ZStatus_t zcl_SendReadReportCfgRspCmd( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zcl_SendReadReportCfgRspCmd:
   1699                       uint16 clusterID, zclReadReportCfgRspCmd_t *readReportCfgRspCmd,
   1700                       uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
   1701          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV       A,#-0x18
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   85..82       MOV       DPL,?XSP + 0
   \   00000D   85..83       MOV       DPH,?XSP + 1
   \   000010   12....       LCALL     ??Subroutine244_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_575:
   \   000013   89..         MOV       ?V1,R1
   \   000015   8C..         MOV       ?V12,R4
   \   000017   8D..         MOV       ?V13,R5
   1702            uint8 *buf;
   1703            uint16 dataLen = 0;
   \   000019   7E00         MOV       R6,#0x0
   \   00001B   7F00         MOV       R7,#0x0
   1704            ZStatus_t status;
   1705            uint8 i;
   1706          
   1707            // Find out the data length
   1708            for ( i = 0; i < readReportCfgRspCmd->numAttr; i++ )
   \   00001D   75..00       MOV       ?V0,#0x0
   \   000020   741A         MOV       A,#0x1a
   \   000022   12....       LCALL     ?XSTACK_DISP0_8
   \   000025   12....       LCALL     ??Subroutine233_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_537:
   \   000028   8009         SJMP      ??zcl_SendReadReportCfgRspCmd_0
   1709            {
   1710              zclReportCfgRspRec_t *reportRspRec = &(readReportCfgRspCmd->attrList[i]);
   1711          
   1712              dataLen += 1 + 1 + 2 ; // Status, Direction and Atrribute ID
   1713          
   1714              if ( reportRspRec->status == ZCL_STATUS_SUCCESS )
   1715              {
   1716                if ( reportRspRec->direction == ZCL_SEND_ATTR_REPORTS )
   1717                {
   1718                  dataLen += 1 + 2 + 2; // Data Type + Min + Max Reporting Intervals
   1719          
   1720                  // Find out the size of the Reportable Change field (for Analog data types)
   1721                  if ( zclAnalogDataType( reportRspRec->dataType ) )
   1722                  {
   1723                    dataLen += zclGetDataTypeLength( reportRspRec->dataType );
   1724                  }
   1725                }
   1726                else
   1727                {
   1728                  dataLen += 2; // Timeout Period
   \                     ??zcl_SendReadReportCfgRspCmd_1:
   \   00002A   EE           MOV       A,R6
   \   00002B   2402         ADD       A,#0x2
   \                     ??zcl_SendReadReportCfgRspCmd_2:
   \   00002D   FE           MOV       R6,A
   \   00002E   E4           CLR       A
   \   00002F   3F           ADDC      A,R7
   \   000030   FF           MOV       R7,A
   1729                }
   \                     ??zcl_SendReadReportCfgRspCmd_3:
   \   000031   05..         INC       ?V0
   \                     ??zcl_SendReadReportCfgRspCmd_0:
   \   000033   12....       LCALL     ?Subroutine86 & 0xFFFF
   \                     ??CrossCallReturnLabel_633:
   \   000036   5041         JNC       ??zcl_SendReadReportCfgRspCmd_4
   \   000038   E5..         MOV       A,?V0
   \   00003A   75F00D       MOV       B,#0xd
   \   00003D   12....       LCALL     ?Subroutine138 & 0xFFFF
   \                     ??CrossCallReturnLabel_246:
   \   000040   2404         ADD       A,#0x4
   \   000042   FE           MOV       R6,A
   \   000043   E4           CLR       A
   \   000044   3F           ADDC      A,R7
   \   000045   FF           MOV       R7,A
   \   000046   E0           MOVX      A,@DPTR
   \   000047   70E8         JNZ       ??zcl_SendReadReportCfgRspCmd_3
   \   000049   A3           INC       DPTR
   \   00004A   E0           MOVX      A,@DPTR
   \   00004B   70DD         JNZ       ??zcl_SendReadReportCfgRspCmd_1
   \   00004D   EE           MOV       A,R6
   \   00004E   2405         ADD       A,#0x5
   \   000050   FE           MOV       R6,A
   \   000051   E4           CLR       A
   \   000052   3F           ADDC      A,R7
   \   000053   FF           MOV       R7,A
   \   000054   E8           MOV       A,R0
   \   000055   2404         ADD       A,#0x4
   \   000057   F5..         MOV       ?V2,A
   \   000059   E4           CLR       A
   \   00005A   39           ADDC      A,R1
   \   00005B   F5..         MOV       ?V3,A
   \   00005D                ; Setup parameters for call to function zclAnalogDataType
   \   00005D   85..82       MOV       DPL,?V2
   \   000060   F583         MOV       DPH,A
   \   000062   E0           MOVX      A,@DPTR
   \   000063   F9           MOV       R1,A
   \   000064   12....       LCALL     `??zclAnalogDataType::?relay`; Banked call to: zclAnalogDataType
   \   000067   E9           MOV       A,R1
   \   000068   60C7         JZ        ??zcl_SendReadReportCfgRspCmd_3
   \   00006A                ; Setup parameters for call to function zclGetDataTypeLength
   \   00006A   85..82       MOV       DPL,?V2
   \   00006D   85..83       MOV       DPH,?V3
   \   000070   E0           MOVX      A,@DPTR
   \   000071   F9           MOV       R1,A
   \   000072   12....       LCALL     `??zclGetDataTypeLength::?relay`; Banked call to: zclGetDataTypeLength
   \   000075   EE           MOV       A,R6
   \   000076   29           ADD       A,R1
   \   000077   80B4         SJMP      ??zcl_SendReadReportCfgRspCmd_2
   1730              }
   1731            }
   1732          
   1733            buf = zcl_mem_alloc( dataLen );
   \                     ??zcl_SendReadReportCfgRspCmd_4:
   \   000079                ; Setup parameters for call to function osal_mem_alloc
   \   000079   EE           MOV       A,R6
   \   00007A   FA           MOV       R2,A
   \   00007B   EF           MOV       A,R7
   \   00007C   FB           MOV       R3,A
   \   00007D   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000080   8A..         MOV       ?V2,R2
   \   000082   8B..         MOV       ?V3,R3
   1734            if ( buf != NULL )
   \   000084   EA           MOV       A,R2
   \   000085   45..         ORL       A,?V3
   \   000087   7003         JNZ       $+5
   \   000089   02....       LJMP      ??zcl_SendReadReportCfgRspCmd_5 & 0xFFFF
   1735            {
   1736              // Load the buffer - serially
   1737              uint8 *pBuf = buf;
   \   00008C   8A..         MOV       ?V6,R2
   \   00008E   8B..         MOV       ?V7,R3
   1738          
   1739              for ( i = 0; i < readReportCfgRspCmd->numAttr; i++ )
   \   000090   75..00       MOV       ?V0,#0x0
   \   000093   801C         SJMP      ??zcl_SendReadReportCfgRspCmd_6
   1740              {
   1741                zclReportCfgRspRec_t *reportRspRec = &(readReportCfgRspCmd->attrList[i]);
   1742          
   1743                *pBuf++ = reportRspRec->status;
   1744                *pBuf++ = reportRspRec->direction;
   1745                *pBuf++ = LO_UINT16( reportRspRec->attrID );
   1746                *pBuf++ = HI_UINT16( reportRspRec->attrID );
   1747          
   1748                if ( reportRspRec->status == ZCL_STATUS_SUCCESS )
   1749                {
   1750                  if ( reportRspRec->direction == ZCL_SEND_ATTR_REPORTS )
   1751                  {
   1752                    *pBuf++ = reportRspRec->dataType;
   1753                    *pBuf++ = LO_UINT16( reportRspRec->minReportInt );
   1754                    *pBuf++ = HI_UINT16( reportRspRec->minReportInt );
   1755                    *pBuf++ = LO_UINT16( reportRspRec->maxReportInt );
   1756                    *pBuf++ = HI_UINT16( reportRspRec->maxReportInt );
   1757          
   1758                    if ( zclAnalogDataType( reportRspRec->dataType ) )
   1759                    {
   1760                      pBuf = zclSerializeData( reportRspRec->dataType,
   1761                                               reportRspRec->reportableChange, pBuf );
   1762                    }
   1763                  }
   1764                  else
   1765                  {
   1766                    *pBuf++ = LO_UINT16( reportRspRec->timeoutPeriod );
   \                     ??zcl_SendReadReportCfgRspCmd_7:
   \   000095   E5..         MOV       A,?V4
   \   000097   2409         ADD       A,#0x9
   \   000099   FA           MOV       R2,A
   \   00009A   E4           CLR       A
   \   00009B   35..         ADDC      A,?V5
   \   00009D   FB           MOV       R3,A
   \   00009E   8A82         MOV       DPL,R2
   \   0000A0   8B83         MOV       DPH,R3
   \   0000A2   12....       LCALL     ?Subroutine178 & 0xFFFF
   1767                    *pBuf++ = HI_UINT16( reportRspRec->timeoutPeriod );
   1768                  }
   \                     ??CrossCallReturnLabel_313:
   \   0000A5   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   0000A8   12....       LCALL     ??Subroutine200_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_356:
   \   0000AB   8C..         MOV       ?V6,R4
   \   0000AD   8D..         MOV       ?V7,R5
   \                     ??zcl_SendReadReportCfgRspCmd_8:
   \   0000AF   05..         INC       ?V0
   \                     ??zcl_SendReadReportCfgRspCmd_6:
   \   0000B1   12....       LCALL     ?Subroutine86 & 0xFFFF
   \                     ??CrossCallReturnLabel_634:
   \   0000B4   4003         JC        $+5
   \   0000B6   02....       LJMP      ??zcl_SendReadReportCfgRspCmd_9 & 0xFFFF
   \   0000B9   E5..         MOV       A,?V0
   \   0000BB   75F00D       MOV       B,#0xd
   \   0000BE   12....       LCALL     ?Subroutine182 & 0xFFFF
   \                     ??CrossCallReturnLabel_321:
   \   0000C1   12....       LCALL     ?Subroutine196 & 0xFFFF
   \                     ??CrossCallReturnLabel_336:
   \   0000C4   8582..       MOV       ?V4,DPL
   \   0000C7   8583..       MOV       ?V5,DPH
   \   0000CA   12....       LCALL     ?Subroutine124 & 0xFFFF
   \                     ??CrossCallReturnLabel_214:
   \   0000CD   85..82       MOV       DPL,?V4
   \   0000D0   85..83       MOV       DPH,?V5
   \   0000D3   A3           INC       DPTR
   \   0000D4   AA82         MOV       R2,DPL
   \   0000D6   AB83         MOV       R3,DPH
   \   0000D8   12....       LCALL     ?Subroutine125 & 0xFFFF
   \                     ??CrossCallReturnLabel_216:
   \   0000DB   F0           MOVX      @DPTR,A
   \   0000DC   E5..         MOV       A,?V4
   \   0000DE   2402         ADD       A,#0x2
   \   0000E0   F8           MOV       R0,A
   \   0000E1   E4           CLR       A
   \   0000E2   35..         ADDC      A,?V5
   \   0000E4   F9           MOV       R1,A
   \   0000E5   8882         MOV       DPL,R0
   \   0000E7   8983         MOV       DPH,R1
   \   0000E9   12....       LCALL     ?Subroutine178 & 0xFFFF
   \                     ??CrossCallReturnLabel_314:
   \   0000EC   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   0000EF   F0           MOVX      @DPTR,A
   \   0000F0   E5..         MOV       A,?V6
   \   0000F2   2404         ADD       A,#0x4
   \   0000F4   F5..         MOV       ?V6,A
   \   0000F6   5002         JNC       ??zcl_SendReadReportCfgRspCmd_10
   \   0000F8   05..         INC       ?V7
   \                     ??zcl_SendReadReportCfgRspCmd_10:
   \   0000FA   85..82       MOV       DPL,?V4
   \   0000FD   85..83       MOV       DPH,?V5
   \   000100   E0           MOVX      A,@DPTR
   \   000101   70AC         JNZ       ??zcl_SendReadReportCfgRspCmd_8
   \   000103   E5..         MOV       A,?V6
   \   000105   2402         ADD       A,#0x2
   \   000107   FC           MOV       R4,A
   \   000108   E4           CLR       A
   \   000109   35..         ADDC      A,?V7
   \   00010B   FD           MOV       R5,A
   \   00010C   85..82       MOV       DPL,?V6
   \   00010F   85..83       MOV       DPH,?V7
   \   000112   A3           INC       DPTR
   \   000113   A882         MOV       R0,DPL
   \   000115   A983         MOV       R1,DPH
   \   000117   8A82         MOV       DPL,R2
   \   000119   8B83         MOV       DPH,R3
   \   00011B   E0           MOVX      A,@DPTR
   \   00011C   6003         JZ        $+5
   \   00011E   02....       LJMP      ??zcl_SendReadReportCfgRspCmd_7 & 0xFFFF
   \   000121   E5..         MOV       A,?V4
   \   000123   2404         ADD       A,#0x4
   \   000125   F5..         MOV       ?V10,A
   \   000127   E4           CLR       A
   \   000128   35..         ADDC      A,?V5
   \   00012A   F5..         MOV       ?V11,A
   \   00012C   85..82       MOV       DPL,?V10
   \   00012F   F583         MOV       DPH,A
   \   000131   12....       LCALL     ?Subroutine124 & 0xFFFF
   \                     ??CrossCallReturnLabel_215:
   \   000134   E5..         MOV       A,?V4
   \   000136   2405         ADD       A,#0x5
   \   000138   F5..         MOV       ?V14,A
   \   00013A   E4           CLR       A
   \   00013B   35..         ADDC      A,?V5
   \   00013D   F5..         MOV       ?V15,A
   \   00013F   85..82       MOV       DPL,?V14
   \   000142   12....       LCALL     ?Subroutine88 & 0xFFFF
   \                     ??CrossCallReturnLabel_357:
   \   000145   85..82       MOV       DPL,?V14
   \   000148   85..83       MOV       DPH,?V15
   \   00014B   12....       LCALL     ??Subroutine219_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_440:
   \   00014E   F0           MOVX      @DPTR,A
   \   00014F   E5..         MOV       A,?V4
   \   000151   2407         ADD       A,#0x7
   \   000153   F8           MOV       R0,A
   \   000154   E4           CLR       A
   \   000155   35..         ADDC      A,?V5
   \   000157   F9           MOV       R1,A
   \   000158   8882         MOV       DPL,R0
   \   00015A   8983         MOV       DPH,R1
   \   00015C   12....       LCALL     ?Subroutine125 & 0xFFFF
   \                     ??CrossCallReturnLabel_217:
   \   00015F   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   000162   A3           INC       DPTR
   \   000163   F0           MOVX      @DPTR,A
   \   000164   E5..         MOV       A,?V6
   \   000166   2405         ADD       A,#0x5
   \   000168   F5..         MOV       ?V6,A
   \   00016A   5002         JNC       ??zcl_SendReadReportCfgRspCmd_11
   \   00016C   05..         INC       ?V7
   \                     ??zcl_SendReadReportCfgRspCmd_11:
   \   00016E                ; Setup parameters for call to function zclAnalogDataType
   \   00016E   85..82       MOV       DPL,?V10
   \   000171   85..83       MOV       DPH,?V11
   \   000174   E0           MOVX      A,@DPTR
   \   000175   F9           MOV       R1,A
   \   000176   12....       LCALL     `??zclAnalogDataType::?relay`; Banked call to: zclAnalogDataType
   \   000179   E9           MOV       A,R1
   \   00017A   7003         JNZ       $+5
   \   00017C   02....       LJMP      ??zcl_SendReadReportCfgRspCmd_8 & 0xFFFF
   \   00017F                ; Setup parameters for call to function zclSerializeData
   \   00017F   AC..         MOV       R4,?V6
   \   000181   AD..         MOV       R5,?V7
   \   000183   E5..         MOV       A,?V4
   \   000185   240B         ADD       A,#0xb
   \   000187   F582         MOV       DPL,A
   \   000189   E4           CLR       A
   \   00018A   35..         ADDC      A,?V5
   \   00018C   F583         MOV       DPH,A
   \   00018E   12....       LCALL     ??Subroutine224_0 & 0xFFFF
   1769                }
   1770              }
   \                     ??CrossCallReturnLabel_452:
   \   000191   85..82       MOV       DPL,?V10
   \   000194   85..83       MOV       DPH,?V11
   \   000197   E0           MOVX      A,@DPTR
   \   000198   F9           MOV       R1,A
   \   000199   12....       LCALL     `??zclSerializeData::?relay`; Banked call to: zclSerializeData
   \   00019C   8A..         MOV       ?V6,R2
   \   00019E   8B..         MOV       ?V7,R3
   \   0001A0   02....       LJMP      ??zcl_SendReadReportCfgRspCmd_8 & 0xFFFF
   1771          
   1772              status = zcl_SendCommand( srcEP, dstAddr, clusterID,
   1773                                        ZCL_CMD_READ_REPORT_CFG_RSP, FALSE,
   1774                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
   \                     ??zcl_SendReadReportCfgRspCmd_9:
   \   0001A3                ; Setup parameters for call to function zcl_SendCommand
   \   0001A3   78..         MOV       R0,#?V2
   \   0001A5   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001A8   8E..         MOV       ?V4,R6
   \   0001AA   8F..         MOV       ?V5,R7
   \   0001AC   78..         MOV       R0,#?V4
   \   0001AE   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001B1   7422         MOV       A,#0x22
   \   0001B3   12....       LCALL     ?XSTACK_DISP0_8
   \   0001B6   12....       LCALL     ?Subroutine63 & 0xFFFF
   \                     ??CrossCallReturnLabel_94:
   \   0001B9   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001BC   E4           CLR       A
   \   0001BD   F5..         MOV       ?V4,A
   \   0001BF   F5..         MOV       ?V5,A
   \   0001C1   78..         MOV       R0,#?V4
   \   0001C3   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001C6   7424         MOV       A,#0x24
   \   0001C8   12....       LCALL     ?XSTACK_DISP0_8
   \   0001CB   12....       LCALL     ?Subroutine63 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   0001CE   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001D1   7424         MOV       A,#0x24
   \   0001D3   12....       LCALL     ?XSTACK_DISP0_8
   \   0001D6   12....       LCALL     ?Subroutine63 & 0xFFFF
   \                     ??CrossCallReturnLabel_96:
   \   0001D9   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001DC   75..00       MOV       ?V0,#0x0
   \   0001DF   78..         MOV       R0,#?V0
   \   0001E1   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001E4   75..09       MOV       ?V0,#0x9
   \   0001E7   78..         MOV       R0,#?V0
   \   0001E9   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001EC   AC..         MOV       R4,?V12
   \   0001EE   AD..         MOV       R5,?V13
   \   0001F0   740B         MOV       A,#0xb
   \   0001F2   12....       LCALL     ?XSTACK_DISP0_8
   \   0001F5   12....       LCALL     ??Subroutine224_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_453:
   \   0001F8   A9..         MOV       R1,?V1
   \   0001FA   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   0001FD   740B         MOV       A,#0xb
   \   0001FF   12....       LCALL     ?DEALLOC_XSTACK8
   \   000202   E9           MOV       A,R1
   \   000203   FE           MOV       R6,A
   1775              zcl_mem_free( buf );
   \   000204                ; Setup parameters for call to function osal_mem_free
   \   000204   AA..         MOV       R2,?V2
   \   000206   AB..         MOV       R3,?V3
   \   000208   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   00020B   8002         SJMP      ??zcl_SendReadReportCfgRspCmd_12
   1776            }
   1777            else
   1778            {
   1779              status = ZMemError;
   \                     ??zcl_SendReadReportCfgRspCmd_5:
   \   00020D   7E10         MOV       R6,#0x10
   1780            }
   1781          
   1782            return ( status );
   \                     ??zcl_SendReadReportCfgRspCmd_12:
   \   00020F   EE           MOV       A,R6
   \   000210   F9           MOV       R1,A
   \   000211   7402         MOV       A,#0x2
   \   000213   02....       LJMP      ?Subroutine5 & 0xFFFF
   1783          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine125:
   \   000000   12....       LCALL     ?Subroutine177 & 0xFFFF
   \                     ??CrossCallReturnLabel_312:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine177:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   85..82       MOV       DPL,?V6
   \   000004   85..83       MOV       DPH,?V7
   \   000007   A3           INC       DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine124:
   \   000000   12....       LCALL     ?Subroutine178 & 0xFFFF
   \                     ??CrossCallReturnLabel_315:
   \   000003   F0           MOVX      @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine178:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   85..82       MOV       DPL,?V6
   \   000004   85..83       MOV       DPH,?V7
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine88:
   \   000000   F583         MOV       DPH,A
   \   000002                REQUIRE ??Subroutine200_0
   \   000002                ; // Fall through to label ??Subroutine200_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   12....       LCALL     ?Subroutine152 & 0xFFFF
   \                     ??CrossCallReturnLabel_368:
   \   000005   12....       LCALL     ?Subroutine177 & 0xFFFF
   \                     ??CrossCallReturnLabel_311:
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine152:
   \   000000   12....       LCALL     ?Subroutine197 & 0xFFFF
   \                     ??CrossCallReturnLabel_373:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine219_0:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine220_0
   \   000001                ; // Fall through to label ??Subroutine220_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine220_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8C82         MOV       DPL,R4
   \   000003   8D83         MOV       DPH,R5
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine86:
   \   000000   85..82       MOV       DPL,?V8
   \   000003   85..83       MOV       DPH,?V9
   \   000006                REQUIRE ??Subroutine251_0
   \   000006                ; // Fall through to label ??Subroutine251_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine251_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   E5..         MOV       A,?V0
   \   000004   C3           CLR       C
   \   000005   98           SUBB      A,R0
   \   000006   22           RET
   1784          
   1785          /*********************************************************************
   1786           * @fn      zcl_SendReportCmd
   1787           *
   1788           * @brief   Send a Report command
   1789           *
   1790           * @param   dstAddr - destination address
   1791           * @param   clusterID - cluster ID
   1792           * @param   reportCmd - report command to be sent
   1793           * @param   direction - direction of the command
   1794           * @param   seqNum - transaction sequence number
   1795           *
   1796           * @return  ZSuccess if OK
   1797           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1798          ZStatus_t zcl_SendReportCmd( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zcl_SendReportCmd:
   1799                                       uint16 clusterID, zclReportCmd_t *reportCmd,
   1800                                       uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
   1801          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV       A,#-0x16
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V3,R1
   \   000007   8A..         MOV       ?V8,R2
   \   000009   8B..         MOV       ?V9,R3
   \   00000B   8C..         MOV       ?V6,R4
   \   00000D   8D..         MOV       ?V7,R5
   1802            uint16 dataLen = 0;
   \   00000F   7E00         MOV       R6,#0x0
   \   000011   7F00         MOV       R7,#0x0
   1803            uint8 *buf;
   1804            ZStatus_t status;
   1805            uint8 i;
   1806          
   1807            // calculate the size of the command
   1808            for ( i = 0; i < reportCmd->numAttr; i++ )
   \   000013   75..00       MOV       ?V2,#0x0
   \   000016   7416         MOV       A,#0x16
   \   000018   12....       LCALL     ?XSTACK_DISP0_8
   \   00001B   12....       LCALL     ?Subroutine109 & 0xFFFF
   \                     ??CrossCallReturnLabel_183:
   \   00001E   8009         SJMP      ??CrossCallReturnLabel_250
   1809            {
   1810              zclReport_t *reportRec = &(reportCmd->attrList[i]);
   \                     ??zcl_SendReportCmd_0:
   \   000020   12....       LCALL     ?Subroutine78 & 0xFFFF
   1811          
   1812              dataLen += 2 + 1; // Attribute ID + data type
   1813          
   1814              // Attribute Data
   1815              dataLen += zclGetAttrDataLength( reportRec->dataType, reportRec->attrData );
   1816            }
   \                     ??CrossCallReturnLabel_132:
   \   000023   12....       LCALL     `??zclGetAttrDataLength::?relay`; Banked call to: zclGetAttrDataLength
   \   000026   12....       LCALL     ?Subroutine140 & 0xFFFF
   \                     ??CrossCallReturnLabel_250:
   \   000029   85..82       MOV       DPL,?V4
   \   00002C   85..83       MOV       DPH,?V5
   \   00002F   12....       LCALL     ??Subroutine229_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_510:
   \   000032   40EC         JC        ??zcl_SendReportCmd_0
   1817          
   1818            buf = zcl_mem_alloc( dataLen );
   \   000034                ; Setup parameters for call to function osal_mem_alloc
   \   000034   EE           MOV       A,R6
   \   000035   FA           MOV       R2,A
   \   000036   EF           MOV       A,R7
   \   000037   FB           MOV       R3,A
   \   000038   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00003B   8A..         MOV       ?V0,R2
   \   00003D   8B..         MOV       ?V1,R3
   1819            if ( buf != NULL )
   \   00003F   EA           MOV       A,R2
   \   000040   45..         ORL       A,?V1
   \   000042   7003         JNZ       $+5
   \   000044   02....       LJMP      ??zcl_SendReportCmd_1 & 0xFFFF
   1820            {
   1821              // Load the buffer - serially
   1822              uint8 *pBuf = buf;
   \   000047   A8..         MOV       R0,?V0
   \   000049   A9..         MOV       R1,?V1
   1823          
   1824              for ( i = 0; i < reportCmd->numAttr; i++ )
   \   00004B   75..00       MOV       ?V2,#0x0
   \   00004E   8010         SJMP      ??zcl_SendReportCmd_2
   1825              {
   1826                zclReport_t *reportRec = &(reportCmd->attrList[i]);
   \                     ??zcl_SendReportCmd_3:
   \   000050   12....       LCALL     ?Subroutine14 & 0xFFFF
   1827          
   1828                *pBuf++ = LO_UINT16( reportRec->attrID );
   1829                *pBuf++ = HI_UINT16( reportRec->attrID );
   1830                *pBuf++ = reportRec->dataType;
   1831          
   1832                pBuf = zclSerializeData( reportRec->dataType, reportRec->attrData, pBuf );
   1833              }
   \                     ??CrossCallReturnLabel_1:
   \   000053   12....       LCALL     `??zclSerializeData::?relay`; Banked call to: zclSerializeData
   \   000056   8A..         MOV       ?V10,R2
   \   000058   8B..         MOV       ?V11,R3
   \   00005A   A8..         MOV       R0,?V10
   \   00005C   A9..         MOV       R1,?V11
   \   00005E   05..         INC       ?V2
   \                     ??zcl_SendReportCmd_2:
   \   000060   85..82       MOV       DPL,?V4
   \   000063   85..83       MOV       DPH,?V5
   \   000066   E0           MOVX      A,@DPTR
   \   000067   FA           MOV       R2,A
   \   000068   E5..         MOV       A,?V2
   \   00006A   C3           CLR       C
   \   00006B   9A           SUBB      A,R2
   \   00006C   40E2         JC        ??zcl_SendReportCmd_3
   1834          
   1835              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_REPORT, FALSE,
   1836                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
   \   00006E                ; Setup parameters for call to function zcl_SendCommand
   \   00006E   78..         MOV       R0,#?V0
   \   000070   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000073   8E..         MOV       ?V4,R6
   \   000075   8F..         MOV       ?V5,R7
   \   000077   78..         MOV       R0,#?V4
   \   000079   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00007C   741E         MOV       A,#0x1e
   \   00007E   12....       LCALL     ?XSTACK_DISP0_8
   \   000081   12....       LCALL     ??Subroutine207_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_384:
   \   000084   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000087   E4           CLR       A
   \   000088   F5..         MOV       ?V4,A
   \   00008A   F5..         MOV       ?V5,A
   \   00008C   78..         MOV       R0,#?V4
   \   00008E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000091   7420         MOV       A,#0x20
   \   000093   12....       LCALL     ?XSTACK_DISP0_8
   \   000096   12....       LCALL     ??Subroutine207_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_385:
   \   000099   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00009C   7420         MOV       A,#0x20
   \   00009E   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A1   12....       LCALL     ??Subroutine207_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_386:
   \   0000A4   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000A7   75..00       MOV       ?V2,#0x0
   \   0000AA   78..         MOV       R0,#?V2
   \   0000AC   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000AF   75..0A       MOV       ?V2,#0xa
   \   0000B2   78..         MOV       R0,#?V2
   \   0000B4   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000B7   AC..         MOV       R4,?V6
   \   0000B9   AD..         MOV       R5,?V7
   \   0000BB   AA..         MOV       R2,?V8
   \   0000BD   AB..         MOV       R3,?V9
   \   0000BF   A9..         MOV       R1,?V3
   \   0000C1   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   0000C4   740B         MOV       A,#0xb
   \   0000C6   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000C9   E9           MOV       A,R1
   \   0000CA   FE           MOV       R6,A
   1837              zcl_mem_free( buf );
   \   0000CB                ; Setup parameters for call to function osal_mem_free
   \   0000CB   AA..         MOV       R2,?V0
   \   0000CD   AB..         MOV       R3,?V1
   \   0000CF   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0000D2   8002         SJMP      ??zcl_SendReportCmd_4
   1838            }
   1839            else
   1840            {
   1841              status = ZMemError;
   \                     ??zcl_SendReportCmd_1:
   \   0000D4   7E10         MOV       R6,#0x10
   1842            }
   1843          
   1844            return ( status );
   \                     ??zcl_SendReportCmd_4:
   \   0000D6   02....       LJMP      ?Subroutine12 & 0xFFFF
   1845          }
   1846          #endif
   1847          
   1848          /*********************************************************************
   1849           * @fn      zcl_SendDefaultRspCmd
   1850           *
   1851           * @brief   Send a Default Response command
   1852           *
   1853           *          Note: The manufacturer code field should be set if this
   1854           *          command is being sent in response to a manufacturer specific
   1855           *          command.
   1856           *
   1857           * @param   dstAddr - destination address
   1858           * @param   clusterID - cluster ID
   1859           * @param   defaultRspCmd - default response command to be sent
   1860           * @param   direction - direction of the command
   1861           * @param   manuCode - manufacturer code for proprietary extensions to a profile
   1862           * @param   seqNum - transaction sequence number
   1863           *
   1864           * @return  ZSuccess if OK
   1865           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1866          ZStatus_t zcl_SendDefaultRspCmd( uint8 srcEP, afAddrType_t *dstAddr, uint16 clusterID,
   \                     zcl_SendDefaultRspCmd:
   1867                                           zclDefaultRspCmd_t *defaultRspCmd, uint8 direction,
   1868                                           uint8 disableDefaultRsp, uint16 manuCode, uint8 seqNum )
   1869          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
   \   00000C   740C         MOV       A,#0xc
   \   00000E   12....       LCALL     ?XSTACK_DISP0_8
   \   000011   12....       LCALL     ?Subroutine25 & 0xFFFF
   1870            uint8 buf[2]; // Command ID and Status;
   1871          
   1872            // Load the buffer - serially
   1873            buf[0] = defaultRspCmd->commandID;
   1874            buf[1] = defaultRspCmd->statusCode;
   \                     ??CrossCallReturnLabel_363:
   \   000014   C0E0         PUSH      A
   \   000016   7401         MOV       A,#0x1
   \   000018   12....       LCALL     ?XSTACK_DISP0_8
   \   00001B   D0E0         POP       A
   \   00001D   F0           MOVX      @DPTR,A
   1875          
   1876            return ( zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DEFAULT_RSP, FALSE,
   1877                                      direction, disableDefaultRsp, manuCode, seqNum, 2, buf ) );
   \   00001E                ; Setup parameters for call to function zcl_SendCommand
   \   00001E   A8..         MOV       R0,?XSP + 0
   \   000020   A9..         MOV       R1,?XSP + 1
   \   000022   88..         MOV       ?V0,R0
   \   000024   89..         MOV       ?V1,R1
   \   000026   78..         MOV       R0,#?V0
   \   000028   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002B   75..02       MOV       ?V0,#0x2
   \   00002E   75..00       MOV       ?V1,#0x0
   \   000031   78..         MOV       R0,#?V0
   \   000033   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000036   7416         MOV       A,#0x16
   \   000038   12....       LCALL     ?XSTACK_DISP0_8
   \   00003B   12....       LCALL     ?Subroutine63 & 0xFFFF
   \                     ??CrossCallReturnLabel_97:
   \   00003E   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000041   7415         MOV       A,#0x15
   \   000043   12....       LCALL     ?XSTACK_DISP0_8
   \   000046   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000049   7416         MOV       A,#0x16
   \   00004B   12....       LCALL     ?XSTACK_DISP0_8
   \   00004E   12....       LCALL     ?Subroutine63 & 0xFFFF
   \                     ??CrossCallReturnLabel_98:
   \   000051   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000054   7416         MOV       A,#0x16
   \   000056   12....       LCALL     ?XSTACK_DISP0_8
   \   000059   12....       LCALL     ?Subroutine63 & 0xFFFF
   \                     ??CrossCallReturnLabel_99:
   \   00005C   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00005F   75..00       MOV       ?V0,#0x0
   \   000062   78..         MOV       R0,#?V0
   \   000064   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000067   75..0B       MOV       ?V0,#0xb
   \   00006A   78..         MOV       R0,#?V0
   \   00006C   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00006F   EE           MOV       A,R6
   \   000070   F9           MOV       R1,A
   \   000071   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   000074   740B         MOV       A,#0xb
   \   000076   12....       LCALL     ?DEALLOC_XSTACK8
   \   000079   7402         MOV       A,#0x2
   \   00007B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00007E   02....       LJMP      ?Subroutine3 & 0xFFFF
   1878          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   12....       LCALL     ?Subroutine158 & 0xFFFF
   \                     ??CrossCallReturnLabel_408:
   \   000003   12....       LCALL     ?Subroutine192 & 0xFFFF
   \                     ??CrossCallReturnLabel_330:
   \   000006                REQUIRE ??Subroutine204_0
   \   000006                ; // Fall through to label ??Subroutine204_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine204_0:
   \   000000   12....       LCALL     ?Subroutine152 & 0xFFFF
   \                     ??CrossCallReturnLabel_369:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET
   1879          
   1880          #ifdef ZCL_DISCOVER
   1881          /*********************************************************************
   1882           * @fn      zcl_SendDiscoverCmdsCmd
   1883           *
   1884           * @brief   Send a Discover Commands command
   1885           *
   1886           * @param   dstAddr - destination address
   1887           * @param   clusterID - cluster ID
   1888           * @param   cmdType - requesting command ID
   1889           * @param   pDiscoverCmd - discover command to be sent
   1890           * @param   direction - direction of the command
   1891           * @param   seqNum - transaction sequence number
   1892           *
   1893           * @return  ZSuccess if OK
   1894           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1895          ZStatus_t zcl_SendDiscoverCmdsCmd( uint8 srcEP, afAddrType_t *dstAddr, uint16 clusterID,
   \                     zcl_SendDiscoverCmdsCmd:
   1896                                            uint8 cmdType, zclDiscoverCmdsCmd_t *pDiscoverCmd,
   1897                                            uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
   1898          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
   \   00000C   740F         MOV       A,#0xf
   \   00000E   12....       LCALL     ?XSTACK_DISP0_8
   \   000011   12....       LCALL     ?Subroutine25 & 0xFFFF
   1899            uint8 payload[2]; // size of startCmdID and maxCmdID
   1900            ZStatus_t status;
   1901          
   1902            payload[0] = pDiscoverCmd->startCmdID;
   1903            payload[1] = pDiscoverCmd->maxCmdID;
   \                     ??CrossCallReturnLabel_364:
   \   000014   C0E0         PUSH      A
   \   000016   7401         MOV       A,#0x1
   \   000018   12....       LCALL     ?XSTACK_DISP0_8
   \   00001B   D0E0         POP       A
   \   00001D   F0           MOVX      @DPTR,A
   \   00001E   7411         MOV       A,#0x11
   \   000020   12....       LCALL     ?XSTACK_DISP0_8
   \   000023   E0           MOVX      A,@DPTR
   \   000024   FF           MOV       R7,A
   \   000025   7412         MOV       A,#0x12
   \   000027   12....       LCALL     ?XSTACK_DISP0_8
   \   00002A   E0           MOVX      A,@DPTR
   \   00002B   F5..         MOV       ?V0,A
   \   00002D   7413         MOV       A,#0x13
   \   00002F   12....       LCALL     ?XSTACK_DISP0_8
   \   000032   E0           MOVX      A,@DPTR
   \   000033   F5..         MOV       ?V1,A
   1904          
   1905            // Send message for either commands received or generated
   1906            if ( cmdType == ZCL_CMD_DISCOVER_CMDS_RECEIVED )
   \   000035   740E         MOV       A,#0xe
   \   000037   12....       LCALL     ?XSTACK_DISP0_8
   \   00003A   E0           MOVX      A,@DPTR
   \   00003B   6411         XRL       A,#0x11
   \   00003D   A8..         MOV       R0,?XSP + 0
   \   00003F   A9..         MOV       R1,?XSP + 1
   \   000041   88..         MOV       ?V2,R0
   \   000043   89..         MOV       ?V3,R1
   \   000045   78..         MOV       R0,#?V2
   \   000047   7035         JNZ       ??zcl_SendDiscoverCmdsCmd_0
   1907            {
   1908              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DISCOVER_CMDS_RECEIVED, FALSE,
   1909                                          direction, disableDefaultRsp, 0, seqNum, sizeof(payload), payload );
   \   000049                ; Setup parameters for call to function zcl_SendCommand
   \   000049   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004C   75..02       MOV       ?V2,#0x2
   \   00004F   75..00       MOV       ?V3,#0x0
   \   000052   78..         MOV       R0,#?V2
   \   000054   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000057   78..         MOV       R0,#?V1
   \   000059   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00005C   E4           CLR       A
   \   00005D   F5..         MOV       ?V2,A
   \   00005F   78..         MOV       R0,#?V2
   \   000061   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000064   78..         MOV       R0,#?V0
   \   000066   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000069   EF           MOV       A,R7
   \   00006A   F5..         MOV       ?V0,A
   \   00006C   78..         MOV       R0,#?V0
   \   00006E   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000071   75..00       MOV       ?V0,#0x0
   \   000074   78..         MOV       R0,#?V0
   \   000076   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000079   75..11       MOV       ?V0,#0x11
   \   00007C   8033         SJMP      ??zcl_SendDiscoverCmdsCmd_1
   1910            }
   1911            else  // generated
   1912            {
   1913              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DISCOVER_CMDS_GEN, FALSE,
   1914                                          direction, disableDefaultRsp, 0, seqNum, sizeof(payload), payload );
   \                     ??zcl_SendDiscoverCmdsCmd_0:
   \   00007E                ; Setup parameters for call to function zcl_SendCommand
   \   00007E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000081   75..02       MOV       ?V2,#0x2
   \   000084   75..00       MOV       ?V3,#0x0
   \   000087   78..         MOV       R0,#?V2
   \   000089   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00008C   78..         MOV       R0,#?V1
   \   00008E   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000091   E4           CLR       A
   \   000092   F5..         MOV       ?V2,A
   \   000094   78..         MOV       R0,#?V2
   \   000096   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000099   78..         MOV       R0,#?V0
   \   00009B   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00009E   EF           MOV       A,R7
   \   00009F   F5..         MOV       ?V0,A
   \   0000A1   78..         MOV       R0,#?V0
   \   0000A3   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000A6   75..00       MOV       ?V0,#0x0
   \   0000A9   78..         MOV       R0,#?V0
   \   0000AB   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000AE   75..13       MOV       ?V0,#0x13
   \                     ??zcl_SendDiscoverCmdsCmd_1:
   \   0000B1   78..         MOV       R0,#?V0
   \   0000B3   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000B6   EE           MOV       A,R6
   \   0000B7   F9           MOV       R1,A
   \   0000B8   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   0000BB   740B         MOV       A,#0xb
   \   0000BD   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000C0   E9           MOV       A,R1
   \   0000C1   F9           MOV       R1,A
   1915            }
   1916          
   1917            return ( status );
   \   0000C2   7402         MOV       A,#0x2
   \   0000C4   02....       LJMP      ?Subroutine1 & 0xFFFF
   1918          }
   1919          
   1920          /*********************************************************************
   1921           * @fn      zcl_SendDiscoverCmdsRspCmd
   1922           *
   1923           * @brief   Send a Discover Commands Response command
   1924           *
   1925           * @param   dstAddr - destination address
   1926           * @param   clusterID - cluster ID
   1927           * @param   pDiscoverRspCmd - response command to be sent
   1928           * @param   direction - direction of the command
   1929           * @param   seqNum - transaction sequence number
   1930           *
   1931           * @return  ZSuccess if OK
   1932           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1933          ZStatus_t zcl_SendDiscoverCmdsRspCmd( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zcl_SendDiscoverCmdsRspCmd:
   1934                                                uint16 clusterID, zclDiscoverCmdsCmdRsp_t *pDiscoverRspCmd,
   1935                                                uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
   1936          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV       A,#-0x16
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V11,R1
   \   000007   8A..         MOV       ?V8,R2
   \   000009   8B..         MOV       ?V9,R3
   \   00000B   EC           MOV       A,R4
   \   00000C   FE           MOV       R6,A
   \   00000D   ED           MOV       A,R5
   \   00000E   FF           MOV       R7,A
   \   00000F   7416         MOV       A,#0x16
   \   000011   12....       LCALL     ?XSTACK_DISP0_8
   \   000014   12....       LCALL     ??Subroutine249_0 & 0xFFFF
   1937            uint8 payloadSize = ( 1 + pDiscoverRspCmd->numCmd );  // size of discovery complete field plus cmds
   \                     ??CrossCallReturnLabel_620:
   \   000017   E5..         MOV       A,?V2
   \   000019   2402         ADD       A,#0x2
   \   00001B   F5..         MOV       ?V4,A
   \   00001D   E4           CLR       A
   \   00001E   35..         ADDC      A,?V3
   \   000020   F5..         MOV       ?V5,A
   \   000022   85..82       MOV       DPL,?V4
   \   000025   F583         MOV       DPH,A
   \   000027   E0           MOVX      A,@DPTR
   \   000028   04           INC       A
   1938            uint8 *pCmdBuf;
   1939            uint8 i;
   1940            ZStatus_t status = ZSuccess;
   \   000029   75..00       MOV       ?V10,#0x0
   1941          
   1942            // allocate memory
   1943            pCmdBuf = zcl_mem_alloc( payloadSize );
   \   00002C   F5..         MOV       ?V6,A
   \   00002E   75..00       MOV       ?V7,#0x0
   \   000031                ; Setup parameters for call to function osal_mem_alloc
   \   000031   FA           MOV       R2,A
   \   000032   AB..         MOV       R3,?V7
   \   000034   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000037   8A..         MOV       ?V0,R2
   \   000039   8B..         MOV       ?V1,R3
   1944            if ( pCmdBuf != NULL )
   \   00003B   EA           MOV       A,R2
   \   00003C   45..         ORL       A,?V1
   \   00003E   7003         JNZ       $+5
   \   000040   02....       LJMP      ??zcl_SendDiscoverCmdsRspCmd_0 & 0xFFFF
   1945            {
   1946              uint8 *pBuf = pCmdBuf;
   \   000043   A8..         MOV       R0,?V0
   \   000045   A9..         MOV       R1,?V1
   1947          
   1948              // Load the buffer - serially
   1949              *pBuf++ = pDiscoverRspCmd->discComplete;
   \   000047   85..82       MOV       DPL,?V2
   \   00004A   85..83       MOV       DPH,?V3
   \   00004D   12....       LCALL     ?Subroutine45 & 0xFFFF
   1950              for ( i = 0; i < pDiscoverRspCmd->numCmd; i++ )
   \                     ??CrossCallReturnLabel_57:
   \   000050   801D         SJMP      ??zcl_SendDiscoverCmdsRspCmd_1
   1951              {
   1952                *pBuf++ = pDiscoverRspCmd->pCmdID[i];
   \                     ??zcl_SendDiscoverCmdsRspCmd_2:
   \   000052   EA           MOV       A,R2
   \   000053   FC           MOV       R4,A
   \   000054   85..82       MOV       DPL,?V2
   \   000057   85..83       MOV       DPH,?V3
   \   00005A   A3           INC       DPTR
   \   00005B   A3           INC       DPTR
   \   00005C   A3           INC       DPTR
   \   00005D   E0           MOVX      A,@DPTR
   \   00005E   2C           ADD       A,R4
   \   00005F   FB           MOV       R3,A
   \   000060   A3           INC       DPTR
   \   000061   E0           MOVX      A,@DPTR
   \   000062   3400         ADDC      A,#0x0
   \   000064   8B82         MOV       DPL,R3
   \   000066   12....       LCALL     ?Subroutine88 & 0xFFFF
   1953              }
   \                     ??CrossCallReturnLabel_358:
   \   000069   A3           INC       DPTR
   \   00006A   A882         MOV       R0,DPL
   \   00006C   A983         MOV       R1,DPH
   \   00006E   0A           INC       R2
   \                     ??zcl_SendDiscoverCmdsRspCmd_1:
   \   00006F   85..82       MOV       DPL,?V4
   \   000072   85..83       MOV       DPH,?V5
   \   000075   E0           MOVX      A,@DPTR
   \   000076   FB           MOV       R3,A
   \   000077   EA           MOV       A,R2
   \   000078   C3           CLR       C
   \   000079   9B           SUBB      A,R3
   \   00007A   40D6         JC        ??zcl_SendDiscoverCmdsRspCmd_2
   1954          
   1955              // Send response message for either commands received or generated
   1956              if( pDiscoverRspCmd->cmdType == ZCL_CMD_DISCOVER_CMDS_RECEIVED )
   \   00007C   85..82       MOV       DPL,?V2
   \   00007F   85..83       MOV       DPH,?V3
   \   000082   A3           INC       DPTR
   \   000083   E0           MOVX      A,@DPTR
   \   000084   F8           MOV       R0,A
   \   000085   7418         MOV       A,#0x18
   \   000087   12....       LCALL     ?XSTACK_DISP0_8
   \   00008A   E0           MOVX      A,@DPTR
   \   00008B   F9           MOV       R1,A
   \   00008C   7419         MOV       A,#0x19
   \   00008E   12....       LCALL     ?XSTACK_DISP0_8
   \   000091   E0           MOVX      A,@DPTR
   \   000092   FA           MOV       R2,A
   \   000093   741A         MOV       A,#0x1a
   \   000095   12....       LCALL     ?XSTACK_DISP0_8
   \   000098   E0           MOVX      A,@DPTR
   \   000099   FB           MOV       R3,A
   \   00009A   7411         MOV       A,#0x11
   \   00009C   68           XRL       A,R0
   \   00009D   7039         JNZ       ??zcl_SendDiscoverCmdsRspCmd_3
   1957              {
   1958                status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DISCOVER_CMDS_RECEIVED_RSP, FALSE,
   1959                                          direction, disableDefaultRsp, 0, seqNum, payloadSize, pCmdBuf );
   \   00009F                ; Setup parameters for call to function zcl_SendCommand
   \   00009F   78..         MOV       R0,#?V0
   \   0000A1   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000A4   78..         MOV       R0,#?V6
   \   0000A6   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000A9   EB           MOV       A,R3
   \   0000AA   F5..         MOV       ?V2,A
   \   0000AC   78..         MOV       R0,#?V2
   \   0000AE   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000B1   E4           CLR       A
   \   0000B2   F5..         MOV       ?V2,A
   \   0000B4   F5..         MOV       ?V3,A
   \   0000B6   78..         MOV       R0,#?V2
   \   0000B8   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000BB   EA           MOV       A,R2
   \   0000BC   F5..         MOV       ?V2,A
   \   0000BE   78..         MOV       R0,#?V2
   \   0000C0   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000C3   E9           MOV       A,R1
   \   0000C4   F5..         MOV       ?V2,A
   \   0000C6   78..         MOV       R0,#?V2
   \   0000C8   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000CB   75..00       MOV       ?V2,#0x0
   \   0000CE   78..         MOV       R0,#?V2
   \   0000D0   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000D3   75..12       MOV       ?V2,#0x12
   \   0000D6   803C         SJMP      ??zcl_SendDiscoverCmdsRspCmd_4
   1960              }
   1961              else if ( pDiscoverRspCmd->cmdType == ZCL_CMD_DISCOVER_CMDS_GEN )
   \                     ??zcl_SendDiscoverCmdsRspCmd_3:
   \   0000D8   7413         MOV       A,#0x13
   \   0000DA   68           XRL       A,R0
   \   0000DB   7051         JNZ       ??zcl_SendDiscoverCmdsRspCmd_5
   1962              {
   1963                status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DISCOVER_CMDS_GEN_RSP, FALSE,
   1964                                          direction, disableDefaultRsp, 0, seqNum, payloadSize, pCmdBuf );
   \   0000DD                ; Setup parameters for call to function zcl_SendCommand
   \   0000DD   78..         MOV       R0,#?V0
   \   0000DF   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000E2   78..         MOV       R0,#?V6
   \   0000E4   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000E7   EB           MOV       A,R3
   \   0000E8   F5..         MOV       ?V2,A
   \   0000EA   78..         MOV       R0,#?V2
   \   0000EC   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000EF   E4           CLR       A
   \   0000F0   F5..         MOV       ?V2,A
   \   0000F2   F5..         MOV       ?V3,A
   \   0000F4   78..         MOV       R0,#?V2
   \   0000F6   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000F9   EA           MOV       A,R2
   \   0000FA   F5..         MOV       ?V2,A
   \   0000FC   78..         MOV       R0,#?V2
   \   0000FE   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000101   E9           MOV       A,R1
   \   000102   F5..         MOV       ?V2,A
   \   000104   78..         MOV       R0,#?V2
   \   000106   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000109   75..00       MOV       ?V2,#0x0
   \   00010C   78..         MOV       R0,#?V2
   \   00010E   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000111   75..14       MOV       ?V2,#0x14
   \                     ??zcl_SendDiscoverCmdsRspCmd_4:
   \   000114   78..         MOV       R0,#?V2
   \   000116   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000119   EE           MOV       A,R6
   \   00011A   FC           MOV       R4,A
   \   00011B   EF           MOV       A,R7
   \   00011C   FD           MOV       R5,A
   \   00011D   AA..         MOV       R2,?V8
   \   00011F   AB..         MOV       R3,?V9
   \   000121   A9..         MOV       R1,?V11
   \   000123   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   000126   740B         MOV       A,#0xb
   \   000128   12....       LCALL     ?DEALLOC_XSTACK8
   \   00012B   E9           MOV       A,R1
   \   00012C   F5..         MOV       ?V10,A
   1965              }
   1966          
   1967              zcl_mem_free( pCmdBuf );
   \                     ??zcl_SendDiscoverCmdsRspCmd_5:
   \   00012E                ; Setup parameters for call to function osal_mem_free
   \   00012E   AA..         MOV       R2,?V0
   \   000130   AB..         MOV       R3,?V1
   \   000132   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000135   8003         SJMP      ??zcl_SendDiscoverCmdsRspCmd_6
   1968            }
   1969            else
   1970            {
   1971              status = ZMemError;
   \                     ??zcl_SendDiscoverCmdsRspCmd_0:
   \   000137   75..10       MOV       ?V10,#0x10
   1972            }
   1973          
   1974            return ( status );
   \                     ??zcl_SendDiscoverCmdsRspCmd_6:
   \   00013A   A9..         MOV       R1,?V10
   \   00013C   02....       LJMP      ??Subroutine203_0 & 0xFFFF
   1975          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000   12....       LCALL     ?Subroutine173 & 0xFFFF
   \                     ??CrossCallReturnLabel_360:
   \   000003   F0           MOVX      @DPTR,A
   \   000004   A3           INC       DPTR
   \   000005   A882         MOV       R0,DPL
   \   000007   A983         MOV       R1,DPH
   \   000009   7A00         MOV       R2,#0x0
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine249_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V2,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F5..         MOV       ?V3,A
   \   000007   22           RET
   1976          
   1977          /*********************************************************************
   1978           * @fn      zcl_SendDiscoverAttrsCmd
   1979           *
   1980           * @brief   Send a Discover Attributes command
   1981           *
   1982           * @param   dstAddr - destination address
   1983           * @param   clusterID - cluster ID
   1984           * @param   pDiscoverCmd - discover command to be sent
   1985           * @param   direction - direction of the command
   1986           * @param   seqNum - transaction sequence number
   1987           *
   1988           * @return  ZSuccess if OK
   1989           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1990          ZStatus_t zcl_SendDiscoverAttrsCmd( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zcl_SendDiscoverAttrsCmd:
   1991                                      uint16 clusterID, zclDiscoverAttrsCmd_t *pDiscoverCmd,
   1992                                      uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
   1993          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V2,R1
   \   000007   EA           MOV       A,R2
   \   000008   FE           MOV       R6,A
   \   000009   EB           MOV       A,R3
   \   00000A   FF           MOV       R7,A
   \   00000B   8C..         MOV       ?V0,R4
   \   00000D   8D..         MOV       ?V1,R5
   1994            uint8 dataLen = 2 + 1; // Start Attribute ID and Max Attribute IDs
   1995            uint8 *buf;
   1996            ZStatus_t status;
   1997          
   1998            buf = zcl_mem_alloc( dataLen );
   \   00000F                ; Setup parameters for call to function osal_mem_alloc
   \   00000F   7A03         MOV       R2,#0x3
   \   000011   7B00         MOV       R3,#0x0
   \   000013   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000016   8A..         MOV       ?V4,R2
   \   000018   8B..         MOV       ?V5,R3
   1999            if ( buf != NULL )
   \   00001A   EA           MOV       A,R2
   \   00001B   45..         ORL       A,?V5
   \   00001D   7003         JNZ       $+5
   \   00001F   02....       LJMP      ??zcl_SendDiscoverAttrsCmd_0 & 0xFFFF
   \   000022   7410         MOV       A,#0x10
   \   000024   12....       LCALL     ?XSTACK_DISP0_8
   \   000027   12....       LCALL     ?Subroutine102 & 0xFFFF
   2000            {
   2001              // Load the buffer - serially
   2002              uint8 *pBuf = buf;
   2003              *pBuf++ = LO_UINT16(pDiscoverCmd->startAttr);
   \                     ??CrossCallReturnLabel_172:
   \   00002A   12....       LCALL     ??Subroutine205_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_376:
   \   00002D   12....       LCALL     ??Subroutine204_0 & 0xFFFF
   2004              *pBuf++ = HI_UINT16(pDiscoverCmd->startAttr);
   \                     ??CrossCallReturnLabel_366:
   \   000030   8A82         MOV       DPL,R2
   \   000032   8B83         MOV       DPH,R3
   \   000034   A3           INC       DPTR
   \   000035   12....       LCALL     ?Subroutine46 & 0xFFFF
   2005              *pBuf++ = pDiscoverCmd->maxAttrIDs;
   \                     ??CrossCallReturnLabel_59:
   \   000038   8A82         MOV       DPL,R2
   \   00003A   8B83         MOV       DPH,R3
   \   00003C   A3           INC       DPTR
   \   00003D   A3           INC       DPTR
   \   00003E   F0           MOVX      @DPTR,A
   2006          
   2007              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DISCOVER_ATTRS, FALSE,
   2008                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
   \   00003F                ; Setup parameters for call to function zcl_SendCommand
   \   00003F   78..         MOV       R0,#?V4
   \   000041   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000044   75..03       MOV       ?V6,#0x3
   \   000047   75..00       MOV       ?V7,#0x0
   \   00004A   78..         MOV       R0,#?V6
   \   00004C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004F   7418         MOV       A,#0x18
   \   000051   12....       LCALL     ?XSTACK_DISP0_8
   \   000054   12....       LCALL     ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   000057   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00005A   E4           CLR       A
   \   00005B   F5..         MOV       ?V6,A
   \   00005D   78..         MOV       R0,#?V6
   \   00005F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000062   741A         MOV       A,#0x1a
   \   000064   12....       LCALL     ?XSTACK_DISP0_8
   \   000067   12....       LCALL     ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   00006A   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00006D   741A         MOV       A,#0x1a
   \   00006F   12....       LCALL     ?XSTACK_DISP0_8
   \   000072   12....       LCALL     ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   000075   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000078   75..00       MOV       ?V3,#0x0
   \   00007B   78..         MOV       R0,#?V3
   \   00007D   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000080   75..0C       MOV       ?V3,#0xc
   \   000083   78..         MOV       R0,#?V3
   \   000085   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000088   AC..         MOV       R4,?V0
   \   00008A   AD..         MOV       R5,?V1
   \   00008C   EE           MOV       A,R6
   \   00008D   FA           MOV       R2,A
   \   00008E   EF           MOV       A,R7
   \   00008F   FB           MOV       R3,A
   \   000090   A9..         MOV       R1,?V2
   \   000092   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   000095   740B         MOV       A,#0xb
   \   000097   12....       LCALL     ?DEALLOC_XSTACK8
   \   00009A   E9           MOV       A,R1
   \   00009B   FE           MOV       R6,A
   2009              zcl_mem_free( buf );
   \   00009C                ; Setup parameters for call to function osal_mem_free
   \   00009C   AA..         MOV       R2,?V4
   \   00009E   AB..         MOV       R3,?V5
   \   0000A0   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0000A3   8002         SJMP      ??zcl_SendDiscoverAttrsCmd_1
   2010            }
   2011            else
   2012            {
   2013              status = ZMemError;
   \                     ??zcl_SendDiscoverAttrsCmd_0:
   \   0000A5   7E10         MOV       R6,#0x10
   2014            }
   2015          
   2016            return ( status );
   \                     ??zcl_SendDiscoverAttrsCmd_1:
   \   0000A7   EE           MOV       A,R6
   \   0000A8   F9           MOV       R1,A
   \   0000A9   02....       LJMP      ??Subroutine216_0 & 0xFFFF
   2017          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000   12....       LCALL     ?Subroutine152 & 0xFFFF
   \                     ??CrossCallReturnLabel_370:
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine216_0:
   \   000000   7F08         MOV       R7,#0x8
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
   2018          
   2019          /*********************************************************************
   2020           * @fn      zcl_SendDiscoverAttrsRspCmd
   2021           *
   2022           * @brief   Send a Discover Attributes Response command
   2023           *
   2024           * @param   dstAddr - destination address
   2025           * @param   clusterID - cluster ID
   2026           * @param   reportRspCmd - report response command to be sent
   2027           * @param   direction - direction of the command
   2028           * @param   seqNum - transaction sequence number
   2029           *
   2030           * @return  ZSuccess if OK
   2031           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2032          ZStatus_t zcl_SendDiscoverAttrsRspCmd( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zcl_SendDiscoverAttrsRspCmd:
   2033                                    uint16 clusterID, zclDiscoverAttrsRspCmd_t *pDiscoverRspCmd,
   2034                                    uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
   2035          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV       A,#-0x18
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V8,R1
   \   000007   8A..         MOV       ?V10,R2
   \   000009   8B..         MOV       ?V11,R3
   \   00000B   EC           MOV       A,R4
   \   00000C   FE           MOV       R6,A
   \   00000D   ED           MOV       A,R5
   \   00000E   FF           MOV       R7,A
   \   00000F   7418         MOV       A,#0x18
   \   000011   12....       LCALL     ?XSTACK_DISP0_8
   \   000014   12....       LCALL     ?Subroutine67 & 0xFFFF
   2036            uint16 dataLen = 1; // Discovery complete
   2037            uint8 *buf;
   2038            ZStatus_t status;
   2039          
   2040            // calculate the size of the command
   2041            dataLen += pDiscoverRspCmd->numAttr * (2 + 1); // Attribute ID and Data Type
   \                     ??CrossCallReturnLabel_111:
   \   000017   75F003       MOV       B,#0x3
   \   00001A   A4           MUL       AB
   \   00001B   A9F0         MOV       R1,B
   \   00001D   2401         ADD       A,#0x1
   \   00001F   F5..         MOV       ?V6,A
   \   000021   E4           CLR       A
   \   000022   39           ADDC      A,R1
   \   000023   F5..         MOV       ?V7,A
   2042          
   2043            buf = zcl_mem_alloc( dataLen );
   \   000025                ; Setup parameters for call to function osal_mem_alloc
   \   000025   AA..         MOV       R2,?V6
   \   000027   FB           MOV       R3,A
   \   000028   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00002B   8A..         MOV       ?V0,R2
   \   00002D   8B..         MOV       ?V1,R3
   2044            if ( buf != NULL )
   \   00002F   EA           MOV       A,R2
   \   000030   45..         ORL       A,?V1
   \   000032   7003         JNZ       $+5
   \   000034   02....       LJMP      ??zcl_SendDiscoverAttrsRspCmd_0 & 0xFFFF
   2045            {
   2046              // Load the buffer - serially
   2047              uint8 i;
   2048              uint8 *pBuf = buf;
   \   000037   A8..         MOV       R0,?V0
   \   000039   A9..         MOV       R1,?V1
   2049          
   2050              *pBuf++ = pDiscoverRspCmd->discComplete;
   \   00003B   85..82       MOV       DPL,?V4
   \   00003E   85..83       MOV       DPH,?V5
   \   000041   12....       LCALL     ?Subroutine45 & 0xFFFF
   2051          
   2052              for ( i = 0; i < pDiscoverRspCmd->numAttr; i++ )
   \                     ??CrossCallReturnLabel_58:
   \   000044   802E         SJMP      ??zcl_SendDiscoverAttrsRspCmd_1
   2053              {
   2054                *pBuf++ = LO_UINT16(pDiscoverRspCmd->attrList[i].attrID);
   \                     ??zcl_SendDiscoverAttrsRspCmd_2:
   \   000046   EA           MOV       A,R2
   \   000047   75F003       MOV       B,#0x3
   \   00004A   A4           MUL       AB
   \   00004B   FC           MOV       R4,A
   \   00004C   ADF0         MOV       R5,B
   \   00004E   E5..         MOV       A,?V4
   \   000050   2C           ADD       A,R4
   \   000051   FC           MOV       R4,A
   \   000052   E5..         MOV       A,?V5
   \   000054   3D           ADDC      A,R5
   \   000055   12....       LCALL     ?Subroutine130 & 0xFFFF
   2055                *pBuf++ = HI_UINT16(pDiscoverRspCmd->attrList[i].attrID);
   2056                *pBuf++ = pDiscoverRspCmd->attrList[i].dataType;
   2057              }
   \                     ??CrossCallReturnLabel_231:
   \   000058   12....       LCALL     ?Subroutine111 & 0xFFFF
   \                     ??CrossCallReturnLabel_191:
   \   00005B   12....       LCALL     ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   00005E   8882         MOV       DPL,R0
   \   000060   8983         MOV       DPH,R1
   \   000062   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   000065   8882         MOV       DPL,R0
   \   000067   8983         MOV       DPH,R1
   \   000069   A3           INC       DPTR
   \   00006A   A3           INC       DPTR
   \   00006B   F0           MOVX      @DPTR,A
   \   00006C   E8           MOV       A,R0
   \   00006D   2403         ADD       A,#0x3
   \   00006F   F8           MOV       R0,A
   \   000070   5001         JNC       ??zcl_SendDiscoverAttrsRspCmd_3
   \   000072   09           INC       R1
   \                     ??zcl_SendDiscoverAttrsRspCmd_3:
   \   000073   0A           INC       R2
   \                     ??zcl_SendDiscoverAttrsRspCmd_1:
   \   000074   85..82       MOV       DPL,?V2
   \   000077   85..83       MOV       DPH,?V3
   \   00007A   E0           MOVX      A,@DPTR
   \   00007B   FB           MOV       R3,A
   \   00007C   EA           MOV       A,R2
   \   00007D   C3           CLR       C
   \   00007E   9B           SUBB      A,R3
   \   00007F   40C5         JC        ??zcl_SendDiscoverAttrsRspCmd_2
   2058          
   2059              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DISCOVER_ATTRS_RSP, FALSE,
   2060                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
   \   000081                ; Setup parameters for call to function zcl_SendCommand
   \   000081   78..         MOV       R0,#?V0
   \   000083   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000086   78..         MOV       R0,#?V6
   \   000088   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00008B   7420         MOV       A,#0x20
   \   00008D   12....       LCALL     ?XSTACK_DISP0_8
   \   000090   12....       LCALL     ??Subroutine207_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_387:
   \   000093   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000096   E4           CLR       A
   \   000097   F5..         MOV       ?V2,A
   \   000099   F5..         MOV       ?V3,A
   \   00009B   78..         MOV       R0,#?V2
   \   00009D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000A0   7422         MOV       A,#0x22
   \   0000A2   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A5   12....       LCALL     ??Subroutine207_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_388:
   \   0000A8   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000AB   7422         MOV       A,#0x22
   \   0000AD   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B0   12....       LCALL     ??Subroutine207_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_389:
   \   0000B3   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000B6   75..00       MOV       ?V2,#0x0
   \   0000B9   78..         MOV       R0,#?V2
   \   0000BB   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000BE   75..0D       MOV       ?V2,#0xd
   \   0000C1   78..         MOV       R0,#?V2
   \   0000C3   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000C6   EE           MOV       A,R6
   \   0000C7   FC           MOV       R4,A
   \   0000C8   EF           MOV       A,R7
   \   0000C9   FD           MOV       R5,A
   \   0000CA   AA..         MOV       R2,?V10
   \   0000CC   AB..         MOV       R3,?V11
   \   0000CE   A9..         MOV       R1,?V8
   \   0000D0   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   0000D3   740B         MOV       A,#0xb
   \   0000D5   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000D8   E9           MOV       A,R1
   \   0000D9   FE           MOV       R6,A
   2061              zcl_mem_free( buf );
   \   0000DA                ; Setup parameters for call to function osal_mem_free
   \   0000DA   AA..         MOV       R2,?V0
   \   0000DC   AB..         MOV       R3,?V1
   \   0000DE   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0000E1   8002         SJMP      ??zcl_SendDiscoverAttrsRspCmd_4
   2062            }
   2063            else
   2064            {
   2065              status = ZMemError;
   \                     ??zcl_SendDiscoverAttrsRspCmd_0:
   \   0000E3   7E10         MOV       R6,#0x10
   2066            }
   2067          
   2068            return ( status );
   \                     ??zcl_SendDiscoverAttrsRspCmd_4:
   \   0000E5                REQUIRE ?Subroutine13
   \   0000E5                ; // Fall through to label ?Subroutine13
   2069          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   EE           MOV       A,R6
   \   000001   F9           MOV       R1,A
   \   000002   02....       LJMP      ??Subroutine238_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine130:
   \   000000   FD           MOV       R5,A
   \   000001   EC           MOV       A,R4
   \   000002   2402         ADD       A,#0x2
   \   000004   F5..         MOV       ?V12,A
   \   000006   E4           CLR       A
   \   000007   3D           ADDC      A,R5
   \   000008   F5..         MOV       ?V13,A
   \   00000A   85..82       MOV       DPL,?V12
   \   00000D   F583         MOV       DPH,A
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine67:
   \   000000   12....       LCALL     ?Subroutine164 & 0xFFFF
   \                     ??CrossCallReturnLabel_287:
   \   000003   A3           INC       DPTR
   \   000004   8582..       MOV       ?V2,DPL
   \   000007   8583..       MOV       ?V3,DPH
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   12....       LCALL     ?Subroutine153 & 0xFFFF
   \                     ??CrossCallReturnLabel_272:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   A3           INC       DPTR
   \   000001   F0           MOVX      @DPTR,A
   \   000002   8C82         MOV       DPL,R4
   \   000004   8D83         MOV       DPH,R5
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   22           RET
   2070          
   2071          /*********************************************************************
   2072           * @fn      zcl_SendDiscoverAttrsExt
   2073           *
   2074           * @brief   Send a Discover Attributes Extended command
   2075           *
   2076           * @param   dstAddr - destination address
   2077           * @param   clusterID - cluster ID
   2078           * @param   pDiscoverAttrsExt:
   2079           *            - startAttrID: the first attribute to be selected
   2080           *            - maxAttrIDs: maximum number of returned attributes
   2081           * @param   direction - direction of the command
   2082           * @param   seqNum - transaction sequence number
   2083           *
   2084           * @return  ZSuccess if OK
   2085           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2086          ZStatus_t zcl_SendDiscoverAttrsExt( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zcl_SendDiscoverAttrsExt:
   2087                                      uint16 clusterID, zclDiscoverAttrsCmd_t *pDiscoverAttrsExt,
   2088                                      uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
   2089          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV       A,#-0x3
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V0,R1
   \   00000C   740F         MOV       A,#0xf
   \   00000E   12....       LCALL     ?XSTACK_DISP0_8
   \   000011   12....       LCALL     ?Subroutine25 & 0xFFFF
   2090            uint8 buf[3];  // Buffer size equal to Start Attribute ID and Max Attribute IDs
   2091            ZStatus_t status;
   2092          
   2093            // Load the buffer - serially
   2094            buf[0] = LO_UINT16(pDiscoverAttrsExt->startAttr);
   2095            buf[1] = HI_UINT16(pDiscoverAttrsExt->startAttr);
   \                     ??CrossCallReturnLabel_365:
   \   000014   C0E0         PUSH      A
   \   000016   7401         MOV       A,#0x1
   \   000018   12....       LCALL     ?XSTACK_DISP0_8
   \   00001B   D0E0         POP       A
   \   00001D   12....       LCALL     ?Subroutine46 & 0xFFFF
   2096            buf[2] = pDiscoverAttrsExt->maxAttrIDs;
   \                     ??CrossCallReturnLabel_60:
   \   000020   C0E0         PUSH      A
   \   000022   7402         MOV       A,#0x2
   \   000024   12....       LCALL     ?XSTACK_DISP0_8
   \   000027   D0E0         POP       A
   \   000029   F0           MOVX      @DPTR,A
   2097          
   2098            status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DISCOVER_ATTRS_EXT, FALSE,
   2099                                      direction, disableDefaultRsp, 0, seqNum, sizeof( buf ), buf );
   2100          
   2101            return ( status );
   \   00002A                ; Setup parameters for call to function zcl_SendCommand
   \   00002A   A8..         MOV       R0,?XSP + 0
   \   00002C   A9..         MOV       R1,?XSP + 1
   \   00002E   88..         MOV       ?V2,R0
   \   000030   89..         MOV       ?V3,R1
   \   000032   78..         MOV       R0,#?V2
   \   000034   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000037   75..03       MOV       ?V2,#0x3
   \   00003A   75..00       MOV       ?V3,#0x0
   \   00003D   78..         MOV       R0,#?V2
   \   00003F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000042   7417         MOV       A,#0x17
   \   000044   12....       LCALL     ?XSTACK_DISP0_8
   \   000047   E0           MOVX      A,@DPTR
   \   000048   F5..         MOV       ?V1,A
   \   00004A   78..         MOV       R0,#?V1
   \   00004C   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00004F   E4           CLR       A
   \   000050   F5..         MOV       ?V2,A
   \   000052   78..         MOV       R0,#?V2
   \   000054   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000057   7419         MOV       A,#0x19
   \   000059   12....       LCALL     ?XSTACK_DISP0_8
   \   00005C   E0           MOVX      A,@DPTR
   \   00005D   F5..         MOV       ?V1,A
   \   00005F   78..         MOV       R0,#?V1
   \   000061   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000064   7419         MOV       A,#0x19
   \   000066   12....       LCALL     ?XSTACK_DISP0_8
   \   000069   E0           MOVX      A,@DPTR
   \   00006A   F5..         MOV       ?V1,A
   \   00006C   78..         MOV       R0,#?V1
   \   00006E   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000071   75..00       MOV       ?V1,#0x0
   \   000074   78..         MOV       R0,#?V1
   \   000076   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000079   75..15       MOV       ?V1,#0x15
   \   00007C   78..         MOV       R0,#?V1
   \   00007E   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000081   A9..         MOV       R1,?V0
   \   000083   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   000086   740B         MOV       A,#0xb
   \   000088   12....       LCALL     ?DEALLOC_XSTACK8
   \   00008B   7403         MOV       A,#0x3
   \   00008D   02....       LJMP      ?Subroutine1 & 0xFFFF
   2102          }
   2103          
   2104          /*********************************************************************
   2105           * @fn      zcl_SendDiscoverAttrsExtRsp
   2106           *
   2107           * @brief   Send a Discover Attributes Extended Response command
   2108           *
   2109           * @param   dstAddr - destination address
   2110           * @param   clusterID - cluster ID
   2111           * @param   pDiscoverRspCmd:
   2112           *            - discComplete: indicates whether all requested attributes returned
   2113           *            - attrID: attribute ID
   2114           *            - attrDataType: data type of the given attribute
   2115           *            - attrAccessControl: access control of the given attribute
   2116           * @param   direction - direction of the command
   2117           * @param   seqNum - transaction sequence number
   2118           *
   2119           * @return  ZSuccess if OK
   2120           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2121          ZStatus_t zcl_SendDiscoverAttrsExtRsp( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zcl_SendDiscoverAttrsExtRsp:
   2122                                                uint16 clusterID, zclDiscoverAttrsExtRsp_t *pDiscoverRspCmd,
   2123                                                uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
   2124          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV       A,#-0x18
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V10,R1
   \   000007   8A..         MOV       ?V8,R2
   \   000009   8B..         MOV       ?V9,R3
   \   00000B   EC           MOV       A,R4
   \   00000C   FE           MOV       R6,A
   \   00000D   ED           MOV       A,R5
   \   00000E   FF           MOV       R7,A
   \   00000F   7418         MOV       A,#0x18
   \   000011   12....       LCALL     ?XSTACK_DISP0_8
   \   000014   12....       LCALL     ?Subroutine67 & 0xFFFF
   2125            uint8 *buf;
   2126            uint8 i;
   2127            uint16 dataLen = 1; // Discovery complete
   2128            ZStatus_t status;
   2129          
   2130            // calculate the size of the command
   2131            dataLen += pDiscoverRspCmd->numAttr * (2 + 1 + 1); // Attribute ID, Data Type, and Access Control
   \                     ??CrossCallReturnLabel_112:
   \   000017   F5..         MOV       ?V0,A
   \   000019   75..00       MOV       ?V1,#0x0
   \   00001C   7402         MOV       A,#0x2
   \   00001E   78..         MOV       R0,#?V0
   \   000020   12....       LCALL     ?S_SHL
   \   000023   E5..         MOV       A,?V0
   \   000025   2401         ADD       A,#0x1
   \   000027   F5..         MOV       ?V6,A
   \   000029   E4           CLR       A
   \   00002A   35..         ADDC      A,?V1
   \   00002C   F5..         MOV       ?V7,A
   2132          
   2133            buf = zcl_mem_alloc( dataLen );
   \   00002E                ; Setup parameters for call to function osal_mem_alloc
   \   00002E   AA..         MOV       R2,?V6
   \   000030   FB           MOV       R3,A
   \   000031   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000034   8A..         MOV       ?V0,R2
   \   000036   8B..         MOV       ?V1,R3
   2134            if ( buf != NULL )
   \   000038   EA           MOV       A,R2
   \   000039   45..         ORL       A,?V1
   \   00003B   7003         JNZ       $+5
   \   00003D   02....       LJMP      ??zcl_SendDiscoverAttrsExtRsp_0 & 0xFFFF
   2135            {
   2136              // Load the buffer - serially
   2137              uint8 *pBuf = buf;
   2138              *pBuf++ = pDiscoverRspCmd->discComplete;
   \   000040   85..82       MOV       DPL,?V4
   \   000043   85..83       MOV       DPH,?V5
   \   000046   12....       LCALL     ?Subroutine89 & 0xFFFF
   \                     ??CrossCallReturnLabel_148:
   \   000049   A3           INC       DPTR
   \   00004A   AA82         MOV       R2,DPL
   \   00004C   AB83         MOV       R3,DPH
   2139              for ( i = 0; i < pDiscoverRspCmd->numAttr; i++ )
   \   00004E   7900         MOV       R1,#0x0
   \   000050   8034         SJMP      ??zcl_SendDiscoverAttrsExtRsp_1
   2140              {
   2141                *pBuf++ = LO_UINT16(pDiscoverRspCmd->aExtAttrInfo[i].attrID);
   \                     ??zcl_SendDiscoverAttrsExtRsp_2:
   \   000052   E9           MOV       A,R1
   \   000053   F5..         MOV       ?V12,A
   \   000055   75..00       MOV       ?V13,#0x0
   \   000058   7402         MOV       A,#0x2
   \   00005A   78..         MOV       R0,#?V12
   \   00005C   12....       LCALL     ?S_SHL
   \   00005F   E5..         MOV       A,?V4
   \   000061   25..         ADD       A,?V12
   \   000063   FC           MOV       R4,A
   \   000064   E5..         MOV       A,?V5
   \   000066   35..         ADDC      A,?V13
   \   000068   12....       LCALL     ?Subroutine130 & 0xFFFF
   2142                *pBuf++ = HI_UINT16(pDiscoverRspCmd->aExtAttrInfo[i].attrID);
   2143                *pBuf++ = pDiscoverRspCmd->aExtAttrInfo[i].attrDataType;
   2144                *pBuf++ = pDiscoverRspCmd->aExtAttrInfo[i].attrAccessControl;
   2145              }
   \                     ??CrossCallReturnLabel_232:
   \   00006B   12....       LCALL     ??Subroutine205_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_377:
   \   00006E   12....       LCALL     ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   000071   8A82         MOV       DPL,R2
   \   000073   8B83         MOV       DPH,R3
   \   000075   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   000078   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_397:
   \   00007B   A3           INC       DPTR
   \   00007C   A3           INC       DPTR
   \   00007D   A3           INC       DPTR
   \   00007E   A3           INC       DPTR
   \   00007F   12....       LCALL     ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_138:
   \   000082   5001         JNC       ??zcl_SendDiscoverAttrsExtRsp_3
   \   000084   0B           INC       R3
   \                     ??zcl_SendDiscoverAttrsExtRsp_3:
   \   000085   09           INC       R1
   \                     ??zcl_SendDiscoverAttrsExtRsp_1:
   \   000086   85..82       MOV       DPL,?V2
   \   000089   85..83       MOV       DPH,?V3
   \   00008C   E0           MOVX      A,@DPTR
   \   00008D   F8           MOV       R0,A
   \   00008E   E9           MOV       A,R1
   \   00008F   C3           CLR       C
   \   000090   98           SUBB      A,R0
   \   000091   40BF         JC        ??zcl_SendDiscoverAttrsExtRsp_2
   2146          
   2147              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DISCOVER_ATTRS_EXT_RSP, FALSE,
   2148                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
   \   000093                ; Setup parameters for call to function zcl_SendCommand
   \   000093   78..         MOV       R0,#?V0
   \   000095   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000098   78..         MOV       R0,#?V6
   \   00009A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00009D   7420         MOV       A,#0x20
   \   00009F   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A2   12....       LCALL     ??Subroutine207_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_390:
   \   0000A5   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000A8   E4           CLR       A
   \   0000A9   F5..         MOV       ?V2,A
   \   0000AB   F5..         MOV       ?V3,A
   \   0000AD   78..         MOV       R0,#?V2
   \   0000AF   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000B2   7422         MOV       A,#0x22
   \   0000B4   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B7   12....       LCALL     ??Subroutine207_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_391:
   \   0000BA   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000BD   7422         MOV       A,#0x22
   \   0000BF   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C2   12....       LCALL     ??Subroutine207_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_392:
   \   0000C5   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000C8   75..00       MOV       ?V2,#0x0
   \   0000CB   78..         MOV       R0,#?V2
   \   0000CD   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000D0   75..16       MOV       ?V2,#0x16
   \   0000D3   78..         MOV       R0,#?V2
   \   0000D5   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000D8   EE           MOV       A,R6
   \   0000D9   FC           MOV       R4,A
   \   0000DA   EF           MOV       A,R7
   \   0000DB   FD           MOV       R5,A
   \   0000DC   AA..         MOV       R2,?V8
   \   0000DE   AB..         MOV       R3,?V9
   \   0000E0   A9..         MOV       R1,?V10
   \   0000E2   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   0000E5   740B         MOV       A,#0xb
   \   0000E7   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000EA   E9           MOV       A,R1
   \   0000EB   FE           MOV       R6,A
   2149              zcl_mem_free( buf );
   \   0000EC                ; Setup parameters for call to function osal_mem_free
   \   0000EC   AA..         MOV       R2,?V0
   \   0000EE   AB..         MOV       R3,?V1
   \   0000F0   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0000F3   8002         SJMP      ??zcl_SendDiscoverAttrsExtRsp_4
   2150            }
   2151            else
   2152            {
   2153              status = ZMemError;
   \                     ??zcl_SendDiscoverAttrsExtRsp_0:
   \   0000F5   7E10         MOV       R6,#0x10
   2154            }
   2155          
   2156            return ( status );
   \                     ??zcl_SendDiscoverAttrsExtRsp_4:
   \   0000F7   02....       LJMP      ?Subroutine13 & 0xFFFF
   2157          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine89:
   \   000000   12....       LCALL     ??Subroutine221_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_445:
   \   000003   F0           MOVX      @DPTR,A
   \   000004   22           RET
   2158          #endif // ZCL_DISCOVER
   2159          
   2160          /*********************************************************************
   2161           * @fn      zcl_ProcessMessageMSG
   2162           *
   2163           * @brief   Data message processor callback.  This function processes
   2164           *          any incoming data - probably from other devices.  So, based
   2165           *          on cluster ID, perform the intended action.
   2166           *
   2167           * @param   pkt - incoming message
   2168           *
   2169           * @return  zclProcMsgStatus_t
   2170           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2171          zclProcMsgStatus_t zcl_ProcessMessageMSG( afIncomingMSGPacket_t *pkt )
   \                     zcl_ProcessMessageMSG:
   2172          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV       A,#-0x15
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   2173            endPointDesc_t *epDesc;
   2174            zclIncoming_t inMsg;
   2175            zclLibPlugin_t *pInPlugin;
   2176            zclDefaultRspCmd_t defautlRspCmd;
   2177            uint8 options;
   2178            uint8 securityEnable;
   2179            uint8 interPanMsg;
   2180            ZStatus_t status = ZFailure;
   2181            uint8 defaultResponseSent = FALSE;
   \   00000E   C2..         CLR       ?VB.0
   2182          
   2183            if ( pkt->cmd.DataLength < ZCL_VALID_MIN_HEADER_LEN  )
   \   000010   EE           MOV       A,R6
   \   000011   2420         ADD       A,#0x20
   \   000013   F8           MOV       R0,A
   \   000014   E4           CLR       A
   \   000015   3F           ADDC      A,R7
   \   000016   F9           MOV       R1,A
   \   000017   88..         MOV       ?V0,R0
   \   000019   89..         MOV       ?V1,R1
   \   00001B   8882         MOV       DPL,R0
   \   00001D   F583         MOV       DPH,A
   \   00001F   C3           CLR       C
   \   000020   E0           MOVX      A,@DPTR
   \   000021   9403         SUBB      A,#0x3
   \   000023   A3           INC       DPTR
   \   000024   E0           MOVX      A,@DPTR
   \   000025   9400         SUBB      A,#0x0
   \   000027   5005         JNC       ??zcl_ProcessMessageMSG_0
   2184            {
   2185              return ( ZCL_PROC_INVALID );   // Error, ignore the message
   \   000029   7901         MOV       R1,#0x1
   \   00002B   02....       LJMP      ??zcl_ProcessMessageMSG_1 & 0xFFFF
   2186            }
   2187          
   2188            // Initialize
   2189            rawAFMsg = (afIncomingMSGPacket_t *)pkt;
   \                     ??zcl_ProcessMessageMSG_0:
   \   00002E   90....       MOV       DPTR,#rawAFMsg
   \   000031   EE           MOV       A,R6
   \   000032   F0           MOVX      @DPTR,A
   \   000033   A3           INC       DPTR
   \   000034   EF           MOV       A,R7
   \   000035   F0           MOVX      @DPTR,A
   2190            inMsg.msg = pkt;
   \   000036   7402         MOV       A,#0x2
   \   000038   12....       LCALL     ?XSTACK_DISP0_8
   \   00003B   EE           MOV       A,R6
   \   00003C   F0           MOVX      @DPTR,A
   \   00003D   A3           INC       DPTR
   \   00003E   EF           MOV       A,R7
   \   00003F   F0           MOVX      @DPTR,A
   2191            inMsg.attrCmd = NULL;
   \   000040   740E         MOV       A,#0xe
   \   000042   12....       LCALL     ?XSTACK_DISP0_8
   \   000045   E4           CLR       A
   \   000046   F0           MOVX      @DPTR,A
   \   000047   A3           INC       DPTR
   \   000048   F0           MOVX      @DPTR,A
   2192            inMsg.pData = NULL;
   \   000049   740A         MOV       A,#0xa
   \   00004B   12....       LCALL     ?XSTACK_DISP0_8
   \   00004E   E4           CLR       A
   \   00004F   F0           MOVX      @DPTR,A
   \   000050   A3           INC       DPTR
   \   000051   F0           MOVX      @DPTR,A
   2193            inMsg.pDataLen = 0;
   \   000052   740C         MOV       A,#0xc
   \   000054   12....       LCALL     ?XSTACK_DISP0_8
   \   000057   E4           CLR       A
   \   000058   F0           MOVX      @DPTR,A
   \   000059   A3           INC       DPTR
   \   00005A   F0           MOVX      @DPTR,A
   2194          
   2195            inMsg.pData = zclParseHdr( &(inMsg.hdr), pkt->cmd.Data );
   \   00005B   EE           MOV       A,R6
   \   00005C   2422         ADD       A,#0x22
   \   00005E   F8           MOV       R0,A
   \   00005F   E4           CLR       A
   \   000060   3F           ADDC      A,R7
   \   000061   F9           MOV       R1,A
   \   000062   88..         MOV       ?V2,R0
   \   000064   89..         MOV       ?V3,R1
   \   000066                ; Setup parameters for call to function zclParseHdr
   \   000066   8882         MOV       DPL,R0
   \   000068   F583         MOV       DPH,A
   \   00006A   12....       LCALL     ??Subroutine235_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_543:
   \   00006D   7404         MOV       A,#0x4
   \   00006F   12....       LCALL     ?XSTACK_DISP0_8
   \   000072   AA82         MOV       R2,DPL
   \   000074   AB83         MOV       R3,DPH
   \   000076   12....       LCALL     `??zclParseHdr::?relay`; Banked call to: zclParseHdr
   \   000079   8A..         MOV       ?V4,R2
   \   00007B   8B..         MOV       ?V5,R3
   \   00007D   A8..         MOV       R0,?V4
   \   00007F   A9..         MOV       R1,?V5
   \   000081   740A         MOV       A,#0xa
   \   000083   12....       LCALL     ?XSTACK_DISP0_8
   \   000086   E8           MOV       A,R0
   \   000087   12....       LCALL     ?Subroutine33 & 0xFFFF
   2196            inMsg.pDataLen = pkt->cmd.DataLength;
   2197            inMsg.pDataLen -= (uint16)(inMsg.pData - pkt->cmd.Data);
   \                     ??CrossCallReturnLabel_38:
   \   00008A   12....       LCALL     ??Subroutine224_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_454:
   \   00008D   EA           MOV       A,R2
   \   00008E   C3           CLR       C
   \   00008F   98           SUBB      A,R0
   \   000090   F8           MOV       R0,A
   \   000091   EB           MOV       A,R3
   \   000092   99           SUBB      A,R1
   \   000093   F9           MOV       R1,A
   \   000094   85..82       MOV       DPL,?V2
   \   000097   85..83       MOV       DPH,?V3
   \   00009A   12....       LCALL     ?Subroutine183 & 0xFFFF
   \                     ??CrossCallReturnLabel_403:
   \   00009D   740C         MOV       A,#0xc
   \   00009F   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A2   12....       LCALL     ??Subroutine230_0 & 0xFFFF
   2198          
   2199            // Temporary workaround to allow callback functions access to the
   2200            // transaction sequence number.  Callback functions will call
   2201            // zcl_getParsedTransSeqNum() to retrieve this number.
   2202            savedZCLTransSeqNum = inMsg.hdr.transSeqNum;
   \                     ??CrossCallReturnLabel_517:
   \   0000A5   7408         MOV       A,#0x8
   \   0000A7   12....       LCALL     ?XSTACK_DISP0_8
   \   0000AA   E0           MOVX      A,@DPTR
   \   0000AB   90....       MOV       DPTR,#savedZCLTransSeqNum
   \   0000AE   F0           MOVX      @DPTR,A
   2203          
   2204            // Find the wanted endpoint
   2205            epDesc = afFindEndPointDesc( pkt->endPoint );
   \   0000AF   EE           MOV       A,R6
   \   0000B0   2414         ADD       A,#0x14
   \   0000B2   F5..         MOV       ?V0,A
   \   0000B4   E4           CLR       A
   \   0000B5   3F           ADDC      A,R7
   \   0000B6   F5..         MOV       ?V1,A
   \   0000B8                ; Setup parameters for call to function afFindEndPointDesc
   \   0000B8   85..82       MOV       DPL,?V0
   \   0000BB   F583         MOV       DPH,A
   \   0000BD   E0           MOVX      A,@DPTR
   \   0000BE   F9           MOV       R1,A
   \   0000BF   12....       LCALL     `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   0000C2   8A82         MOV       DPL,R2
   \   0000C4   8B83         MOV       DPH,R3
   2206            if ( epDesc == NULL )
   \   0000C6   E582         MOV       A,DPL
   \   0000C8   4583         ORL       A,DPH
   \   0000CA   700C         JNZ       ??zcl_ProcessMessageMSG_2
   2207            {
   2208              rawAFMsg = NULL;
   \   0000CC   90....       MOV       DPTR,#rawAFMsg
   \   0000CF   E4           CLR       A
   \   0000D0   F0           MOVX      @DPTR,A
   \   0000D1   A3           INC       DPTR
   \   0000D2   F0           MOVX      @DPTR,A
   2209              return ( ZCL_PROC_EP_NOT_FOUND );   // Error, ignore the message
   \   0000D3   7902         MOV       R1,#0x2
   \   0000D5   02....       LJMP      ??zcl_ProcessMessageMSG_1 & 0xFFFF
   2210            }
   2211          
   2212            if ( ( epDesc->simpleDesc == NULL ) ||
   2213                 ( zcl_DeviceOperational( pkt->endPoint, pkt->clusterId, inMsg.hdr.fc.type,
   2214                                          inMsg.hdr.commandID, epDesc->simpleDesc->AppProfId ) == FALSE ) )
   \                     ??zcl_ProcessMessageMSG_2:
   \   0000D8   12....       LCALL     ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_406:
   \   0000DB   602B         JZ        ??zcl_ProcessMessageMSG_3
   \   0000DD   EE           MOV       A,R6
   \   0000DE   2404         ADD       A,#0x4
   \   0000E0   F5..         MOV       ?V2,A
   \   0000E2   E4           CLR       A
   \   0000E3   3F           ADDC      A,R7
   \   0000E4   F5..         MOV       ?V3,A
   \   0000E6                ; Setup parameters for call to function zcl_DeviceOperational
   \   0000E6   A3           INC       DPTR
   \   0000E7   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   0000EA   740B         MOV       A,#0xb
   \   0000EC   12....       LCALL     ?XSTACK_DISP0_8
   \   0000EF   E0           MOVX      A,@DPTR
   \   0000F0   FD           MOV       R5,A
   \   0000F1   7406         MOV       A,#0x6
   \   0000F3   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F6   E0           MOVX      A,@DPTR
   \   0000F7   5403         ANL       A,#0x3
   \   0000F9   FC           MOV       R4,A
   \   0000FA   12....       LCALL     ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   0000FD   12....       LCALL     `??zcl_DeviceOperational::?relay`; Banked call to: zcl_DeviceOperational
   \   000100   7402         MOV       A,#0x2
   \   000102   12....       LCALL     ?DEALLOC_XSTACK8
   \   000105   E9           MOV       A,R1
   \   000106   700C         JNZ       ??zcl_ProcessMessageMSG_4
   2215            {
   2216              rawAFMsg = NULL;
   \                     ??zcl_ProcessMessageMSG_3:
   \   000108   90....       MOV       DPTR,#rawAFMsg
   \   00010B   E4           CLR       A
   \   00010C   F0           MOVX      @DPTR,A
   \   00010D   A3           INC       DPTR
   \   00010E   F0           MOVX      @DPTR,A
   2217              return ( ZCL_PROC_NOT_OPERATIONAL ); // Error, ignore the message
   \   00010F   7903         MOV       R1,#0x3
   \   000111   02....       LJMP      ??zcl_ProcessMessageMSG_1 & 0xFFFF
   2218            }
   2219          
   2220          #if defined ( INTER_PAN )
   2221            if ( StubAPS_InterPan( pkt->srcAddr.panId, pkt->srcAddr.endPoint ) )
   2222            {
   2223              // No foundation command is supported thru Inter-PAN communication.
   2224              // But the Light Link cluster uses a different Frame Control format
   2225              // for it's Inter-PAN messages, where the messages could be confused
   2226              // with the foundation commands.
   2227              if ( zcl_ProfileCmd( inMsg.hdr.fc.type ) )
   2228              {
   2229                rawAFMsg = NULL;
   2230                return ( ZCL_PROC_INTERPAN_FOUNDATION_CMD );
   2231              }
   2232          
   2233              interPanMsg = TRUE;
   2234              options = AF_TX_OPTIONS_NONE;
   2235            }
   2236            else
   2237          #endif
   2238            {
   2239              interPanMsg = FALSE;
   2240              options = zclGetClusterOption( pkt->endPoint, pkt->clusterId );
   \                     ??zcl_ProcessMessageMSG_4:
   \   000114                ; Setup parameters for call to function zclGetClusterOption
   \   000114   12....       LCALL     ?Subroutine60 & 0xFFFF
   2241            }
   \                     ??CrossCallReturnLabel_84:
   \   000117   12....       LCALL     `??zclGetClusterOption::?relay`; Banked call to: zclGetClusterOption
   \   00011A   E9           MOV       A,R1
   \   00011B   F5..         MOV       ?V6,A
   2242          
   2243            // Find the appropriate plugin
   2244            pInPlugin = zclFindPlugin( pkt->clusterId, epDesc->simpleDesc->AppProfId );
   \   00011D   85..82       MOV       DPL,?V2
   \   000120   85..83       MOV       DPH,?V3
   \   000123   12....       LCALL     ??Subroutine224_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_455:
   \   000126   EA           MOV       A,R2
   \   000127   FC           MOV       R4,A
   \   000128   EB           MOV       A,R3
   \   000129   FD           MOV       R5,A
   \   00012A   90....       MOV       DPTR,#plugins
   \   00012D   8004         SJMP      ??zcl_ProcessMessageMSG_5
   \                     ??zcl_ProcessMessageMSG_6:
   \   00012F   8882         MOV       DPL,R0
   \   000131   8983         MOV       DPH,R1
   \                     ??zcl_ProcessMessageMSG_5:
   \   000133   12....       LCALL     ??Subroutine218_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_428:
   \   000136   7003         JNZ       $+5
   \   000138   02....       LJMP      ??zcl_ProcessMessageMSG_7 & 0xFFFF
   \   00013B   8882         MOV       DPL,R0
   \   00013D   8983         MOV       DPH,R1
   \   00013F   A3           INC       DPTR
   \   000140   A3           INC       DPTR
   \   000141   12....       LCALL     ?Subroutine109 & 0xFFFF
   \                     ??CrossCallReturnLabel_184:
   \   000144   C3           CLR       C
   \   000145   EC           MOV       A,R4
   \   000146   95..         SUBB      A,?V4
   \   000148   ED           MOV       A,R5
   \   000149   95..         SUBB      A,?V5
   \   00014B   40E2         JC        ??zcl_ProcessMessageMSG_6
   \   00014D   8882         MOV       DPL,R0
   \   00014F   8983         MOV       DPH,R1
   \   000151   A3           INC       DPTR
   \   000152   A3           INC       DPTR
   \   000153   A3           INC       DPTR
   \   000154   A3           INC       DPTR
   \   000155   C3           CLR       C
   \   000156   E0           MOVX      A,@DPTR
   \   000157   9C           SUBB      A,R4
   \   000158   A3           INC       DPTR
   \   000159   E0           MOVX      A,@DPTR
   \   00015A   9D           SUBB      A,R5
   \   00015B   40D2         JC        ??zcl_ProcessMessageMSG_6
   \   00015D   E8           MOV       A,R0
   \   00015E   FC           MOV       R4,A
   \   00015F   E9           MOV       A,R1
   \   000160   FD           MOV       R5,A
   \   000161   7404         MOV       A,#0x4
   \   000163   12....       LCALL     ?XSTACK_DISP0_8
   \   000166   E0           MOVX      A,@DPTR
   \   000167   5407         ANL       A,#0x7
   \   000169   700D         JNZ       ??zcl_ProcessMessageMSG_8
   \   00016B   7409         MOV       A,#0x9
   \   00016D   12....       LCALL     ?XSTACK_DISP0_8
   \   000170   E0           MOVX      A,@DPTR
   \   000171   640B         XRL       A,#0xb
   \   000173   7003         JNZ       $+5
   \   000175   02....       LJMP      ??zcl_ProcessMessageMSG_9 & 0xFFFF
   2245          
   2246            // Local and remote Security options must match except for Default Response command
   2247            if ( ( pInPlugin != NULL ) && !zcl_DefaultRspCmd( inMsg.hdr ) )
   2248            {
   2249              securityEnable = ( options & AF_EN_SECURITY ) ? TRUE : FALSE;
   \                     ??zcl_ProcessMessageMSG_8:
   \   000178   E5..         MOV       A,?V6
   \   00017A   A2E6         MOV       C,0xE0 /* A   */.6
   \   00017C   4003         JC        $+5
   \   00017E   02....       LJMP      ??zcl_ProcessMessageMSG_9 & 0xFFFF
   \   000181   EE           MOV       A,R6
   \   000182   2419         ADD       A,#0x19
   \   000184   F582         MOV       DPL,A
   \   000186   E4           CLR       A
   \   000187   3F           ADDC      A,R7
   \   000188   F583         MOV       DPH,A
   \   00018A   E0           MOVX      A,@DPTR
   \   00018B   6003         JZ        $+5
   \   00018D   02....       LJMP      ??zcl_ProcessMessageMSG_9 & 0xFFFF
   2250          
   2251              // Make sure that Clusters specifically defined to use security are received secure,
   2252              // any other cluster that wants to use APS security will be allowed
   2253              if ( ( securityEnable == TRUE ) && ( pkt->SecurityUse == FALSE ) )
   2254              {
   2255                if ( UNICAST_MSG( inMsg.msg ) )
   \   000190   7402         MOV       A,#0x2
   \   000192   12....       LCALL     ?XSTACK_DISP0_8
   \   000195   12....       LCALL     ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_123:
   \   000198   707F         JNZ       ??zcl_ProcessMessageMSG_10
   \   00019A   7402         MOV       A,#0x2
   \   00019C   12....       LCALL     ?XSTACK_DISP0_8
   \   00019F   12....       LCALL     ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_436:
   \   0001A2   7075         JNZ       ??zcl_ProcessMessageMSG_10
   2256                {
   2257                  // Send a Default Response command back with no Application Link Key security
   2258                  zclSetSecurityOption( pkt->endPoint, pkt->clusterId, FALSE );
   \   0001A4                ; Setup parameters for call to function zclSetSecurityOption
   \   0001A4   7C00         MOV       R4,#0x0
   \   0001A6   85..82       MOV       DPL,?V0
   \   0001A9   85..83       MOV       DPH,?V1
   \   0001AC   E0           MOVX      A,@DPTR
   \   0001AD   F9           MOV       R1,A
   \   0001AE   12....       LCALL     `??zclSetSecurityOption::?relay`; Banked call to: zclSetSecurityOption
   2259          
   2260                  defautlRspCmd.statusCode = status;
   \   0001B1   7401         MOV       A,#0x1
   \   0001B3   12....       LCALL     ?XSTACK_DISP0_8
   \   0001B6   7401         MOV       A,#0x1
   \   0001B8   F0           MOVX      @DPTR,A
   2261                  defautlRspCmd.commandID = inMsg.hdr.commandID;
   \   0001B9   7409         MOV       A,#0x9
   \   0001BB   12....       LCALL     ?XSTACK_DISP0_8
   \   0001BE   12....       LCALL     ?Subroutine98 & 0xFFFF
   2262                  zcl_SendDefaultRspCmd( inMsg.msg->endPoint, &(inMsg.msg->srcAddr),
   2263                                         inMsg.msg->clusterId, &defautlRspCmd,
   2264                                         !inMsg.hdr.fc.direction, true,
   2265                                         inMsg.hdr.manuCode, inMsg.hdr.transSeqNum );
   \                     ??CrossCallReturnLabel_164:
   \   0001C1   12....       LCALL     ?XSTACK_DISP0_8
   \   0001C4   E0           MOVX      A,@DPTR
   \   0001C5   F5..         MOV       ?V4,A
   \   0001C7   78..         MOV       R0,#?V4
   \   0001C9   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001CC   7407         MOV       A,#0x7
   \   0001CE   12....       LCALL     ?XSTACK_DISP0_8
   \   0001D1   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   0001D4   75..01       MOV       ?V4,#0x1
   \   0001D7   78..         MOV       R0,#?V4
   \   0001D9   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001DC   7408         MOV       A,#0x8
   \   0001DE   12....       LCALL     ?XSTACK_DISP0_8
   \   0001E1   12....       LCALL     ??Subroutine246_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_587:
   \   0001E4   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001E7   7405         MOV       A,#0x5
   \   0001E9   12....       LCALL     ?XSTACK_DISP100_8
   \   0001EC   88..         MOV       ?V4,R0
   \   0001EE   89..         MOV       ?V5,R1
   \   0001F0   78..         MOV       R0,#?V4
   \   0001F2   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001F5   7409         MOV       A,#0x9
   \   0001F7   12....       LCALL     ?XSTACK_DISP0_8
   \   0001FA   12....       LCALL     ?Subroutine69 & 0xFFFF
   \                     ??CrossCallReturnLabel_116:
   \   0001FD   12....       LCALL     ?XSTACK_DISP0_8
   \   000200   12....       LCALL     ?Subroutine96 & 0xFFFF
   \                     ??CrossCallReturnLabel_160:
   \   000203   12....       LCALL     ?XSTACK_DISP0_8
   \   000206   12....       LCALL     ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_102:
   \   000209   12....       LCALL     `??zcl_SendDefaultRspCmd::?relay`; Banked call to: zcl_SendDefaultRspCmd
   \   00020C   7407         MOV       A,#0x7
   \   00020E   12....       LCALL     ?DEALLOC_XSTACK8
   2266          
   2267                  zclSetSecurityOption( pkt->endPoint, pkt->clusterId, TRUE );
   \   000211                ; Setup parameters for call to function zclSetSecurityOption
   \   000211   7C01         MOV       R4,#0x1
   \   000213   12....       LCALL     ?Subroutine60 & 0xFFFF
   2268                }
   \                     ??CrossCallReturnLabel_85:
   \   000216   12....       LCALL     `??zclSetSecurityOption::?relay`; Banked call to: zclSetSecurityOption
   2269          
   2270                rawAFMsg = NULL;
   \                     ??zcl_ProcessMessageMSG_10:
   \   000219   90....       MOV       DPTR,#rawAFMsg
   \   00021C   E4           CLR       A
   \   00021D   F0           MOVX      @DPTR,A
   \   00021E   A3           INC       DPTR
   \   00021F   F0           MOVX      @DPTR,A
   2271                return ( ZCL_PROC_NOT_SECURE );   // Error, ignore the message
   \   000220   7905         MOV       R1,#0x5
   \   000222   02....       LJMP      ??zcl_ProcessMessageMSG_1 & 0xFFFF
   2272              }
   2273            }
   \                     ??zcl_ProcessMessageMSG_7:
   \   000225   7C00         MOV       R4,#0x0
   \   000227   7D00         MOV       R5,#0x0
   2274          
   2275            // Is this a foundation type message
   2276            if ( !interPanMsg && zcl_ProfileCmd( inMsg.hdr.fc.type ) )
   \                     ??zcl_ProcessMessageMSG_9:
   \   000229   7404         MOV       A,#0x4
   \   00022B   12....       LCALL     ?XSTACK_DISP0_8
   \   00022E   E0           MOVX      A,@DPTR
   \   00022F   F8           MOV       R0,A
   \   000230   5403         ANL       A,#0x3
   \   000232   6003         JZ        $+5
   \   000234   02....       LJMP      ??zcl_ProcessMessageMSG_11 & 0xFFFF
   2277            {
   2278              if ( inMsg.hdr.fc.manuSpecific )
   \   000237   E8           MOV       A,R0
   \   000238   5404         ANL       A,#0x4
   \   00023A   6005         JZ        ??zcl_ProcessMessageMSG_12
   2279              {
   2280                // We don't support any manufacturer specific command
   2281                status = ZCL_STATUS_UNSUP_MANU_GENERAL_COMMAND;
   \   00023C   7E84         MOV       R6,#-0x7c
   \   00023E   02....       LJMP      ??zcl_ProcessMessageMSG_13 & 0xFFFF
   2282              }
   2283              else if ( ( inMsg.hdr.commandID <= ZCL_CMD_MAX ) &&
   2284                        ( zclCmdTable[inMsg.hdr.commandID].pfnParseInProfile != NULL ) )
   \                     ??zcl_ProcessMessageMSG_12:
   \   000241   7409         MOV       A,#0x9
   \   000243   12....       LCALL     ?XSTACK_DISP0_8
   \   000246   E0           MOVX      A,@DPTR
   \   000247   F8           MOV       R0,A
   \   000248   C3           CLR       C
   \   000249   9417         SUBB      A,#0x17
   \   00024B   4003         JC        $+5
   \   00024D   02....       LJMP      ??zcl_ProcessMessageMSG_14 & 0xFFFF
   \   000250   E8           MOV       A,R0
   \   000251   F5..         MOV       ?V2,A
   \   000253   75..00       MOV       ?V3,#0x0
   \   000256   7402         MOV       A,#0x2
   \   000258   78..         MOV       R0,#?V2
   \   00025A   12....       LCALL     ?S_SHL
   \   00025D   74..         MOV       A,#zclCmdTable & 0xff
   \   00025F   25..         ADD       A,?V2
   \   000261   F582         MOV       DPL,A
   \   000263   74..         MOV       A,#(zclCmdTable >> 8) & 0xff
   \   000265   35..         ADDC      A,?V3
   \   000267   12....       LCALL     ?Subroutine188 & 0xFFFF
   \                     ??CrossCallReturnLabel_400:
   \   00026A   E8           MOV       A,R0
   \   00026B   49           ORL       A,R1
   \   00026C   7003         JNZ       $+5
   \   00026E   02....       LJMP      ??zcl_ProcessMessageMSG_14 & 0xFFFF
   2285              {
   2286                zclParseCmd_t parseCmd;
   2287          
   2288                parseCmd.endpoint = pkt->endPoint;
   \   000271   85..82       MOV       DPL,?V0
   \   000274   85..83       MOV       DPH,?V1
   \   000277   E0           MOVX      A,@DPTR
   \   000278   C0E0         PUSH      A
   \   00027A   7410         MOV       A,#0x10
   \   00027C   12....       LCALL     ?XSTACK_DISP0_8
   \   00027F   D0E0         POP       A
   \   000281   F0           MOVX      @DPTR,A
   2289                parseCmd.dataLen = inMsg.pDataLen;
   \   000282   740C         MOV       A,#0xc
   \   000284   12....       LCALL     ?XSTACK_DISP0_8
   \   000287   12....       LCALL     ??Subroutine224_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_456:
   \   00028A   7411         MOV       A,#0x11
   \   00028C   12....       LCALL     ?XSTACK_DISP0_8
   \   00028F   12....       LCALL     ??Subroutine244_0 & 0xFFFF
   2290                parseCmd.pData = inMsg.pData;
   \                     ??CrossCallReturnLabel_576:
   \   000292   740A         MOV       A,#0xa
   \   000294   12....       LCALL     ?XSTACK_DISP0_8
   \   000297   12....       LCALL     ??Subroutine224_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_457:
   \   00029A   7413         MOV       A,#0x13
   \   00029C   12....       LCALL     ?XSTACK_DISP0_8
   \   00029F   12....       LCALL     ??Subroutine244_0 & 0xFFFF
   2291          
   2292                // Parse the command, remember that the return value is a pointer to allocated memory
   2293                inMsg.attrCmd = zclParseCmd( inMsg.hdr.commandID, &parseCmd );
   \                     ??CrossCallReturnLabel_577:
   \   0002A2                ; Setup parameters for indirect call
   \   0002A2   7410         MOV       A,#0x10
   \   0002A4   12....       LCALL     ?XSTACK_DISP101_8
   \   0002A7   8882         MOV       DPL,R0
   \   0002A9   8983         MOV       DPH,R1
   \   0002AB   12....       LCALL     ?CALL_IND
   \   0002AE   8A..         MOV       ?V0,R2
   \   0002B0   8B..         MOV       ?V1,R3
   \   0002B2   A8..         MOV       R0,?V0
   \   0002B4   A9..         MOV       R1,?V1
   \   0002B6   740E         MOV       A,#0xe
   \   0002B8   12....       LCALL     ?XSTACK_DISP0_8
   \   0002BB   12....       LCALL     ??Subroutine230_0 & 0xFFFF
   2294                if ( (inMsg.attrCmd != NULL) && (zclCmdTable[inMsg.hdr.commandID].pfnProcessInProfile != NULL) )
   \                     ??CrossCallReturnLabel_518:
   \   0002BE   E8           MOV       A,R0
   \   0002BF   49           ORL       A,R1
   \   0002C0   6046         JZ        ??zcl_ProcessMessageMSG_15
   \   0002C2   7409         MOV       A,#0x9
   \   0002C4   12....       LCALL     ?XSTACK_DISP0_8
   \   0002C7   E0           MOVX      A,@DPTR
   \   0002C8   F5..         MOV       ?V0,A
   \   0002CA   75..00       MOV       ?V1,#0x0
   \   0002CD   7402         MOV       A,#0x2
   \   0002CF   78..         MOV       R0,#?V0
   \   0002D1   12....       LCALL     ?S_SHL
   \   0002D4   74..         MOV       A,#(zclCmdTable + 2) & 0xff
   \   0002D6   25..         ADD       A,?V0
   \   0002D8   F582         MOV       DPL,A
   \   0002DA   74..         MOV       A,#((zclCmdTable + 2) >> 8) & 0xff
   \   0002DC   35..         ADDC      A,?V1
   \   0002DE   12....       LCALL     ?Subroutine188 & 0xFFFF
   \                     ??CrossCallReturnLabel_401:
   \   0002E1   8882         MOV       DPL,R0
   \   0002E3   8983         MOV       DPH,R1
   \   0002E5   E582         MOV       A,DPL
   \   0002E7   4583         ORL       A,DPH
   \   0002E9   6012         JZ        ??zcl_ProcessMessageMSG_16
   2295                {
   2296                  // Process the command
   2297                  if ( zclProcessCmd( inMsg.hdr.commandID, &inMsg ) == FALSE )
   \   0002EB                ; Setup parameters for indirect call
   \   0002EB   7402         MOV       A,#0x2
   \   0002ED   12....       LCALL     ?XSTACK_DISP101_8
   \   0002F0   12....       LCALL     ?CALL_IND
   2298                  {
   2299                    // Couldn't find attribute in the table.
   2300                  }
   2301                }
   2302          
   2303                // Free the buffer
   2304                if ( inMsg.attrCmd )
   \   0002F3   740E         MOV       A,#0xe
   \   0002F5   12....       LCALL     ?XSTACK_DISP0_8
   \   0002F8   12....       LCALL     ??Subroutine218_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_429:
   \   0002FB   600B         JZ        ??zcl_ProcessMessageMSG_15
   2305                {
   2306                  zcl_mem_free( inMsg.attrCmd );
   \                     ??zcl_ProcessMessageMSG_16:
   \   0002FD                ; Setup parameters for call to function osal_mem_free
   \   0002FD   740E         MOV       A,#0xe
   \   0002FF   12....       LCALL     ?XSTACK_DISP0_8
   \   000302   12....       LCALL     ??Subroutine224_0 & 0xFFFF
   2307                }
   \                     ??CrossCallReturnLabel_458:
   \   000305   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2308          
   2309                if ( CMD_HAS_RSP( inMsg.hdr.commandID ) )
   \                     ??zcl_ProcessMessageMSG_15:
   \   000308   7409         MOV       A,#0x9
   \   00030A   12....       LCALL     ?XSTACK_DISP0_8
   \   00030D   E0           MOVX      A,@DPTR
   \   00030E   F8           MOV       R0,A
   \   00030F   6058         JZ        ??zcl_ProcessMessageMSG_17
   \   000311   7402         MOV       A,#0x2
   \   000313   68           XRL       A,R0
   \   000314   6053         JZ        ??zcl_ProcessMessageMSG_17
   \   000316   7403         MOV       A,#0x3
   \   000318   68           XRL       A,R0
   \   000319   604E         JZ        ??zcl_ProcessMessageMSG_17
   \   00031B   7405         MOV       A,#0x5
   \   00031D   68           XRL       A,R0
   \   00031E   6049         JZ        ??zcl_ProcessMessageMSG_17
   \   000320   7406         MOV       A,#0x6
   \   000322   68           XRL       A,R0
   \   000323   6044         JZ        ??zcl_ProcessMessageMSG_17
   \   000325   7408         MOV       A,#0x8
   \   000327   68           XRL       A,R0
   \   000328   603F         JZ        ??zcl_ProcessMessageMSG_17
   \   00032A   740C         MOV       A,#0xc
   \   00032C   68           XRL       A,R0
   \   00032D   603A         JZ        ??zcl_ProcessMessageMSG_17
   \   00032F   7411         MOV       A,#0x11
   \   000331   68           XRL       A,R0
   \   000332   6035         JZ        ??zcl_ProcessMessageMSG_17
   \   000334   7413         MOV       A,#0x13
   \   000336   68           XRL       A,R0
   \   000337   6030         JZ        ??zcl_ProcessMessageMSG_17
   \   000339   7415         MOV       A,#0x15
   \   00033B   68           XRL       A,R0
   \   00033C   602B         JZ        ??zcl_ProcessMessageMSG_17
   \   00033E   740B         MOV       A,#0xb
   \   000340   68           XRL       A,R0
   \   000341   6026         JZ        ??zcl_ProcessMessageMSG_17
   2310                {
   2311                  rawAFMsg = NULL;
   2312                  return ( ZCL_PROC_SUCCESS ); // We're done
   2313                }
   2314          
   2315                status = ZSuccess;
   \   000343   7E00         MOV       R6,#0x0
   \   000345   8042         SJMP      ??zcl_ProcessMessageMSG_13
   2316              }
   2317              else
   2318              {
   2319                // Unsupported message
   2320                status = ZCL_STATUS_UNSUP_GENERAL_COMMAND;
   \                     ??zcl_ProcessMessageMSG_14:
   \   000347   7E82         MOV       R6,#-0x7e
   \   000349   803E         SJMP      ??zcl_ProcessMessageMSG_13
   2321              }
   2322            }
   2323            else  // Not a foundation type message, so it must be specific to the cluster ID.
   2324            {
   2325              if ( pInPlugin && pInPlugin->pfnIncomingHdlr )
   \                     ??zcl_ProcessMessageMSG_11:
   \   00034B   EC           MOV       A,R4
   \   00034C   4D           ORL       A,R5
   \   00034D   602A         JZ        ??zcl_ProcessMessageMSG_18
   \   00034F   8C82         MOV       DPL,R4
   \   000351   8D83         MOV       DPH,R5
   \   000353   A3           INC       DPTR
   \   000354   A3           INC       DPTR
   \   000355   12....       LCALL     ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_407:
   \   000358   601F         JZ        ??zcl_ProcessMessageMSG_18
   2326              {
   2327                // The return value of the plugin function will be
   2328                //  ZSuccess - Supported and need default response
   2329                //  ZFailure - Unsupported
   2330                //  ZCL_STATUS_CMD_HAS_RSP - Supported and do not need default rsp
   2331                //  ZCL_STATUS_INVALID_FIELD - Supported, but the incoming msg is wrong formatted
   2332                //  ZCL_STATUS_INVALID_VALUE - Supported, but the request not achievable by the h/w
   2333                //  ZCL_STATUS_SOFTWARE_FAILURE - Supported but ZStack memory allocation fails
   2334                status = pInPlugin->pfnIncomingHdlr( &inMsg );
   \   00035A                ; Setup parameters for indirect call
   \   00035A   7402         MOV       A,#0x2
   \   00035C   12....       LCALL     ?XSTACK_DISP101_8
   \   00035F   12....       LCALL     ?CALL_IND
   \   000362   E9           MOV       A,R1
   \   000363   FE           MOV       R6,A
   2335                if ( status == ZCL_STATUS_CMD_HAS_RSP || ( interPanMsg && status == ZSuccess ) )
   \   000364   74FF         MOV       A,#-0x1
   \   000366   6E           XRL       A,R6
   \   000367   700B         JNZ       ??zcl_ProcessMessageMSG_19
   2336                {
   2337                  rawAFMsg = NULL;
   \                     ??zcl_ProcessMessageMSG_17:
   \   000369   90....       MOV       DPTR,#rawAFMsg
   \   00036C   E4           CLR       A
   \   00036D   F0           MOVX      @DPTR,A
   \   00036E   A3           INC       DPTR
   \   00036F   F0           MOVX      @DPTR,A
   2338                  return ( ZCL_PROC_SUCCESS ); // We're done
   \   000370   F9           MOV       R1,A
   \   000371   02....       LJMP      ??zcl_ProcessMessageMSG_1 & 0xFFFF
   2339                }
   2340              }
   2341          
   2342              if ( status == ZFailure )
   \                     ??zcl_ProcessMessageMSG_19:
   \   000374   7401         MOV       A,#0x1
   \   000376   6E           XRL       A,R6
   \   000377   7010         JNZ       ??zcl_ProcessMessageMSG_13
   2343              {
   2344                // Unsupported message
   2345                if ( inMsg.hdr.fc.manuSpecific )
   \                     ??zcl_ProcessMessageMSG_18:
   \   000379   7404         MOV       A,#0x4
   \   00037B   12....       LCALL     ?XSTACK_DISP0_8
   \   00037E   E0           MOVX      A,@DPTR
   \   00037F   5404         ANL       A,#0x4
   \   000381   6004         JZ        ??zcl_ProcessMessageMSG_20
   2346                {
   2347                  status = ZCL_STATUS_UNSUP_MANU_CLUSTER_COMMAND;
   \   000383   7E83         MOV       R6,#-0x7d
   \   000385   8002         SJMP      ??zcl_ProcessMessageMSG_13
   2348                }
   2349                else
   2350                {
   2351                  status = ZCL_STATUS_UNSUP_CLUSTER_COMMAND;
   \                     ??zcl_ProcessMessageMSG_20:
   \   000387   7E81         MOV       R6,#-0x7f
   2352                }
   2353              }
   2354            }
   2355          
   2356            if ( UNICAST_MSG( inMsg.msg ) && inMsg.hdr.fc.disableDefaultRsp == 0 )
   \                     ??zcl_ProcessMessageMSG_13:
   \   000389   7402         MOV       A,#0x2
   \   00038B   12....       LCALL     ?XSTACK_DISP0_8
   \   00038E   12....       LCALL     ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_124:
   \   000391   7070         JNZ       ??zcl_ProcessMessageMSG_21
   \   000393   7402         MOV       A,#0x2
   \   000395   12....       LCALL     ?XSTACK_DISP0_8
   \   000398   12....       LCALL     ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_437:
   \   00039B   7066         JNZ       ??zcl_ProcessMessageMSG_21
   \   00039D   7404         MOV       A,#0x4
   \   00039F   12....       LCALL     ?XSTACK_DISP0_8
   \   0003A2   E0           MOVX      A,@DPTR
   \   0003A3   FA           MOV       R2,A
   \   0003A4   5410         ANL       A,#0x10
   \   0003A6   705B         JNZ       ??zcl_ProcessMessageMSG_21
   2357            {
   2358              // Send a Default Response command back
   2359              defautlRspCmd.statusCode = status;
   \   0003A8   7401         MOV       A,#0x1
   \   0003AA   12....       LCALL     ?XSTACK_DISP0_8
   \   0003AD   EE           MOV       A,R6
   \   0003AE   F0           MOVX      @DPTR,A
   2360              defautlRspCmd.commandID = inMsg.hdr.commandID;
   \   0003AF   7409         MOV       A,#0x9
   \   0003B1   12....       LCALL     ?XSTACK_DISP0_8
   \   0003B4   12....       LCALL     ?Subroutine98 & 0xFFFF
   2361              zcl_SendDefaultRspCmd( inMsg.msg->endPoint, &(inMsg.msg->srcAddr),
   2362                                     inMsg.msg->clusterId, &defautlRspCmd,
   2363                                     !inMsg.hdr.fc.direction, true,
   2364                                     inMsg.hdr.manuCode, inMsg.hdr.transSeqNum );
   \                     ??CrossCallReturnLabel_165:
   \   0003B7   12....       LCALL     ?XSTACK_DISP0_8
   \   0003BA   12....       LCALL     ?Subroutine63 & 0xFFFF
   \                     ??CrossCallReturnLabel_100:
   \   0003BD   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0003C0   7407         MOV       A,#0x7
   \   0003C2   12....       LCALL     ?XSTACK_DISP0_8
   \   0003C5   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   0003C8   75..01       MOV       ?V0,#0x1
   \   0003CB   78..         MOV       R0,#?V0
   \   0003CD   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0003D0   EA           MOV       A,R2
   \   0003D1   12....       LCALL     ?Subroutine135 & 0xFFFF
   \                     ??CrossCallReturnLabel_239:
   \   0003D4   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0003D7   7405         MOV       A,#0x5
   \   0003D9   12....       LCALL     ?XSTACK_DISP100_8
   \   0003DC   88..         MOV       ?V0,R0
   \   0003DE   89..         MOV       ?V1,R1
   \   0003E0   78..         MOV       R0,#?V0
   \   0003E2   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0003E5   7409         MOV       A,#0x9
   \   0003E7   12....       LCALL     ?XSTACK_DISP0_8
   \   0003EA   12....       LCALL     ?Subroutine69 & 0xFFFF
   \                     ??CrossCallReturnLabel_117:
   \   0003ED   12....       LCALL     ?XSTACK_DISP0_8
   \   0003F0   12....       LCALL     ?Subroutine96 & 0xFFFF
   \                     ??CrossCallReturnLabel_161:
   \   0003F3   12....       LCALL     ?XSTACK_DISP0_8
   \   0003F6   12....       LCALL     ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_103:
   \   0003F9   12....       LCALL     `??zcl_SendDefaultRspCmd::?relay`; Banked call to: zcl_SendDefaultRspCmd
   \   0003FC   7407         MOV       A,#0x7
   \   0003FE   12....       LCALL     ?DEALLOC_XSTACK8
   2365              defaultResponseSent = TRUE;
   \   000401   D2..         SETB      ?VB.0
   2366            }
   2367          
   2368            rawAFMsg = NULL;
   \                     ??zcl_ProcessMessageMSG_21:
   \   000403   90....       MOV       DPTR,#rawAFMsg
   \   000406   E4           CLR       A
   \   000407   F0           MOVX      @DPTR,A
   \   000408   A3           INC       DPTR
   \   000409   F0           MOVX      @DPTR,A
   2369            if ( status == ZSuccess )
   \   00040A   EE           MOV       A,R6
   \   00040B   7004         JNZ       ??zcl_ProcessMessageMSG_22
   2370            {
   2371              return ( ZCL_PROC_SUCCESS );
   \   00040D   7900         MOV       R1,#0x0
   \   00040F   8019         SJMP      ??zcl_ProcessMessageMSG_1
   2372            }
   2373            else if ( status == ZCL_STATUS_UNSUP_MANU_GENERAL_COMMAND )
   \                     ??zcl_ProcessMessageMSG_22:
   \   000411   7484         MOV       A,#-0x7c
   \   000413   6E           XRL       A,R6
   \   000414   A2..         MOV       C,?VB.0
   \   000416   700A         JNZ       ??zcl_ProcessMessageMSG_23
   2374            {
   2375              if ( defaultResponseSent )
   \   000418   5004         JNC       ??zcl_ProcessMessageMSG_24
   2376              {
   2377                return ( ZCL_PROC_MANUFACTURER_SPECIFIC_DR );
   \   00041A   7907         MOV       R1,#0x7
   \   00041C   800C         SJMP      ??zcl_ProcessMessageMSG_1
   2378              }
   2379              else
   2380              {
   2381                return ( ZCL_PROC_MANUFACTURER_SPECIFIC );
   \                     ??zcl_ProcessMessageMSG_24:
   \   00041E   7906         MOV       R1,#0x6
   \   000420   8008         SJMP      ??zcl_ProcessMessageMSG_1
   2382              }
   2383            }
   2384            else
   2385            {
   2386              if ( defaultResponseSent )
   \                     ??zcl_ProcessMessageMSG_23:
   \   000422   5004         JNC       ??zcl_ProcessMessageMSG_25
   2387              {
   2388                return ( ZCL_PROC_NOT_HANDLED_DR );
   \   000424   7909         MOV       R1,#0x9
   \   000426   8002         SJMP      ??zcl_ProcessMessageMSG_1
   2389              }
   2390              else
   2391              {
   2392                return ( ZCL_PROC_NOT_HANDLED );
   \                     ??zcl_ProcessMessageMSG_25:
   \   000428   7908         MOV       R1,#0x8
   \                     ??zcl_ProcessMessageMSG_1:
   \   00042A   7415         MOV       A,#0x15
   \   00042C   12....       LCALL     ?DEALLOC_XSTACK8
   2393              }
   2394            }
   \   00042F   02....       LJMP      ?Subroutine9 & 0xFFFF
   2395          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine188:
   \   000000   F583         MOV       DPH,A
   \   000002                REQUIRE ??Subroutine209_0
   \   000002                ; // Fall through to label ??Subroutine209_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine209_0:
   \   000000   E4           CLR       A
   \   000001   93           MOVC      A,@A+DPTR
   \   000002   F8           MOV       R0,A
   \   000003   7401         MOV       A,#0x1
   \   000005   93           MOVC      A,@A+DPTR
   \   000006   F9           MOV       R1,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine183:
   \   000000   E0           MOVX      A,@DPTR
   \   000001                REQUIRE ??Subroutine210_0
   \   000001                ; // Fall through to label ??Subroutine210_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine210_0:
   \   000000   28           ADD       A,R0
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   39           ADDC      A,R1
   \   000005   F9           MOV       R1,A
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine98:
   \   000000   12....       LCALL     ?Subroutine175 & 0xFFFF
   \                     ??CrossCallReturnLabel_307:
   \   000003                ; Setup parameters for call to function zcl_SendDefaultRspCmd
   \   000003                ; Setup parameters for call to function zcl_SendDefaultRspCmd
   \   000003   7408         MOV       A,#0x8
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine96:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   2406         ADD       A,#0x6
   \   000003   FA           MOV       R2,A
   \   000004   A3           INC       DPTR
   \   000005   E0           MOVX      A,@DPTR
   \   000006   3400         ADDC      A,#0x0
   \   000008   FB           MOV       R3,A
   \   000009   7409         MOV       A,#0x9
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine74:
   \   000000   12....       LCALL     ?Subroutine194 & 0xFFFF
   \                     ??CrossCallReturnLabel_504:
   \   000003   C8           XCH       A,R0
   \   000004   2415         ADD       A,#0x15
   \   000006   F582         MOV       DPL,A
   \   000008   E4           CLR       A
   \   000009   38           ADDC      A,R0
   \   00000A   F583         MOV       DPH,A
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine69:
   \   000000   12....       LCALL     ?Subroutine157 & 0xFFFF
   \                     ??CrossCallReturnLabel_284:
   \   000003   12....       LCALL     ?Subroutine159 & 0xFFFF
   \                     ??CrossCallReturnLabel_570:
   \   000006   7409         MOV       A,#0x9
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine60:
   \   000000   85..82       MOV       DPL,?V2
   \   000003   85..83       MOV       DPH,?V3
   \   000006   12....       LCALL     ??Subroutine202_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_608:
   \   000009   85..82       MOV       DPL,?V0
   \   00000C   85..83       MOV       DPH,?V1
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   F9           MOV       R1,A
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine59:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004                REQUIRE ??Subroutine211_0
   \   000004                ; // Fall through to label ??Subroutine211_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine211_0:
   \   000000   12....       LCALL     ?Subroutine158 & 0xFFFF
   \                     ??CrossCallReturnLabel_410:
   \   000003   E582         MOV       A,DPL
   \   000005   4583         ORL       A,DPH
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine50:
   \   000000   12....       LCALL     ?Subroutine157 & 0xFFFF
   \                     ??CrossCallReturnLabel_283:
   \   000003                REQUIRE ??Subroutine217_0
   \   000003                ; // Fall through to label ??Subroutine217_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   7F07         MOV       R7,#0x7
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   A3           INC       DPTR
   \   000002   E9           MOV       A,R1
   \   000003   12....       LCALL     ?Subroutine147 & 0xFFFF
   \                     ??CrossCallReturnLabel_261:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine147:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   85..82       MOV       DPL,?V0
   \   000004   85..83       MOV       DPH,?V1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine135:
   \   000000   13           RRC       A
   \   000001   13           RRC       A
   \   000002   13           RRC       A
   \   000003   541F         ANL       A,#0x1f
   \   000005   6401         XRL       A,#0x1
   \   000007   5401         ANL       A,#0x1
   \   000009   F5..         MOV       ?V0,A
   \   00000B   78..         MOV       R0,#?V0
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine64:
   \   000000   A3           INC       DPTR
   \   000001   E0           MOVX      A,@DPTR
   \   000002   C8           XCH       A,R0
   \   000003   12....       LCALL     ?Subroutine187 & 0xFFFF
   \                     ??CrossCallReturnLabel_600:
   \   000006   38           ADDC      A,R0
   \   000007   F583         MOV       DPH,A
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   F9           MOV       R1,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine157:
   \   000000   12....       LCALL     ?Subroutine194 & 0xFFFF
   \                     ??CrossCallReturnLabel_505:
   \   000003   F583         MOV       DPH,A
   \   000005   8882         MOV       DPL,R0
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine159:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004                REQUIRE ??Subroutine242_0
   \   000004                ; // Fall through to label ??Subroutine242_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine246_0:
   \   000000   12....       LCALL     ?Subroutine168 & 0xFFFF
   \                     ??CrossCallReturnLabel_591:
   \   000003   F5..         MOV       ?V4,A
   \   000005   78..         MOV       R0,#?V4
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine168:
   \   000000   12....       LCALL     ?Subroutine195 & 0xFFFF
   \                     ??CrossCallReturnLabel_606:
   \   000003   6401         XRL       A,#0x1
   \   000005   5401         ANL       A,#0x1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine195:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   13           RRC       A
   \   000002   13           RRC       A
   \   000003   13           RRC       A
   \   000004   541F         ANL       A,#0x1f
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine175:
   \   000000   12....       LCALL     ?Subroutine192 & 0xFFFF
   \                     ??CrossCallReturnLabel_332:
   \   000003   F0           MOVX      @DPTR,A
   \   000004   22           RET
   2396          
   2397          /*********************************************************************
   2398           * PRIVATE FUNCTIONS
   2399           *********************************************************************/
   2400          
   2401          /*********************************************************************
   2402           * @fn      zclParseHdr
   2403           *
   2404           * @brief   Parse header of the ZCL format
   2405           *
   2406           * @param   hdr - place to put the frame control information
   2407           * @param   pData - incoming buffer to parse
   2408           *
   2409           * @return  pointer past the header
   2410           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2411          uint8 *zclParseHdr( zclFrameHdr_t *hdr, uint8 *pData )
   \                     zclParseHdr:
   2412          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   EC           MOV       A,R4
   \   00000A   FE           MOV       R6,A
   \   00000B   ED           MOV       A,R5
   \   00000C   FF           MOV       R7,A
   2413            // Clear the header
   2414            zcl_memset( (uint8 *)hdr, 0, sizeof ( zclFrameHdr_t ) );
   \   00000D                ; Setup parameters for call to function osal_memset
   \   00000D   7C06         MOV       R4,#0x6
   \   00000F   7D00         MOV       R5,#0x0
   \   000011   7900         MOV       R1,#0x0
   \   000013   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   2415          
   2416            // Parse the Frame Control
   2417            hdr->fc.type = zcl_FCType( *pData );
   \   000016   85..82       MOV       DPL,?V0
   \   000019   85..83       MOV       DPH,?V1
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   54FC         ANL       A,#0xfc
   \   00001F   F8           MOV       R0,A
   \   000020   A3           INC       DPTR
   \   000021   E0           MOVX      A,@DPTR
   \   000022   F9           MOV       R1,A
   \   000023   8E82         MOV       DPL,R6
   \   000025   8F83         MOV       DPH,R7
   \   000027   E0           MOVX      A,@DPTR
   \   000028   5403         ANL       A,#0x3
   \   00002A   FA           MOV       R2,A
   \   00002B   E8           MOV       A,R0
   \   00002C   4A           ORL       A,R2
   \   00002D   85..82       MOV       DPL,?V0
   \   000030   85..83       MOV       DPH,?V1
   \   000033   F0           MOVX      @DPTR,A
   \   000034   A3           INC       DPTR
   \   000035   E9           MOV       A,R1
   \   000036   12....       LCALL     ?Subroutine30 & 0xFFFF
   2418            hdr->fc.manuSpecific = zcl_FCManuSpecific( *pData ) ? 1 : 0;
   \                     ??CrossCallReturnLabel_30:
   \   000039   A2E2         MOV       C,0xE0 /* A   */.2
   \   00003B   5004         JNC       ??zclParseHdr_0
   \   00003D   D2F0         SETB      B.0
   \   00003F   8002         SJMP      ??zclParseHdr_1
   \                     ??zclParseHdr_0:
   \   000041   C2F0         CLR       B.0
   \                     ??zclParseHdr_1:
   \   000043   85..82       MOV       DPL,?V0
   \   000046   85..83       MOV       DPH,?V1
   \   000049   E0           MOVX      A,@DPTR
   \   00004A   54FB         ANL       A,#0xfb
   \   00004C   F0           MOVX      @DPTR,A
   \   00004D   A2F0         MOV       C,B.0
   \   00004F   E4           CLR       A
   \   000050   33           RLC       A
   \   000051   F5..         MOV       ?V2,A
   \   000053   75..00       MOV       ?V3,#0x0
   \   000056   7402         MOV       A,#0x2
   \   000058   78..         MOV       R0,#?V2
   \   00005A   12....       LCALL     ?S_SHL
   \   00005D   E0           MOVX      A,@DPTR
   \   00005E   45..         ORL       A,?V2
   \   000060   12....       LCALL     ?Subroutine30 & 0xFFFF
   2419            if ( zcl_FCDirection( *pData ) )
   \                     ??CrossCallReturnLabel_31:
   \   000063   A2E3         MOV       C,0xE0 /* A   */.3
   \   000065   85..82       MOV       DPL,?V0
   \   000068   85..83       MOV       DPH,?V1
   \   00006B   E0           MOVX      A,@DPTR
   \   00006C   5004         JNC       ??zclParseHdr_2
   2420            {
   2421              hdr->fc.direction = ZCL_FRAME_SERVER_CLIENT_DIR;
   \   00006E   4408         ORL       A,#0x8
   \   000070   8002         SJMP      ??zclParseHdr_3
   2422            }
   2423            else
   2424            {
   2425              hdr->fc.direction = ZCL_FRAME_CLIENT_SERVER_DIR;
   \                     ??zclParseHdr_2:
   \   000072   54F7         ANL       A,#0xf7
   2426            }
   \                     ??zclParseHdr_3:
   \   000074   12....       LCALL     ?Subroutine30 & 0xFFFF
   2427          
   2428            hdr->fc.disableDefaultRsp = zcl_FCDisableDefaultRsp( *pData ) ? 1 : 0;
   \                     ??CrossCallReturnLabel_32:
   \   000077   A2E4         MOV       C,0xE0 /* A   */.4
   \   000079   5004         JNC       ??zclParseHdr_4
   \   00007B   D2F0         SETB      B.0
   \   00007D   8002         SJMP      ??zclParseHdr_5
   \                     ??zclParseHdr_4:
   \   00007F   C2F0         CLR       B.0
   \                     ??zclParseHdr_5:
   \   000081   85..82       MOV       DPL,?V0
   \   000084   85..83       MOV       DPH,?V1
   \   000087   E0           MOVX      A,@DPTR
   \   000088   54EF         ANL       A,#0xef
   \   00008A   F0           MOVX      @DPTR,A
   \   00008B   A2F0         MOV       C,B.0
   \   00008D   E4           CLR       A
   \   00008E   33           RLC       A
   \   00008F   F5..         MOV       ?V2,A
   \   000091   7404         MOV       A,#0x4
   \   000093   78..         MOV       R0,#?V2
   \   000095   12....       LCALL     ?S_SHL
   \   000098   E0           MOVX      A,@DPTR
   \   000099   45..         ORL       A,?V2
   \   00009B   12....       LCALL     ?Subroutine23 & 0xFFFF
   2429            pData++;  // move past the frame control field
   2430          
   2431            // parse the manfacturer code
   2432            if ( hdr->fc.manuSpecific )
   \                     ??CrossCallReturnLabel_15:
   \   00009E   85..82       MOV       DPL,?V0
   \   0000A1   85..83       MOV       DPH,?V1
   \   0000A4   E0           MOVX      A,@DPTR
   \   0000A5   5404         ANL       A,#0x4
   \   0000A7   6010         JZ        ??zclParseHdr_6
   2433            {
   2434              hdr->manuCode = BUILD_UINT16( pData[0], pData[1] );
   \   0000A9   8E82         MOV       DPL,R6
   \   0000AB   8F83         MOV       DPH,R7
   \   0000AD   E0           MOVX      A,@DPTR
   \   0000AE   FA           MOV       R2,A
   \   0000AF   A3           INC       DPTR
   \   0000B0   12....       LCALL     ?Subroutine100 & 0xFFFF
   2435              pData += 2;
   2436            }
   \                     ??CrossCallReturnLabel_168:
   \   0000B3   12....       LCALL     ??Subroutine212_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_413:
   \   0000B6   5001         JNC       ??zclParseHdr_6
   \   0000B8   0F           INC       R7
   2437          
   2438            // parse the Transaction Sequence Number
   2439            hdr->transSeqNum = *pData++;
   \                     ??zclParseHdr_6:
   \   0000B9   8E82         MOV       DPL,R6
   \   0000BB   8F83         MOV       DPH,R7
   \   0000BD   12....       LCALL     ?Subroutine94 & 0xFFFF
   \                     ??CrossCallReturnLabel_158:
   \   0000C0   12....       LCALL     ?Subroutine39 & 0xFFFF
   2440          
   2441            // parse the Cluster's command ID
   2442            hdr->commandID = *pData++;
   \                     ??CrossCallReturnLabel_48:
   \   0000C3   12....       LCALL     ?Subroutine94 & 0xFFFF
   \                     ??CrossCallReturnLabel_159:
   \   0000C6   A3           INC       DPTR
   \   0000C7   F0           MOVX      @DPTR,A
   2443          
   2444            // Should point to the frame payload
   2445            return ( pData );
   \   0000C8   EE           MOV       A,R6
   \   0000C9   12....       LCALL     ??Subroutine248_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_614:
   \   0000CC   3F           ADDC      A,R7
   \   0000CD   FB           MOV       R3,A
   \   0000CE   02....       LJMP      ??Subroutine198_0 & 0xFFFF
   2446          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine94:
   \   000000   12....       LCALL     ?Subroutine176 & 0xFFFF
   \                     ??CrossCallReturnLabel_309:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine212_0:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine213_0
   \   000001                ; // Fall through to label ??Subroutine213_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine213_0:
   \   000000   A3           INC       DPTR
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   E9           MOV       A,R1
   \   000004   F0           MOVX      @DPTR,A
   \   000005   EE           MOV       A,R6
   \   000006   2402         ADD       A,#0x2
   \   000008   FE           MOV       R6,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   12....       LCALL     ?Subroutine146 & 0xFFFF
   \                     ??CrossCallReturnLabel_481:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine146:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8E82         MOV       DPL,R6
   \   000003   8F83         MOV       DPH,R7
   \   000005   A3           INC       DPTR
   \   000006   AE82         MOV       R6,DPL
   \   000008   AF83         MOV       R7,DPH
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine100:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F9           MOV       R1,A
   \   000002   EA           MOV       A,R2
   \   000003   85..82       MOV       DPL,?V0
   \   000006   85..83       MOV       DPH,?V1
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine248_0:
   \   000000   2402         ADD       A,#0x2
   \   000002   FA           MOV       R2,A
   \   000003   E4           CLR       A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   12....       LCALL     ?Subroutine155 & 0xFFFF
   \                     ??CrossCallReturnLabel_279:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET
   2447          
   2448          /*********************************************************************
   2449           * @fn      zclBuildHdr
   2450           *
   2451           * @brief   Build header of the ZCL format
   2452           *
   2453           * @param   hdr - outgoing header information
   2454           * @param   pData - outgoing header space
   2455           *
   2456           * @return  pointer past the header
   2457           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2458          static uint8 *zclBuildHdr( zclFrameHdr_t *hdr, uint8 *pData )
   \                     zclBuildHdr:
   2459          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   2460            // Build the Frame Control byte
   2461            *pData = hdr->fc.type;
   \   000005   8A82         MOV       DPL,R2
   \   000007   8B83         MOV       DPH,R3
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   5403         ANL       A,#0x3
   \   00000C   8C82         MOV       DPL,R4
   \   00000E   8D83         MOV       DPH,R5
   \   000010   12....       LCALL     ??Subroutine214_0 & 0xFFFF
   2462            *pData |= hdr->fc.manuSpecific << 2;
   \                     ??CrossCallReturnLabel_417:
   \   000013   5404         ANL       A,#0x4
   \   000015   12....       LCALL     ?Subroutine38 & 0xFFFF
   2463            *pData |= hdr->fc.direction << 3;
   \                     ??CrossCallReturnLabel_415:
   \   000018   5408         ANL       A,#0x8
   \   00001A   12....       LCALL     ?Subroutine38 & 0xFFFF
   2464            *pData |= hdr->fc.disableDefaultRsp << 4;
   \                     ??CrossCallReturnLabel_416:
   \   00001D   5410         ANL       A,#0x10
   \   00001F   F8           MOV       R0,A
   \   000020   8C82         MOV       DPL,R4
   \   000022   8D83         MOV       DPH,R5
   \   000024   E0           MOVX      A,@DPTR
   \   000025   48           ORL       A,R0
   \   000026   F0           MOVX      @DPTR,A
   2465            pData++;  // move past the frame control field
   \   000027   A3           INC       DPTR
   \   000028   AC82         MOV       R4,DPL
   \   00002A   AD83         MOV       R5,DPH
   2466          
   2467            // Add the manfacturer code
   2468            if ( hdr->fc.manuSpecific )
   \   00002C   8A82         MOV       DPL,R2
   \   00002E   8B83         MOV       DPH,R3
   \   000030   E0           MOVX      A,@DPTR
   \   000031   5404         ANL       A,#0x4
   \   000033   6016         JZ        ??zclBuildHdr_0
   2469            {
   2470              *pData++ = LO_UINT16( hdr->manuCode );
   \   000035   12....       LCALL     ?Subroutine131 & 0xFFFF
   2471              *pData++ = HI_UINT16( hdr->manuCode );
   2472            }
   \                     ??CrossCallReturnLabel_234:
   \   000038   12....       LCALL     ??Subroutine220_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_438:
   \   00003B   12....       LCALL     ??Subroutine204_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_367:
   \   00003E   8C82         MOV       DPL,R4
   \   000040   8D83         MOV       DPH,R5
   \   000042   A3           INC       DPTR
   \   000043   F0           MOVX      @DPTR,A
   \   000044   EC           MOV       A,R4
   \   000045   2402         ADD       A,#0x2
   \   000047   FC           MOV       R4,A
   \   000048   5001         JNC       ??zclBuildHdr_0
   \   00004A   0D           INC       R5
   2473          
   2474            // Add the Transaction Sequence Number
   2475            *pData++ = hdr->transSeqNum;
   \                     ??zclBuildHdr_0:
   \   00004B   8A82         MOV       DPL,R2
   \   00004D   8B83         MOV       DPH,R3
   \   00004F   12....       LCALL     ?Subroutine95 & 0xFFFF
   \                     ??CrossCallReturnLabel_441:
   \   000052   12....       LCALL     ?Subroutine37 & 0xFFFF
   2476          
   2477            // Add the Cluster's command ID
   2478            *pData++ = hdr->commandID;
   \                     ??CrossCallReturnLabel_46:
   \   000055   12....       LCALL     ?Subroutine95 & 0xFFFF
   \                     ??CrossCallReturnLabel_442:
   \   000058   A3           INC       DPTR
   \   000059   F0           MOVX      @DPTR,A
   2479          
   2480            // Should point to the frame payload
   2481            return ( pData );
   \   00005A   EC           MOV       A,R4
   \   00005B   12....       LCALL     ??Subroutine248_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_615:
   \   00005E   3D           ADDC      A,R5
   \   00005F   FB           MOV       R3,A
   \   000060   80..         SJMP      ??Subroutine215_0
   2482          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   F8           MOV       R0,A
   \   000001   8C82         MOV       DPL,R4
   \   000003   8D83         MOV       DPH,R5
   \   000005   E0           MOVX      A,@DPTR
   \   000006   48           ORL       A,R0
   \   000007                REQUIRE ??Subroutine214_0
   \   000007                ; // Fall through to label ??Subroutine214_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine214_0:
   \   000000   12....       LCALL     ?Subroutine151 & 0xFFFF
   \                     ??CrossCallReturnLabel_421:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine95:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003                REQUIRE ??Subroutine219_0
   \   000003                ; // Fall through to label ??Subroutine219_0
   2483          
   2484          /*********************************************************************
   2485           * @fn      zclCalcHdrSize
   2486           *
   2487           * @brief   Calculate the number of bytes needed for an outgoing
   2488           *          ZCL header.
   2489           *
   2490           * @param   hdr - outgoing header information
   2491           *
   2492           * @return  returns the number of bytes needed
   2493           */
   2494          static uint8 zclCalcHdrSize( zclFrameHdr_t *hdr )
   2495          {
   2496            uint8 needed = (1 + 1 + 1); // frame control + transaction seq num + cmd ID
   2497          
   2498            // Add the manfacturer code
   2499            if ( hdr->fc.manuSpecific )
   2500            {
   2501              needed += 2;
   2502            }
   2503          
   2504            return ( needed );
   2505          }
   2506          
   2507          /*********************************************************************
   2508           * @fn      zclFindPlugin
   2509           *
   2510           * @brief   Find the right plugin for a cluster ID
   2511           *
   2512           * @param   clusterID - cluster ID to look for
   2513           * @param   profileID - profile ID
   2514           *
   2515           * @return  pointer to plugin, NULL if not found
   2516           */
   2517          static zclLibPlugin_t *zclFindPlugin( uint16 clusterID, uint16 profileID )
   2518          {
   2519            zclLibPlugin_t *pLoop = plugins;
   2520          
   2521            (void)profileID;  // Intentionally unreferenced parameter
   2522          
   2523            while ( pLoop != NULL )
   2524            {
   2525              if ( ( clusterID >= pLoop->startClusterID ) && ( clusterID <= pLoop->endClusterID ) )
   2526              {
   2527                return ( pLoop );
   2528              }
   2529          
   2530              pLoop = pLoop->next;
   2531            }
   2532          
   2533            return ( (zclLibPlugin_t *)NULL );
   2534          }
   2535          
   2536          #ifdef ZCL_DISCOVER
   2537          /*********************************************************************
   2538           * @fn      zclFindCmdRecsList
   2539           *
   2540           * @brief   Find the right command record list for an endpoint
   2541           *
   2542           * @param   endpoint - endpoint to look for
   2543           *
   2544           * @return  pointer to record list, NULL if not found
   2545           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2546          static zclCmdRecsList_t *zclFindCmdRecsList( uint8 endpoint )
   \                     zclFindCmdRecsList:
   2547          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2548            zclCmdRecsList_t *pLoop = gpCmdList;
   \   000004   90....       MOV       DPTR,#gpCmdList
   \   000007   8004         SJMP      ??zclFindCmdRecsList_0
   2549          
   2550            while ( pLoop != NULL )
   2551            {
   2552              if ( pLoop->endpoint == endpoint )
   2553              {
   2554                return ( pLoop );
   2555              }
   2556          
   2557              pLoop = pLoop->pNext;
   \                     ??zclFindCmdRecsList_1:
   \   000009   8A82         MOV       DPL,R2
   \   00000B   8B83         MOV       DPH,R3
   \                     ??zclFindCmdRecsList_0:
   \   00000D   12....       LCALL     ??Subroutine199_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_346:
   \   000010   600C         JZ        ??zclFindCmdRecsList_2
   \   000012   8A82         MOV       DPL,R2
   \   000014   8B83         MOV       DPH,R3
   \   000016   A3           INC       DPTR
   \   000017   A3           INC       DPTR
   \   000018   E0           MOVX      A,@DPTR
   \   000019   69           XRL       A,R1
   \   00001A   70ED         JNZ       ??zclFindCmdRecsList_1
   \   00001C   8004         SJMP      ??zclFindCmdRecsList_3
   2558            }
   2559          
   2560            return ( NULL );
   \                     ??zclFindCmdRecsList_2:
   \   00001E   7A00         MOV       R2,#0x0
   \   000020   7B00         MOV       R3,#0x0
   \                     ??zclFindCmdRecsList_3:
   \   000022   02....       LJMP      ?Subroutine0 & 0xFFFF
   2561          }
   2562          
   2563          /*********************************************************************
   2564           * @fn      zclFindCmdRec
   2565           *
   2566           * @brief   Find the command record that matchs the parameters
   2567           *
   2568           * @param   endpoint - Application's endpoint
   2569           * @param   clusterID - cluster ID
   2570           * @param   attrId - attribute looking for
   2571           * @param   pAttr - attribute record to be returned
   2572           *
   2573           * @return  TRUE if record found. FALSE, otherwise.
   2574           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2575          uint8 zclFindCmdRec( uint8 endpoint, uint16 clusterID, uint8 cmdID, zclCommandRec_t *pCmd )
   \                     zclFindCmdRec:
   2576          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   8C..         MOV       ?V1,R4
   2577            uint8 i;
   2578            zclCmdRecsList_t *pRec = zclFindCmdRecsList( endpoint );
   \   00000B                ; Setup parameters for call to function zclFindCmdRecsList
   \   00000B   12....       LCALL     `??zclFindCmdRecsList::?relay`; Banked call to: zclFindCmdRecsList
   \   00000E   8A..         MOV       ?V2,R2
   \   000010   8B..         MOV       ?V3,R3
   2579          
   2580            if ( pRec != NULL )
   \   000012   EA           MOV       A,R2
   \   000013   45..         ORL       A,?V3
   \   000015   6051         JZ        ??zclFindCmdRec_0
   2581            {
   2582              for ( i = 0; i < pRec->numCommands; i++ )
   \   000017   7C00         MOV       R4,#0x0
   \   000019   8001         SJMP      ??zclFindCmdRec_1
   \                     ??zclFindCmdRec_2:
   \   00001B   0C           INC       R4
   \                     ??zclFindCmdRec_1:
   \   00001C   85..82       MOV       DPL,?V2
   \   00001F   85..83       MOV       DPH,?V3
   \   000022   A3           INC       DPTR
   \   000023   A3           INC       DPTR
   \   000024   A3           INC       DPTR
   \   000025   E0           MOVX      A,@DPTR
   \   000026   F8           MOV       R0,A
   \   000027   EC           MOV       A,R4
   \   000028   C3           CLR       C
   \   000029   98           SUBB      A,R0
   \   00002A   503C         JNC       ??zclFindCmdRec_0
   2583              {
   2584                if ( pRec->pCmdRecs[i].clusterID == clusterID && pRec->pCmdRecs[i].cmdID == cmdID )
   \   00002C   EC           MOV       A,R4
   \   00002D   F5..         MOV       ?V4,A
   \   00002F   75..00       MOV       ?V5,#0x0
   \   000032   7402         MOV       A,#0x2
   \   000034   78..         MOV       R0,#?V4
   \   000036   12....       LCALL     ?S_SHL
   \   000039   85..82       MOV       DPL,?V2
   \   00003C   85..83       MOV       DPH,?V3
   \   00003F   12....       LCALL     ?Subroutine113 & 0xFFFF
   \                     ??CrossCallReturnLabel_195:
   \   000042   8882         MOV       DPL,R0
   \   000044   8983         MOV       DPH,R1
   \   000046   12....       LCALL     ?Subroutine145 & 0xFFFF
   \                     ??CrossCallReturnLabel_259:
   \   000049   7002         JNZ       ??zclFindCmdRec_3
   \   00004B   EF           MOV       A,R7
   \   00004C   6B           XRL       A,R3
   \                     ??zclFindCmdRec_3:
   \   00004D   70CC         JNZ       ??zclFindCmdRec_2
   \   00004F   A3           INC       DPTR
   \   000050   A3           INC       DPTR
   \   000051   E4           CLR       A
   \   000052   93           MOVC      A,@A+DPTR
   \   000053   65..         XRL       A,?V1
   \   000055   70C4         JNZ       ??zclFindCmdRec_2
   2585                {
   2586                  *pCmd = pRec->pCmdRecs[i];
   \   000057   740E         MOV       A,#0xe
   \   000059   12....       LCALL     ?XSTACK_DISP0_8
   \   00005C   12....       LCALL     ?Subroutine106 & 0xFFFF
   \                     ??CrossCallReturnLabel_178:
   \   00005F   7404         MOV       A,#0x4
   \   000061   12....       LCALL     ?MOVE_LONG8_XDATA_CODE
   2587          
   2588                  return ( TRUE ); // EMBEDDED RETURN
   \   000064   7901         MOV       R1,#0x1
   \   000066   8002         SJMP      ??zclFindCmdRec_4
   2589                }
   2590              }
   2591            }
   2592          
   2593            return ( FALSE );
   \                     ??zclFindCmdRec_0:
   \   000068   7900         MOV       R1,#0x0
   \                     ??zclFindCmdRec_4:
   \   00006A   02....       LJMP      ?Subroutine4 & 0xFFFF
   2594          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine145:
   \   000000   E4           CLR       A
   \   000001   93           MOVC      A,@A+DPTR
   \   000002   FA           MOV       R2,A
   \   000003   7401         MOV       A,#0x1
   \   000005   93           MOVC      A,@A+DPTR
   \   000006   FB           MOV       R3,A
   \   000007   EE           MOV       A,R6
   \   000008   6A           XRL       A,R2
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine106:
   \   000000   12....       LCALL     ??Subroutine242_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_567:
   \   000003   8983         MOV       DPH,R1
   \   000005   8882         MOV       DPL,R0
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine113:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   25..         ADD       A,?V4
   \   000007   F8           MOV       R0,A
   \   000008   A3           INC       DPTR
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   35..         ADDC      A,?V5
   \   00000C   F9           MOV       R1,A
   \   00000D   22           RET
   2595          #endif // ZCL_DISCOVER
   2596          
   2597          /*********************************************************************
   2598           * @fn      zclFindAttrRecsList
   2599           *
   2600           * @brief   Find the right attribute record list for an endpoint
   2601           *
   2602           * @param   clusterID - endpointto look for
   2603           *
   2604           * @return  pointer to record list, NULL if not found
   2605           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2606          zclAttrRecsList *zclFindAttrRecsList( uint8 endpoint )
   \                     zclFindAttrRecsList:
   2607          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2608            zclAttrRecsList *pLoop = attrList;
   \   000004   90....       MOV       DPTR,#attrList
   \   000007   8004         SJMP      ??zclFindAttrRecsList_0
   2609          
   2610            while ( pLoop != NULL )
   2611            {
   2612              if ( pLoop->endpoint == endpoint )
   2613              {
   2614                return ( pLoop );
   2615              }
   2616          
   2617              pLoop = pLoop->next;
   \                     ??zclFindAttrRecsList_1:
   \   000009   8A82         MOV       DPL,R2
   \   00000B   8B83         MOV       DPH,R3
   \                     ??zclFindAttrRecsList_0:
   \   00000D   12....       LCALL     ??Subroutine199_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_347:
   \   000010   600C         JZ        ??zclFindAttrRecsList_2
   \   000012   8A82         MOV       DPL,R2
   \   000014   8B83         MOV       DPH,R3
   \   000016   A3           INC       DPTR
   \   000017   A3           INC       DPTR
   \   000018   E0           MOVX      A,@DPTR
   \   000019   69           XRL       A,R1
   \   00001A   70ED         JNZ       ??zclFindAttrRecsList_1
   \   00001C   8004         SJMP      ??zclFindAttrRecsList_3
   2618            }
   2619          
   2620            return ( NULL );
   \                     ??zclFindAttrRecsList_2:
   \   00001E   7A00         MOV       R2,#0x0
   \   000020   7B00         MOV       R3,#0x0
   \                     ??zclFindAttrRecsList_3:
   \   000022   02....       LJMP      ?Subroutine0 & 0xFFFF
   2621          }
   2622          
   2623          /*********************************************************************
   2624           * @fn      zclFindAttrRec
   2625           *
   2626           * @brief   Find the attribute record that matchs the parameters
   2627           *
   2628           * @param   endpoint - Application's endpoint
   2629           * @param   clusterID - cluster ID
   2630           * @param   attrId - attribute looking for
   2631           * @param   pAttr - attribute record to be returned
   2632           *
   2633           * @return  TRUE if record found. FALSE, otherwise.
   2634           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2635          uint8 zclFindAttrRec( uint8 endpoint, uint16 clusterID, uint16 attrId, zclAttrRec_t *pAttr )
   \                     zclFindAttrRec:
   2636          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   EC           MOV       A,R4
   \   00000A   FE           MOV       R6,A
   \   00000B   ED           MOV       A,R5
   \   00000C   FF           MOV       R7,A
   2637            uint8 x;
   2638            zclAttrRecsList *pRec = zclFindAttrRecsList( endpoint );
   \   00000D                ; Setup parameters for call to function zclFindAttrRecsList
   \   00000D   12....       LCALL     `??zclFindAttrRecsList::?relay`; Banked call to: zclFindAttrRecsList
   \   000010   8A..         MOV       ?V4,R2
   \   000012   8B..         MOV       ?V5,R3
   2639          
   2640            if ( pRec != NULL )
   \   000014   EA           MOV       A,R2
   \   000015   45..         ORL       A,?V5
   \   000017   6064         JZ        ??zclFindAttrRec_0
   2641            {
   2642              for ( x = 0; x < pRec->numAttributes; x++ )
   \   000019   7C00         MOV       R4,#0x0
   \   00001B   8001         SJMP      ??zclFindAttrRec_1
   \                     ??zclFindAttrRec_2:
   \   00001D   0C           INC       R4
   \                     ??zclFindAttrRec_1:
   \   00001E   85..82       MOV       DPL,?V4
   \   000021   85..83       MOV       DPH,?V5
   \   000024   A3           INC       DPTR
   \   000025   A3           INC       DPTR
   \   000026   A3           INC       DPTR
   \   000027   A3           INC       DPTR
   \   000028   A3           INC       DPTR
   \   000029   A3           INC       DPTR
   \   00002A   A3           INC       DPTR
   \   00002B   E0           MOVX      A,@DPTR
   \   00002C   F8           MOV       R0,A
   \   00002D   EC           MOV       A,R4
   \   00002E   C3           CLR       C
   \   00002F   98           SUBB      A,R0
   \   000030   504B         JNC       ??zclFindAttrRec_0
   2643              {
   2644                if ( pRec->attrs[x].clusterID == clusterID && pRec->attrs[x].attr.attrId == attrId )
   \   000032   EC           MOV       A,R4
   \   000033   F5..         MOV       ?V6,A
   \   000035   75..00       MOV       ?V7,#0x0
   \   000038   7403         MOV       A,#0x3
   \   00003A   78..         MOV       R0,#?V6
   \   00003C   12....       LCALL     ?S_SHL
   \   00003F   85..82       MOV       DPL,?V4
   \   000042   85..83       MOV       DPH,?V5
   \   000045   A3           INC       DPTR
   \   000046   A3           INC       DPTR
   \   000047   A3           INC       DPTR
   \   000048   A3           INC       DPTR
   \   000049   12....       LCALL     ?Subroutine114 & 0xFFFF
   \                     ??CrossCallReturnLabel_197:
   \   00004C   8882         MOV       DPL,R0
   \   00004E   8983         MOV       DPH,R1
   \   000050   E4           CLR       A
   \   000051   93           MOVC      A,@A+DPTR
   \   000052   FA           MOV       R2,A
   \   000053   7401         MOV       A,#0x1
   \   000055   93           MOVC      A,@A+DPTR
   \   000056   FB           MOV       R3,A
   \   000057   E5..         MOV       A,?V0
   \   000059   6A           XRL       A,R2
   \   00005A   7003         JNZ       ??zclFindAttrRec_3
   \   00005C   E5..         MOV       A,?V1
   \   00005E   6B           XRL       A,R3
   \                     ??zclFindAttrRec_3:
   \   00005F   70BC         JNZ       ??zclFindAttrRec_2
   \   000061   A3           INC       DPTR
   \   000062   A3           INC       DPTR
   \   000063   12....       LCALL     ?Subroutine145 & 0xFFFF
   \                     ??CrossCallReturnLabel_260:
   \   000066   7002         JNZ       ??zclFindAttrRec_4
   \   000068   EF           MOV       A,R7
   \   000069   6B           XRL       A,R3
   \                     ??zclFindAttrRec_4:
   \   00006A   70B1         JNZ       ??zclFindAttrRec_2
   2645                {
   2646                  *pAttr = pRec->attrs[x];
   \   00006C   7410         MOV       A,#0x10
   \   00006E   12....       LCALL     ?XSTACK_DISP0_8
   \   000071   12....       LCALL     ?Subroutine106 & 0xFFFF
   \                     ??CrossCallReturnLabel_179:
   \   000074   7408         MOV       A,#0x8
   \   000076   12....       LCALL     ?MOVE_LONG8_XDATA_CODE
   2647          
   2648                  return ( TRUE ); // EMBEDDED RETURN
   \   000079   7901         MOV       R1,#0x1
   \   00007B   8002         SJMP      ??zclFindAttrRec_5
   2649                }
   2650              }
   2651            }
   2652          
   2653            return ( FALSE );
   \                     ??zclFindAttrRec_0:
   \   00007D   7900         MOV       R1,#0x0
   \                     ??zclFindAttrRec_5:
   \   00007F   80..         SJMP      ??Subroutine216_0
   2654          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine114:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   25..         ADD       A,?V6
   \   000007   F8           MOV       R0,A
   \   000008   A3           INC       DPTR
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   35..         ADDC      A,?V7
   \   00000C   F9           MOV       R1,A
   \   00000D   22           RET
   2655          
   2656          #if defined ( ZCL_STANDALONE )
   2657          /*********************************************************************
   2658           * @fn      zclSetAttrRecList
   2659           *
   2660           * @brief   Set attribute record list for end point
   2661           *
   2662           * @param   endpoint - endpoint the attribute list belongs to
   2663           * @param   numAttr - number of attributes in list
   2664           * @param   attrList - array of attribute records.
   2665           *                     NOTE: THE ATTRIBUTE IDs (FOR A CLUSTER) MUST BE
   2666           *                     IN ASCENDING ORDER. OTHERWISE, THE DISCOVERY
   2667           *                     RESPONSE COMMAND WILL NOT HAVE THE RIGHT
   2668           *                     ATTRIBUTE INFO
   2669           *
   2670           * @return  TRUE if successful, FALSE otherwise.
   2671           */
   2672          uint8 zclSetAttrRecList( uint8 endpoint, uint8 numAttr, CONST zclAttrRec_t attrList[] )
   2673          {
   2674            zclAttrRecsList *pRecsList = zclFindAttrRecsList( endpoint );
   2675          
   2676            if ( pRecsList != NULL )
   2677            {
   2678              pRecsList->numAttributes = numAttr;
   2679              pRecsList->attrs = attrList;
   2680              return ( TRUE );
   2681            }
   2682          
   2683            return ( FALSE );
   2684          }
   2685          
   2686          #endif // ZCL_STANDALONE
   2687          
   2688          #if defined ( ZCL_READ ) || defined ( ZCL_WRITE )
   2689          /*********************************************************************
   2690           * @fn      zclGetReadWriteCB
   2691           *
   2692           * @brief   Get the Read/Write callback function pointer for a given endpoint.
   2693           *
   2694           * @param   endpoint - Application's endpoint
   2695           *
   2696           * @return  Read/Write CB, NULL if not found
   2697           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2698          static zclReadWriteCB_t zclGetReadWriteCB( uint8 endpoint )
   \                     zclGetReadWriteCB:
   2699          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   2700            zclAttrRecsList *pRec = zclFindAttrRecsList( endpoint );
   \   000005                ; Setup parameters for call to function zclFindAttrRecsList
   \   000005   12....       LCALL     `??zclFindAttrRecsList::?relay`; Banked call to: zclFindAttrRecsList
   \   000008   8A82         MOV       DPL,R2
   \   00000A   8B83         MOV       DPH,R3
   2701          
   2702            if ( pRec != NULL )
   \   00000C   E582         MOV       A,DPL
   \   00000E   4583         ORL       A,DPH
   \   000010   6005         JZ        ??zclGetReadWriteCB_0
   2703            {
   2704              return ( pRec->pfnReadWriteCB );
   \   000012   12....       LCALL     ??Subroutine223_0 & 0xFFFF
   2705            }
   \                     ??CrossCallReturnLabel_465:
   \   000015   8004         SJMP      ??zclGetReadWriteCB_1
   2706          
   2707            return ( NULL );
   \                     ??zclGetReadWriteCB_0:
   \   000017   7A00         MOV       R2,#0x0
   \   000019   7B00         MOV       R3,#0x0
   \                     ??zclGetReadWriteCB_1:
   \   00001B   02....       LJMP      ?Subroutine3 & 0xFFFF
   2708          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine223_0:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003                REQUIRE ??Subroutine224_0
   \   000003                ; // Fall through to label ??Subroutine224_0
   2709          
   2710          /*********************************************************************
   2711           * @fn      zclGetAuthorizeCB
   2712           *
   2713           * @brief   Get the Read/Write Authorization callback function pointer
   2714           *          for a given endpoint.
   2715           *
   2716           * @param   endpoint - Application's endpoint
   2717           *
   2718           * @return  Authorization CB, NULL if not found
   2719           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2720          static zclAuthorizeCB_t zclGetAuthorizeCB( uint8 endpoint )
   \                     zclGetAuthorizeCB:
   2721          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   2722            zclAttrRecsList *pRec = zclFindAttrRecsList( endpoint );
   \   000005                ; Setup parameters for call to function zclFindAttrRecsList
   \   000005   12....       LCALL     `??zclFindAttrRecsList::?relay`; Banked call to: zclFindAttrRecsList
   \   000008   8A82         MOV       DPL,R2
   \   00000A   8B83         MOV       DPH,R3
   2723          
   2724            if ( pRec != NULL )
   \   00000C   E582         MOV       A,DPL
   \   00000E   4583         ORL       A,DPH
   \   000010   6005         JZ        ??zclGetAuthorizeCB_0
   2725            {
   2726              return ( pRec->pfnAuthorizeCB );
   \   000012   12....       LCALL     ?Subroutine79 & 0xFFFF
   2727            }
   \                     ??CrossCallReturnLabel_469:
   \   000015   8004         SJMP      ??zclGetAuthorizeCB_1
   2728          
   2729            return ( NULL );
   \                     ??zclGetAuthorizeCB_0:
   \   000017   7A00         MOV       R2,#0x0
   \   000019   7B00         MOV       R3,#0x0
   \                     ??zclGetAuthorizeCB_1:
   \   00001B   02....       LJMP      ?Subroutine3 & 0xFFFF
   2730          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine79:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine222_0
   \   000001                ; // Fall through to label ??Subroutine222_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine222_0:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine223_0
   \   000001                ; // Fall through to label ??Subroutine223_0
   2731          #endif // ZCL_READ || ZCL_WRITE
   2732          
   2733          /*********************************************************************
   2734           * @fn      zclFindClusterOption
   2735           *
   2736           * @brief   Find the option record that matchs the cluster id
   2737           *
   2738           * @param   endpoint - Application's endpoint
   2739           * @param   clusterID - cluster ID looking for
   2740           *
   2741           * @return  pointer to clutser option, NULL if not found
   2742           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2743          static zclOptionRec_t *zclFindClusterOption( uint8 endpoint, uint16 clusterID )
   \                     zclFindClusterOption:
   2744          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FF           MOV       R7,A
   \   000007   EA           MOV       A,R2
   \   000008   FC           MOV       R4,A
   \   000009   EB           MOV       A,R3
   \   00000A   FD           MOV       R5,A
   2745            zclClusterOptionList *pLoop;
   2746          
   2747            pLoop = clusterOptionList;
   \   00000B   90....       MOV       DPTR,#clusterOptionList
   \   00000E   8004         SJMP      ??zclFindClusterOption_0
   2748            while ( pLoop != NULL )
   2749            {
   2750              if ( pLoop->endpoint == endpoint )
   2751              {
   2752                uint8 x;
   2753                for ( x = 0; x < pLoop->numOptions; x++ )
   2754                {
   2755                  if ( pLoop->options[x].clusterID == clusterID )
   2756                  {
   2757                    return ( &(pLoop->options[x]) ); // EMBEDDED RETURN
   2758                  }
   2759                }
   2760              }
   2761          
   2762              pLoop = pLoop->next;
   \                     ??zclFindClusterOption_1:
   \   000010   8882         MOV       DPL,R0
   \   000012   8983         MOV       DPH,R1
   \                     ??zclFindClusterOption_0:
   \   000014   12....       LCALL     ??Subroutine218_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_426:
   \   000017   6046         JZ        ??zclFindClusterOption_2
   \   000019   8882         MOV       DPL,R0
   \   00001B   8983         MOV       DPH,R1
   \   00001D   A3           INC       DPTR
   \   00001E   A3           INC       DPTR
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   6F           XRL       A,R7
   \   000021   70ED         JNZ       ??zclFindClusterOption_1
   \   000023   7E00         MOV       R6,#0x0
   \   000025   8001         SJMP      ??zclFindClusterOption_3
   \                     ??zclFindClusterOption_4:
   \   000027   0E           INC       R6
   \                     ??zclFindClusterOption_3:
   \   000028   8882         MOV       DPL,R0
   \   00002A   8983         MOV       DPH,R1
   \   00002C   A3           INC       DPTR
   \   00002D   A3           INC       DPTR
   \   00002E   A3           INC       DPTR
   \   00002F   E0           MOVX      A,@DPTR
   \   000030   FA           MOV       R2,A
   \   000031   EE           MOV       A,R6
   \   000032   C3           CLR       C
   \   000033   9A           SUBB      A,R2
   \   000034   50DA         JNC       ??zclFindClusterOption_1
   \   000036   EE           MOV       A,R6
   \   000037   75F003       MOV       B,#0x3
   \   00003A   A4           MUL       AB
   \   00003B   FA           MOV       R2,A
   \   00003C   85F0..       MOV       ?V0,B
   \   00003F   AB..         MOV       R3,?V0
   \   000041   8882         MOV       DPL,R0
   \   000043   8983         MOV       DPH,R1
   \   000045   A3           INC       DPTR
   \   000046   A3           INC       DPTR
   \   000047   A3           INC       DPTR
   \   000048   A3           INC       DPTR
   \   000049   E0           MOVX      A,@DPTR
   \   00004A   2A           ADD       A,R2
   \   00004B   FA           MOV       R2,A
   \   00004C   A3           INC       DPTR
   \   00004D   E0           MOVX      A,@DPTR
   \   00004E   3B           ADDC      A,R3
   \   00004F   FB           MOV       R3,A
   \   000050   8A82         MOV       DPL,R2
   \   000052   8B83         MOV       DPH,R3
   \   000054   E0           MOVX      A,@DPTR
   \   000055   6C           XRL       A,R4
   \   000056   7003         JNZ       ??zclFindClusterOption_5
   \   000058   A3           INC       DPTR
   \   000059   E0           MOVX      A,@DPTR
   \   00005A   6D           XRL       A,R5
   \                     ??zclFindClusterOption_5:
   \   00005B   70CA         JNZ       ??zclFindClusterOption_4
   \   00005D   8004         SJMP      ??zclFindClusterOption_6
   2763            }
   2764          
   2765            return ( NULL );
   \                     ??zclFindClusterOption_2:
   \   00005F   7A00         MOV       R2,#0x0
   \   000061   7B00         MOV       R3,#0x0
   \                     ??zclFindClusterOption_6:
   \   000063   02....       LJMP      ??Subroutine215_0 & 0xFFFF
   2766          }
   2767          
   2768          /*********************************************************************
   2769           * @fn      zclGetClusterOption
   2770           *
   2771           * @brief   Get the option record that matchs the cluster id
   2772           *
   2773           * @param   endpoint - Application's endpoint
   2774           * @param   clusterID - cluster ID looking for
   2775           *
   2776           * @return  clutser option, AF_TX_OPTIONS_NONE if not found
   2777           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2778          static uint8 zclGetClusterOption( uint8 endpoint, uint16 clusterID )
   \                     zclGetClusterOption:
   2779          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   2780            uint8 option;
   2781            zclOptionRec_t *pOption;
   2782          
   2783            pOption = zclFindClusterOption( endpoint, clusterID );
   \   000005                ; Setup parameters for call to function zclFindClusterOption
   \   000005   12....       LCALL     `??zclFindClusterOption::?relay`; Banked call to: zclFindClusterOption
   \   000008   8A82         MOV       DPL,R2
   \   00000A   8B83         MOV       DPH,R3
   2784            if ( pOption != NULL )
   \   00000C   E582         MOV       A,DPL
   \   00000E   4583         ORL       A,DPH
   \   000010   6006         JZ        ??zclGetClusterOption_0
   2785            {
   2786              option = pOption->option;
   2787              if ( !ZG_SECURE_ENABLED )
   2788              {
   2789                option &= (AF_EN_SECURITY ^ 0xFF); // make sure Application Link Key security is off
   2790              }
   2791          
   2792              return ( option ); // EMBEDDED RETURN
   \   000012   A3           INC       DPTR
   \   000013   A3           INC       DPTR
   \   000014   E0           MOVX      A,@DPTR
   \   000015   F9           MOV       R1,A
   \   000016   8002         SJMP      ??zclGetClusterOption_1
   2793            }
   2794          
   2795            return ( AF_TX_OPTIONS_NONE );
   \                     ??zclGetClusterOption_0:
   \   000018   7900         MOV       R1,#0x0
   \                     ??zclGetClusterOption_1:
   \   00001A                REQUIRE ?Subroutine3
   \   00001A                ; // Fall through to label ?Subroutine3
   2796          }
   2797          
   2798          /*********************************************************************
   2799           * @fn      zclSetSecurityOption
   2800           *
   2801           * @brief   Set the security option for the cluster id
   2802           *
   2803           * @param   endpoint - Application's endpoint
   2804           * @param   clusterID - cluster ID looking for
   2805           * @param   enable - whether to enable (TRUE) or disable (FALSE) security option
   2806           *
   2807           * @return  none
   2808           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2809          static void zclSetSecurityOption( uint8 endpoint, uint16 clusterID, uint8 enable )
   \                     zclSetSecurityOption:
   2810          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EC           MOV       A,R4
   \   000006   FF           MOV       R7,A
   2811            zclOptionRec_t *pOption;
   2812          
   2813            pOption = zclFindClusterOption( endpoint, clusterID );
   \   000007                ; Setup parameters for call to function zclFindClusterOption
   \   000007   12....       LCALL     `??zclFindClusterOption::?relay`; Banked call to: zclFindClusterOption
   \   00000A   8A..         MOV       ?V0,R2
   \   00000C   8B..         MOV       ?V1,R3
   \   00000E   A8..         MOV       R0,?V0
   \   000010   A9..         MOV       R1,?V1
   2814            if ( pOption != NULL )
   \   000012   E8           MOV       A,R0
   \   000013   49           ORL       A,R1
   \   000014   6015         JZ        ??zclSetSecurityOption_0
   2815            {
   2816              if ( enable )
   \   000016   E8           MOV       A,R0
   \   000017   2402         ADD       A,#0x2
   \   000019   F582         MOV       DPL,A
   \   00001B   E4           CLR       A
   \   00001C   39           ADDC      A,R1
   \   00001D   F583         MOV       DPH,A
   \   00001F   EF           MOV       A,R7
   \   000020   6005         JZ        ??zclSetSecurityOption_1
   2817              {
   2818                pOption->option |= AF_EN_SECURITY;
   \   000022   E0           MOVX      A,@DPTR
   \   000023   D2E6         SETB      0xE0 /* A   */.6
   \   000025   8003         SJMP      ??zclSetSecurityOption_2
   2819              }
   2820              else
   2821              {
   2822                pOption->option &= (AF_EN_SECURITY ^ 0xFF);
   \                     ??zclSetSecurityOption_1:
   \   000027   E0           MOVX      A,@DPTR
   \   000028   C2E6         CLR       0xE0 /* A   */.6
   \                     ??zclSetSecurityOption_2:
   \   00002A   F0           MOVX      @DPTR,A
   2823              }
   2824            }
   2825          }
   \                     ??zclSetSecurityOption_0:
   \   00002B   80..         SJMP      ?Subroutine3
   2826          
   2827          #ifdef ZCL_DISCOVER
   2828          /*********************************************************************
   2829           * @fn      zclFindNextCmdRec
   2830           *
   2831           * @brief   Find the command (or next) record that matchs the parameters
   2832           *
   2833           * @param   endpoint - Application's endpoint
   2834           * @param   clusterID - cluster ID
   2835           * @param   commandID - command ID from requesting command
   2836           * @param   direction- direction of received command
   2837           * @param   pCmdID - command looking for
   2838           * @param   pCmd - command information within command record list
   2839           *
   2840           * @return  pointer to command record, NULL no more records of this cluster
   2841           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2842          static uint8 zclFindNextCmdRec( uint8 endpoint, uint16 clusterID, uint8 commandID,
   \                     zclFindNextCmdRec:
   2843                                          uint8 direction, uint8 *pCmdID, zclCommandRec_t *pCmd )
   2844          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   8C..         MOV       ?V1,R4
   \   00000B   8D..         MOV       ?V2,R5
   2845            zclCmdRecsList_t *pRec = zclFindCmdRecsList( endpoint );
   \   00000D                ; Setup parameters for call to function zclFindCmdRecsList
   \   00000D   12....       LCALL     `??zclFindCmdRecsList::?relay`; Banked call to: zclFindCmdRecsList
   \   000010   8A..         MOV       ?V4,R2
   \   000012   8B..         MOV       ?V5,R3
   2846            uint8 i;
   2847          
   2848            if ( pRec != NULL )
   \   000014   EA           MOV       A,R2
   \   000015   45..         ORL       A,?V5
   \   000017   7003         JNZ       $+5
   \   000019   02....       LJMP      ??zclFindNextCmdRec_0 & 0xFFFF
   2849            {
   2850              for ( i = 0; i < pRec->numCommands; i++ )
   \   00001C   75..00       MOV       ?V3,#0x0
   \   00001F   7410         MOV       A,#0x10
   \   000021   12....       LCALL     ?XSTACK_DISP0_8
   \   000024   12....       LCALL     ??Subroutine228_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_485:
   \   000027   E8           MOV       A,R0
   \   000028   FA           MOV       R2,A
   \   000029   E9           MOV       A,R1
   \   00002A   FB           MOV       R3,A
   \   00002B   8012         SJMP      ??zclFindNextCmdRec_1
   2851              {
   2852                if ( ( pRec->pCmdRecs[i].clusterID == clusterID ) &&
   2853                    ( pRec->pCmdRecs[i].cmdID >= *pCmdID ) )
   2854                {
   2855                  if ( commandID == ZCL_CMD_DISCOVER_CMDS_RECEIVED )
   2856                  {
   2857                    if ( ( direction == ZCL_FRAME_SERVER_CLIENT_DIR ) && ( pRec->pCmdRecs[i].flag & CMD_DIR_CLIENT_RECEIVED ) )
   \                     ??zclFindNextCmdRec_2:
   \   00002D   8C82         MOV       DPL,R4
   \   00002F   8D83         MOV       DPH,R5
   \   000031   A3           INC       DPTR
   \   000032   A3           INC       DPTR
   \   000033   A3           INC       DPTR
   \   000034   E4           CLR       A
   \   000035   93           MOVC      A,@A+DPTR
   \   000036   A2E3         MOV       C,0xE0 /* A   */.3
   \   000038   5003         JNC       $+5
   \   00003A   02....       LJMP      ??zclFindNextCmdRec_3 & 0xFFFF
   \                     ??zclFindNextCmdRec_4:
   \   00003D   05..         INC       ?V3
   \                     ??zclFindNextCmdRec_1:
   \   00003F   85..82       MOV       DPL,?V4
   \   000042   85..83       MOV       DPH,?V5
   \   000045   A3           INC       DPTR
   \   000046   A3           INC       DPTR
   \   000047   A3           INC       DPTR
   \   000048   E0           MOVX      A,@DPTR
   \   000049   F8           MOV       R0,A
   \   00004A   E5..         MOV       A,?V3
   \   00004C   C3           CLR       C
   \   00004D   98           SUBB      A,R0
   \   00004E   4003         JC        $+5
   \   000050   02....       LJMP      ??zclFindNextCmdRec_0 & 0xFFFF
   \   000053   E5..         MOV       A,?V3
   \   000055   F5..         MOV       ?V6,A
   \   000057   75..00       MOV       ?V7,#0x0
   \   00005A   7402         MOV       A,#0x2
   \   00005C   78..         MOV       R0,#?V6
   \   00005E   12....       LCALL     ?S_SHL
   \   000061   85..82       MOV       DPL,?V4
   \   000064   85..83       MOV       DPH,?V5
   \   000067   12....       LCALL     ?Subroutine114 & 0xFFFF
   \                     ??CrossCallReturnLabel_198:
   \   00006A   12....       LCALL     ?Subroutine144 & 0xFFFF
   \                     ??CrossCallReturnLabel_257:
   \   00006D   7002         JNZ       ??zclFindNextCmdRec_5
   \   00006F   EF           MOV       A,R7
   \   000070   69           XRL       A,R1
   \                     ??zclFindNextCmdRec_5:
   \   000071   70CA         JNZ       ??zclFindNextCmdRec_4
   \   000073   8A82         MOV       DPL,R2
   \   000075   8B83         MOV       DPH,R3
   \   000077   E0           MOVX      A,@DPTR
   \   000078   F8           MOV       R0,A
   \   000079   8C82         MOV       DPL,R4
   \   00007B   8D83         MOV       DPH,R5
   \   00007D   A3           INC       DPTR
   \   00007E   A3           INC       DPTR
   \   00007F   E4           CLR       A
   \   000080   93           MOVC      A,@A+DPTR
   \   000081   C3           CLR       C
   \   000082   98           SUBB      A,R0
   \   000083   40B8         JC        ??zclFindNextCmdRec_4
   \   000085   7411         MOV       A,#0x11
   \   000087   65..         XRL       A,?V1
   \   000089   7019         JNZ       ??zclFindNextCmdRec_6
   \   00008B   7401         MOV       A,#0x1
   \   00008D   65..         XRL       A,?V2
   \   00008F   609C         JZ        ??zclFindNextCmdRec_2
   2858                    {
   2859                      *pCmd = pRec->pCmdRecs[i];
   2860          
   2861                      // Update command ID
   2862                      *pCmdID = pCmd->cmdID;
   2863          
   2864                      return ( TRUE ); // EMBEDDED RETURN
   2865                    }
   2866                    else if ( ( direction == ZCL_FRAME_CLIENT_SERVER_DIR ) && ( pRec->pCmdRecs[i].flag & CMD_DIR_SERVER_RECEIVED ) )
   \   000091   E5..         MOV       A,?V2
   \   000093   70A8         JNZ       ??zclFindNextCmdRec_4
   \   000095   8C82         MOV       DPL,R4
   \   000097   8D83         MOV       DPH,R5
   \   000099   A3           INC       DPTR
   \   00009A   A3           INC       DPTR
   \   00009B   A3           INC       DPTR
   \   00009C   E4           CLR       A
   \   00009D   93           MOVC      A,@A+DPTR
   \   00009E   A2E2         MOV       C,0xE0 /* A   */.2
   \                     ??zclFindNextCmdRec_7:
   \   0000A0   4032         JC        ??zclFindNextCmdRec_3
   \   0000A2   8099         SJMP      ??zclFindNextCmdRec_4
   2867                    {
   2868                      *pCmd = pRec->pCmdRecs[i];
   2869          
   2870                      // Update command ID
   2871                      *pCmdID = pCmd->cmdID;
   2872          
   2873                      return ( TRUE ); // EMBEDDED RETURN
   2874                    }
   2875                  }
   2876                  else if ( commandID == ZCL_CMD_DISCOVER_CMDS_GEN )
   \                     ??zclFindNextCmdRec_6:
   \   0000A4   7413         MOV       A,#0x13
   \   0000A6   65..         XRL       A,?V1
   \   0000A8   7044         JNZ       ??zclFindNextCmdRec_0
   2877                  {
   2878                    if ( ( direction == ZCL_FRAME_CLIENT_SERVER_DIR ) && ( pRec->pCmdRecs[i].flag & CMD_DIR_SERVER_GENERATED ) )
   \   0000AA   E5..         MOV       A,?V2
   \   0000AC   700D         JNZ       ??zclFindNextCmdRec_8
   \   0000AE   8C82         MOV       DPL,R4
   \   0000B0   8D83         MOV       DPH,R5
   \   0000B2   A3           INC       DPTR
   \   0000B3   A3           INC       DPTR
   \   0000B4   A3           INC       DPTR
   \   0000B5   E4           CLR       A
   \   0000B6   93           MOVC      A,@A+DPTR
   \   0000B7   A2E0         MOV       C,0xE0 /* A   */.0
   \   0000B9   80E5         SJMP      ??zclFindNextCmdRec_7
   2879                    {
   2880                      *pCmd = pRec->pCmdRecs[i];
   2881          
   2882                      // Update command ID
   2883                      *pCmdID = pCmd->cmdID;
   2884          
   2885                      return ( TRUE ); // EMBEDDED RETURN
   2886                    }
   2887                    else if ( ( direction == ZCL_FRAME_SERVER_CLIENT_DIR ) && ( pRec->pCmdRecs[i].flag & CMD_DIR_CLIENT_GENERATED ) )
   \                     ??zclFindNextCmdRec_8:
   \   0000BB   7401         MOV       A,#0x1
   \   0000BD   65..         XRL       A,?V2
   \   0000BF   6003         JZ        $+5
   \   0000C1   02....       LJMP      ??zclFindNextCmdRec_4 & 0xFFFF
   \   0000C4   8C82         MOV       DPL,R4
   \   0000C6   8D83         MOV       DPH,R5
   \   0000C8   A3           INC       DPTR
   \   0000C9   A3           INC       DPTR
   \   0000CA   A3           INC       DPTR
   \   0000CB   E4           CLR       A
   \   0000CC   93           MOVC      A,@A+DPTR
   \   0000CD   A2E1         MOV       C,0xE0 /* A   */.1
   \   0000CF   4003         JC        $+5
   \   0000D1   02....       LJMP      ??zclFindNextCmdRec_4 & 0xFFFF
   \                     ??zclFindNextCmdRec_3:
   \   0000D4   7412         MOV       A,#0x12
   \   0000D6   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D9   12....       LCALL     ?Subroutine76 & 0xFFFF
   2888                    {
   2889                      *pCmd = pRec->pCmdRecs[i];
   \                     ??CrossCallReturnLabel_127:
   \   0000DC   7404         MOV       A,#0x4
   \   0000DE   12....       LCALL     ?MOVE_LONG8_XDATA_CODE
   2890          
   2891                      // Update command ID
   2892                      *pCmdID = pCmd->cmdID;
   \   0000E1   8882         MOV       DPL,R0
   \   0000E3   8983         MOV       DPH,R1
   \   0000E5   A3           INC       DPTR
   \   0000E6   A3           INC       DPTR
   \   0000E7   12....       LCALL     ?Subroutine89 & 0xFFFF
   2893          
   2894                      return ( TRUE ); // EMBEDDED RETURN
   \                     ??CrossCallReturnLabel_149:
   \   0000EA   7901         MOV       R1,#0x1
   \   0000EC   8002         SJMP      ??zclFindNextCmdRec_9
   2895                    }
   2896                  }
   2897                  else
   2898                  {
   2899                    return ( FALSE ); // Incorrect Command ID
   2900                  }
   2901                }
   2902              }
   2903            }
   2904          
   2905            return ( FALSE );
   \                     ??zclFindNextCmdRec_0:
   \   0000EE   7900         MOV       R1,#0x0
   \                     ??zclFindNextCmdRec_9:
   \   0000F0   02....       LJMP      ??Subroutine216_0 & 0xFFFF
   2906          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine144:
   \   000000   E8           MOV       A,R0
   \   000001   FC           MOV       R4,A
   \   000002   E9           MOV       A,R1
   \   000003   FD           MOV       R5,A
   \   000004   8C82         MOV       DPL,R4
   \   000006   8D83         MOV       DPH,R5
   \   000008   12....       LCALL     ??Subroutine209_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_399:
   \   00000B   EE           MOV       A,R6
   \   00000C   68           XRL       A,R0
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine76:
   \   000000   12....       LCALL     ?Subroutine172 & 0xFFFF
   \                     ??CrossCallReturnLabel_497:
   \   000003   8C82         MOV       DPL,R4
   \   000005   8D83         MOV       DPH,R5
   \   000007   E8           MOV       A,R0
   \   000008   FC           MOV       R4,A
   \   000009   E9           MOV       A,R1
   \   00000A   FD           MOV       R5,A
   \   00000B   22           RET
   2907          
   2908          /*********************************************************************
   2909           * @fn      zclFindNextAttrRec
   2910           *
   2911           * @brief   Find the attribute (or next) record that matchs the parameters
   2912           *
   2913           * @param   endpoint - Application's endpoint
   2914           * @param   clusterID - cluster ID
   2915           * @param   attr - attribute looking for
   2916           *
   2917           * @return  pointer to attribute record, NULL if not found
   2918           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2919          static uint8 zclFindNextAttrRec( uint8 endpoint, uint16 clusterID, uint8 direction,
   \                     zclFindNextAttrRec:
   2920                                           uint16 *attrId, zclAttrRec_t *pAttr )
   2921          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   8C..         MOV       ?V1,R4
   2922            zclAttrRecsList *pRec = zclFindAttrRecsList( endpoint );
   \   00000B                ; Setup parameters for call to function zclFindAttrRecsList
   \   00000B   12....       LCALL     `??zclFindAttrRecsList::?relay`; Banked call to: zclFindAttrRecsList
   \   00000E   8A..         MOV       ?V6,R2
   \   000010   8B..         MOV       ?V7,R3
   2923            uint8 attrDir;
   2924          
   2925            if ( pRec != NULL )
   \   000012   EA           MOV       A,R2
   \   000013   45..         ORL       A,?V7
   \   000015   7003         JNZ       $+5
   \   000017   02....       LJMP      ??zclFindNextAttrRec_0 & 0xFFFF
   2926            {
   2927              uint16 x;
   2928          
   2929              for ( x = 0; x < pRec->numAttributes; x++ )
   \   00001A   7A00         MOV       R2,#0x0
   \   00001C   7B00         MOV       R3,#0x0
   \   00001E   7410         MOV       A,#0x10
   \   000020   12....       LCALL     ?XSTACK_DISP0_8
   \   000023   12....       LCALL     ??Subroutine228_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_486:
   \   000026   88..         MOV       ?V2,R0
   \   000028   89..         MOV       ?V3,R1
   \   00002A   8005         SJMP      ??zclFindNextAttrRec_1
   \                     ??zclFindNextAttrRec_2:
   \   00002C   0A           INC       R2
   \   00002D   EA           MOV       A,R2
   \   00002E   7001         JNZ       ??zclFindNextAttrRec_1
   \   000030   0B           INC       R3
   \                     ??zclFindNextAttrRec_1:
   \   000031   85..82       MOV       DPL,?V6
   \   000034   85..83       MOV       DPH,?V7
   \   000037   A3           INC       DPTR
   \   000038   A3           INC       DPTR
   \   000039   A3           INC       DPTR
   \   00003A   A3           INC       DPTR
   \   00003B   A3           INC       DPTR
   \   00003C   A3           INC       DPTR
   \   00003D   A3           INC       DPTR
   \   00003E   E0           MOVX      A,@DPTR
   \   00003F   F8           MOV       R0,A
   \   000040   C3           CLR       C
   \   000041   EA           MOV       A,R2
   \   000042   98           SUBB      A,R0
   \   000043   EB           MOV       A,R3
   \   000044   9400         SUBB      A,#0x0
   \   000046   5074         JNC       ??zclFindNextAttrRec_0
   2930              {
   2931                if ( ( pRec->attrs[x].clusterID == clusterID ) &&
   2932                     ( pRec->attrs[x].attr.attrId >= *attrId ) )
   \   000048   8A..         MOV       ?V4,R2
   \   00004A   8B..         MOV       ?V5,R3
   \   00004C   7403         MOV       A,#0x3
   \   00004E   78..         MOV       R0,#?V4
   \   000050   12....       LCALL     ?S_SHL
   \   000053   85..82       MOV       DPL,?V6
   \   000056   85..83       MOV       DPH,?V7
   \   000059   A3           INC       DPTR
   \   00005A   A3           INC       DPTR
   \   00005B   A3           INC       DPTR
   \   00005C   A3           INC       DPTR
   \   00005D   12....       LCALL     ?Subroutine113 & 0xFFFF
   \                     ??CrossCallReturnLabel_196:
   \   000060   12....       LCALL     ?Subroutine144 & 0xFFFF
   \                     ??CrossCallReturnLabel_258:
   \   000063   7002         JNZ       ??zclFindNextAttrRec_3
   \   000065   EF           MOV       A,R7
   \   000066   69           XRL       A,R1
   \                     ??zclFindNextAttrRec_3:
   \   000067   70C3         JNZ       ??zclFindNextAttrRec_2
   \   000069   A3           INC       DPTR
   \   00006A   A3           INC       DPTR
   \   00006B   E4           CLR       A
   \   00006C   93           MOVC      A,@A+DPTR
   \   00006D   F5..         MOV       ?V4,A
   \   00006F   7401         MOV       A,#0x1
   \   000071   93           MOVC      A,@A+DPTR
   \   000072   F5..         MOV       ?V5,A
   \   000074   85..82       MOV       DPL,?V2
   \   000077   85..83       MOV       DPH,?V3
   \   00007A   12....       LCALL     ??Subroutine228_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_487:
   \   00007D   C3           CLR       C
   \   00007E   E5..         MOV       A,?V4
   \   000080   98           SUBB      A,R0
   \   000081   E5..         MOV       A,?V5
   \   000083   99           SUBB      A,R1
   \   000084   40A6         JC        ??zclFindNextAttrRec_2
   2933                {
   2934                  // also make sure direction is right
   2935                  attrDir = (pRec->attrs[x].attr.accessControl & ACCESS_CLIENT) ? 1 : 0;
   2936                  if ( (attrDir == direction) || (pRec->attrs[x].attr.accessControl & ACCESS_GLOBAL))
   \   000086   EC           MOV       A,R4
   \   000087   2405         ADD       A,#0x5
   \   000089   F582         MOV       DPL,A
   \   00008B   E4           CLR       A
   \   00008C   3D           ADDC      A,R5
   \   00008D   F583         MOV       DPH,A
   \   00008F   E4           CLR       A
   \   000090   93           MOVC      A,@A+DPTR
   \   000091   A2E7         MOV       C,0xE0 /* A   */.7
   \   000093   E4           CLR       A
   \   000094   33           RLC       A
   \   000095   65..         XRL       A,?V1
   \   000097   6006         JZ        ??zclFindNextAttrRec_4
   \   000099   E4           CLR       A
   \   00009A   93           MOVC      A,@A+DPTR
   \   00009B   A2E6         MOV       C,0xE0 /* A   */.6
   \   00009D   508D         JNC       ??zclFindNextAttrRec_2
   \                     ??zclFindNextAttrRec_4:
   \   00009F   7412         MOV       A,#0x12
   \   0000A1   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A4   12....       LCALL     ?Subroutine76 & 0xFFFF
   2937                  {
   2938                    // return attribute and found attribute ID
   2939                    *pAttr = pRec->attrs[x];
   \                     ??CrossCallReturnLabel_128:
   \   0000A7   7408         MOV       A,#0x8
   \   0000A9   12....       LCALL     ?MOVE_LONG8_XDATA_CODE
   2940                    *attrId = pAttr->attr.attrId;
   \   0000AC   8882         MOV       DPL,R0
   \   0000AE   8983         MOV       DPH,R1
   \   0000B0   A3           INC       DPTR
   \   0000B1   A3           INC       DPTR
   \   0000B2   12....       LCALL     ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_143:
   \   0000B5   12....       LCALL     ??Subroutine230_0 & 0xFFFF
   2941          
   2942                    return ( TRUE ); // EMBEDDED RETURN
   \                     ??CrossCallReturnLabel_519:
   \   0000B8   7901         MOV       R1,#0x1
   \   0000BA   8002         SJMP      ??zclFindNextAttrRec_5
   2943                  }
   2944                }
   2945              }
   2946            }
   2947          
   2948            return ( FALSE );
   \                     ??zclFindNextAttrRec_0:
   \   0000BC   7900         MOV       R1,#0x0
   \                     ??zclFindNextAttrRec_5:
   \   0000BE   02....       LJMP      ??Subroutine216_0 & 0xFFFF
   2949          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine85:
   \   000000   12....       LCALL     ?Subroutine161 & 0xFFFF
   \                     ??CrossCallReturnLabel_477:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine161:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003                REQUIRE ??Subroutine226_0
   \   000003                ; // Fall through to label ??Subroutine226_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine226_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F9           MOV       R1,A
   \   000002                ; Setup parameters for call to function zclWriteAttrDataUsingCB
   \   000002                ; Setup parameters for call to function zclGetAttrDataLengthUsingCB
   \   000002   85..82       MOV       DPL,?V2
   \   000005   85..83       MOV       DPH,?V3
   \   000008   22           RET
   2950          #endif // ZCL_DISCOVER
   2951          
   2952          /*********************************************************************
   2953           * @fn      zclSerializeData
   2954           *
   2955           * @brief   Builds a buffer from the attribute data to sent out over
   2956           *          the air.
   2957           *          NOTE - Not compatible with application's attributes callbacks.
   2958           *
   2959           * @param   dataType - data types defined in zcl.h
   2960           * @param   attrData - pointer to the attribute data
   2961           * @param   buf - where to put the serialized data
   2962           *
   2963           * @return  pointer to end of destination buffer
   2964           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine90:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004                REQUIRE ??Subroutine205_0
   \   000004                ; // Fall through to label ??Subroutine205_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2965          uint8 *zclSerializeData( uint8 dataType, void *attrData, uint8 *buf )
   \                     zclSerializeData:
   2966          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   EC           MOV       A,R4
   \   00000A   FA           MOV       R2,A
   \   00000B   ED           MOV       A,R5
   \   00000C   FB           MOV       R3,A
   2967            uint8 *pStr;
   2968            uint16 len;
   2969          
   2970            if ( attrData == NULL )
   \   00000D   EE           MOV       A,R6
   \   00000E   4F           ORL       A,R7
   \   00000F   7003         JNZ       $+5
   \   000011   02....       LJMP      ??zclSerializeData_0 & 0xFFFF
   2971            {
   2972              return ( buf );
   2973            }
   2974          
   2975            switch ( dataType )
   \   000014   EA           MOV       A,R2
   \   000015   2402         ADD       A,#0x2
   \   000017   F5..         MOV       ?V4,A
   \   000019   E4           CLR       A
   \   00001A   3B           ADDC      A,R3
   \   00001B   F5..         MOV       ?V5,A
   \   00001D   8A82         MOV       DPL,R2
   \   00001F   8B83         MOV       DPH,R3
   \   000021   A3           INC       DPTR
   \   000022   AC82         MOV       R4,DPL
   \   000024   AD83         MOV       R5,DPH
   \   000026   8E..         MOV       ?V0,R6
   \   000028   8F..         MOV       ?V1,R7
   \   00002A   75..00       MOV       ?V2,#0x0
   \   00002D   E9           MOV       A,R1
   \   00002E   12....       LCALL     ?UC_SWITCH_SPARSE
   \                     `?<Jumptable for zclSerializeData>_0`:
   \   000031   04           DB        4
   \   000032   41           DB        65
   \   000033   42           DB        66
   \   000034   ....         DW        ??zclSerializeData_1
   \   000036   43           DB        67
   \   000037   44           DB        68
   \   000038   ....         DW        ??zclSerializeData_2
   \   00003A   E0           DB        224
   \   00003B   E2           DB        226
   \   00003C   ....         DW        ??zclSerializeData_3
   \   00003E   E8           DB        232
   \   00003F   E9           DB        233
   \   000040   ....         DW        ??zclSerializeData_4
   \   000042   25           DB        37
   \   000043   08           DB        8
   \   000044   ....         DW        ??zclSerializeData_5
   \   000046   09           DB        9
   \   000047   ....         DW        ??zclSerializeData_4
   \   000049   0A           DB        10
   \   00004A   ....         DW        ??zclSerializeData_6
   \   00004C   0B           DB        11
   \   00004D   ....         DW        ??zclSerializeData_3
   \   00004F   10           DB        16
   \   000050   ....         DW        ??zclSerializeData_5
   \   000052   18           DB        24
   \   000053   ....         DW        ??zclSerializeData_5
   \   000055   19           DB        25
   \   000056   ....         DW        ??zclSerializeData_4
   \   000058   1A           DB        26
   \   000059   ....         DW        ??zclSerializeData_6
   \   00005B   1B           DB        27
   \   00005C   ....         DW        ??zclSerializeData_3
   \   00005E   1C           DB        28
   \   00005F   ....         DW        ??zclSerializeData_7
   \   000061   1D           DB        29
   \   000062   ....         DW        ??zclSerializeData_8
   \   000064   1E           DB        30
   \   000065   ....         DW        ??zclSerializeData_9
   \   000067   1F           DB        31
   \   000068   ....         DW        ??zclSerializeData_10
   \   00006A   20           DB        32
   \   00006B   ....         DW        ??zclSerializeData_5
   \   00006D   21           DB        33
   \   00006E   ....         DW        ??zclSerializeData_4
   \   000070   22           DB        34
   \   000071   ....         DW        ??zclSerializeData_6
   \   000073   23           DB        35
   \   000074   ....         DW        ??zclSerializeData_3
   \   000076   24           DB        36
   \   000077   ....         DW        ??zclSerializeData_7
   \   000079   25           DB        37
   \   00007A   ....         DW        ??zclSerializeData_8
   \   00007C   26           DB        38
   \   00007D   ....         DW        ??zclSerializeData_9
   \   00007F   27           DB        39
   \   000080   ....         DW        ??zclSerializeData_10
   \   000082   28           DB        40
   \   000083   ....         DW        ??zclSerializeData_5
   \   000085   29           DB        41
   \   000086   ....         DW        ??zclSerializeData_4
   \   000088   2A           DB        42
   \   000089   ....         DW        ??zclSerializeData_6
   \   00008B   2B           DB        43
   \   00008C   ....         DW        ??zclSerializeData_3
   \   00008E   2C           DB        44
   \   00008F   ....         DW        ??zclSerializeData_7
   \   000091   2D           DB        45
   \   000092   ....         DW        ??zclSerializeData_8
   \   000094   2E           DB        46
   \   000095   ....         DW        ??zclSerializeData_9
   \   000097   2F           DB        47
   \   000098   ....         DW        ??zclSerializeData_10
   \   00009A   30           DB        48
   \   00009B   ....         DW        ??zclSerializeData_5
   \   00009D   31           DB        49
   \   00009E   ....         DW        ??zclSerializeData_4
   \   0000A0   38           DB        56
   \   0000A1   ....         DW        ??zclSerializeData_4
   \   0000A3   39           DB        57
   \   0000A4   ....         DW        ??zclSerializeData_3
   \   0000A6   3A           DB        58
   \   0000A7   ....         DW        ??zclSerializeData_10
   \   0000A9   EA           DB        234
   \   0000AA   ....         DW        ??zclSerializeData_3
   \   0000AC   F0           DB        240
   \   0000AD   ....         DW        ??zclSerializeData_10
   \   0000AF   F1           DB        241
   \   0000B0   ....         DW        ??zclSerializeData_11
   \   0000B2   ....         DW        ??zclSerializeData_0
   2976            {
   2977              case ZCL_DATATYPE_DATA8:
   2978              case ZCL_DATATYPE_BOOLEAN:
   2979              case ZCL_DATATYPE_BITMAP8:
   2980              case ZCL_DATATYPE_INT8:
   2981              case ZCL_DATATYPE_UINT8:
   2982              case ZCL_DATATYPE_ENUM8:
   2983                *buf++ = *((uint8 *)attrData);
   \                     ??zclSerializeData_5:
   \   0000B4   8E82         MOV       DPL,R6
   \   0000B6   8F83         MOV       DPH,R7
   \   0000B8   12....       LCALL     ?Subroutine89 & 0xFFFF
   \                     ??CrossCallReturnLabel_150:
   \   0000BB   EC           MOV       A,R4
   \   0000BC   FA           MOV       R2,A
   \   0000BD   ED           MOV       A,R5
   \   0000BE   FB           MOV       R3,A
   2984                 break;
   \   0000BF   02....       LJMP      ??zclSerializeData_0 & 0xFFFF
   2985          
   2986              case ZCL_DATATYPE_DATA16:
   2987              case ZCL_DATATYPE_BITMAP16:
   2988              case ZCL_DATATYPE_UINT16:
   2989              case ZCL_DATATYPE_INT16:
   2990              case ZCL_DATATYPE_ENUM16:
   2991              case ZCL_DATATYPE_SEMI_PREC:
   2992              case ZCL_DATATYPE_CLUSTER_ID:
   2993              case ZCL_DATATYPE_ATTR_ID:
   2994                *buf++ = LO_UINT16( *((uint16*)attrData) );
   \                     ??zclSerializeData_4:
   \   0000C2   12....       LCALL     ?Subroutine90 & 0xFFFF
   \                     ??CrossCallReturnLabel_378:
   \   0000C5   12....       LCALL     ?Subroutine39 & 0xFFFF
   2995                *buf++ = HI_UINT16( *((uint16*)attrData) );
   \                     ??CrossCallReturnLabel_49:
   \   0000C8   12....       LCALL     ??Subroutine220_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_439:
   \   0000CB   F0           MOVX      @DPTR,A
   \   0000CC   0A           INC       R2
   \   0000CD   0A           INC       R2
   \   0000CE   AB..         MOV       R3,?V5
   2996                break;
   \   0000D0   02....       LJMP      ??zclSerializeData_0 & 0xFFFF
   2997          
   2998              case ZCL_DATATYPE_DATA24:
   2999              case ZCL_DATATYPE_BITMAP24:
   3000              case ZCL_DATATYPE_UINT24:
   3001              case ZCL_DATATYPE_INT24:
   3002                *buf++ = BREAK_UINT32( *((uint32*)attrData), 0 );
   \                     ??zclSerializeData_6:
   \   0000D3   8E82         MOV       DPL,R6
   \   0000D5   8F83         MOV       DPH,R7
   \   0000D7   78..         MOV       R0,#?V0
   \   0000D9   12....       LCALL     ?L_MOV_X
   \   0000DC   8A82         MOV       DPL,R2
   \   0000DE   8B83         MOV       DPH,R3
   \   0000E0   E5..         MOV       A,?V0
   \   0000E2   12....       LCALL     ?Subroutine155 & 0xFFFF
   3003                *buf++ = BREAK_UINT32( *((uint32*)attrData), 1 );
   \                     ??CrossCallReturnLabel_276:
   \   0000E5   78..         MOV       R0,#?V0
   \   0000E7   12....       LCALL     ?L_MOV_X
   \   0000EA   E5..         MOV       A,?V1
   \   0000EC   8C82         MOV       DPL,R4
   \   0000EE   8D83         MOV       DPH,R5
   \   0000F0   12....       LCALL     ?Subroutine155 & 0xFFFF
   3004                *buf++ = BREAK_UINT32( *((uint32*)attrData), 2 );
   \                     ??CrossCallReturnLabel_277:
   \   0000F3   78..         MOV       R0,#?V0
   \   0000F5   12....       LCALL     ?L_MOV_X
   \   0000F8   7410         MOV       A,#0x10
   \   0000FA   78..         MOV       R0,#?V0
   \   0000FC   12....       LCALL     ?UL_SHR
   \   0000FF   85..82       MOV       DPL,?V4
   \   000102   85..83       MOV       DPH,?V5
   \   000105   E5..         MOV       A,?V0
   \   000107   F0           MOVX      @DPTR,A
   \   000108   EA           MOV       A,R2
   \   000109   2403         ADD       A,#0x3
   \   00010B   FA           MOV       R2,A
   \   00010C   506D         JNC       ??zclSerializeData_0
   \   00010E   0B           INC       R3
   3005                break;
   \   00010F   806A         SJMP      ??zclSerializeData_0
   3006          
   3007              case ZCL_DATATYPE_DATA32:
   3008              case ZCL_DATATYPE_BITMAP32:
   3009              case ZCL_DATATYPE_UINT32:
   3010              case ZCL_DATATYPE_INT32:
   3011              case ZCL_DATATYPE_SINGLE_PREC:
   3012              case ZCL_DATATYPE_TOD:
   3013              case ZCL_DATATYPE_DATE:
   3014              case ZCL_DATATYPE_UTC:
   3015              case ZCL_DATATYPE_BAC_OID:
   3016                buf = zcl_buffer_uint32( buf, *((uint32*)attrData) );
   \                     ??zclSerializeData_3:
   \   000111                ; Setup parameters for call to function osal_buffer_uint32
   \   000111   8E82         MOV       DPL,R6
   \   000113   8F83         MOV       DPH,R7
   \   000115   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000118   12....       LCALL     `??osal_buffer_uint32::?relay`; Banked call to: osal_buffer_uint32
   \   00011B   7404         MOV       A,#0x4
   \   00011D   12....       LCALL     ?DEALLOC_XSTACK8
   3017                break;
   \   000120   8059         SJMP      ??zclSerializeData_0
   3018          
   3019              case ZCL_DATATYPE_BITMAP40:
   3020              case ZCL_DATATYPE_UINT40:
   3021              case ZCL_DATATYPE_INT40:
   3022                pStr = (uint8*)attrData;
   3023                buf = zcl_memcpy( buf, pStr, 5 );
   \                     ??zclSerializeData_7:
   \   000122                ; Setup parameters for call to function osal_memcpy
   \   000122   78..         MOV       R0,#?V0
   \   000124   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000127   7C05         MOV       R4,#0x5
   \   000129   8046         SJMP      ??zclSerializeData_12
   3024                break;
   3025          
   3026              case ZCL_DATATYPE_BITMAP48:
   3027              case ZCL_DATATYPE_UINT48:
   3028              case ZCL_DATATYPE_INT48:
   3029                pStr = (uint8*)attrData;
   3030                buf = zcl_memcpy( buf, pStr, 6 );
   \                     ??zclSerializeData_8:
   \   00012B                ; Setup parameters for call to function osal_memcpy
   \   00012B   78..         MOV       R0,#?V0
   \   00012D   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000130   7C06         MOV       R4,#0x6
   \   000132   803D         SJMP      ??zclSerializeData_12
   3031                break;
   3032          
   3033              case ZCL_DATATYPE_BITMAP56:
   3034              case ZCL_DATATYPE_UINT56:
   3035              case ZCL_DATATYPE_INT56:
   3036                pStr = (uint8*)attrData;
   3037                buf = zcl_memcpy( buf, pStr, 7 );
   \                     ??zclSerializeData_9:
   \   000134                ; Setup parameters for call to function osal_memcpy
   \   000134   78..         MOV       R0,#?V0
   \   000136   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000139   7C07         MOV       R4,#0x7
   \   00013B   8034         SJMP      ??zclSerializeData_12
   3038                break;
   3039          
   3040              case ZCL_DATATYPE_BITMAP64:
   3041              case ZCL_DATATYPE_DOUBLE_PREC:
   3042              case ZCL_DATATYPE_IEEE_ADDR:
   3043              case ZCL_DATATYPE_UINT64:
   3044              case ZCL_DATATYPE_INT64:
   3045                pStr = (uint8*)attrData;
   3046                buf = zcl_memcpy( buf, pStr, 8 );
   \                     ??zclSerializeData_10:
   \   00013D                ; Setup parameters for call to function osal_memcpy
   \   00013D   78..         MOV       R0,#?V0
   \   00013F   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000142   7C08         MOV       R4,#0x8
   \   000144   802B         SJMP      ??zclSerializeData_12
   3047                break;
   3048          
   3049              case ZCL_DATATYPE_CHAR_STR:
   3050              case ZCL_DATATYPE_OCTET_STR:
   3051                pStr = (uint8*)attrData;
   3052                len = *pStr;
   3053                buf = zcl_memcpy( buf, pStr, len+1 ); // Including length field
   \                     ??zclSerializeData_1:
   \   000146                ; Setup parameters for call to function osal_memcpy
   \   000146   78..         MOV       R0,#?V0
   \   000148   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00014B   8E82         MOV       DPL,R6
   \   00014D   8F83         MOV       DPH,R7
   \   00014F   E0           MOVX      A,@DPTR
   \   000150   2401         ADD       A,#0x1
   \   000152   FC           MOV       R4,A
   \   000153   E4           CLR       A
   \   000154   3400         ADDC      A,#0x0
   \   000156   800F         SJMP      ??zclSerializeData_13
   3054                break;
   3055          
   3056              case ZCL_DATATYPE_LONG_CHAR_STR:
   3057              case ZCL_DATATYPE_LONG_OCTET_STR:
   3058                pStr = (uint8*)attrData;
   3059                len = BUILD_UINT16( pStr[0], pStr[1] );
   3060                buf = zcl_memcpy( buf, pStr, len+2 ); // Including length field
   \                     ??zclSerializeData_2:
   \   000158                ; Setup parameters for call to function osal_memcpy
   \   000158   78..         MOV       R0,#?V0
   \   00015A   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00015D   8E82         MOV       DPL,R6
   \   00015F   8F83         MOV       DPH,R7
   \   000161   12....       LCALL     ?Subroutine118 & 0xFFFF
   \                     ??CrossCallReturnLabel_203:
   \   000164   FC           MOV       R4,A
   \   000165   E4           CLR       A
   \   000166   39           ADDC      A,R1
   \                     ??zclSerializeData_13:
   \   000167   FD           MOV       R5,A
   \   000168   8009         SJMP      ??zclSerializeData_14
   3061                break;
   3062          
   3063              case ZCL_DATATYPE_128_BIT_SEC_KEY:
   3064                pStr = (uint8*)attrData;
   3065                buf = zcl_memcpy( buf, pStr, SEC_KEY_LEN );
   \                     ??zclSerializeData_11:
   \   00016A                ; Setup parameters for call to function osal_memcpy
   \   00016A   78..         MOV       R0,#?V0
   \   00016C   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00016F   7C10         MOV       R4,#0x10
   \                     ??zclSerializeData_12:
   \   000171   7D00         MOV       R5,#0x0
   \                     ??zclSerializeData_14:
   \   000173   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000176   7403         MOV       A,#0x3
   \   000178   12....       LCALL     ?DEALLOC_XSTACK8
   3066                break;
   3067          
   3068              case ZCL_DATATYPE_NO_DATA:
   3069              case ZCL_DATATYPE_UNKNOWN:
   3070                // Fall through
   3071          
   3072              default:
   3073                break;
   3074            }
   3075          
   3076            return ( buf );
   \                     ??zclSerializeData_0:
   \   00017B   02....       LJMP      ?Subroutine9 & 0xFFFF
   3077          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine118:
   \   000000   12....       LCALL     ?Subroutine174 & 0xFFFF
   \                     ??CrossCallReturnLabel_306:
   \   000003   F9           MOV       R1,A
   \   000004   EC           MOV       A,R4
   \   000005   2402         ADD       A,#0x2
   \   000007   22           RET
   3078          
   3079          #if defined ZCL_REPORTING_DEVICE || defined ZCL_REPORT_CONFIGURING_DEVICE
   3080          /*********************************************************************
   3081           * @fn      zclAnalogDataType
   3082           *
   3083           * @brief   Checks to see if Data Type is Analog
   3084           *
   3085           * @param   dataType - data type
   3086           *
   3087           * @return  TRUE if data type is analog
   3088           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3089          uint8 zclAnalogDataType( uint8 dataType )
   \                     zclAnalogDataType:
   3090          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV       A,R1
   3091            uint8 analog;
   3092          
   3093            switch ( dataType )
   \   000005   12....       LCALL     ?UC_SWITCH_SPARSE
   \                     `?<Jumptable for zclAnalogDataType>_0`:
   \   000008   03           DB        3
   \   000009   20           DB        32
   \   00000A   2F           DB        47
   \   00000B   ....         DW        ??zclAnalogDataType_0
   \   00000D   38           DB        56
   \   00000E   3A           DB        58
   \   00000F   ....         DW        ??zclAnalogDataType_0
   \   000011   E0           DB        224
   \   000012   E2           DB        226
   \   000013   ....         DW        ??zclAnalogDataType_0
   \   000015   00           DB        0
   \   000016   ....         DW        ??zclAnalogDataType_1
   3094            {
   3095              case ZCL_DATATYPE_UINT8:
   3096              case ZCL_DATATYPE_UINT16:
   3097              case ZCL_DATATYPE_UINT24:
   3098              case ZCL_DATATYPE_UINT32:
   3099              case ZCL_DATATYPE_UINT40:
   3100              case ZCL_DATATYPE_UINT48:
   3101              case ZCL_DATATYPE_UINT56:
   3102              case ZCL_DATATYPE_UINT64:
   3103              case ZCL_DATATYPE_INT8:
   3104              case ZCL_DATATYPE_INT16:
   3105              case ZCL_DATATYPE_INT24:
   3106              case ZCL_DATATYPE_INT32:
   3107              case ZCL_DATATYPE_INT40:
   3108              case ZCL_DATATYPE_INT48:
   3109              case ZCL_DATATYPE_INT56:
   3110              case ZCL_DATATYPE_INT64:
   3111              case ZCL_DATATYPE_SEMI_PREC:
   3112              case ZCL_DATATYPE_SINGLE_PREC:
   3113              case ZCL_DATATYPE_DOUBLE_PREC:
   3114              case ZCL_DATATYPE_TOD:
   3115              case ZCL_DATATYPE_DATE:
   3116              case ZCL_DATATYPE_UTC:
   3117                analog = TRUE;
   \                     ??zclAnalogDataType_0:
   \   000018   7901         MOV       R1,#0x1
   3118                break;
   \   00001A   8002         SJMP      ??zclAnalogDataType_2
   3119          
   3120              default:
   3121                analog = FALSE;
   \                     ??zclAnalogDataType_1:
   \   00001C   7900         MOV       R1,#0x0
   3122                break;
   3123            }
   3124          
   3125            return ( analog );
   \                     ??zclAnalogDataType_2:
   \   00001E   02....       LJMP      ?Subroutine0 & 0xFFFF
   3126          }
   3127          
   3128          /*********************************************************************
   3129           * @fn      zclIsLittleEndianMachine
   3130           *
   3131           * @brief   Verifies endianness in system.
   3132           *
   3133           * @param   none
   3134           *
   3135           * @return  MSB-00 or LSB-01 depending on endianness in the system
   3136           */
   3137          static int zclIsLittleEndianMachine(void)
   3138          {
   3139            uint16 test = 0x0001;
   3140          
   3141            return (*((uint8 *)(&test)));
   3142          }
   3143          
   3144          /*********************************************************************
   3145           * @fn      zcl_BuildAnalogData
   3146           *
   3147           * @brief   Build an analog arribute out of sequential bytes.
   3148           *
   3149           * @param   dataType - type of data
   3150           * @param   pData - pointer to data
   3151           * @param   pBuf - where to put the data
   3152           *
   3153           * @return  none
   3154           */
   3155          static void zcl_BuildAnalogData( uint8 dataType, uint8 *pData, uint8 *pBuf )
   3156          {
   3157            int current_byte_index;
   3158            int remaining_bytes;
   3159            int step;
   3160          
   3161            remaining_bytes = zclGetAttrDataLength(dataType, pData);
   3162          
   3163            // decide if move forward or backwards to copy data
   3164            if ( zclIsLittleEndianMachine() )
   3165            {
   3166              step = 1;
   3167              current_byte_index = 0;
   3168            }
   3169            else
   3170            {
   3171              step = -1;
   3172              current_byte_index = remaining_bytes - 1;
   3173            }
   3174          
   3175            while ( remaining_bytes-- )
   3176            {
   3177              pData[current_byte_index] = *(pBuf++);
   3178              current_byte_index += step;
   3179            }
   3180          }
   3181          #endif
   3182          
   3183          /*********************************************************************
   3184           * @fn      zclGetDataTypeLength
   3185           *
   3186           * @brief   Return the length of the datatype in octet.
   3187           *
   3188           *          NOTE: Should not be called for ZCL_DATATYPE_OCTECT_STR or
   3189           *                ZCL_DATATYPE_CHAR_STR data types.
   3190           *
   3191           * @param   dataType - data type
   3192           *
   3193           * @return  length of data
   3194           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3195          uint8 zclGetDataTypeLength( uint8 dataType )
   \                     zclGetDataTypeLength:
   3196          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   E9           MOV       A,R1
   3197            uint8 len;
   3198          
   3199            switch ( dataType )
   \   000001   24F8         ADD       A,#-0x8
   \   000003   6078         JZ        ??zclGetDataTypeLength_0
   \   000005   14           DEC       A
   \   000006   6079         JZ        ??zclGetDataTypeLength_1
   \   000008   14           DEC       A
   \   000009   607A         JZ        ??zclGetDataTypeLength_2
   \   00000B   14           DEC       A
   \   00000C   607B         JZ        ??zclGetDataTypeLength_3
   \   00000E   24FB         ADD       A,#-0x5
   \   000010   606B         JZ        ??zclGetDataTypeLength_0
   \   000012   24F8         ADD       A,#-0x8
   \   000014   6067         JZ        ??zclGetDataTypeLength_0
   \   000016   14           DEC       A
   \   000017   6068         JZ        ??zclGetDataTypeLength_1
   \   000019   14           DEC       A
   \   00001A   6069         JZ        ??zclGetDataTypeLength_2
   \   00001C   14           DEC       A
   \   00001D   606A         JZ        ??zclGetDataTypeLength_3
   \   00001F   24FB         ADD       A,#-0x5
   \   000021   605A         JZ        ??zclGetDataTypeLength_0
   \   000023   14           DEC       A
   \   000024   605B         JZ        ??zclGetDataTypeLength_1
   \   000026   14           DEC       A
   \   000027   605C         JZ        ??zclGetDataTypeLength_2
   \   000029   14           DEC       A
   \   00002A   605D         JZ        ??zclGetDataTypeLength_3
   \   00002C   14           DEC       A
   \   00002D   605E         JZ        ??zclGetDataTypeLength_4
   \   00002F   14           DEC       A
   \   000030   605F         JZ        ??zclGetDataTypeLength_5
   \   000032   14           DEC       A
   \   000033   6060         JZ        ??zclGetDataTypeLength_6
   \   000035   14           DEC       A
   \   000036   6061         JZ        ??zclGetDataTypeLength_7
   \   000038   14           DEC       A
   \   000039   6042         JZ        ??zclGetDataTypeLength_0
   \   00003B   14           DEC       A
   \   00003C   6043         JZ        ??zclGetDataTypeLength_1
   \   00003E   14           DEC       A
   \   00003F   6044         JZ        ??zclGetDataTypeLength_2
   \   000041   14           DEC       A
   \   000042   6045         JZ        ??zclGetDataTypeLength_3
   \   000044   14           DEC       A
   \   000045   6046         JZ        ??zclGetDataTypeLength_4
   \   000047   14           DEC       A
   \   000048   6047         JZ        ??zclGetDataTypeLength_5
   \   00004A   14           DEC       A
   \   00004B   6048         JZ        ??zclGetDataTypeLength_6
   \   00004D   14           DEC       A
   \   00004E   6049         JZ        ??zclGetDataTypeLength_7
   \   000050   14           DEC       A
   \   000051   602A         JZ        ??zclGetDataTypeLength_0
   \   000053   14           DEC       A
   \   000054   602B         JZ        ??zclGetDataTypeLength_1
   \   000056   24F9         ADD       A,#-0x7
   \   000058   6027         JZ        ??zclGetDataTypeLength_1
   \   00005A   14           DEC       A
   \   00005B   602C         JZ        ??zclGetDataTypeLength_3
   \   00005D   14           DEC       A
   \   00005E   6039         JZ        ??zclGetDataTypeLength_7
   \   000060   245A         ADD       A,#0x5a
   \   000062   6025         JZ        ??zclGetDataTypeLength_3
   \   000064   14           DEC       A
   \   000065   6022         JZ        ??zclGetDataTypeLength_3
   \   000067   14           DEC       A
   \   000068   601F         JZ        ??zclGetDataTypeLength_3
   \   00006A   24FA         ADD       A,#-0x6
   \   00006C   6013         JZ        ??zclGetDataTypeLength_1
   \   00006E   14           DEC       A
   \   00006F   6010         JZ        ??zclGetDataTypeLength_1
   \   000071   14           DEC       A
   \   000072   6015         JZ        ??zclGetDataTypeLength_3
   \   000074   24FA         ADD       A,#-0x6
   \   000076   6021         JZ        ??zclGetDataTypeLength_7
   \   000078   14           DEC       A
   \   000079   6022         JZ        ??zclGetDataTypeLength_8
   \   00007B   8024         SJMP      ??zclGetDataTypeLength_9
   3200            {
   3201              case ZCL_DATATYPE_DATA8:
   3202              case ZCL_DATATYPE_BOOLEAN:
   3203              case ZCL_DATATYPE_BITMAP8:
   3204              case ZCL_DATATYPE_INT8:
   3205              case ZCL_DATATYPE_UINT8:
   3206              case ZCL_DATATYPE_ENUM8:
   3207                len = 1;
   \                     ??zclGetDataTypeLength_0:
   \   00007D   7901         MOV       R1,#0x1
   3208                break;
   \   00007F   8022         SJMP      ??zclGetDataTypeLength_10
   3209          
   3210              case ZCL_DATATYPE_DATA16:
   3211              case ZCL_DATATYPE_BITMAP16:
   3212              case ZCL_DATATYPE_UINT16:
   3213              case ZCL_DATATYPE_INT16:
   3214              case ZCL_DATATYPE_ENUM16:
   3215              case ZCL_DATATYPE_SEMI_PREC:
   3216              case ZCL_DATATYPE_CLUSTER_ID:
   3217              case ZCL_DATATYPE_ATTR_ID:
   3218                len = 2;
   \                     ??zclGetDataTypeLength_1:
   \   000081   7902         MOV       R1,#0x2
   3219                break;
   \   000083   801E         SJMP      ??zclGetDataTypeLength_10
   3220          
   3221              case ZCL_DATATYPE_DATA24:
   3222              case ZCL_DATATYPE_BITMAP24:
   3223              case ZCL_DATATYPE_UINT24:
   3224              case ZCL_DATATYPE_INT24:
   3225                len = 3;
   \                     ??zclGetDataTypeLength_2:
   \   000085   7903         MOV       R1,#0x3
   3226                break;
   \   000087   801A         SJMP      ??zclGetDataTypeLength_10
   3227          
   3228              case ZCL_DATATYPE_DATA32:
   3229              case ZCL_DATATYPE_BITMAP32:
   3230              case ZCL_DATATYPE_UINT32:
   3231              case ZCL_DATATYPE_INT32:
   3232              case ZCL_DATATYPE_SINGLE_PREC:
   3233              case ZCL_DATATYPE_TOD:
   3234              case ZCL_DATATYPE_DATE:
   3235              case ZCL_DATATYPE_UTC:
   3236              case ZCL_DATATYPE_BAC_OID:
   3237                len = 4;
   \                     ??zclGetDataTypeLength_3:
   \   000089   7904         MOV       R1,#0x4
   3238                break;
   \   00008B   8016         SJMP      ??zclGetDataTypeLength_10
   3239          
   3240             case ZCL_DATATYPE_UINT40:
   3241             case ZCL_DATATYPE_INT40:
   3242                 len = 5;
   \                     ??zclGetDataTypeLength_4:
   \   00008D   7905         MOV       R1,#0x5
   3243                 break;
   \   00008F   8012         SJMP      ??zclGetDataTypeLength_10
   3244          
   3245             case ZCL_DATATYPE_UINT48:
   3246             case ZCL_DATATYPE_INT48:
   3247                 len = 6;
   \                     ??zclGetDataTypeLength_5:
   \   000091   7906         MOV       R1,#0x6
   3248                 break;
   \   000093   800E         SJMP      ??zclGetDataTypeLength_10
   3249          
   3250             case ZCL_DATATYPE_UINT56:
   3251             case ZCL_DATATYPE_INT56:
   3252                 len = 7;
   \                     ??zclGetDataTypeLength_6:
   \   000095   7907         MOV       R1,#0x7
   3253                 break;
   \   000097   800A         SJMP      ??zclGetDataTypeLength_10
   3254          
   3255             case ZCL_DATATYPE_DOUBLE_PREC:
   3256             case ZCL_DATATYPE_IEEE_ADDR:
   3257             case ZCL_DATATYPE_UINT64:
   3258             case ZCL_DATATYPE_INT64:
   3259               len = 8;
   \                     ??zclGetDataTypeLength_7:
   \   000099   7908         MOV       R1,#0x8
   3260               break;
   \   00009B   8006         SJMP      ??zclGetDataTypeLength_10
   3261          
   3262              case ZCL_DATATYPE_128_BIT_SEC_KEY:
   3263               len = SEC_KEY_LEN;
   \                     ??zclGetDataTypeLength_8:
   \   00009D   7910         MOV       R1,#0x10
   3264               break;
   \   00009F   8002         SJMP      ??zclGetDataTypeLength_10
   3265          
   3266              case ZCL_DATATYPE_NO_DATA:
   3267              case ZCL_DATATYPE_UNKNOWN:
   3268                // Fall through
   3269          
   3270              default:
   3271                len = 0;
   \                     ??zclGetDataTypeLength_9:
   \   0000A1   7900         MOV       R1,#0x0
   3272                break;
   3273            }
   3274          
   3275            return ( len );
   \                     ??zclGetDataTypeLength_10:
   \   0000A3   02....       LJMP      ?BRET
   3276          }
   3277          
   3278          /*********************************************************************
   3279           * @fn      zclGetAttrDataLength
   3280           *
   3281           * @brief   Return the length of the attribute.
   3282           *
   3283           * @param   dataType - data type
   3284           * @param   pData - pointer to data
   3285           *
   3286           * @return  returns atrribute length
   3287           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3288          uint16 zclGetAttrDataLength( uint8 dataType, uint8 *pData )
   \                     zclGetAttrDataLength:
   3289          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   3290            uint16 dataLen = 0;
   3291          
   3292            if ( dataType == ZCL_DATATYPE_LONG_CHAR_STR || dataType == ZCL_DATATYPE_LONG_OCTET_STR )
   \   000007   7444         MOV       A,#0x44
   \   000009   6E           XRL       A,R6
   \   00000A   6005         JZ        ??zclGetAttrDataLength_0
   \   00000C   7443         MOV       A,#0x43
   \   00000E   6E           XRL       A,R6
   \   00000F   700C         JNZ       ??zclGetAttrDataLength_1
   3293            {
   3294              dataLen = BUILD_UINT16( pData[0], pData[1] ) + 2; // long string length + 2 for length field
   \                     ??zclGetAttrDataLength_0:
   \   000011   8A82         MOV       DPL,R2
   \   000013   8B83         MOV       DPH,R3
   \   000015   12....       LCALL     ?Subroutine118 & 0xFFFF
   3295            }
   \                     ??CrossCallReturnLabel_204:
   \   000018   FA           MOV       R2,A
   \   000019   E4           CLR       A
   \   00001A   39           ADDC      A,R1
   \   00001B   8015         SJMP      ??zclGetAttrDataLength_2
   3296            else if ( dataType == ZCL_DATATYPE_CHAR_STR || dataType == ZCL_DATATYPE_OCTET_STR )
   \                     ??zclGetAttrDataLength_1:
   \   00001D   7442         MOV       A,#0x42
   \   00001F   6E           XRL       A,R6
   \   000020   6005         JZ        ??zclGetAttrDataLength_3
   \   000022   7441         MOV       A,#0x41
   \   000024   6E           XRL       A,R6
   \   000025   700E         JNZ       ??zclGetAttrDataLength_4
   3297            {
   3298              dataLen = *pData + 1; // string length + 1 for length field
   \                     ??zclGetAttrDataLength_3:
   \   000027   8A82         MOV       DPL,R2
   \   000029   8B83         MOV       DPH,R3
   \   00002B   E0           MOVX      A,@DPTR
   \   00002C   2401         ADD       A,#0x1
   \   00002E   FA           MOV       R2,A
   \   00002F   E4           CLR       A
   \   000030   3400         ADDC      A,#0x0
   \                     ??zclGetAttrDataLength_2:
   \   000032   FB           MOV       R3,A
   \   000033   8007         SJMP      ??zclGetAttrDataLength_5
   3299            }
   3300            else
   3301            {
   3302              dataLen = zclGetDataTypeLength( dataType );
   \                     ??zclGetAttrDataLength_4:
   \   000035                ; Setup parameters for call to function zclGetDataTypeLength
   \   000035   12....       LCALL     `??zclGetDataTypeLength::?relay`; Banked call to: zclGetDataTypeLength
   \   000038   E9           MOV       A,R1
   \   000039   FA           MOV       R2,A
   \   00003A   7B00         MOV       R3,#0x0
   3303            }
   3304          
   3305            return ( dataLen );
   \                     ??zclGetAttrDataLength_5:
   \   00003C   02....       LJMP      ??Subroutine215_0 & 0xFFFF
   3306          }
   3307          
   3308          #ifdef ZCL_READ
   3309          /*********************************************************************
   3310           * @fn      zclReadAttrData
   3311           *
   3312           * @brief   Read the attribute's current value into pAttrData.
   3313           *          NOTE - Not compatible with application's attributes callbacks.
   3314           *
   3315           * @param   pAttrData - where to put attribute data
   3316           * @param   pAttr - pointer to attribute
   3317           * @param   pDataLen - where to put attribute data length
   3318           *
   3319           * @return Success
   3320           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3321          ZStatus_t zclReadAttrData( uint8 *pAttrData, zclAttrRec_t *pAttr, uint16 *pDataLen )
   \                     zclReadAttrData:
   3322          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   3323            uint16 dataLen;
   3324          
   3325            if ( pAttr->attr.dataPtr == NULL )
   \   000009   EC           MOV       A,R4
   \   00000A   2406         ADD       A,#0x6
   \   00000C   F8           MOV       R0,A
   \   00000D   E4           CLR       A
   \   00000E   3D           ADDC      A,R5
   \   00000F   F9           MOV       R1,A
   \   000010   88..         MOV       ?V0,R0
   \   000012   89..         MOV       ?V1,R1
   \   000014   8882         MOV       DPL,R0
   \   000016   F583         MOV       DPH,A
   \   000018   12....       LCALL     ??Subroutine199_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_353:
   \   00001B   7004         JNZ       ??zclReadAttrData_0
   3326            {
   3327              return ( ZCL_STATUS_FAILURE );
   \   00001D   7901         MOV       R1,#0x1
   \   00001F   804C         SJMP      ??zclReadAttrData_1
   3328            }
   3329          
   3330            dataLen = zclGetAttrDataLength( pAttr->attr.dataType, (uint8*)(pAttr->attr.dataPtr) );
   \                     ??zclReadAttrData_0:
   \   000021                ; Setup parameters for call to function zclGetAttrDataLength
   \   000021   8C82         MOV       DPL,R4
   \   000023   8D83         MOV       DPH,R5
   \   000025   A3           INC       DPTR
   \   000026   A3           INC       DPTR
   \   000027   A3           INC       DPTR
   \   000028   A3           INC       DPTR
   \   000029   E0           MOVX      A,@DPTR
   \   00002A   F9           MOV       R1,A
   \   00002B   12....       LCALL     `??zclGetAttrDataLength::?relay`; Banked call to: zclGetAttrDataLength
   \   00002E   8A..         MOV       ?V2,R2
   \   000030   8B..         MOV       ?V3,R3
   3331            zcl_memcpy( pAttrData, pAttr->attr.dataPtr, dataLen );
   \   000032                ; Setup parameters for call to function osal_memcpy
   \   000032   85..82       MOV       DPL,?V0
   \   000035   85..83       MOV       DPH,?V1
   \   000038   E0           MOVX      A,@DPTR
   \   000039   F5..         MOV       ?V0,A
   \   00003B   A3           INC       DPTR
   \   00003C   E0           MOVX      A,@DPTR
   \   00003D   85....       MOV       ?V4,?V0
   \   000040   F5..         MOV       ?V5,A
   \   000042   75..00       MOV       ?V6,#0x0
   \   000045   78..         MOV       R0,#?V4
   \   000047   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00004A   AC..         MOV       R4,?V2
   \   00004C   AD..         MOV       R5,?V3
   \   00004E   EE           MOV       A,R6
   \   00004F   FA           MOV       R2,A
   \   000050   EF           MOV       A,R7
   \   000051   FB           MOV       R3,A
   \   000052   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000055   7403         MOV       A,#0x3
   \   000057   12....       LCALL     ?DEALLOC_XSTACK8
   \   00005A   740F         MOV       A,#0xf
   \   00005C   12....       LCALL     ?XSTACK_DISP0_8
   \   00005F   12....       LCALL     ??Subroutine211_0 & 0xFFFF
   3332          
   3333            if ( pDataLen != NULL )
   \                     ??CrossCallReturnLabel_405:
   \   000062   6007         JZ        ??zclReadAttrData_2
   3334            {
   3335              *pDataLen = dataLen;
   \   000064   E5..         MOV       A,?V2
   \   000066   F0           MOVX      @DPTR,A
   \   000067   A3           INC       DPTR
   \   000068   E5..         MOV       A,?V3
   \   00006A   F0           MOVX      @DPTR,A
   3336            }
   3337          
   3338            return ( ZCL_STATUS_SUCCESS );
   \                     ??zclReadAttrData_2:
   \   00006B   7900         MOV       R1,#0x0
   \                     ??zclReadAttrData_1:
   \   00006D                REQUIRE ?Subroutine9
   \   00006D                ; // Fall through to label ?Subroutine9
   3339          }
   3340          
   3341          /*********************************************************************
   3342           * @fn      zcl_ReadAttrData
   3343           *
   3344           * @brief   Read the attribute's current value into pAttrData.
   3345           *          Use application's callback function if assigned to this attribute.
   3346           *
   3347           * @param   endpoint - application's endpoint
   3348           * @param   clusterId - cluster that attribute belongs to
   3349           * @param   attrId - attribute id
   3350           * @param   pAttrData - where to put attribute data
   3351           * @param   pDataLen - where to put attribute data length
   3352           *
   3353           * @return  Successful if data was read
   3354           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine216_0
   \   000003                ; // Fall through to label ??Subroutine216_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3355          ZStatus_t zcl_ReadAttrData( uint8 endpoint, uint16 clusterId, uint16 attrId,
   \                     zcl_ReadAttrData:
   3356                                                   uint8 *pAttrData, uint16 *pDataLen )
   3357          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV       A,#-0x8
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V2,R1
   \   00000C   8A..         MOV       ?V0,R2
   \   00000E   8B..         MOV       ?V1,R3
   \   000010   EC           MOV       A,R4
   \   000011   FE           MOV       R6,A
   \   000012   ED           MOV       A,R5
   \   000013   FF           MOV       R7,A
   3358            zclAttrRec_t attrRec;
   3359          
   3360            if ( zclFindAttrRec( endpoint, clusterId, attrId, &attrRec ) == FALSE )
   \   000014                ; Setup parameters for call to function zclFindAttrRec
   \   000014   A8..         MOV       R0,?XSP + 0
   \   000016   A9..         MOV       R1,?XSP + 1
   \   000018   88..         MOV       ?V4,R0
   \   00001A   89..         MOV       ?V5,R1
   \   00001C   78..         MOV       R0,#?V4
   \   00001E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000021   A9..         MOV       R1,?V2
   \   000023   12....       LCALL     `??zclFindAttrRec::?relay`; Banked call to: zclFindAttrRec
   \   000026   7402         MOV       A,#0x2
   \   000028   12....       LCALL     ?DEALLOC_XSTACK8
   \   00002B   E9           MOV       A,R1
   \   00002C   7004         JNZ       ??zcl_ReadAttrData_0
   3361            {
   3362              return ( ZCL_STATUS_FAILURE );
   \   00002E   7901         MOV       R1,#0x1
   \   000030   804C         SJMP      ??zcl_ReadAttrData_1
   3363            }
   \                     ??zcl_ReadAttrData_0:
   \   000032   7418         MOV       A,#0x18
   \   000034   12....       LCALL     ?XSTACK_DISP0_8
   \   000037   12....       LCALL     ??Subroutine239_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_551:
   \   00003A   741A         MOV       A,#0x1a
   \   00003C   12....       LCALL     ?XSTACK_DISP0_8
   \   00003F   12....       LCALL     ?Subroutine109 & 0xFFFF
   3364          
   3365            if ( attrRec.attr.dataPtr != NULL )
   \                     ??CrossCallReturnLabel_185:
   \   000042   7406         MOV       A,#0x6
   \   000044   12....       LCALL     ?XSTACK_DISP0_8
   \   000047   12....       LCALL     ??Subroutine218_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_430:
   \   00004A   78..         MOV       R0,#?V4
   \   00004C   6016         JZ        ??zcl_ReadAttrData_2
   3366            {
   3367              return zclReadAttrData( pAttrData, &attrRec, pDataLen );
   \   00004E                ; Setup parameters for call to function zclReadAttrData
   \   00004E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000051   7402         MOV       A,#0x2
   \   000053   12....       LCALL     ?XSTACK_DISP102_8
   \   000056   AA..         MOV       R2,?V6
   \   000058   AB..         MOV       R3,?V7
   \   00005A   12....       LCALL     `??zclReadAttrData::?relay`; Banked call to: zclReadAttrData
   \   00005D   7402         MOV       A,#0x2
   \   00005F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000062   801A         SJMP      ??zcl_ReadAttrData_1
   3368            }
   3369            else
   3370            {
   3371              return zclReadAttrDataUsingCB( endpoint, clusterId, attrId, pAttrData, pDataLen );
   \                     ??zcl_ReadAttrData_2:
   \   000064                ; Setup parameters for call to function zclReadAttrDataUsingCB
   \   000064   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000067   78..         MOV       R0,#?V6
   \   000069   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00006C   EE           MOV       A,R6
   \   00006D   FC           MOV       R4,A
   \   00006E   EF           MOV       A,R7
   \   00006F   FD           MOV       R5,A
   \   000070   AA..         MOV       R2,?V0
   \   000072   AB..         MOV       R3,?V1
   \   000074   A9..         MOV       R1,?V2
   \   000076   12....       LCALL     `??zclReadAttrDataUsingCB::?relay`; Banked call to: zclReadAttrDataUsingCB
   \   000079   7404         MOV       A,#0x4
   \   00007B   12....       LCALL     ?DEALLOC_XSTACK8
   \                     ??zcl_ReadAttrData_1:
   \   00007E   7408         MOV       A,#0x8
   3372            }
   \   000080   02....       LJMP      ?Subroutine8 & 0xFFFF
   3373          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine239_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V6,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F5..         MOV       ?V7,A
   \   000007   22           RET
   3374          
   3375          /*********************************************************************
   3376           * @fn      zclGetAttrDataLengthUsingCB
   3377           *
   3378           * @brief   Use application's callback to get the length of the attribute's
   3379           *          current value stored in the database.
   3380           *
   3381           * @param   endpoint - application's endpoint
   3382           * @param   clusterId - cluster that attribute belongs to
   3383           * @param   attrId - attribute id
   3384           *
   3385           * @return  returns attribute length
   3386           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3387          static uint16 zclGetAttrDataLengthUsingCB( uint8 endpoint, uint16 clusterId, uint16 attrId )
   \                     zclGetAttrDataLengthUsingCB:
   3388          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V4,R2
   \   00000C   8B..         MOV       ?V5,R3
   \   00000E   EC           MOV       A,R4
   \   00000F   FE           MOV       R6,A
   \   000010   ED           MOV       A,R5
   \   000011   FF           MOV       R7,A
   3389            uint16 dataLen = 0;
   \   000012   85..82       MOV       DPL,?XSP + 0
   \   000015   85..83       MOV       DPH,?XSP + 1
   \   000018   E4           CLR       A
   \   000019   F0           MOVX      @DPTR,A
   \   00001A   A3           INC       DPTR
   \   00001B   F0           MOVX      @DPTR,A
   3390            zclReadWriteCB_t pfnReadWriteCB = zclGetReadWriteCB( endpoint );
   \   00001C                ; Setup parameters for call to function zclGetReadWriteCB
   \   00001C   12....       LCALL     `??zclGetReadWriteCB::?relay`; Banked call to: zclGetReadWriteCB
   \   00001F   8A..         MOV       ?V0,R2
   \   000021   8B..         MOV       ?V1,R3
   3391          
   3392            if ( pfnReadWriteCB != NULL )
   \   000023   EA           MOV       A,R2
   \   000024   45..         ORL       A,?V1
   \   000026   602F         JZ        ??zclGetAttrDataLengthUsingCB_0
   3393            {
   3394              // Only get the attribute length
   3395              (*pfnReadWriteCB)( clusterId, attrId, ZCL_OPER_LEN, NULL, &dataLen );
   \   000028                ; Setup parameters for indirect call
   \   000028   A8..         MOV       R0,?XSP + 0
   \   00002A   A9..         MOV       R1,?XSP + 1
   \   00002C   88..         MOV       ?V6,R0
   \   00002E   89..         MOV       ?V7,R1
   \   000030   78..         MOV       R0,#?V6
   \   000032   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000035   E4           CLR       A
   \   000036   F5..         MOV       ?V6,A
   \   000038   F5..         MOV       ?V7,A
   \   00003A   78..         MOV       R0,#?V6
   \   00003C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003F   7900         MOV       R1,#0x0
   \   000041   EE           MOV       A,R6
   \   000042   FC           MOV       R4,A
   \   000043   EF           MOV       A,R7
   \   000044   FD           MOV       R5,A
   \   000045   AA..         MOV       R2,?V4
   \   000047   AB..         MOV       R3,?V5
   \   000049   85..82       MOV       DPL,?V0
   \   00004C   85..83       MOV       DPH,?V1
   \   00004F   12....       LCALL     ?CALL_IND
   \   000052   7404         MOV       A,#0x4
   \   000054   12....       LCALL     ?DEALLOC_XSTACK8
   3396            }
   3397          
   3398            return ( dataLen );
   \                     ??zclGetAttrDataLengthUsingCB_0:
   \   000057   85..82       MOV       DPL,?XSP + 0
   \   00005A   85..83       MOV       DPH,?XSP + 1
   \   00005D   12....       LCALL     ??Subroutine224_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_459:
   \   000060   7402         MOV       A,#0x2
   \   000062   02....       LJMP      ?Subroutine8 & 0xFFFF
   3399          }
   3400          
   3401          /*********************************************************************
   3402           * @fn      zclReadAttrDataUsingCB
   3403           *
   3404           * @brief   Use application's callback to read the attribute's current
   3405           *          value stored in the database.
   3406           *
   3407           * @param   endpoint - application's endpoint
   3408           * @param   clusterId - cluster that attribute belongs to
   3409           * @param   attrId - attribute id
   3410           * @param   pAttrData - where to put attribute data
   3411           * @param   pDataLen - where to put attribute data length
   3412           *
   3413           * @return  Successful if data was read
   3414           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3415          static ZStatus_t zclReadAttrDataUsingCB( uint8 endpoint, uint16 clusterId, uint16 attrId,
   \                     zclReadAttrDataUsingCB:
   3416                                                   uint8 *pAttrData, uint16 *pDataLen )
   3417          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   EC           MOV       A,R4
   \   00000A   FE           MOV       R6,A
   \   00000B   ED           MOV       A,R5
   \   00000C   FF           MOV       R7,A
   3418            zclReadWriteCB_t pfnReadWriteCB = zclGetReadWriteCB( endpoint );
   \   00000D                ; Setup parameters for call to function zclGetReadWriteCB
   \   00000D   12....       LCALL     `??zclGetReadWriteCB::?relay`; Banked call to: zclGetReadWriteCB
   \   000010   8A..         MOV       ?V2,R2
   \   000012   8B..         MOV       ?V3,R3
   \   000014   7412         MOV       A,#0x12
   \   000016   12....       LCALL     ?XSTACK_DISP0_8
   \   000019   12....       LCALL     ??Subroutine239_0 & 0xFFFF
   3419          
   3420            if ( pDataLen != NULL )
   \                     ??CrossCallReturnLabel_552:
   \   00001C   E5..         MOV       A,?V6
   \   00001E   45..         ORL       A,?V7
   \   000020   600A         JZ        ??zclReadAttrDataUsingCB_0
   3421            {
   3422              *pDataLen = 0; // Always initialize it to 0
   \   000022   85..82       MOV       DPL,?V6
   \   000025   85..83       MOV       DPH,?V7
   \   000028   E4           CLR       A
   \   000029   F0           MOVX      @DPTR,A
   \   00002A   A3           INC       DPTR
   \   00002B   F0           MOVX      @DPTR,A
   3423            }
   3424          
   3425            if ( pfnReadWriteCB != NULL )
   \                     ??zclReadAttrDataUsingCB_0:
   \   00002C   EA           MOV       A,R2
   \   00002D   45..         ORL       A,?V3
   \   00002F   6027         JZ        ??zclReadAttrDataUsingCB_1
   3426            {
   3427              // Read the attribute value and its length
   3428              return ( (*pfnReadWriteCB)( clusterId, attrId, ZCL_OPER_READ, pAttrData, pDataLen ) );
   \   000031                ; Setup parameters for indirect call
   \   000031   78..         MOV       R0,#?V6
   \   000033   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000036   7412         MOV       A,#0x12
   \   000038   12....       LCALL     ?XSTACK_DISP0_8
   \   00003B   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   00003E   7901         MOV       R1,#0x1
   \   000040   EE           MOV       A,R6
   \   000041   FC           MOV       R4,A
   \   000042   EF           MOV       A,R7
   \   000043   FD           MOV       R5,A
   \   000044   AA..         MOV       R2,?V0
   \   000046   AB..         MOV       R3,?V1
   \   000048   85..82       MOV       DPL,?V2
   \   00004B   85..83       MOV       DPH,?V3
   \   00004E   12....       LCALL     ?CALL_IND
   \   000051   7404         MOV       A,#0x4
   \   000053   12....       LCALL     ?DEALLOC_XSTACK8
   \   000056   8002         SJMP      ??zclReadAttrDataUsingCB_2
   3429            }
   3430          
   3431            return ( ZCL_STATUS_SOFTWARE_FAILURE );
   \                     ??zclReadAttrDataUsingCB_1:
   \   000058   79C1         MOV       R1,#-0x3f
   \                     ??zclReadAttrDataUsingCB_2:
   \   00005A   02....       LJMP      ??Subroutine216_0 & 0xFFFF
   3432          }
   3433          
   3434          /*********************************************************************
   3435           * @fn      zclAuthorizeRead
   3436           *
   3437           * @brief   Use application's callback to authorize a Read operation
   3438           *          on a given attribute.
   3439           *
   3440           * @param   endpoint - application's endpoint
   3441           * @param   srcAddr - source Address
   3442           * @param   pAttr - pointer to attribute
   3443           *
   3444           * @return  ZCL_STATUS_SUCCESS: Operation authorized
   3445           *          ZCL_STATUS_NOT_AUTHORIZED: Operation not authorized
   3446           */
   3447          static ZStatus_t zclAuthorizeRead( uint8 endpoint, afAddrType_t *srcAddr, zclAttrRec_t *pAttr )
   3448          {
   3449            if ( zcl_AccessCtrlAuthRead( pAttr->attr.accessControl ) )
   3450            {
   3451              zclAuthorizeCB_t pfnAuthorizeCB = zclGetAuthorizeCB( endpoint );
   3452          
   3453              if ( pfnAuthorizeCB != NULL )
   3454              {
   3455                return ( (*pfnAuthorizeCB)( srcAddr, pAttr, ZCL_OPER_READ ) );
   3456              }
   3457            }
   3458          
   3459            return ( ZCL_STATUS_SUCCESS );
   3460          }
   3461          #endif // ZCL_READ
   3462          
   3463          #ifdef ZCL_WRITE
   3464          /*********************************************************************
   3465           * @fn      zclWriteAttrData
   3466           *
   3467           * @brief   Write the received data.
   3468           *
   3469           * @param   endpoint - application's endpoint
   3470           * @param   pAttr - where to write data to
   3471           * @param   pWriteRec - data to be written
   3472           *
   3473           * @return  Successful if data was written
   3474           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3475          static ZStatus_t zclWriteAttrData( uint8 endpoint, afAddrType_t *srcAddr,
   \                     zclWriteAttrData:
   3476                                             zclAttrRec_t *pAttr, zclWriteRec_t *pWriteRec )
   3477          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   EC           MOV       A,R4
   \   000006   FE           MOV       R6,A
   \   000007   ED           MOV       A,R5
   \   000008   FF           MOV       R7,A
   3478            uint8 status;
   3479          
   3480            if ( zcl_AccessCtrlWrite( pAttr->attr.accessControl ) )
   \   000009   8E82         MOV       DPL,R6
   \   00000B   8F83         MOV       DPH,R7
   \   00000D   A3           INC       DPTR
   \   00000E   A3           INC       DPTR
   \   00000F   A3           INC       DPTR
   \   000010   A3           INC       DPTR
   \   000011   A3           INC       DPTR
   \   000012   E0           MOVX      A,@DPTR
   \   000013   A2E1         MOV       C,0xE0 /* A   */.1
   \   000015   5077         JNC       ??zclWriteAttrData_0
   3481            {
   3482              status = zclAuthorizeWrite( endpoint, srcAddr, pAttr );
   \   000017                ; Setup parameters for call to function zclAuthorizeWrite
   \   000017   12....       LCALL     `??zclAuthorizeWrite::?relay`; Banked call to: zclAuthorizeWrite
   \   00001A   E9           MOV       A,R1
   \   00001B   F5..         MOV       ?V2,A
   3483              if ( status == ZCL_STATUS_SUCCESS )
   \   00001D   7072         JNZ       ??zclWriteAttrData_1
   \   00001F   740F         MOV       A,#0xf
   \   000021   12....       LCALL     ?XSTACK_DISP0_8
   \   000024   12....       LCALL     ??Subroutine225_0 & 0xFFFF
   3484              {
   3485                if ( ( zcl_ValidateAttrDataCB == NULL ) || zcl_ValidateAttrDataCB( pAttr, pWriteRec ) )
   \                     ??CrossCallReturnLabel_471:
   \   000027   90....       MOV       DPTR,#zcl_ValidateAttrDataCB
   \   00002A   12....       LCALL     ??Subroutine218_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_431:
   \   00002D   6013         JZ        ??zclWriteAttrData_2
   \   00002F                ; Setup parameters for indirect call
   \   00002F   AC..         MOV       R4,?V0
   \   000031   AD..         MOV       R5,?V1
   \   000033   EE           MOV       A,R6
   \   000034   FA           MOV       R2,A
   \   000035   EF           MOV       A,R7
   \   000036   FB           MOV       R3,A
   \   000037   E0           MOVX      A,@DPTR
   \   000038   F583         MOV       DPH,A
   \   00003A   8882         MOV       DPL,R0
   \   00003C   12....       LCALL     ?CALL_IND
   \   00003F   E9           MOV       A,R1
   \   000040   6047         JZ        ??zclWriteAttrData_3
   3486                {
   3487                  // Write the attribute value
   3488                  uint16 len = zclGetAttrDataLength( pAttr->attr.dataType, pWriteRec->attrData );
   \                     ??zclWriteAttrData_2:
   \   000042   E5..         MOV       A,?V0
   \   000044   2403         ADD       A,#0x3
   \   000046   F8           MOV       R0,A
   \   000047   E4           CLR       A
   \   000048   35..         ADDC      A,?V1
   \   00004A   F9           MOV       R1,A
   \   00004B   88..         MOV       ?V0,R0
   \   00004D   89..         MOV       ?V1,R1
   \   00004F                ; Setup parameters for call to function zclGetAttrDataLength
   \   00004F   8882         MOV       DPL,R0
   \   000051   F583         MOV       DPH,A
   \   000053   12....       LCALL     ??Subroutine224_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_460:
   \   000056   8E82         MOV       DPL,R6
   \   000058   8F83         MOV       DPH,R7
   \   00005A   A3           INC       DPTR
   \   00005B   A3           INC       DPTR
   \   00005C   A3           INC       DPTR
   \   00005D   A3           INC       DPTR
   \   00005E   E0           MOVX      A,@DPTR
   \   00005F   F9           MOV       R1,A
   \   000060   12....       LCALL     `??zclGetAttrDataLength::?relay`; Banked call to: zclGetAttrDataLength
   \   000063   8A..         MOV       ?V4,R2
   \   000065   8B..         MOV       ?V5,R3
   \   000067   AC..         MOV       R4,?V4
   \   000069   AD..         MOV       R5,?V5
   3489                  zcl_memcpy( pAttr->attr.dataPtr, pWriteRec->attrData, len );
   \   00006B                ; Setup parameters for call to function osal_memcpy
   \   00006B   85..82       MOV       DPL,?V0
   \   00006E   85..83       MOV       DPH,?V1
   \   000071   12....       LCALL     ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_106:
   \   000074   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000077   8E82         MOV       DPL,R6
   \   000079   8F83         MOV       DPH,R7
   \   00007B   A3           INC       DPTR
   \   00007C   12....       LCALL     ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_470:
   \   00007F   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000082   7403         MOV       A,#0x3
   \   000084   12....       LCALL     ?DEALLOC_XSTACK8
   3490          
   3491                  status = ZCL_STATUS_SUCCESS;
   \   000087   8008         SJMP      ??zclWriteAttrData_1
   3492                }
   3493                else
   3494                {
   3495                  status = ZCL_STATUS_INVALID_VALUE;
   \                     ??zclWriteAttrData_3:
   \   000089   75..87       MOV       ?V2,#-0x79
   \   00008C   8003         SJMP      ??zclWriteAttrData_1
   3496                }
   3497              }
   3498            }
   3499            else
   3500            {
   3501              status = ZCL_STATUS_READ_ONLY;
   \                     ??zclWriteAttrData_0:
   \   00008E   75..88       MOV       ?V2,#-0x78
   3502            }
   3503          
   3504            return ( status );
   \                     ??zclWriteAttrData_1:
   \   000091   A9..         MOV       R1,?V2
   \   000093   02....       LJMP      ?Subroutine9 & 0xFFFF
   3505          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine225_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V0,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F5..         MOV       ?V1,A
   \   000007   22           RET
   3506          
   3507          /*********************************************************************
   3508           * @fn      zclWriteAttrDataUsingCB
   3509           *
   3510           * @brief   Use application's callback to write the attribute's current
   3511           *          value stored in the database.
   3512           *
   3513           * @param   endpoint - application's endpoint
   3514           * @param   pAttr - where to write data to
   3515           * @param   pAttrData - data to be written
   3516           *
   3517           * @return  Successful if data was written
   3518           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3519          static ZStatus_t zclWriteAttrDataUsingCB( uint8 endpoint, afAddrType_t *srcAddr,
   \                     zclWriteAttrDataUsingCB:
   3520                                                    zclAttrRec_t *pAttr, uint8 *pAttrData )
   3521          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V0,R1
   \   000007   EC           MOV       A,R4
   \   000008   FE           MOV       R6,A
   \   000009   ED           MOV       A,R5
   \   00000A   FF           MOV       R7,A
   3522            uint8 status;
   3523          
   3524            if ( zcl_AccessCtrlWrite( pAttr->attr.accessControl ) )
   \   00000B   8E82         MOV       DPL,R6
   \   00000D   8F83         MOV       DPH,R7
   \   00000F   A3           INC       DPTR
   \   000010   A3           INC       DPTR
   \   000011   A3           INC       DPTR
   \   000012   A3           INC       DPTR
   \   000013   A3           INC       DPTR
   \   000014   E0           MOVX      A,@DPTR
   \   000015   A2E1         MOV       C,0xE0 /* A   */.1
   \   000017   504D         JNC       ??zclWriteAttrDataUsingCB_0
   3525            {
   3526              status = zclAuthorizeWrite( endpoint, srcAddr, pAttr );
   \   000019                ; Setup parameters for call to function zclAuthorizeWrite
   \   000019   12....       LCALL     `??zclAuthorizeWrite::?relay`; Banked call to: zclAuthorizeWrite
   \   00001C   E9           MOV       A,R1
   \   00001D   F9           MOV       R1,A
   3527              if ( status == ZCL_STATUS_SUCCESS )
   \   00001E   7048         JNZ       ??zclWriteAttrDataUsingCB_1
   3528              {
   3529                zclReadWriteCB_t pfnReadWriteCB = zclGetReadWriteCB( endpoint );
   \   000020                ; Setup parameters for call to function zclGetReadWriteCB
   \   000020   A9..         MOV       R1,?V0
   \   000022   12....       LCALL     `??zclGetReadWriteCB::?relay`; Banked call to: zclGetReadWriteCB
   \   000025   8A..         MOV       ?V2,R2
   \   000027   8B..         MOV       ?V3,R3
   3530                if ( pfnReadWriteCB != NULL )
   \   000029   EA           MOV       A,R2
   \   00002A   45..         ORL       A,?V3
   \   00002C   6034         JZ        ??zclWriteAttrDataUsingCB_2
   3531                {
   3532                  // Write the attribute value
   3533                  status = (*pfnReadWriteCB)( pAttr->clusterID, pAttr->attr.attrId,
   3534                                              ZCL_OPER_WRITE, pAttrData, NULL );
   \   00002E                ; Setup parameters for indirect call
   \   00002E   E4           CLR       A
   \   00002F   F5..         MOV       ?V4,A
   \   000031   F5..         MOV       ?V5,A
   \   000033   78..         MOV       R0,#?V4
   \   000035   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000038   7410         MOV       A,#0x10
   \   00003A   12....       LCALL     ?XSTACK_DISP0_8
   \   00003D   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000040   7902         MOV       R1,#0x2
   \   000042   8E82         MOV       DPL,R6
   \   000044   8F83         MOV       DPH,R7
   \   000046   12....       LCALL     ??Subroutine234_0 & 0xFFFF
   3535                }
   \                     ??CrossCallReturnLabel_546:
   \   000049   8E82         MOV       DPL,R6
   \   00004B   8F83         MOV       DPH,R7
   \   00004D   12....       LCALL     ??Subroutine224_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_461:
   \   000050   85..82       MOV       DPL,?V2
   \   000053   85..83       MOV       DPH,?V3
   \   000056   12....       LCALL     ?CALL_IND
   \   000059   7404         MOV       A,#0x4
   \   00005B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00005E   E9           MOV       A,R1
   \   00005F   F9           MOV       R1,A
   \   000060   8006         SJMP      ??zclWriteAttrDataUsingCB_1
   3536                else
   3537                {
   3538                  status = ZCL_STATUS_SOFTWARE_FAILURE;
   \                     ??zclWriteAttrDataUsingCB_2:
   \   000062   79C1         MOV       R1,#-0x3f
   \   000064   8002         SJMP      ??zclWriteAttrDataUsingCB_1
   3539                }
   3540              }
   3541            }
   3542            else
   3543            {
   3544              status = ZCL_STATUS_READ_ONLY;
   \                     ??zclWriteAttrDataUsingCB_0:
   \   000066   7988         MOV       R1,#-0x78
   3545            }
   3546          
   3547            return ( status );
   \                     ??zclWriteAttrDataUsingCB_1:
   \   000068                REQUIRE ?Subroutine4
   \   000068                ; // Fall through to label ?Subroutine4
   3548          }
   3549          
   3550          /*********************************************************************
   3551           * @fn      zclAuthorizeWrite
   3552           *
   3553           * @brief   Use application's callback to authorize a Write operation
   3554           *          on a given attribute.
   3555           *
   3556           * @param   endpoint - application's endpoint
   3557           * @param   srcAddr - source Address
   3558           * @param   pAttr - pointer to attribute
   3559           *
   3560           * @return  ZCL_STATUS_SUCCESS: Operation authorized
   3561           *          ZCL_STATUS_NOT_AUTHORIZED: Operation not authorized
   3562           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3563          static ZStatus_t zclAuthorizeWrite( uint8 endpoint, afAddrType_t *srcAddr, zclAttrRec_t *pAttr )
   \                     zclAuthorizeWrite:
   3564          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   8C..         MOV       ?V0,R4
   \   00000B   8D..         MOV       ?V1,R5
   3565            if ( zcl_AccessCtrlAuthWrite( pAttr->attr.accessControl ) )
   \   00000D   8C82         MOV       DPL,R4
   \   00000F   8D83         MOV       DPH,R5
   \   000011   A3           INC       DPTR
   \   000012   A3           INC       DPTR
   \   000013   A3           INC       DPTR
   \   000014   A3           INC       DPTR
   \   000015   A3           INC       DPTR
   \   000016   E0           MOVX      A,@DPTR
   \   000017   A2E5         MOV       C,0xE0 /* A   */.5
   \   000019   501C         JNC       ??zclAuthorizeWrite_0
   3566            {
   3567              zclAuthorizeCB_t pfnAuthorizeCB = zclGetAuthorizeCB( endpoint );
   \   00001B                ; Setup parameters for call to function zclGetAuthorizeCB
   \   00001B   12....       LCALL     `??zclGetAuthorizeCB::?relay`; Banked call to: zclGetAuthorizeCB
   \   00001E   8A82         MOV       DPL,R2
   \   000020   8B83         MOV       DPH,R3
   3568          
   3569              if ( pfnAuthorizeCB != NULL )
   \   000022   E582         MOV       A,DPL
   \   000024   4583         ORL       A,DPH
   \   000026   600F         JZ        ??zclAuthorizeWrite_0
   3570              {
   3571                return ( (*pfnAuthorizeCB)( srcAddr, pAttr, ZCL_OPER_WRITE ) );
   \   000028                ; Setup parameters for indirect call
   \   000028   7902         MOV       R1,#0x2
   \   00002A   AC..         MOV       R4,?V0
   \   00002C   AD..         MOV       R5,?V1
   \   00002E   EE           MOV       A,R6
   \   00002F   FA           MOV       R2,A
   \   000030   EF           MOV       A,R7
   \   000031   FB           MOV       R3,A
   \   000032   12....       LCALL     ?CALL_IND
   \   000035   8002         SJMP      ??zclAuthorizeWrite_1
   3572              }
   3573            }
   3574          
   3575            return ( ZCL_STATUS_SUCCESS );
   \                     ??zclAuthorizeWrite_0:
   \   000037   7900         MOV       R1,#0x0
   \                     ??zclAuthorizeWrite_1:
   \   000039   80..         SJMP      ?Subroutine4
   3576          }
   3577          #endif // ZCL_WRITE
   3578          
   3579          #ifdef ZCL_READ
   3580          /*********************************************************************
   3581           * @fn      zclParseInReadCmd
   3582           *
   3583           * @brief   Parse the "Profile" Read Commands
   3584           *
   3585           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   3586           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   3587           *
   3588           * @param   pCmd - pointer to incoming data to parse
   3589           *
   3590           * @return  pointer to the parsed command structure
   3591           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3592          void *zclParseInReadCmd( zclParseCmd_t *pCmd )
   \                     zclParseInReadCmd:
   3593          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   3594            zclReadCmd_t *readCmd;
   3595            uint8 *pBuf = pCmd->pData;
   \   000005   12....       LCALL     ?Subroutine103 & 0xFFFF
   3596          
   3597            readCmd = (zclReadCmd_t *)zcl_mem_alloc( sizeof ( zclReadCmd_t ) + pCmd->dataLen );
   \                     ??CrossCallReturnLabel_174:
   \   000008   12....       LCALL     ?Subroutine115 & 0xFFFF
   \                     ??CrossCallReturnLabel_199:
   \   00000B   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   3598            if ( readCmd != NULL )
   \   00000E   EA           MOV       A,R2
   \   00000F   4B           ORL       A,R3
   \   000010   6053         JZ        ??zclParseInReadCmd_0
   3599            {
   3600              uint8 i;
   3601              readCmd->numAttr = pCmd->dataLen / 2; // Atrribute ID
   \   000012   85..82       MOV       DPL,?V0
   \   000015   85..83       MOV       DPH,?V1
   \   000018   12....       LCALL     ?Subroutine194 & 0xFFFF
   \                     ??CrossCallReturnLabel_503:
   \   00001B   C3           CLR       C
   \   00001C   13           RRC       A
   \   00001D   E8           MOV       A,R0
   \   00001E   13           RRC       A
   \   00001F   8A82         MOV       DPL,R2
   \   000021   8B83         MOV       DPH,R3
   \   000023   F0           MOVX      @DPTR,A
   3602              for ( i = 0; i < readCmd->numAttr; i++ )
   \   000024   7C00         MOV       R4,#0x0
   \   000026   8032         SJMP      ??zclParseInReadCmd_1
   3603              {
   3604                readCmd->attrID[i] = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??zclParseInReadCmd_2:
   \   000028   8E82         MOV       DPL,R6
   \   00002A   8F83         MOV       DPH,R7
   \   00002C   E0           MOVX      A,@DPTR
   \   00002D   F5..         MOV       ?V0,A
   \   00002F   A3           INC       DPTR
   \   000030   E0           MOVX      A,@DPTR
   \   000031   F8           MOV       R0,A
   \   000032   E4           CLR       A
   \   000033   C8           XCH       A,R0
   \   000034   F9           MOV       R1,A
   \   000035   E5..         MOV       A,?V0
   \   000037   28           ADD       A,R0
   \   000038   E4           CLR       A
   \   000039   39           ADDC      A,R1
   \   00003A   F5..         MOV       ?V1,A
   \   00003C   EC           MOV       A,R4
   \   00003D   25E0         ADD       A,0xE0 /* A   */
   \   00003F   F8           MOV       R0,A
   \   000040   E4           CLR       A
   \   000041   33           RLC       A
   \   000042   F9           MOV       R1,A
   \   000043   EA           MOV       A,R2
   \   000044   28           ADD       A,R0
   \   000045   F582         MOV       DPL,A
   \   000047   EB           MOV       A,R3
   \   000048   12....       LCALL     ?Subroutine196 & 0xFFFF
   \                     ??CrossCallReturnLabel_337:
   \   00004B   E5..         MOV       A,?V0
   \   00004D   F0           MOVX      @DPTR,A
   \   00004E   A3           INC       DPTR
   \   00004F   E5..         MOV       A,?V1
   \   000051   F0           MOVX      @DPTR,A
   3605                pBuf += 2;
   \   000052   EE           MOV       A,R6
   \   000053   2402         ADD       A,#0x2
   \   000055   FE           MOV       R6,A
   \   000056   5001         JNC       ??zclParseInReadCmd_3
   \   000058   0F           INC       R7
   3606              }
   \                     ??zclParseInReadCmd_3:
   \   000059   0C           INC       R4
   \                     ??zclParseInReadCmd_1:
   \   00005A   8A82         MOV       DPL,R2
   \   00005C   8B83         MOV       DPH,R3
   \   00005E   E0           MOVX      A,@DPTR
   \   00005F   F8           MOV       R0,A
   \   000060   EC           MOV       A,R4
   \   000061   C3           CLR       C
   \   000062   98           SUBB      A,R0
   \   000063   40C3         JC        ??zclParseInReadCmd_2
   3607            }
   3608          
   3609            return ( (void *)readCmd );
   \                     ??zclParseInReadCmd_0:
   \   000065   02....       LJMP      ??Subroutine198_0 & 0xFFFF
   3610          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine115:
   \   000000   8A82         MOV       DPL,R2
   \   000002   8B83         MOV       DPH,R3
   \   000004   A3           INC       DPTR
   \   000005   8582..       MOV       ?V0,DPL
   \   000008   8583..       MOV       ?V1,DPH
   \   00000B                ; Setup parameters for call to function osal_mem_alloc
   \   00000B                ; Setup parameters for call to function osal_mem_alloc
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   2401         ADD       A,#0x1
   \   00000E   FA           MOV       R2,A
   \   00000F   A3           INC       DPTR
   \   000010   E0           MOVX      A,@DPTR
   \   000011   3400         ADDC      A,#0x0
   \   000013   FB           MOV       R3,A
   \   000014   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine103:
   \   000000   12....       LCALL     ?Subroutine171 & 0xFFFF
   \                     ??CrossCallReturnLabel_300:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine171:
   \   000000   8A82         MOV       DPL,R2
   \   000002   8B83         MOV       DPH,R3
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   12....       LCALL     ?Subroutine194 & 0xFFFF
   \                     ??CrossCallReturnLabel_506:
   \   00000A   F9           MOV       R1,A
   \   00000B   E8           MOV       A,R0
   \   00000C   FE           MOV       R6,A
   \   00000D   E9           MOV       A,R1
   \   00000E   FF           MOV       R7,A
   \   00000F   22           RET
   3611          
   3612          /*********************************************************************
   3613           * @fn      zclParseInReadRspCmd
   3614           *
   3615           * @brief   Parse the "Profile" Read Response Commands
   3616           *
   3617           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   3618           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   3619           *
   3620           * @param   pCmd - pointer to incoming data to parse
   3621           *
   3622           * @return  pointer to the parsed command structure
   3623           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3624          static void *zclParseInReadRspCmd( zclParseCmd_t *pCmd )
   \                     zclParseInReadRspCmd:
   3625          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV       A,#-0x16
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V8,R2
   \   000007   8B..         MOV       ?V9,R3
   3626            zclReadRspCmd_t *readRspCmd;
   3627            uint8 *pBuf = pCmd->pData;
   \   000009   EA           MOV       A,R2
   \   00000A   2403         ADD       A,#0x3
   \   00000C   F5..         MOV       ?V4,A
   \   00000E   E4           CLR       A
   \   00000F   35..         ADDC      A,?V9
   \   000011   F5..         MOV       ?V5,A
   \   000013   85..82       MOV       DPL,?V4
   \   000016   F583         MOV       DPH,A
   \   000018   12....       LCALL     ??Subroutine232_0 & 0xFFFF
   3628            uint8 *dataPtr;
   3629            uint8 numAttr = 0;
   \                     ??CrossCallReturnLabel_528:
   \   00001B   75..00       MOV       ?V2,#0x0
   3630            uint8 hdrLen;
   3631            uint16 dataLen = 0;
   \   00001E   75..00       MOV       ?V6,#0x0
   \   000021   75..00       MOV       ?V7,#0x0
   \   000024   8049         SJMP      ??zclParseInReadRspCmd_0
   3632            uint16 attrDataLen;
   3633          
   3634            // find out the number of attributes and the length of attribute data
   3635            while ( pBuf < ( pCmd->pData + pCmd->dataLen ) )
   3636            {
   3637              uint8 status;
   3638          
   3639              numAttr++;
   \                     ??zclParseInReadRspCmd_1:
   \   000026   05..         INC       ?V2
   3640              pBuf += 2; // move pass attribute id
   3641          
   3642              status = *pBuf++;
   \   000028   8E82         MOV       DPL,R6
   \   00002A   8F83         MOV       DPH,R7
   \   00002C   A3           INC       DPTR
   \   00002D   A3           INC       DPTR
   \   00002E   E0           MOVX      A,@DPTR
   \   00002F   F8           MOV       R0,A
   \   000030   EE           MOV       A,R6
   \   000031   2403         ADD       A,#0x3
   \   000033   FE           MOV       R6,A
   \   000034   5001         JNC       ??zclParseInReadRspCmd_2
   \   000036   0F           INC       R7
   3643              if ( status == ZCL_STATUS_SUCCESS )
   \                     ??zclParseInReadRspCmd_2:
   \   000037   E8           MOV       A,R0
   \   000038   7035         JNZ       ??zclParseInReadRspCmd_0
   3644              {
   3645                uint8 dataType = *pBuf++;
   \   00003A   8E82         MOV       DPL,R6
   \   00003C   8F83         MOV       DPH,R7
   \   00003E   E0           MOVX      A,@DPTR
   \   00003F   F9           MOV       R1,A
   \   000040   A3           INC       DPTR
   \   000041   AE82         MOV       R6,DPL
   \   000043   AF83         MOV       R7,DPH
   3646          
   3647                attrDataLen = zclGetAttrDataLength( dataType, pBuf );
   \   000045                ; Setup parameters for call to function zclGetAttrDataLength
   \   000045   EE           MOV       A,R6
   \   000046   FA           MOV       R2,A
   \   000047   EF           MOV       A,R7
   \   000048   FB           MOV       R3,A
   \   000049   12....       LCALL     `??zclGetAttrDataLength::?relay`; Banked call to: zclGetAttrDataLength
   \   00004C   8A..         MOV       ?V0,R2
   \   00004E   8B..         MOV       ?V1,R3
   3648                pBuf += attrDataLen; // move pass attribute data
   \   000050   EE           MOV       A,R6
   \   000051   2A           ADD       A,R2
   \   000052   FE           MOV       R6,A
   \   000053   EF           MOV       A,R7
   \   000054   35..         ADDC      A,?V1
   \   000056   FF           MOV       R7,A
   3649          
   3650                // add padding if needed
   3651                if ( PADDING_NEEDED( attrDataLen ) )
   \   000057   EA           MOV       A,R2
   \   000058   A2E0         MOV       C,0xE0 /* A   */.0
   \   00005A   5007         JNC       ??zclParseInReadRspCmd_3
   3652                {
   3653                  attrDataLen++;
   \   00005C   05..         INC       ?V0
   \   00005E   04           INC       A
   \   00005F   7002         JNZ       ??zclParseInReadRspCmd_3
   \   000061   05..         INC       ?V1
   3654                }
   3655          
   3656                dataLen += attrDataLen;
   \                     ??zclParseInReadRspCmd_3:
   \   000063   E5..         MOV       A,?V6
   \   000065   25..         ADD       A,?V0
   \   000067   F5..         MOV       ?V6,A
   \   000069   E5..         MOV       A,?V7
   \   00006B   35..         ADDC      A,?V1
   \   00006D   F5..         MOV       ?V7,A
   3657              }
   3658            }
   \                     ??zclParseInReadRspCmd_0:
   \   00006F   85..82       MOV       DPL,?V8
   \   000072   85..83       MOV       DPH,?V9
   \   000075   A3           INC       DPTR
   \   000076   12....       LCALL     ?Subroutine68 & 0xFFFF
   \                     ??CrossCallReturnLabel_113:
   \   000079   12....       LCALL     ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_108:
   \   00007C   40A8         JC        ??zclParseInReadRspCmd_1
   3659          
   3660            // calculate the length of the response header
   3661            hdrLen = sizeof( zclReadRspCmd_t ) + ( numAttr * sizeof( zclReadRspStatus_t ) );
   \   00007E   75F006       MOV       B,#0x6
   \   000081   E5..         MOV       A,?V2
   \   000083   A4           MUL       AB
   \   000084   04           INC       A
   \   000085   F5..         MOV       ?V0,A
   3662          
   3663            readRspCmd = (zclReadRspCmd_t *)zcl_mem_alloc( hdrLen + dataLen );
   \   000087                ; Setup parameters for call to function osal_mem_alloc
   \   000087   25..         ADD       A,?V6
   \   000089   FA           MOV       R2,A
   \   00008A   E4           CLR       A
   \   00008B   35..         ADDC      A,?V7
   \   00008D   FB           MOV       R3,A
   \   00008E   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000091   8A..         MOV       ?V10,R2
   \   000093   8B..         MOV       ?V11,R3
   3664            if ( readRspCmd != NULL )
   \   000095   EA           MOV       A,R2
   \   000096   45..         ORL       A,?V11
   \   000098   7003         JNZ       $+5
   \   00009A   02....       LJMP      ??zclParseInReadRspCmd_4 & 0xFFFF
   3665            {
   3666              uint8 i;
   3667              pBuf = pCmd->pData;
   \   00009D   12....       LCALL     ?Subroutine122 & 0xFFFF
   3668              dataPtr = (uint8 *)( (uint8 *)readRspCmd + hdrLen );
   \                     ??CrossCallReturnLabel_533:
   \   0000A0   A8..         MOV       R0,?V0
   \   0000A2   EA           MOV       A,R2
   \   0000A3   28           ADD       A,R0
   \   0000A4   F5..         MOV       ?V8,A
   \   0000A6   E4           CLR       A
   \   0000A7   3B           ADDC      A,R3
   \   0000A8   F5..         MOV       ?V9,A
   3669          
   3670              readRspCmd->numAttr = numAttr;
   \   0000AA   8A82         MOV       DPL,R2
   \   0000AC   8B83         MOV       DPH,R3
   \   0000AE   E5..         MOV       A,?V2
   \   0000B0   F0           MOVX      @DPTR,A
   3671              for ( i = 0; i < numAttr; i++ )
   \   0000B1   75..00       MOV       ?V3,#0x0
   \   0000B4   02....       LJMP      ??zclParseInReadRspCmd_5 & 0xFFFF
   3672              {
   3673                zclReadRspStatus_t *statusRec = &(readRspCmd->attrList[i]);
   \                     ??zclParseInReadRspCmd_6:
   \   0000B7   E5..         MOV       A,?V3
   \   0000B9   75F006       MOV       B,#0x6
   \   0000BC   12....       LCALL     ?Subroutine136 & 0xFFFF
   3674          
   3675                statusRec->attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??CrossCallReturnLabel_241:
   \   0000BF   8E82         MOV       DPL,R6
   \   0000C1   8F83         MOV       DPH,R7
   \   0000C3   12....       LCALL     ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_146:
   \   0000C6   12....       LCALL     ?Subroutine32 & 0xFFFF
   3676                pBuf += 2;
   3677          
   3678                statusRec->status = *pBuf++;
   \                     ??CrossCallReturnLabel_36:
   \   0000C9   F8           MOV       R0,A
   \   0000CA   85..82       MOV       DPL,?V12
   \   0000CD   85..83       MOV       DPH,?V13
   \   0000D0   A3           INC       DPTR
   \   0000D1   A3           INC       DPTR
   \   0000D2   F0           MOVX      @DPTR,A
   \   0000D3   EE           MOV       A,R6
   \   0000D4   2403         ADD       A,#0x3
   \   0000D6   FE           MOV       R6,A
   \   0000D7   5001         JNC       ??zclParseInReadRspCmd_7
   \   0000D9   0F           INC       R7
   3679                if ( statusRec->status == ZCL_STATUS_SUCCESS )
   \                     ??zclParseInReadRspCmd_7:
   \   0000DA   E8           MOV       A,R0
   \   0000DB   7064         JNZ       ??zclParseInReadRspCmd_8
   3680                {
   3681                  statusRec->dataType = *pBuf++;
   \   0000DD   8E82         MOV       DPL,R6
   \   0000DF   8F83         MOV       DPH,R7
   \   0000E1   12....       LCALL     ?Subroutine97 & 0xFFFF
   \                     ??CrossCallReturnLabel_162:
   \   0000E4   A3           INC       DPTR
   \   0000E5   12....       LCALL     ?Subroutine23 & 0xFFFF
   3682          
   3683                  attrDataLen = zclGetAttrDataLength( statusRec->dataType, pBuf );
   \                     ??CrossCallReturnLabel_16:
   \   0000E8                ; Setup parameters for call to function zclGetAttrDataLength
   \   0000E8   EE           MOV       A,R6
   \   0000E9   FA           MOV       R2,A
   \   0000EA   EF           MOV       A,R7
   \   0000EB   FB           MOV       R3,A
   \   0000EC   12....       LCALL     `??zclGetAttrDataLength::?relay`; Banked call to: zclGetAttrDataLength
   \   0000EF   8A..         MOV       ?V0,R2
   \   0000F1   8B..         MOV       ?V1,R3
   3684                  zcl_memcpy( dataPtr, pBuf, attrDataLen);
   \   0000F3                ; Setup parameters for call to function osal_memcpy
   \   0000F3   8E..         MOV       ?V4,R6
   \   0000F5   8F..         MOV       ?V5,R7
   \   0000F7   75..00       MOV       ?V6,#0x0
   \   0000FA   78..         MOV       R0,#?V4
   \   0000FC   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000FF   AC..         MOV       R4,?V0
   \   000101   AD..         MOV       R5,?V1
   \   000103   AA..         MOV       R2,?V8
   \   000105   AB..         MOV       R3,?V9
   \   000107   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00010A   7403         MOV       A,#0x3
   \   00010C   12....       LCALL     ?DEALLOC_XSTACK8
   3685                  statusRec->data = dataPtr;
   \   00010F   85..82       MOV       DPL,?V12
   \   000112   85..83       MOV       DPH,?V13
   \   000115   A3           INC       DPTR
   \   000116   A3           INC       DPTR
   \   000117   A3           INC       DPTR
   \   000118   A3           INC       DPTR
   \   000119   E5..         MOV       A,?V8
   \   00011B   F0           MOVX      @DPTR,A
   \   00011C   A3           INC       DPTR
   \   00011D   E5..         MOV       A,?V9
   \   00011F   F0           MOVX      @DPTR,A
   3686          
   3687                  pBuf += attrDataLen; // move pass attribute data
   \   000120   EE           MOV       A,R6
   \   000121   25..         ADD       A,?V0
   \   000123   FE           MOV       R6,A
   \   000124   EF           MOV       A,R7
   \   000125   35..         ADDC      A,?V1
   \   000127   FF           MOV       R7,A
   3688          
   3689                  // advance attribute data pointer
   3690                  if ( PADDING_NEEDED( attrDataLen ) )
   \   000128   E5..         MOV       A,?V0
   \   00012A   A2E0         MOV       C,0xE0 /* A   */.0
   \   00012C   5007         JNC       ??zclParseInReadRspCmd_9
   3691                  {
   3692                    attrDataLen++;
   \   00012E   05..         INC       ?V0
   \   000130   04           INC       A
   \   000131   7002         JNZ       ??zclParseInReadRspCmd_9
   \   000133   05..         INC       ?V1
   3693                  }
   3694          
   3695                  dataPtr += attrDataLen;
   \                     ??zclParseInReadRspCmd_9:
   \   000135   E5..         MOV       A,?V8
   \   000137   25..         ADD       A,?V0
   \   000139   F5..         MOV       ?V8,A
   \   00013B   E5..         MOV       A,?V9
   \   00013D   35..         ADDC      A,?V1
   \   00013F   F5..         MOV       ?V9,A
   3696                }
   3697              }
   \                     ??zclParseInReadRspCmd_8:
   \   000141   05..         INC       ?V3
   \                     ??zclParseInReadRspCmd_5:
   \   000143   E5..         MOV       A,?V3
   \   000145   C3           CLR       C
   \   000146   95..         SUBB      A,?V2
   \   000148   5003         JNC       $+5
   \   00014A   02....       LJMP      ??zclParseInReadRspCmd_6 & 0xFFFF
   3698            }
   3699          
   3700            return ( (void *)readRspCmd );
   \                     ??zclParseInReadRspCmd_4:
   \   00014D                REQUIRE ?Subroutine11
   \   00014D                ; // Fall through to label ?Subroutine11
   3701          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   AA..         MOV       R2,?V10
   \   000002   AB..         MOV       R3,?V11
   \   000004   02....       LJMP      ??Subroutine203_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine136:
   \   000000   A4           MUL       AB
   \   000001   F8           MOV       R0,A
   \   000002   A9F0         MOV       R1,B
   \   000004   E5..         MOV       A,?V10
   \   000006   28           ADD       A,R0
   \   000007   F582         MOV       DPL,A
   \   000009   E5..         MOV       A,?V11
   \   00000B   12....       LCALL     ?Subroutine196 & 0xFFFF
   \                     ??CrossCallReturnLabel_338:
   \   00000E   8582..       MOV       ?V12,DPL
   \   000011   8583..       MOV       ?V13,DPH
   \   000014   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine97:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F9           MOV       R1,A
   \   000002   85..82       MOV       DPL,?V12
   \   000005   85..83       MOV       DPH,?V13
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine87:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   EA           MOV       A,R2
   \   000006   85..82       MOV       DPL,?V12
   \   000009   85..83       MOV       DPH,?V13
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine66:
   \   000000   12....       LCALL     ?Subroutine183 & 0xFFFF
   \                     ??CrossCallReturnLabel_404:
   \   000003   C3           CLR       C
   \   000004   EE           MOV       A,R6
   \   000005   98           SUBB      A,R0
   \   000006   EF           MOV       A,R7
   \   000007   99           SUBB      A,R1
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   A3           INC       DPTR
   \   000002   E9           MOV       A,R1
   \   000003   12....       LCALL     ?Subroutine154 & 0xFFFF
   \                     ??CrossCallReturnLabel_273:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine154:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8E82         MOV       DPL,R6
   \   000003   8F83         MOV       DPH,R7
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   E0           MOVX      A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine68:
   \   000000   12....       LCALL     ?Subroutine172 & 0xFFFF
   \                     ??CrossCallReturnLabel_496:
   \   000003   85..82       MOV       DPL,?V4
   \   000006   85..83       MOV       DPH,?V5
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine122:
   \   000000   85..82       MOV       DPL,?V4
   \   000003   85..83       MOV       DPH,?V5
   \   000006                REQUIRE ??Subroutine232_0
   \   000006                ; // Fall through to label ??Subroutine232_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine232_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FE           MOV       R6,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FF           MOV       R7,A
   \   000005   22           RET
   3702          #endif // ZCL_READ
   3703          
   3704          #ifdef ZCL_WRITE
   3705          /*********************************************************************
   3706           * @fn      zclParseInWriteCmd
   3707           *
   3708           * @brief   Parse the "Profile" Write, Write Undivided and Write No
   3709           *          Response Commands
   3710           *
   3711           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   3712           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   3713           *
   3714           * @param   pCmd - pointer to incoming data to parse
   3715           *
   3716           * @return  pointer to the parsed command structure
   3717           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3718          void *zclParseInWriteCmd( zclParseCmd_t *pCmd )
   \                     zclParseInWriteCmd:
   3719          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV       A,#-0x16
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V8,R2
   \   000007   8B..         MOV       ?V9,R3
   3720            zclWriteCmd_t *writeCmd;
   3721            uint8 *pBuf = pCmd->pData;
   \   000009   EA           MOV       A,R2
   \   00000A   2403         ADD       A,#0x3
   \   00000C   F5..         MOV       ?V2,A
   \   00000E   E4           CLR       A
   \   00000F   35..         ADDC      A,?V9
   \   000011   F5..         MOV       ?V3,A
   \   000013   85..82       MOV       DPL,?V2
   \   000016   12....       LCALL     ?Subroutine72 & 0xFFFF
   3722            uint16 attrDataLen;
   3723            uint8 *dataPtr;
   3724            uint8 numAttr = 0;
   \                     ??CrossCallReturnLabel_473:
   \   000019   75..00       MOV       ?V7,#0x0
   3725            uint8 hdrLen;
   3726            uint16 dataLen = 0;
   \   00001C   75..00       MOV       ?V4,#0x0
   \   00001F   75..00       MOV       ?V5,#0x0
   \   000022   8042         SJMP      ??zclParseInWriteCmd_0
   3727          
   3728            // find out the number of attributes and the length of attribute data
   3729            while ( pBuf < ( pCmd->pData + pCmd->dataLen ) )
   3730            {
   3731              uint8 dataType;
   3732          
   3733              numAttr++;
   \                     ??zclParseInWriteCmd_1:
   \   000024   05..         INC       ?V7
   3734              pBuf += 2; // move pass attribute id
   3735          
   3736              dataType = *pBuf++;
   \   000026   85..82       MOV       DPL,?V0
   \   000029   85..83       MOV       DPH,?V1
   \   00002C   A3           INC       DPTR
   \   00002D   A3           INC       DPTR
   \   00002E   E0           MOVX      A,@DPTR
   \   00002F   F9           MOV       R1,A
   \   000030   E5..         MOV       A,?V0
   \   000032   2403         ADD       A,#0x3
   \   000034   F5..         MOV       ?V0,A
   \   000036   5002         JNC       ??zclParseInWriteCmd_2
   \   000038   05..         INC       ?V1
   3737          
   3738              attrDataLen = zclGetAttrDataLength( dataType, pBuf );
   \                     ??zclParseInWriteCmd_2:
   \   00003A                ; Setup parameters for call to function zclGetAttrDataLength
   \   00003A   FA           MOV       R2,A
   \   00003B   AB..         MOV       R3,?V1
   \   00003D   12....       LCALL     `??zclGetAttrDataLength::?relay`; Banked call to: zclGetAttrDataLength
   \   000040   8A..         MOV       ?V10,R2
   \   000042   8B..         MOV       ?V11,R3
   \   000044   AE..         MOV       R6,?V10
   \   000046   AF..         MOV       R7,?V11
   3739              pBuf += attrDataLen; // move pass attribute data
   \   000048   E5..         MOV       A,?V0
   \   00004A   2A           ADD       A,R2
   \   00004B   F5..         MOV       ?V0,A
   \   00004D   E5..         MOV       A,?V1
   \   00004F   3F           ADDC      A,R7
   \   000050   F5..         MOV       ?V1,A
   3740          
   3741              // add padding if needed
   3742              if ( PADDING_NEEDED( attrDataLen ) )
   \   000052   EE           MOV       A,R6
   \   000053   A2E0         MOV       C,0xE0 /* A   */.0
   \   000055   5005         JNC       ??zclParseInWriteCmd_3
   3743              {
   3744                attrDataLen++;
   \   000057   0E           INC       R6
   \   000058   04           INC       A
   \   000059   7001         JNZ       ??zclParseInWriteCmd_3
   \   00005B   0F           INC       R7
   3745              }
   3746          
   3747              dataLen += attrDataLen;
   \                     ??zclParseInWriteCmd_3:
   \   00005C   E5..         MOV       A,?V4
   \   00005E   2E           ADD       A,R6
   \   00005F   F5..         MOV       ?V4,A
   \   000061   E5..         MOV       A,?V5
   \   000063   3F           ADDC      A,R7
   \   000064   F5..         MOV       ?V5,A
   3748            }
   \                     ??zclParseInWriteCmd_0:
   \   000066   85..82       MOV       DPL,?V8
   \   000069   85..83       MOV       DPH,?V9
   \   00006C   A3           INC       DPTR
   \   00006D   12....       LCALL     ?Subroutine84 & 0xFFFF
   \                     ??CrossCallReturnLabel_141:
   \   000070   12....       LCALL     ??Subroutine210_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_402:
   \   000073   C3           CLR       C
   \   000074   E5..         MOV       A,?V0
   \   000076   98           SUBB      A,R0
   \   000077   E5..         MOV       A,?V1
   \   000079   99           SUBB      A,R1
   \   00007A   40A8         JC        ??zclParseInWriteCmd_1
   3749          
   3750            // calculate the length of the response header
   3751            hdrLen = sizeof( zclWriteCmd_t ) + ( numAttr * sizeof( zclWriteRec_t ) );
   \   00007C   75F005       MOV       B,#0x5
   \   00007F   E5..         MOV       A,?V7
   \   000081   A4           MUL       AB
   \   000082   04           INC       A
   \   000083   FE           MOV       R6,A
   3752          
   3753            writeCmd = (zclWriteCmd_t *)zcl_mem_alloc( hdrLen + dataLen );
   \   000084                ; Setup parameters for call to function osal_mem_alloc
   \   000084   25..         ADD       A,?V4
   \   000086   FA           MOV       R2,A
   \   000087   E4           CLR       A
   \   000088   35..         ADDC      A,?V5
   \   00008A   FB           MOV       R3,A
   \   00008B   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00008E   8A..         MOV       ?V10,R2
   \   000090   8B..         MOV       ?V11,R3
   3754            if ( writeCmd != NULL )
   \   000092   EA           MOV       A,R2
   \   000093   45..         ORL       A,?V11
   \   000095   7003         JNZ       $+5
   \   000097   02....       LJMP      ??zclParseInWriteCmd_4 & 0xFFFF
   3755            {
   3756              uint8 i;
   3757              pBuf = pCmd->pData;
   \   00009A   85..82       MOV       DPL,?V2
   \   00009D   85..83       MOV       DPH,?V3
   \   0000A0   12....       LCALL     ??Subroutine225_0 & 0xFFFF
   3758              dataPtr = (uint8 *)( (uint8 *)writeCmd + hdrLen );
   \                     ??CrossCallReturnLabel_472:
   \   0000A3   EA           MOV       A,R2
   \   0000A4   2E           ADD       A,R6
   \   0000A5   F5..         MOV       ?V2,A
   \   0000A7   E4           CLR       A
   \   0000A8   3B           ADDC      A,R3
   \   0000A9   F5..         MOV       ?V3,A
   3759          
   3760              writeCmd->numAttr = numAttr;
   \   0000AB   8A82         MOV       DPL,R2
   \   0000AD   8B83         MOV       DPH,R3
   \   0000AF   E5..         MOV       A,?V7
   \   0000B1   F0           MOVX      @DPTR,A
   3761              for ( i = 0; i < numAttr; i++ )
   \   0000B2   75..00       MOV       ?V8,#0x0
   \   0000B5   02....       LJMP      ??zclParseInWriteCmd_5 & 0xFFFF
   3762              {
   3763                zclWriteRec_t *statusRec = &(writeCmd->attrList[i]);
   \                     ??zclParseInWriteCmd_6:
   \   0000B8   E5..         MOV       A,?V8
   \   0000BA   75F005       MOV       B,#0x5
   \   0000BD   12....       LCALL     ?Subroutine136 & 0xFFFF
   3764          
   3765                statusRec->attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??CrossCallReturnLabel_242:
   \   0000C0   85..82       MOV       DPL,?V0
   \   0000C3   85..83       MOV       DPH,?V1
   \   0000C6   12....       LCALL     ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_147:
   \   0000C9   12....       LCALL     ?Subroutine33 & 0xFFFF
   3766                pBuf += 2;
   3767                statusRec->dataType = *pBuf++;
   \                     ??CrossCallReturnLabel_39:
   \   0000CC   A3           INC       DPTR
   \   0000CD   A3           INC       DPTR
   \   0000CE   12....       LCALL     ?Subroutine97 & 0xFFFF
   \                     ??CrossCallReturnLabel_163:
   \   0000D1   F0           MOVX      @DPTR,A
   \   0000D2   E5..         MOV       A,?V0
   \   0000D4   2403         ADD       A,#0x3
   \   0000D6   F5..         MOV       ?V0,A
   \   0000D8   5002         JNC       ??zclParseInWriteCmd_7
   \   0000DA   05..         INC       ?V1
   3768          
   3769                attrDataLen = zclGetAttrDataLength( statusRec->dataType, pBuf );
   \                     ??zclParseInWriteCmd_7:
   \   0000DC                ; Setup parameters for call to function zclGetAttrDataLength
   \   0000DC   FA           MOV       R2,A
   \   0000DD   AB..         MOV       R3,?V1
   \   0000DF   12....       LCALL     `??zclGetAttrDataLength::?relay`; Banked call to: zclGetAttrDataLength
   \   0000E2   8A..         MOV       ?V4,R2
   \   0000E4   8B..         MOV       ?V5,R3
   \   0000E6   AE..         MOV       R6,?V4
   \   0000E8   AF..         MOV       R7,?V5
   3770                zcl_memcpy( dataPtr, pBuf, attrDataLen);
   \   0000EA                ; Setup parameters for call to function osal_memcpy
   \   0000EA   85....       MOV       ?V4,?V0
   \   0000ED   85....       MOV       ?V5,?V1
   \   0000F0   75..00       MOV       ?V6,#0x0
   \   0000F3   78..         MOV       R0,#?V4
   \   0000F5   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000F8   EE           MOV       A,R6
   \   0000F9   FC           MOV       R4,A
   \   0000FA   EF           MOV       A,R7
   \   0000FB   FD           MOV       R5,A
   \   0000FC   AA..         MOV       R2,?V2
   \   0000FE   AB..         MOV       R3,?V3
   \   000100   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000103   7403         MOV       A,#0x3
   \   000105   12....       LCALL     ?DEALLOC_XSTACK8
   3771                statusRec->attrData = dataPtr;
   \   000108   85..82       MOV       DPL,?V12
   \   00010B   85..83       MOV       DPH,?V13
   \   00010E   A3           INC       DPTR
   \   00010F   A3           INC       DPTR
   \   000110   A3           INC       DPTR
   \   000111   E5..         MOV       A,?V2
   \   000113   F0           MOVX      @DPTR,A
   \   000114   A3           INC       DPTR
   \   000115   E5..         MOV       A,?V3
   \   000117   F0           MOVX      @DPTR,A
   3772          
   3773                pBuf += attrDataLen; // move pass attribute data
   \   000118   E5..         MOV       A,?V0
   \   00011A   2E           ADD       A,R6
   \   00011B   F5..         MOV       ?V0,A
   \   00011D   E5..         MOV       A,?V1
   \   00011F   3F           ADDC      A,R7
   \   000120   F5..         MOV       ?V1,A
   3774          
   3775                // advance attribute data pointer
   3776                if ( PADDING_NEEDED( attrDataLen ) )
   \   000122   EE           MOV       A,R6
   \   000123   A2E0         MOV       C,0xE0 /* A   */.0
   \   000125   5005         JNC       ??zclParseInWriteCmd_8
   3777                {
   3778                  attrDataLen++;
   \   000127   0E           INC       R6
   \   000128   04           INC       A
   \   000129   7001         JNZ       ??zclParseInWriteCmd_8
   \   00012B   0F           INC       R7
   3779                }
   3780          
   3781                dataPtr += attrDataLen;
   \                     ??zclParseInWriteCmd_8:
   \   00012C   E5..         MOV       A,?V2
   \   00012E   2E           ADD       A,R6
   \   00012F   F5..         MOV       ?V2,A
   \   000131   E5..         MOV       A,?V3
   \   000133   3F           ADDC      A,R7
   \   000134   F5..         MOV       ?V3,A
   3782              }
   \   000136   05..         INC       ?V8
   \                     ??zclParseInWriteCmd_5:
   \   000138   E5..         MOV       A,?V8
   \   00013A   C3           CLR       C
   \   00013B   95..         SUBB      A,?V7
   \   00013D   5003         JNC       $+5
   \   00013F   02....       LJMP      ??zclParseInWriteCmd_6 & 0xFFFF
   3783            }
   3784          
   3785            return ( (void *)writeCmd );
   \                     ??zclParseInWriteCmd_4:
   \   000142   02....       LJMP      ?Subroutine11 & 0xFFFF
   3786          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine72:
   \   000000   F583         MOV       DPH,A
   \   000002                REQUIRE ??Subroutine225_0
   \   000002                ; // Fall through to label ??Subroutine225_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine84:
   \   000000   12....       LCALL     ?Subroutine161 & 0xFFFF
   \                     ??CrossCallReturnLabel_476:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET
   3787          
   3788          /*********************************************************************
   3789           * @fn      zclParseInWriteRspCmd
   3790           *
   3791           * @brief   Parse the "Profile" Write Response Commands
   3792           *
   3793           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   3794           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   3795           *
   3796           * @param   pCmd - pointer to incoming data to parse
   3797           *
   3798           * @return  pointer to the parsed command structure
   3799           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3800          static void *zclParseInWriteRspCmd( zclParseCmd_t *pCmd )
   \                     zclParseInWriteRspCmd:
   3801          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   3802            zclWriteRspCmd_t *writeRspCmd;
   3803            uint8 *pBuf = pCmd->pData;
   \   000005   EA           MOV       A,R2
   \   000006   2403         ADD       A,#0x3
   \   000008   F5..         MOV       ?V2,A
   \   00000A   E4           CLR       A
   \   00000B   3B           ADDC      A,R3
   \   00000C   F5..         MOV       ?V3,A
   \   00000E   85..82       MOV       DPL,?V2
   \   000011   12....       LCALL     ?Subroutine121 & 0xFFFF
   3804            uint8 i = 0;
   3805          
   3806            writeRspCmd = (zclWriteRspCmd_t *)zcl_mem_alloc( sizeof ( zclWriteRspCmd_t ) + pCmd->dataLen );
   \                     ??CrossCallReturnLabel_210:
   \   000014   12....       LCALL     ?Subroutine115 & 0xFFFF
   \                     ??CrossCallReturnLabel_200:
   \   000017   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   3807            if ( writeRspCmd != NULL )
   \   00001A   EA           MOV       A,R2
   \   00001B   4B           ORL       A,R3
   \   00001C   604D         JZ        ??zclParseInWriteRspCmd_0
   3808            {
   3809              if ( pCmd->dataLen == 1 )
   \   00001E   85..82       MOV       DPL,?V0
   \   000021   85..83       MOV       DPH,?V1
   \   000024   E0           MOVX      A,@DPTR
   \   000025   6401         XRL       A,#0x1
   \   000027   7002         JNZ       ??zclParseInWriteRspCmd_1
   \   000029   A3           INC       DPTR
   \   00002A   E0           MOVX      A,@DPTR
   \                     ??zclParseInWriteRspCmd_1:
   \   00002B   7029         JNZ       ??zclParseInWriteRspCmd_2
   3810              {
   3811                // special case when all writes were successfull
   3812                writeRspCmd->attrList[i++].status = *pBuf;
   \   00002D   12....       LCALL     ?Subroutine90 & 0xFFFF
   3813              }
   \                     ??CrossCallReturnLabel_379:
   \   000030   A3           INC       DPTR
   \   000031   F0           MOVX      @DPTR,A
   \   000032   75..01       MOV       ?V4,#0x1
   \   000035   802D         SJMP      ??zclParseInWriteRspCmd_3
   3814              else
   3815              {
   3816                while ( pBuf < ( pCmd->pData + pCmd->dataLen ) )
   3817                {
   3818                  writeRspCmd->attrList[i].status = *pBuf++;
   \                     ??zclParseInWriteRspCmd_4:
   \   000037   E5..         MOV       A,?V4
   \   000039   12....       LCALL     ?Subroutine20 & 0xFFFF
   3819                  writeRspCmd->attrList[i++].attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??CrossCallReturnLabel_478:
   \   00003C   F5..         MOV       ?V6,A
   \   00003E   A3           INC       DPTR
   \   00003F   E0           MOVX      A,@DPTR
   \   000040   FD           MOV       R5,A
   \   000041   E5..         MOV       A,?V6
   \   000043   8882         MOV       DPL,R0
   \   000045   8983         MOV       DPH,R1
   \   000047   A3           INC       DPTR
   \   000048   A3           INC       DPTR
   \   000049   F0           MOVX      @DPTR,A
   \   00004A   A3           INC       DPTR
   \   00004B   ED           MOV       A,R5
   \   00004C   F0           MOVX      @DPTR,A
   \   00004D   05..         INC       ?V4
   3820                  pBuf += 2;
   \   00004F   EE           MOV       A,R6
   \   000050   2402         ADD       A,#0x2
   \   000052   FE           MOV       R6,A
   \   000053   5001         JNC       ??zclParseInWriteRspCmd_2
   \   000055   0F           INC       R7
   3821                }
   \                     ??zclParseInWriteRspCmd_2:
   \   000056   85..82       MOV       DPL,?V0
   \   000059   85..83       MOV       DPH,?V1
   \   00005C   12....       LCALL     ?Subroutine85 & 0xFFFF
   3822              }
   \                     ??CrossCallReturnLabel_144:
   \   00005F   12....       LCALL     ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_109:
   \   000062   40D3         JC        ??zclParseInWriteRspCmd_4
   3823          
   3824              writeRspCmd->numAttr = i;
   \                     ??zclParseInWriteRspCmd_3:
   \   000064   8A82         MOV       DPL,R2
   \   000066   8B83         MOV       DPH,R3
   \   000068   E5..         MOV       A,?V4
   \   00006A   F0           MOVX      @DPTR,A
   3825            }
   3826          
   3827            return ( (void *)writeRspCmd );
   \                     ??zclParseInWriteRspCmd_0:
   \   00006B   02....       LJMP      ??Subroutine216_0 & 0xFFFF
   3828          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   12....       LCALL     ?Subroutine184 & 0xFFFF
   \                     ??CrossCallReturnLabel_325:
   \   000003   12....       LCALL     ?Subroutine165 & 0xFFFF
   \                     ??CrossCallReturnLabel_289:
   \   000006                REQUIRE ??Subroutine227_0
   \   000006                ; // Fall through to label ??Subroutine227_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine227_0:
   \   000000   12....       LCALL     ?Subroutine146 & 0xFFFF
   \                     ??CrossCallReturnLabel_483:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine121:
   \   000000   F583         MOV       DPH,A
   \   000002   E0           MOVX      A,@DPTR
   \   000003   FE           MOV       R6,A
   \   000004   A3           INC       DPTR
   \   000005   E0           MOVX      A,@DPTR
   \   000006   FF           MOV       R7,A
   \   000007   75..00       MOV       ?V4,#0x0
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine184:
   \   000000   75F003       MOV       B,#0x3
   \   000003   A4           MUL       AB
   \   000004   F8           MOV       R0,A
   \   000005   A9F0         MOV       R1,B
   \   000007   EA           MOV       A,R2
   \   000008   28           ADD       A,R0
   \   000009   F8           MOV       R0,A
   \   00000A   EB           MOV       A,R3
   \   00000B   39           ADDC      A,R1
   \   00000C   F9           MOV       R1,A
   \   00000D   8E82         MOV       DPL,R6
   \   00000F   8F83         MOV       DPH,R7
   \   000011   22           RET
   3829          #endif // ZCL_WRITE
   3830          
   3831          #ifdef ZCL_REPORTING_DEVICE
   3832          /*********************************************************************
   3833           * @fn      zclParseInConfigReportCmd
   3834           *
   3835           * @brief   Parse the "Profile" Configure Reporting Command
   3836           *
   3837           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   3838           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   3839           *
   3840           * @param   pCmd - pointer to incoming data to parse
   3841           *
   3842           * @return  pointer to the parsed command structure
   3843           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002                REQUIRE ??Subroutine212_0
   \   000002                ; // Fall through to label ??Subroutine212_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3844          void *zclParseInConfigReportCmd( zclParseCmd_t *pCmd )
   \                     zclParseInConfigReportCmd:
   3845          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV       A,#-0x16
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V2,R2
   \   00000C   8B..         MOV       ?V3,R3
   3846            zclCfgReportCmd_t *cfgReportCmd;
   3847            uint8 *pBuf = pCmd->pData;
   \   00000E   EA           MOV       A,R2
   \   00000F   2403         ADD       A,#0x3
   \   000011   F5..         MOV       ?V0,A
   \   000013   E4           CLR       A
   \   000014   35..         ADDC      A,?V3
   \   000016   F5..         MOV       ?V1,A
   \   000018   85..82       MOV       DPL,?V0
   \   00001B   12....       LCALL     ?Subroutine121 & 0xFFFF
   3848            uint8 *dataPtr;
   3849            uint8 numAttr = 0;
   3850            uint8 dataType;
   3851            uint8 hdrLen;
   3852            uint16 dataLen = 0;
   \                     ??CrossCallReturnLabel_211:
   \   00001E   75..00       MOV       ?V6,#0x0
   \   000021   75..00       MOV       ?V7,#0x0
   \   000024   8007         SJMP      ??zclParseInConfigReportCmd_0
   3853            uint8 reportChangeLen; // length of Reportable Change field
   3854          
   3855            // Calculate the length of the Request command
   3856            while ( pBuf < ( pCmd->pData + pCmd->dataLen ) )
   3857            {
   3858              uint8 direction;
   3859          
   3860              numAttr++;
   3861              direction = *pBuf++;
   3862              pBuf += 2; // move pass the attribute ID
   3863          
   3864              // Is there a Reportable Change field?
   3865              if ( direction == ZCL_SEND_ATTR_REPORTS )
   3866              {
   3867                dataType = *pBuf++;
   3868                pBuf += 4; // move pass the Min and Max Reporting Intervals
   3869          
   3870                // For attributes of 'discrete' data types this field is omitted
   3871                if ( zclAnalogDataType( dataType ) )
   3872                {
   3873                  reportChangeLen = zclGetDataTypeLength( dataType );
   3874                  pBuf += reportChangeLen;
   3875          
   3876                  // add padding if needed
   3877                  if ( PADDING_NEEDED( reportChangeLen ) )
   3878                  {
   3879                    reportChangeLen++;
   3880                  }
   3881          
   3882                  dataLen += reportChangeLen;
   3883                }
   3884                else
   3885                {
   3886                  pBuf++; // move past reportable change field
   3887                }
   3888              }
   3889              else
   3890              {
   3891                pBuf += 2; // move pass the Timeout Period
   \                     ??zclParseInConfigReportCmd_1:
   \   000026   EE           MOV       A,R6
   \   000027   2405         ADD       A,#0x5
   \   000029   FE           MOV       R6,A
   \   00002A   5001         JNC       ??zclParseInConfigReportCmd_0
   \   00002C   0F           INC       R7
   3892              }
   \                     ??zclParseInConfigReportCmd_0:
   \   00002D   85..82       MOV       DPL,?V2
   \   000030   85..83       MOV       DPH,?V3
   \   000033   A3           INC       DPTR
   \   000034   12....       LCALL     ?Subroutine91 & 0xFFFF
   \                     ??CrossCallReturnLabel_152:
   \   000037   12....       LCALL     ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_110:
   \   00003A   5039         JNC       ??zclParseInConfigReportCmd_2
   \   00003C   05..         INC       ?V4
   \   00003E   8E82         MOV       DPL,R6
   \   000040   8F83         MOV       DPH,R7
   \   000042   E0           MOVX      A,@DPTR
   \   000043   70E1         JNZ       ??zclParseInConfigReportCmd_1
   \   000045   A3           INC       DPTR
   \   000046   A3           INC       DPTR
   \   000047   A3           INC       DPTR
   \   000048   E0           MOVX      A,@DPTR
   \   000049   F5..         MOV       ?V5,A
   \   00004B   EE           MOV       A,R6
   \   00004C   2408         ADD       A,#0x8
   \   00004E   FE           MOV       R6,A
   \   00004F   5001         JNC       ??zclParseInConfigReportCmd_3
   \   000051   0F           INC       R7
   \                     ??zclParseInConfigReportCmd_3:
   \   000052                ; Setup parameters for call to function zclAnalogDataType
   \   000052   A9..         MOV       R1,?V5
   \   000054   12....       LCALL     `??zclAnalogDataType::?relay`; Banked call to: zclAnalogDataType
   \   000057   E9           MOV       A,R1
   \   000058   6010         JZ        ??zclParseInConfigReportCmd_4
   \   00005A                ; Setup parameters for call to function zclGetDataTypeLength
   \   00005A   A9..         MOV       R1,?V5
   \   00005C   12....       LCALL     `??zclGetDataTypeLength::?relay`; Banked call to: zclGetDataTypeLength
   \   00005F   12....       LCALL     ?Subroutine142 & 0xFFFF
   \                     ??CrossCallReturnLabel_253:
   \   000062   5001         JNC       ??zclParseInConfigReportCmd_5
   \   000064   08           INC       R0
   \                     ??zclParseInConfigReportCmd_5:
   \   000065   12....       LCALL     ?Subroutine141 & 0xFFFF
   \                     ??CrossCallReturnLabel_251:
   \   000068   80C3         SJMP      ??zclParseInConfigReportCmd_0
   \                     ??zclParseInConfigReportCmd_4:
   \   00006A   8E82         MOV       DPL,R6
   \   00006C   8F83         MOV       DPH,R7
   \   00006E   A3           INC       DPTR
   \   00006F   AE82         MOV       R6,DPL
   \   000071   AF83         MOV       R7,DPH
   \   000073   80B8         SJMP      ??zclParseInConfigReportCmd_0
   3893            } // while loop
   3894          
   3895            hdrLen = sizeof( zclCfgReportCmd_t ) + ( numAttr * sizeof( zclCfgReportRec_t ) );
   \                     ??zclParseInConfigReportCmd_2:
   \   000075   75F00C       MOV       B,#0xc
   \   000078   E5..         MOV       A,?V4
   \   00007A   A4           MUL       AB
   \   00007B   04           INC       A
   \   00007C   F5..         MOV       ?V2,A
   3896          
   3897            cfgReportCmd = (zclCfgReportCmd_t *)zcl_mem_alloc( hdrLen + dataLen );
   \   00007E                ; Setup parameters for call to function osal_mem_alloc
   \   00007E   25..         ADD       A,?V6
   \   000080   FA           MOV       R2,A
   \   000081   E4           CLR       A
   \   000082   35..         ADDC      A,?V7
   \   000084   FB           MOV       R3,A
   \   000085   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000088   8A..         MOV       ?V8,R2
   \   00008A   8B..         MOV       ?V9,R3
   3898            if ( cfgReportCmd != NULL )
   \   00008C   EA           MOV       A,R2
   \   00008D   45..         ORL       A,?V9
   \   00008F   7003         JNZ       $+5
   \   000091   02....       LJMP      ??zclParseInConfigReportCmd_6 & 0xFFFF
   3899            {
   3900              uint8 i;
   3901              pBuf = pCmd->pData;
   \   000094   85..82       MOV       DPL,?V0
   \   000097   85..83       MOV       DPH,?V1
   \   00009A   12....       LCALL     ??Subroutine232_0 & 0xFFFF
   3902              dataPtr = (uint8 *)( (uint8 *)cfgReportCmd + hdrLen );
   \                     ??CrossCallReturnLabel_529:
   \   00009D   A8..         MOV       R0,?V2
   \   00009F   EA           MOV       A,R2
   \   0000A0   28           ADD       A,R0
   \   0000A1   F5..         MOV       ?V6,A
   \   0000A3   E4           CLR       A
   \   0000A4   3B           ADDC      A,R3
   \   0000A5   F5..         MOV       ?V7,A
   3903          
   3904              cfgReportCmd->numAttr = numAttr;
   \   0000A7   8A82         MOV       DPL,R2
   \   0000A9   8B83         MOV       DPH,R3
   \   0000AB   E5..         MOV       A,?V4
   \   0000AD   F0           MOVX      @DPTR,A
   3905              for ( i = 0; i < numAttr; i++ )
   \   0000AE   75..00       MOV       ?V5,#0x0
   \   0000B1   8018         SJMP      ??zclParseInConfigReportCmd_7
   3906              {
   3907                zclCfgReportRec_t *reportRec = &(cfgReportCmd->attrList[i]);
   3908          
   3909                zcl_memset( reportRec, 0, sizeof( zclCfgReportRec_t ) );
   3910          
   3911                reportRec->direction = *pBuf++;
   3912                reportRec->attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   3913                pBuf += 2;
   3914                if ( reportRec->direction == ZCL_SEND_ATTR_REPORTS )
   3915                {
   3916                  // Attribute to be reported
   3917                  reportRec->dataType = *pBuf++;
   3918                  reportRec->minReportInt = BUILD_UINT16( pBuf[0], pBuf[1] );
   3919                  pBuf += 2;
   3920                  reportRec->maxReportInt = BUILD_UINT16( pBuf[0], pBuf[1] );
   3921                  pBuf += 2;
   3922          
   3923                  // For attributes of 'discrete' data types this field is omitted
   3924                  if ( zclAnalogDataType( reportRec->dataType ) )
   3925                  {
   3926                    zcl_BuildAnalogData( reportRec->dataType, dataPtr, pBuf);
   3927                    reportRec->reportableChange = dataPtr;
   3928          
   3929                    reportChangeLen = zclGetDataTypeLength( reportRec->dataType );
   3930                    pBuf += reportChangeLen;
   3931          
   3932                    // advance attribute data pointer
   3933                    if ( PADDING_NEEDED( reportChangeLen ) )
   3934                    {
   3935                      reportChangeLen++;
   3936                    }
   3937          
   3938                    dataPtr += reportChangeLen;
   3939                  }
   3940                }
   3941                else
   3942                {
   3943                  // Attribute reports to be received
   3944                  reportRec->timeoutPeriod = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??zclParseInConfigReportCmd_8:
   \   0000B3   8882         MOV       DPL,R0
   \   0000B5   8983         MOV       DPH,R1
   \   0000B7   12....       LCALL     ?Subroutine100 & 0xFFFF
   \                     ??CrossCallReturnLabel_169:
   \   0000BA   A3           INC       DPTR
   \   0000BB   A3           INC       DPTR
   \   0000BC   A3           INC       DPTR
   \   0000BD   A3           INC       DPTR
   \   0000BE   A3           INC       DPTR
   \   0000BF   A3           INC       DPTR
   \   0000C0   A3           INC       DPTR
   \   0000C1   A3           INC       DPTR
   \   0000C2   12....       LCALL     ??Subroutine231_0 & 0xFFFF
   3945                  pBuf += 2;
   \                     ??CrossCallReturnLabel_515:
   \   0000C5   0E           INC       R6
   \   0000C6   0E           INC       R6
   \   0000C7   ED           MOV       A,R5
   \   0000C8   FF           MOV       R7,A
   3946                }
   \                     ??zclParseInConfigReportCmd_9:
   \   0000C9   05..         INC       ?V5
   \                     ??zclParseInConfigReportCmd_7:
   \   0000CB   E5..         MOV       A,?V5
   \   0000CD   C3           CLR       C
   \   0000CE   95..         SUBB      A,?V4
   \   0000D0   4003         JC        $+5
   \   0000D2   02....       LJMP      ??zclParseInConfigReportCmd_6 & 0xFFFF
   \   0000D5   E5..         MOV       A,?V5
   \   0000D7   75F00C       MOV       B,#0xc
   \   0000DA   12....       LCALL     ?Subroutine182 & 0xFFFF
   \                     ??CrossCallReturnLabel_322:
   \   0000DD   12....       LCALL     ?Subroutine137 & 0xFFFF
   \                     ??CrossCallReturnLabel_243:
   \   0000E0                ; Setup parameters for call to function osal_memset
   \   0000E0   7C0C         MOV       R4,#0xc
   \   0000E2   7D00         MOV       R5,#0x0
   \   0000E4   7900         MOV       R1,#0x0
   \   0000E6   AA..         MOV       R2,?V0
   \   0000E8   AB..         MOV       R3,?V1
   \   0000EA   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   \   0000ED   8E82         MOV       DPL,R6
   \   0000EF   8F83         MOV       DPH,R7
   \   0000F1   E0           MOVX      A,@DPTR
   \   0000F2   FB           MOV       R3,A
   \   0000F3   85..82       MOV       DPL,?V0
   \   0000F6   85..83       MOV       DPH,?V1
   \   0000F9   12....       LCALL     ??Subroutine227_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_480:
   \   0000FC   12....       LCALL     ?Subroutine101 & 0xFFFF
   \                     ??CrossCallReturnLabel_170:
   \   0000FF   12....       LCALL     ??Subroutine213_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_414:
   \   000102   5001         JNC       ??zclParseInConfigReportCmd_10
   \   000104   0F           INC       R7
   \                     ??zclParseInConfigReportCmd_10:
   \   000105   2402         ADD       A,#0x2
   \   000107   FC           MOV       R4,A
   \   000108   E4           CLR       A
   \   000109   3F           ADDC      A,R7
   \   00010A   FD           MOV       R5,A
   \   00010B   8E82         MOV       DPL,R6
   \   00010D   8F83         MOV       DPH,R7
   \   00010F   A3           INC       DPTR
   \   000110   A882         MOV       R0,DPL
   \   000112   A983         MOV       R1,DPH
   \   000114   8E82         MOV       DPL,R6
   \   000116   8F83         MOV       DPH,R7
   \   000118   E0           MOVX      A,@DPTR
   \   000119   FA           MOV       R2,A
   \   00011A   EB           MOV       A,R3
   \   00011B   7096         JNZ       ??zclParseInConfigReportCmd_8
   \   00011D   E5..         MOV       A,?V0
   \   00011F   2403         ADD       A,#0x3
   \   000121   F5..         MOV       ?V12,A
   \   000123   E4           CLR       A
   \   000124   35..         ADDC      A,?V1
   \   000126   F5..         MOV       ?V13,A
   \   000128   EA           MOV       A,R2
   \   000129   85..82       MOV       DPL,?V12
   \   00012C   85..83       MOV       DPH,?V13
   \   00012F   F0           MOVX      @DPTR,A
   \   000130   0E           INC       R6
   \   000131   E9           MOV       A,R1
   \   000132   FF           MOV       R7,A
   \   000133   8E82         MOV       DPL,R6
   \   000135   8F83         MOV       DPH,R7
   \   000137   E0           MOVX      A,@DPTR
   \   000138   F5..         MOV       ?V2,A
   \   00013A   8C82         MOV       DPL,R4
   \   00013C   8D83         MOV       DPH,R5
   \   00013E   E0           MOVX      A,@DPTR
   \   00013F   F9           MOV       R1,A
   \   000140   E5..         MOV       A,?V2
   \   000142   85..82       MOV       DPL,?V0
   \   000145   85..83       MOV       DPH,?V1
   \   000148   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_411:
   \   00014B   5001         JNC       ??zclParseInConfigReportCmd_11
   \   00014D   0F           INC       R7
   \                     ??zclParseInConfigReportCmd_11:
   \   00014E   8E82         MOV       DPL,R6
   \   000150   8F83         MOV       DPH,R7
   \   000152   E0           MOVX      A,@DPTR
   \   000153   12....       LCALL     ?Subroutine101 & 0xFFFF
   \                     ??CrossCallReturnLabel_171:
   \   000156   A3           INC       DPTR
   \   000157   A3           INC       DPTR
   \   000158   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_412:
   \   00015B   5001         JNC       ??zclParseInConfigReportCmd_12
   \   00015D   0F           INC       R7
   \                     ??zclParseInConfigReportCmd_12:
   \   00015E                ; Setup parameters for call to function zclAnalogDataType
   \   00015E   EA           MOV       A,R2
   \   00015F   F9           MOV       R1,A
   \   000160   12....       LCALL     `??zclAnalogDataType::?relay`; Banked call to: zclAnalogDataType
   \   000163   E9           MOV       A,R1
   \   000164   7003         JNZ       $+5
   \   000166   02....       LJMP      ??zclParseInConfigReportCmd_9 & 0xFFFF
   \   000169   8E..         MOV       ?V2,R6
   \   00016B   8F..         MOV       ?V3,R7
   \   00016D                ; Setup parameters for call to function zclGetAttrDataLength
   \   00016D   AA..         MOV       R2,?V6
   \   00016F   AB..         MOV       R3,?V7
   \   000171   85..82       MOV       DPL,?V12
   \   000174   85..83       MOV       DPH,?V13
   \   000177   E0           MOVX      A,@DPTR
   \   000178   F9           MOV       R1,A
   \   000179   12....       LCALL     `??zclGetAttrDataLength::?relay`; Banked call to: zclGetAttrDataLength
   \   00017C   8A..         MOV       ?V10,R2
   \   00017E   8B..         MOV       ?V11,R3
   \   000180   A8..         MOV       R0,?V10
   \   000182   A9..         MOV       R1,?V11
   \   000184   85..82       MOV       DPL,?XSP + 0
   \   000187   85..83       MOV       DPH,?XSP + 1
   \   00018A   7401         MOV       A,#0x1
   \   00018C   F0           MOVX      @DPTR,A
   \   00018D   A3           INC       DPTR
   \   00018E   E4           CLR       A
   \   00018F   F0           MOVX      @DPTR,A
   \   000190   85..82       MOV       DPL,?XSP + 0
   \   000193   85..83       MOV       DPH,?XSP + 1
   \   000196   E0           MOVX      A,@DPTR
   \   000197   600C         JZ        ??zclParseInConfigReportCmd_13
   \   000199   75..01       MOV       ?V10,#0x1
   \   00019C   75..00       MOV       ?V11,#0x0
   \   00019F   7A00         MOV       R2,#0x0
   \   0001A1   7B00         MOV       R3,#0x0
   \   0001A3   8036         SJMP      ??zclParseInConfigReportCmd_14
   \                     ??zclParseInConfigReportCmd_13:
   \   0001A5   75..FF       MOV       ?V10,#-0x1
   \   0001A8   75..FF       MOV       ?V11,#-0x1
   \   0001AB   E8           MOV       A,R0
   \   0001AC   24FF         ADD       A,#-0x1
   \   0001AE   1A           DEC       R2
   \   0001AF   E9           MOV       A,R1
   \   0001B0   34FF         ADDC      A,#-0x1
   \   0001B2   8026         SJMP      ??zclParseInConfigReportCmd_15
   \                     ??zclParseInConfigReportCmd_16:
   \   0001B4   85..82       MOV       DPL,?V2
   \   0001B7   85..83       MOV       DPH,?V3
   \   0001BA   E0           MOVX      A,@DPTR
   \   0001BB   C0E0         PUSH      A
   \   0001BD   E5..         MOV       A,?V6
   \   0001BF   2A           ADD       A,R2
   \   0001C0   F582         MOV       DPL,A
   \   0001C2   E5..         MOV       A,?V7
   \   0001C4   3B           ADDC      A,R3
   \   0001C5   F583         MOV       DPH,A
   \   0001C7   D0E0         POP       A
   \   0001C9   12....       LCALL     ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   0001CC   A3           INC       DPTR
   \   0001CD   8582..       MOV       ?V2,DPL
   \   0001D0   8583..       MOV       ?V3,DPH
   \   0001D3   EA           MOV       A,R2
   \   0001D4   25..         ADD       A,?V10
   \   0001D6   FA           MOV       R2,A
   \   0001D7   EB           MOV       A,R3
   \   0001D8   35..         ADDC      A,?V11
   \                     ??zclParseInConfigReportCmd_15:
   \   0001DA   FB           MOV       R3,A
   \                     ??zclParseInConfigReportCmd_14:
   \   0001DB   E8           MOV       A,R0
   \   0001DC   FC           MOV       R4,A
   \   0001DD   E9           MOV       A,R1
   \   0001DE   FD           MOV       R5,A
   \   0001DF   EC           MOV       A,R4
   \   0001E0   24FF         ADD       A,#-0x1
   \   0001E2   18           DEC       R0
   \   0001E3   ED           MOV       A,R5
   \   0001E4   34FF         ADDC      A,#-0x1
   \   0001E6   F9           MOV       R1,A
   \   0001E7   EC           MOV       A,R4
   \   0001E8   4D           ORL       A,R5
   \   0001E9   70C9         JNZ       ??zclParseInConfigReportCmd_16
   \   0001EB   85..82       MOV       DPL,?V0
   \   0001EE   85..83       MOV       DPH,?V1
   \   0001F1   A3           INC       DPTR
   \   0001F2   A3           INC       DPTR
   \   0001F3   A3           INC       DPTR
   \   0001F4   A3           INC       DPTR
   \   0001F5   A3           INC       DPTR
   \   0001F6   A3           INC       DPTR
   \   0001F7   A3           INC       DPTR
   \   0001F8   A3           INC       DPTR
   \   0001F9   A3           INC       DPTR
   \   0001FA   A3           INC       DPTR
   \   0001FB   E5..         MOV       A,?V6
   \   0001FD   F0           MOVX      @DPTR,A
   \   0001FE   A3           INC       DPTR
   \   0001FF   E5..         MOV       A,?V7
   \   000201   F0           MOVX      @DPTR,A
   \   000202                ; Setup parameters for call to function zclGetDataTypeLength
   \   000202   85..82       MOV       DPL,?V12
   \   000205   85..83       MOV       DPH,?V13
   \   000208   E0           MOVX      A,@DPTR
   \   000209   F9           MOV       R1,A
   \   00020A   12....       LCALL     `??zclGetDataTypeLength::?relay`; Banked call to: zclGetDataTypeLength
   \   00020D   12....       LCALL     ?Subroutine142 & 0xFFFF
   \                     ??CrossCallReturnLabel_254:
   \   000210   5001         JNC       ??zclParseInConfigReportCmd_17
   \   000212   08           INC       R0
   \                     ??zclParseInConfigReportCmd_17:
   \   000213   12....       LCALL     ?Subroutine141 & 0xFFFF
   3947              } // while loop
   3948            }
   \                     ??CrossCallReturnLabel_252:
   \   000216   02....       LJMP      ??zclParseInConfigReportCmd_9 & 0xFFFF
   3949          
   3950            return ( (void *)cfgReportCmd );
   \                     ??zclParseInConfigReportCmd_6:
   \   000219   AA..         MOV       R2,?V8
   \   00021B   AB..         MOV       R3,?V9
   \   00021D   02....       LJMP      ?Subroutine7 & 0xFFFF
   3951          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine142:
   \   000000   E9           MOV       A,R1
   \   000001   F8           MOV       R0,A
   \   000002   EE           MOV       A,R6
   \   000003   29           ADD       A,R1
   \   000004   FE           MOV       R6,A
   \   000005   E4           CLR       A
   \   000006   3F           ADDC      A,R7
   \   000007   FF           MOV       R7,A
   \   000008   E8           MOV       A,R0
   \   000009   A2E0         MOV       C,0xE0 /* A   */.0
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine141:
   \   000000   E5..         MOV       A,?V6
   \   000002   28           ADD       A,R0
   \   000003   F5..         MOV       ?V6,A
   \   000005   E4           CLR       A
   \   000006   35..         ADDC      A,?V7
   \   000008   F5..         MOV       ?V7,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine101:
   \   000000   FC           MOV       R4,A
   \   000001   A3           INC       DPTR
   \   000002   E0           MOVX      A,@DPTR
   \   000003   F9           MOV       R1,A
   \   000004   EC           MOV       A,R4
   \   000005   85..82       MOV       DPL,?V0
   \   000008   85..83       MOV       DPH,?V1
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine137:
   \   000000   12....       LCALL     ?Subroutine196 & 0xFFFF
   \                     ??CrossCallReturnLabel_339:
   \   000003   8582..       MOV       ?V0,DPL
   \   000006   8583..       MOV       ?V1,DPH
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine91:
   \   000000   12....       LCALL     ?Subroutine172 & 0xFFFF
   \                     ??CrossCallReturnLabel_498:
   \   000003   85..82       MOV       DPL,?V0
   \   000006   85..83       MOV       DPH,?V1
   \   000009   22           RET
   3952          #endif
   3953          
   3954          #ifdef ZCL_REPORT_CONFIGURING_DEVICE
   3955          /*********************************************************************
   3956           * @fn      zclParseInConfigReportRspCmd
   3957           *
   3958           * @brief   Parse the "Profile" Configure Reporting Response Command
   3959           *
   3960           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   3961           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   3962           *
   3963           * @param   pCmd - pointer to incoming data to parse
   3964           *
   3965           * @return  pointer to the parsed command structure
   3966           */
   3967          static void *zclParseInConfigReportRspCmd( zclParseCmd_t *pCmd )
   3968          {
   3969            zclCfgReportRspCmd_t *cfgReportRspCmd;
   3970            uint8 *pBuf = pCmd->pData;
   3971            uint8 numAttr;
   3972          
   3973            numAttr = pCmd->dataLen / ( 1 + 1 + 2 ); // Status + Direction + Attribute ID
   3974          
   3975            cfgReportRspCmd = (zclCfgReportRspCmd_t *)zcl_mem_alloc( sizeof( zclCfgReportRspCmd_t )
   3976                                                      + ( numAttr * sizeof( zclCfgReportStatus_t ) ) );
   3977            if ( cfgReportRspCmd != NULL )
   3978            {
   3979              uint8 i;
   3980              cfgReportRspCmd->numAttr = numAttr;
   3981              for ( i = 0; i < cfgReportRspCmd->numAttr; i++ )
   3982              {
   3983                cfgReportRspCmd->attrList[i].status = *pBuf++;
   3984                cfgReportRspCmd->attrList[i].direction = *pBuf++;
   3985                cfgReportRspCmd->attrList[i].attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   3986                pBuf += 2;
   3987              }
   3988            }
   3989          
   3990            return ( (void *)cfgReportRspCmd );
   3991          }
   3992          #endif
   3993          
   3994          #ifdef ZCL_REPORTING_DEVICE
   3995          /*********************************************************************
   3996           * @fn      zclParseInReadReportCfgCmd
   3997           *
   3998           * @brief   Parse the "Profile" Read Reporting Configuration Command
   3999           *
   4000           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   4001           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   4002           *
   4003           * @param   pCmd - pointer to incoming data to parse
   4004           *
   4005           * @return  pointer to the parsed command structure
   4006           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4007          void *zclParseInReadReportCfgCmd( zclParseCmd_t *pCmd )
   \                     zclParseInReadReportCfgCmd:
   4008          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   4009            zclReadReportCfgCmd_t *readReportCfgCmd;
   4010            uint8 *pBuf = pCmd->pData;
   \   000005   12....       LCALL     ?Subroutine93 & 0xFFFF
   4011            uint8 numAttr;
   4012          
   4013            numAttr = pCmd->dataLen / ( 1 + 2 ); // Direction + Attribute ID
   \                     ??CrossCallReturnLabel_156:
   \   000008   F8           MOV       R0,A
   \   000009   A3           INC       DPTR
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   F9           MOV       R1,A
   \   00000C   7A03         MOV       R2,#0x3
   \   00000E   7B00         MOV       R3,#0x0
   \   000010   12....       LCALL     ?US_DIV_MOD
   \   000013   E8           MOV       A,R0
   \   000014   F5..         MOV       ?V0,A
   4014          
   4015            readReportCfgCmd = (zclReadReportCfgCmd_t *)zcl_mem_alloc( sizeof( zclReadReportCfgCmd_t )
   4016                                                            + ( numAttr * sizeof( zclReadReportCfgRec_t ) ) );
   \   000016                ; Setup parameters for call to function osal_mem_alloc
   \   000016   12....       LCALL     ?Subroutine185 & 0xFFFF
   \                     ??CrossCallReturnLabel_558:
   \   000019   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   4017            if ( readReportCfgCmd != NULL )
   \   00001C   EA           MOV       A,R2
   \   00001D   4B           ORL       A,R3
   \   00001E   6027         JZ        ??zclParseInReadReportCfgCmd_0
   4018            {
   4019              uint8 i;
   4020              readReportCfgCmd->numAttr = numAttr;
   \   000020   8A82         MOV       DPL,R2
   \   000022   8B83         MOV       DPH,R3
   \   000024   E5..         MOV       A,?V0
   \   000026   F0           MOVX      @DPTR,A
   4021              for ( i = 0; i < readReportCfgCmd->numAttr; i++)
   \   000027   75..00       MOV       ?V0,#0x0
   \   00002A   8012         SJMP      ??zclParseInReadReportCfgCmd_1
   4022              {
   4023                readReportCfgCmd->attrList[i].direction = *pBuf++;;
   \                     ??zclParseInReadReportCfgCmd_2:
   \   00002C   E5..         MOV       A,?V0
   \   00002E   12....       LCALL     ?Subroutine20 & 0xFFFF
   4024                readReportCfgCmd->attrList[i].attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??CrossCallReturnLabel_479:
   \   000031   12....       LCALL     ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_133:
   \   000034   F0           MOVX      @DPTR,A
   4025                pBuf += 2;
   \   000035   EE           MOV       A,R6
   \   000036   2402         ADD       A,#0x2
   \   000038   FE           MOV       R6,A
   \   000039   5001         JNC       ??zclParseInReadReportCfgCmd_3
   \   00003B   0F           INC       R7
   4026              }
   \                     ??zclParseInReadReportCfgCmd_3:
   \   00003C   05..         INC       ?V0
   \                     ??zclParseInReadReportCfgCmd_1:
   \   00003E   8A82         MOV       DPL,R2
   \   000040   8B83         MOV       DPH,R3
   \   000042   12....       LCALL     ??Subroutine251_0 & 0xFFFF
   4027            }
   \                     ??CrossCallReturnLabel_631:
   \   000045   40E5         JC        ??zclParseInReadReportCfgCmd_2
   4028          
   4029            return ( (void *)readReportCfgCmd );
   \                     ??zclParseInReadReportCfgCmd_0:
   \   000047   02....       LJMP      ??Subroutine198_0 & 0xFFFF
   4030          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine80:
   \   000000   F5..         MOV       ?V2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FD           MOV       R5,A
   \   000005   E5..         MOV       A,?V2
   \   000007   8882         MOV       DPL,R0
   \   000009   8983         MOV       DPH,R1
   \   00000B   A3           INC       DPTR
   \   00000C   A3           INC       DPTR
   \   00000D   F0           MOVX      @DPTR,A
   \   00000E   A3           INC       DPTR
   \   00000F   ED           MOV       A,R5
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine93:
   \   000000   12....       LCALL     ?Subroutine166 & 0xFFFF
   \                     ??CrossCallReturnLabel_292:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine166:
   \   000000   8A82         MOV       DPL,R2
   \   000002   8B83         MOV       DPH,R3
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   E0           MOVX      A,@DPTR
   \   000008   FE           MOV       R6,A
   \   000009   A3           INC       DPTR
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   FF           MOV       R7,A
   \   00000C   8A82         MOV       DPL,R2
   \   00000E   8B83         MOV       DPH,R3
   \   000010   A3           INC       DPTR
   \   000011   E0           MOVX      A,@DPTR
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine185:
   \   000000   75F003       MOV       B,#0x3
   \   000003                REQUIRE ??Subroutine240_0
   \   000003                ; // Fall through to label ??Subroutine240_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine240_0:
   \   000000   A4           MUL       AB
   \   000001   A9F0         MOV       R1,B
   \   000003   2401         ADD       A,#0x1
   \   000005   FA           MOV       R2,A
   \   000006   E4           CLR       A
   \   000007   39           ADDC      A,R1
   \   000008   FB           MOV       R3,A
   \   000009   22           RET
   4031          #endif
   4032          
   4033          #ifdef ZCL_REPORT_CONFIGURING_DEVICE
   4034          /*********************************************************************
   4035           * @fn      zclParseInReadReportCfgRspCmd
   4036           *
   4037           * @brief   Parse the "Profile" Read Reporting Configuration Response Command
   4038           *
   4039           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   4040           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   4041           *
   4042           * @param   pCmd - pointer to incoming data to parse
   4043           *
   4044           * @return  pointer to the parsed command structure
   4045           */
   4046          static void *zclParseInReadReportCfgRspCmd( zclParseCmd_t *pCmd )
   4047          {
   4048            zclReadReportCfgRspCmd_t *readReportCfgRspCmd;
   4049            uint8 reportChangeLen;
   4050            uint8 *pBuf = pCmd->pData;
   4051            uint8 *dataPtr;
   4052            uint8 numAttr = 0;
   4053            uint8 hdrLen;
   4054            uint16 dataLen = 0;
   4055          
   4056            // Calculate the length of the response command
   4057            while ( pBuf < ( pCmd->pData + pCmd->dataLen ) )
   4058            {
   4059              uint8 status;
   4060              uint8 direction;
   4061          
   4062              numAttr++;
   4063              status = *pBuf++;
   4064              direction = *pBuf++;
   4065              pBuf += 2; // move pass the attribute ID
   4066          
   4067              if ( status == ZCL_STATUS_SUCCESS )
   4068              {
   4069                if ( direction == ZCL_SEND_ATTR_REPORTS )
   4070                {
   4071                  uint8 dataType = *pBuf++;
   4072                  pBuf += 4; // move pass the Min and Max Reporting Intervals
   4073          
   4074                  // For attributes of 'discrete' data types this field is omitted
   4075                  if ( zclAnalogDataType( dataType ) )
   4076                  {
   4077                    reportChangeLen = zclGetDataTypeLength( dataType );
   4078                    pBuf += reportChangeLen;
   4079          
   4080                    // add padding if needed
   4081                    if ( PADDING_NEEDED( reportChangeLen ) )
   4082                    {
   4083                      reportChangeLen++;
   4084                    }
   4085          
   4086                    dataLen += reportChangeLen;
   4087                  }
   4088                }
   4089                else
   4090                {
   4091                  pBuf += 2; // move pass the Timeout field
   4092                }
   4093              }
   4094            } // while loop
   4095          
   4096            hdrLen = sizeof( zclReadReportCfgRspCmd_t ) + ( numAttr * sizeof( zclReportCfgRspRec_t ) );
   4097          
   4098            readReportCfgRspCmd = (zclReadReportCfgRspCmd_t *)zcl_mem_alloc( hdrLen + dataLen );
   4099            if ( readReportCfgRspCmd != NULL )
   4100            {
   4101              uint8 i;
   4102              pBuf = pCmd->pData;
   4103              dataPtr = (uint8 *)( (uint8 *)readReportCfgRspCmd + hdrLen );
   4104          
   4105              readReportCfgRspCmd->numAttr = numAttr;
   4106              for ( i = 0; i < numAttr; i++ )
   4107              {
   4108                zclReportCfgRspRec_t *reportRspRec = &(readReportCfgRspCmd->attrList[i]);
   4109          
   4110                reportRspRec->status = *pBuf++;
   4111                reportRspRec->direction = *pBuf++;
   4112                reportRspRec->attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   4113                pBuf += 2;
   4114          
   4115                if ( reportRspRec->status == ZCL_STATUS_SUCCESS )
   4116                {
   4117                  if ( reportRspRec->direction == ZCL_SEND_ATTR_REPORTS )
   4118                  {
   4119                    reportRspRec->dataType = *pBuf++;
   4120                    reportRspRec->minReportInt = BUILD_UINT16( pBuf[0], pBuf[1] );
   4121                    pBuf += 2;
   4122                    reportRspRec->maxReportInt = BUILD_UINT16( pBuf[0], pBuf[1] );
   4123                    pBuf += 2;
   4124          
   4125                    if ( zclAnalogDataType( reportRspRec->dataType ) )
   4126                    {
   4127                      zcl_BuildAnalogData( reportRspRec->dataType, dataPtr, pBuf);
   4128                      reportRspRec->reportableChange = dataPtr;
   4129          
   4130                      reportChangeLen = zclGetDataTypeLength( reportRspRec->dataType );
   4131                      pBuf += reportChangeLen;
   4132          
   4133                      // advance attribute data pointer
   4134                      if ( PADDING_NEEDED( reportChangeLen ) )
   4135                      {
   4136                        reportChangeLen++;
   4137                      }
   4138          
   4139                      dataPtr += reportChangeLen;
   4140                    }
   4141                  }
   4142                  else
   4143                  {
   4144                    reportRspRec->timeoutPeriod = BUILD_UINT16( pBuf[0], pBuf[1] );
   4145                    pBuf += 2;
   4146                  }
   4147                }
   4148              }
   4149            }
   4150          
   4151            return ( (void *)readReportCfgRspCmd );
   4152          }
   4153          #endif
   4154          
   4155          #ifdef ZCL_REPORT_DESTINATION_DEVICE
   4156          /*********************************************************************
   4157           * @fn      zclParseInReportCmd
   4158           *
   4159           * @brief   Parse the "Profile" Report Command
   4160           *
   4161           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   4162           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   4163           *
   4164           * @param   pCmd - pointer to incoming data to parse
   4165           *
   4166           * @return  pointer to the parsed command structure
   4167           */
   4168          void *zclParseInReportCmd( zclParseCmd_t *pCmd )
   4169          {
   4170            zclReportCmd_t *reportCmd;
   4171            uint8 *pBuf = pCmd->pData;
   4172            uint16 attrDataLen;
   4173            uint8 *dataPtr;
   4174            uint8 numAttr = 0;
   4175            uint8 hdrLen;
   4176            uint16 dataLen = 0;
   4177          
   4178            // find out the number of attributes and the length of attribute data
   4179            while ( pBuf < ( pCmd->pData + pCmd->dataLen ) )
   4180            {
   4181              uint8 dataType;
   4182          
   4183              numAttr++;
   4184              pBuf += 2; // move pass attribute id
   4185          
   4186              dataType = *pBuf++;
   4187          
   4188              attrDataLen = zclGetAttrDataLength( dataType, pBuf );
   4189              pBuf += attrDataLen; // move pass attribute data
   4190          
   4191              // add padding if needed
   4192              if ( PADDING_NEEDED( attrDataLen ) )
   4193              {
   4194                attrDataLen++;
   4195              }
   4196          
   4197              dataLen += attrDataLen;
   4198            }
   4199          
   4200            hdrLen = sizeof( zclReportCmd_t ) + ( numAttr * sizeof( zclReport_t ) );
   4201          
   4202            reportCmd = (zclReportCmd_t *)zcl_mem_alloc( hdrLen + dataLen );
   4203            if (reportCmd != NULL )
   4204            {
   4205              uint8 i;
   4206              pBuf = pCmd->pData;
   4207              dataPtr = (uint8 *)( (uint8 *)reportCmd + hdrLen );
   4208          
   4209              reportCmd->numAttr = numAttr;
   4210              for ( i = 0; i < numAttr; i++ )
   4211              {
   4212                zclReport_t *reportRec = &(reportCmd->attrList[i]);
   4213          
   4214                reportRec->attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   4215                pBuf += 2;
   4216                reportRec->dataType = *pBuf++;
   4217          
   4218                attrDataLen = zclGetAttrDataLength( reportRec->dataType, pBuf );
   4219                zcl_memcpy( dataPtr, pBuf, attrDataLen );
   4220                reportRec->attrData = dataPtr;
   4221          
   4222                pBuf += attrDataLen; // move pass attribute data
   4223          
   4224                // advance attribute data pointer
   4225                if ( PADDING_NEEDED( attrDataLen ) )
   4226                {
   4227                  attrDataLen++;
   4228                }
   4229          
   4230                dataPtr += attrDataLen;
   4231              }
   4232            }
   4233          
   4234            return ( (void *)reportCmd );
   4235          }
   4236          #endif
   4237          
   4238          /*********************************************************************
   4239           * @fn      zclParseInDefaultRspCmd
   4240           *
   4241           * @brief   Parse the "Profile" Default Response Command
   4242           *
   4243           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   4244           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   4245           *
   4246           * @param   pCmd - pointer to incoming data to parse
   4247           *
   4248           * @return  pointer to the parsed command structure
   4249           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine162:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004                REQUIRE ??Subroutine221_0
   \   000004                ; // Fall through to label ??Subroutine221_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4250          static void *zclParseInDefaultRspCmd( zclParseCmd_t *pCmd )
   \                     zclParseInDefaultRspCmd:
   4251          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   4252            zclDefaultRspCmd_t *defaultRspCmd;
   4253            uint8 *pBuf = pCmd->pData;
   \   000005   12....       LCALL     ?Subroutine75 & 0xFFFF
   4254          
   4255            defaultRspCmd = (zclDefaultRspCmd_t *)zcl_mem_alloc( sizeof ( zclDefaultRspCmd_t ) );
   \                     ??CrossCallReturnLabel_125:
   \   000008   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   4256            if ( defaultRspCmd != NULL )
   \   00000B   EA           MOV       A,R2
   \   00000C   4B           ORL       A,R3
   \   00000D   6003         JZ        ??CrossCallReturnLabel_20
   4257            {
   4258              defaultRspCmd->commandID = *pBuf++;
   \   00000F   12....       LCALL     ?Subroutine26 & 0xFFFF
   4259              defaultRspCmd->statusCode = *pBuf;
   4260            }
   4261          
   4262            return ( (void *)defaultRspCmd );
   \                     ??CrossCallReturnLabel_20:
   \   000012   02....       LJMP      ?Subroutine3 & 0xFFFF
   4263          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine75:
   \   000000   12....       LCALL     ?Subroutine171 & 0xFFFF
   \                     ??CrossCallReturnLabel_299:
   \   000003                ; Setup parameters for call to function osal_mem_alloc
   \   000003                ; Setup parameters for call to function osal_mem_alloc
   \   000003   7A02         MOV       R2,#0x2
   \   000005   7B00         MOV       R3,#0x0
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   12....       LCALL     ?Subroutine162 & 0xFFFF
   \                     ??CrossCallReturnLabel_447:
   \   000003   12....       LCALL     ?Subroutine155 & 0xFFFF
   \                     ??CrossCallReturnLabel_278:
   \   000006   A3           INC       DPTR
   \   000007   12....       LCALL     ??Subroutine221_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_443:
   \   00000A   A3           INC       DPTR
   \   00000B   F0           MOVX      @DPTR,A
   \   00000C   22           RET
   4264          
   4265          #ifdef ZCL_DISCOVER
   4266          /*********************************************************************
   4267           * @fn      zclParseInDiscAttrsCmd
   4268           *
   4269           * @brief   Parse the "Profile" Discovery Attributes and Attributes Extended Commands
   4270           *
   4271           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   4272           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   4273           *
   4274           * @param   pCmd - pointer to incoming data to parse
   4275           *
   4276           * @return  pointer to the parsed command structure
   4277           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4278          void *zclParseInDiscAttrsCmd( zclParseCmd_t *pCmd )
   \                     zclParseInDiscAttrsCmd:
   4279          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   4280            zclDiscoverAttrsCmd_t *pDiscoverCmd;
   4281            uint8 *pBuf = pCmd->pData;
   \   000005   12....       LCALL     ?Subroutine103 & 0xFFFF
   4282          
   4283            pDiscoverCmd = (zclDiscoverAttrsCmd_t *)zcl_mem_alloc( sizeof ( zclDiscoverAttrsCmd_t ) );
   \                     ??CrossCallReturnLabel_175:
   \   000008                ; Setup parameters for call to function osal_mem_alloc
   \   000008   7A03         MOV       R2,#0x3
   \   00000A   7B00         MOV       R3,#0x0
   \   00000C   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   4284            if ( pDiscoverCmd != NULL )
   \   00000F   EA           MOV       A,R2
   \   000010   4B           ORL       A,R3
   \   000011   6017         JZ        ??zclParseInDiscAttrsCmd_0
   4285            {
   4286              pDiscoverCmd->startAttr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \   000013   8E82         MOV       DPL,R6
   \   000015   8F83         MOV       DPH,R7
   \   000017   12....       LCALL     ?Subroutine174 & 0xFFFF
   4287              pBuf += 2;
   4288              pDiscoverCmd->maxAttrIDs = *pBuf;
   4289            }
   \                     ??CrossCallReturnLabel_305:
   \   00001A   F9           MOV       R1,A
   \   00001B   EC           MOV       A,R4
   \   00001C   8A82         MOV       DPL,R2
   \   00001E   8B83         MOV       DPH,R3
   \   000020   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   000023   8A82         MOV       DPL,R2
   \   000025   8B83         MOV       DPH,R3
   \   000027   A3           INC       DPTR
   \   000028   A3           INC       DPTR
   \   000029   F0           MOVX      @DPTR,A
   4290          
   4291            return ( (void *)pDiscoverCmd );
   \                     ??zclParseInDiscAttrsCmd_0:
   \   00002A   02....       LJMP      ?Subroutine3 & 0xFFFF
   4292          }
   4293          
   4294          /*********************************************************************
   4295           * @fn      zclParseInDiscAttrsRspCmd
   4296           *
   4297           * @brief   Parse the "Profile" Discovery Response Commands
   4298           *
   4299           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   4300           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   4301           *
   4302           * @param   pCmd - pointer to incoming data to parse
   4303           *
   4304           * @return  pointer to the parsed command structure
   4305           */
   4306          #define ZCLDISCRSPCMD_DATALEN(a)  ((a)-1) // data len - Discovery Complete

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4307          static void *zclParseInDiscAttrsRspCmd( zclParseCmd_t *pCmd )
   \                     zclParseInDiscAttrsRspCmd:
   4308          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   4309            zclDiscoverAttrsRspCmd_t *pDiscoverRspCmd;
   4310            uint8 *pBuf = pCmd->pData;
   \   000005   12....       LCALL     ?Subroutine81 & 0xFFFF
   4311            uint8 numAttr = ZCLDISCRSPCMD_DATALEN(pCmd->dataLen) / ( 2 + 1 ); // Attr ID + Data Type
   \                     ??CrossCallReturnLabel_135:
   \   000008   F8           MOV       R0,A
   \   000009   A3           INC       DPTR
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   34FF         ADDC      A,#-0x1
   \   00000D   F9           MOV       R1,A
   \   00000E   7A03         MOV       R2,#0x3
   \   000010   7B00         MOV       R3,#0x0
   \   000012   12....       LCALL     ?US_DIV_MOD
   \   000015   E8           MOV       A,R0
   \   000016   F5..         MOV       ?V1,A
   4312          
   4313            pDiscoverRspCmd = (zclDiscoverAttrsRspCmd_t *)zcl_mem_alloc( sizeof ( zclDiscoverAttrsRspCmd_t ) +
   4314                              ( numAttr * sizeof(zclDiscoverAttrInfo_t) ) );
   \   000018                ; Setup parameters for call to function osal_mem_alloc
   \   000018   12....       LCALL     ?Subroutine133 & 0xFFFF
   \                     ??CrossCallReturnLabel_618:
   \   00001B   39           ADDC      A,R1
   \   00001C   FB           MOV       R3,A
   \   00001D   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   4315          
   4316            if ( pDiscoverRspCmd != NULL )
   \   000020   EA           MOV       A,R2
   \   000021   4B           ORL       A,R3
   \   000022   6027         JZ        ??zclParseInDiscAttrsRspCmd_0
   4317            {
   4318              uint8 i;
   4319          
   4320              pDiscoverRspCmd->discComplete = *pBuf++;
   \   000024   12....       LCALL     ?Subroutine17 & 0xFFFF
   4321              pDiscoverRspCmd->numAttr = numAttr;
   \                     ??CrossCallReturnLabel_6:
   \   000027   E5..         MOV       A,?V1
   \   000029   F0           MOVX      @DPTR,A
   4322          
   4323              for ( i = 0; i < numAttr; i++ )
   \   00002A   75..00       MOV       ?V0,#0x0
   \   00002D   8015         SJMP      ??zclParseInDiscAttrsRspCmd_1
   4324              {
   4325                pDiscoverRspCmd->attrList[i].attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??zclParseInDiscAttrsRspCmd_2:
   \   00002F   E5..         MOV       A,?V0
   \   000031   12....       LCALL     ?Subroutine184 & 0xFFFF
   4326                pBuf += 2;
   4327                pDiscoverRspCmd->attrList[i].dataType = *pBuf++;
   4328              }
   \                     ??CrossCallReturnLabel_324:
   \   000034   E0           MOVX      A,@DPTR
   \   000035   12....       LCALL     ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_134:
   \   000038   12....       LCALL     ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   00003B   EE           MOV       A,R6
   \   00003C   2403         ADD       A,#0x3
   \   00003E   FE           MOV       R6,A
   \   00003F   5001         JNC       ??zclParseInDiscAttrsRspCmd_3
   \   000041   0F           INC       R7
   \                     ??zclParseInDiscAttrsRspCmd_3:
   \   000042   05..         INC       ?V0
   \                     ??zclParseInDiscAttrsRspCmd_1:
   \   000044   E5..         MOV       A,?V0
   \   000046   C3           CLR       C
   \   000047   95..         SUBB      A,?V1
   \   000049   40E4         JC        ??zclParseInDiscAttrsRspCmd_2
   4329            }
   4330          
   4331            return ( (void *)pDiscoverRspCmd );
   \                     ??zclParseInDiscAttrsRspCmd_0:
   \   00004B   02....       LJMP      ??Subroutine198_0 & 0xFFFF
   4332          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   12....       LCALL     ?Subroutine162 & 0xFFFF
   \                     ??CrossCallReturnLabel_446:
   \   000003   12....       LCALL     ?Subroutine146 & 0xFFFF
   \                     ??CrossCallReturnLabel_482:
   \   000006   8A82         MOV       DPL,R2
   \   000008   8B83         MOV       DPH,R3
   \   00000A   A3           INC       DPTR
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine81:
   \   000000   12....       LCALL     ?Subroutine166 & 0xFFFF
   \                     ??CrossCallReturnLabel_293:
   \   000003   24FF         ADD       A,#-0x1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   12....       LCALL     ?Subroutine154 & 0xFFFF
   \                     ??CrossCallReturnLabel_274:
   \   000003   8882         MOV       DPL,R0
   \   000005   8983         MOV       DPH,R1
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   F0           MOVX      @DPTR,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine133:
   \   000000   75F003       MOV       B,#0x3
   \   000003   A4           MUL       AB
   \   000004   A9F0         MOV       R1,B
   \   000006                REQUIRE ??Subroutine248_0
   \   000006                ; // Fall through to label ??Subroutine248_0
   4333          
   4334          /*********************************************************************
   4335           * @fn      zclParseInDiscCmdsCmd
   4336           *
   4337           * @brief   Parse the "Profile" Discovery Commands
   4338           *
   4339           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   4340           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   4341           *
   4342           * @param   pCmd - pointer to incoming data to parse
   4343           *
   4344           * @return  pointer to the parsed command structure
   4345           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4346          void *zclParseInDiscCmdsCmd( zclParseCmd_t *pCmd )
   \                     zclParseInDiscCmdsCmd:
   4347          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   4348            zclDiscoverCmdsCmd_t *pDiscoverCmd;
   4349            uint8 *pBuf = pCmd->pData;
   \   000005   12....       LCALL     ?Subroutine75 & 0xFFFF
   4350          
   4351            pDiscoverCmd = (zclDiscoverCmdsCmd_t *)zcl_mem_alloc( sizeof ( zclDiscoverCmdsCmd_t ) );
   \                     ??CrossCallReturnLabel_126:
   \   000008   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   4352            if ( pDiscoverCmd != NULL )
   \   00000B   EA           MOV       A,R2
   \   00000C   4B           ORL       A,R3
   \   00000D   6003         JZ        ??CrossCallReturnLabel_21
   4353            {
   4354              pDiscoverCmd->startCmdID = *pBuf++;
   \   00000F   12....       LCALL     ?Subroutine26 & 0xFFFF
   4355              pDiscoverCmd->maxCmdID = *pBuf++;
   4356            }
   4357          
   4358            return ( (void *)pDiscoverCmd );
   \                     ??CrossCallReturnLabel_21:
   \   000012   02....       LJMP      ?Subroutine3 & 0xFFFF
   4359          }
   4360          
   4361          /*********************************************************************
   4362           * @fn      zclParseInDiscCmdsRspCmd
   4363           *
   4364           * @brief   Parse the Discover Commands Response Command
   4365           *
   4366           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   4367           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   4368           *
   4369           * @param   pCmd - pointer to incoming data to parse
   4370           *
   4371           * @return  pointer to the parsed command structure
   4372           */
   4373          #define ZCLDISCRSPCMD_DATALEN(a)  ((a)-1) // data len - Discovery Complete

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4374          static void *zclParseInDiscCmdsRspCmd( zclParseCmd_t *pCmd )
   \                     zclParseInDiscCmdsRspCmd:
   4375          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   4376            zclDiscoverCmdsCmdRsp_t *pDiscoverRspCmd;
   4377            uint8 *pBuf = pCmd->pData;
   \   000005   12....       LCALL     ?Subroutine93 & 0xFFFF
   4378            uint8 numCmds = ZCLDISCRSPCMD_DATALEN(pCmd->dataLen);  // length of command ID variable array
   \                     ??CrossCallReturnLabel_157:
   \   000008   14           DEC       A
   \   000009   F5..         MOV       ?V0,A
   4379          
   4380              // allocate memory for size of structure plus variable array
   4381            pDiscoverRspCmd = (zclDiscoverCmdsCmdRsp_t *)zcl_mem_alloc( sizeof ( zclDiscoverCmdsCmdRsp_t ) +
   4382                              ( numCmds * sizeof(uint8) ) );
   \   00000B                ; Setup parameters for call to function osal_mem_alloc
   \   00000B   2405         ADD       A,#0x5
   \   00000D   FA           MOV       R2,A
   \   00000E   E4           CLR       A
   \   00000F   3400         ADDC      A,#0x0
   \   000011   FB           MOV       R3,A
   \   000012   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   4383            if ( pDiscoverRspCmd != NULL )
   \   000015   EA           MOV       A,R2
   \   000016   4B           ORL       A,R3
   \   000017   6032         JZ        ??zclParseInDiscCmdsRspCmd_0
   4384            {
   4385              uint8 i;
   4386              pDiscoverRspCmd->discComplete = *pBuf++;
   \   000019   12....       LCALL     ?Subroutine17 & 0xFFFF
   4387              pDiscoverRspCmd->numCmd = numCmds;
   \                     ??CrossCallReturnLabel_7:
   \   00001C   A3           INC       DPTR
   \   00001D   E5..         MOV       A,?V0
   \   00001F   F0           MOVX      @DPTR,A
   4388          
   4389              for ( i = 0; i < numCmds; i++ )
   \   000020   7800         MOV       R0,#0x0
   \   000022   8021         SJMP      ??zclParseInDiscCmdsRspCmd_1
   4390              {
   4391                pDiscoverRspCmd->pCmdID[i] = *pBuf++;
   \                     ??zclParseInDiscCmdsRspCmd_2:
   \   000024   8E82         MOV       DPL,R6
   \   000026   8F83         MOV       DPH,R7
   \   000028   E0           MOVX      A,@DPTR
   \   000029   C0E0         PUSH      A
   \   00002B   E8           MOV       A,R0
   \   00002C   FC           MOV       R4,A
   \   00002D   8A82         MOV       DPL,R2
   \   00002F   8B83         MOV       DPH,R3
   \   000031   A3           INC       DPTR
   \   000032   A3           INC       DPTR
   \   000033   A3           INC       DPTR
   \   000034   E0           MOVX      A,@DPTR
   \   000035   2C           ADD       A,R4
   \   000036   F9           MOV       R1,A
   \   000037   A3           INC       DPTR
   \   000038   E0           MOVX      A,@DPTR
   \   000039   3400         ADDC      A,#0x0
   \   00003B   8982         MOV       DPL,R1
   \   00003D   F583         MOV       DPH,A
   \   00003F   D0E0         POP       A
   \   000041   12....       LCALL     ?Subroutine23 & 0xFFFF
   4392              }
   \                     ??CrossCallReturnLabel_17:
   \   000044   08           INC       R0
   \                     ??zclParseInDiscCmdsRspCmd_1:
   \   000045   E8           MOV       A,R0
   \   000046   C3           CLR       C
   \   000047   95..         SUBB      A,?V0
   \   000049   40D9         JC        ??zclParseInDiscCmdsRspCmd_2
   4393            }
   4394          
   4395            return ( (void *)pDiscoverRspCmd );
   \                     ??zclParseInDiscCmdsRspCmd_0:
   \   00004B   02....       LJMP      ??Subroutine198_0 & 0xFFFF
   4396          }
   4397          
   4398          /*********************************************************************
   4399           * @fn      zclParseInDiscAttrsExtRspCmd
   4400           *
   4401           * @brief   Parse the "Profile" Discovery Extended Attributes Response Commands
   4402           *
   4403           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   4404           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   4405           *
   4406           * @param   pCmd - pointer to incoming data to parse
   4407           *
   4408           * @return  pointer to the parsed command structure
   4409           */
   4410          #define ZCLDISCRSPCMD_DATALEN(a)  ((a)-1) // data len - Discovery Complete

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4411          static void *zclParseInDiscAttrsExtRspCmd( zclParseCmd_t *pCmd )
   \                     zclParseInDiscAttrsExtRspCmd:
   4412          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   4413            zclDiscoverAttrsExtRsp_t *pDiscoverRspCmd;
   4414            uint8 i;
   4415            uint8 *pBuf = pCmd->pData;
   \   000005   12....       LCALL     ?Subroutine81 & 0xFFFF
   4416            uint8 numAttrs = ZCLDISCRSPCMD_DATALEN(pCmd->dataLen) / ( 2 + 1 + 1 ); // Attr ID + Data Type + Access Control
   \                     ??CrossCallReturnLabel_136:
   \   000008   F5..         MOV       ?V0,A
   \   00000A   A3           INC       DPTR
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   34FF         ADDC      A,#-0x1
   \   00000E   F5..         MOV       ?V1,A
   \   000010   7402         MOV       A,#0x2
   \   000012   78..         MOV       R0,#?V0
   \   000014   12....       LCALL     ?US_SHR
   \   000017   E5..         MOV       A,?V0
   \   000019   F5..         MOV       ?V0,A
   4417          
   4418            pDiscoverRspCmd = (zclDiscoverAttrsExtRsp_t *)zcl_mem_alloc( sizeof ( zclDiscoverAttrsExtRsp_t ) +
   4419                              ( numAttrs * sizeof(zclExtAttrInfo_t) ) );
   \   00001B                ; Setup parameters for call to function osal_mem_alloc
   \   00001B   F5..         MOV       ?V2,A
   \   00001D   75..00       MOV       ?V3,#0x0
   \   000020   7402         MOV       A,#0x2
   \   000022   78..         MOV       R0,#?V2
   \   000024   12....       LCALL     ?S_SHL
   \   000027   E5..         MOV       A,?V2
   \   000029   12....       LCALL     ??Subroutine248_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_616:
   \   00002C   35..         ADDC      A,?V3
   \   00002E   FB           MOV       R3,A
   \   00002F   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   4420          
   4421            if ( pDiscoverRspCmd != NULL )
   \   000032   EA           MOV       A,R2
   \   000033   4B           ORL       A,R3
   \   000034   6053         JZ        ??zclParseInDiscAttrsExtRspCmd_0
   4422            {
   4423              pDiscoverRspCmd->discComplete = *pBuf++;
   \   000036   12....       LCALL     ?Subroutine17 & 0xFFFF
   4424              pDiscoverRspCmd->numAttr = numAttrs;
   \                     ??CrossCallReturnLabel_8:
   \   000039   E5..         MOV       A,?V0
   \   00003B   F0           MOVX      @DPTR,A
   4425          
   4426              for ( i = 0; i < numAttrs; i++ )
   \   00003C   7C00         MOV       R4,#0x0
   \   00003E   8043         SJMP      ??zclParseInDiscAttrsExtRspCmd_1
   4427              {
   4428                pDiscoverRspCmd->aExtAttrInfo[i].attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??zclParseInDiscAttrsExtRspCmd_2:
   \   000040   EC           MOV       A,R4
   \   000041   F5..         MOV       ?V2,A
   \   000043   75..00       MOV       ?V3,#0x0
   \   000046   7402         MOV       A,#0x2
   \   000048   78..         MOV       R0,#?V2
   \   00004A   12....       LCALL     ?S_SHL
   \   00004D   EA           MOV       A,R2
   \   00004E   25..         ADD       A,?V2
   \   000050   F8           MOV       R0,A
   \   000051   EB           MOV       A,R3
   \   000052   35..         ADDC      A,?V3
   \   000054   F9           MOV       R1,A
   \   000055   8E82         MOV       DPL,R6
   \   000057   8F83         MOV       DPH,R7
   \   000059   E0           MOVX      A,@DPTR
   \   00005A   F5..         MOV       ?V4,A
   \   00005C   A3           INC       DPTR
   \   00005D   E0           MOVX      A,@DPTR
   \   00005E   F5..         MOV       ?V3,A
   \   000060   E5..         MOV       A,?V4
   \   000062   8882         MOV       DPL,R0
   \   000064   8983         MOV       DPH,R1
   \   000066   A3           INC       DPTR
   \   000067   A3           INC       DPTR
   \   000068   F0           MOVX      @DPTR,A
   \   000069   A3           INC       DPTR
   \   00006A   E5..         MOV       A,?V3
   \   00006C   12....       LCALL     ?Subroutine22 & 0xFFFF
   4429                pBuf += 2;
   4430                pDiscoverRspCmd->aExtAttrInfo[i].attrDataType = *pBuf++;
   4431                pDiscoverRspCmd->aExtAttrInfo[i].attrAccessControl = *pBuf++;
   \                     ??CrossCallReturnLabel_14:
   \   00006F   8E82         MOV       DPL,R6
   \   000071   8F83         MOV       DPH,R7
   \   000073   A3           INC       DPTR
   \   000074   A3           INC       DPTR
   \   000075   A3           INC       DPTR
   \   000076   12....       LCALL     ?Subroutine110 & 0xFFFF
   4432              }
   \                     ??CrossCallReturnLabel_187:
   \   000079   A3           INC       DPTR
   \   00007A   F0           MOVX      @DPTR,A
   \   00007B   EE           MOV       A,R6
   \   00007C   2404         ADD       A,#0x4
   \   00007E   FE           MOV       R6,A
   \   00007F   5001         JNC       ??zclParseInDiscAttrsExtRspCmd_3
   \   000081   0F           INC       R7
   \                     ??zclParseInDiscAttrsExtRspCmd_3:
   \   000082   0C           INC       R4
   \                     ??zclParseInDiscAttrsExtRspCmd_1:
   \   000083   EC           MOV       A,R4
   \   000084   C3           CLR       C
   \   000085   95..         SUBB      A,?V0
   \   000087   40B7         JC        ??zclParseInDiscAttrsExtRspCmd_2
   4433            }
   4434          
   4435            return ( (void *)pDiscoverRspCmd );
   \                     ??zclParseInDiscAttrsExtRspCmd_0:
   \   000089   02....       LJMP      ?Subroutine4 & 0xFFFF
   4436          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine110:
   \   000000   12....       LCALL     ?Subroutine165 & 0xFFFF
   \                     ??CrossCallReturnLabel_291:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   22           RET
   4437          #endif // ZCL_DISCOVER
   4438          
   4439          #ifdef ZCL_READ
   4440          /*********************************************************************
   4441           * @fn      zclProcessInReadCmd
   4442           *
   4443           * @brief   Process the "Profile" Read Command
   4444           *
   4445           * @param   pInMsg - incoming message to process
   4446           *
   4447           * @return  TRUE if command processed. FALSE, otherwise.
   4448           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine53:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004                REQUIRE ??Subroutine206_0
   \   000004                ; // Fall through to label ??Subroutine206_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine206_0:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006                REQUIRE ??Subroutine207_0
   \   000006                ; // Fall through to label ??Subroutine207_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4449          static uint8 zclProcessInReadCmd( zclIncoming_t *pInMsg )
   \                     zclProcessInReadCmd:
   4450          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV       A,#-0x18
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV       A,#-0x8
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine134 & 0xFFFF
   4451            zclReadCmd_t *readCmd;
   4452            zclReadRspCmd_t *readRspCmd;
   4453            zclAttrRec_t attrRec;
   4454            uint16 len;
   4455            uint8 i;
   4456            uint8 attrFound;
   4457          
   4458            readCmd = (zclReadCmd_t *)pInMsg->attrCmd;
   \                     ??CrossCallReturnLabel_237:
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   F5..         MOV       ?V10,A
   \   000010   A3           INC       DPTR
   \   000011   E0           MOVX      A,@DPTR
   \   000012   F5..         MOV       ?V11,A
   4459          
   4460            // calculate the length of the response status record
   4461            len = sizeof( zclReadRspCmd_t ) + (readCmd->numAttr * sizeof( zclReadRspStatus_t ));
   4462          
   4463            readRspCmd = zcl_mem_alloc( len );
   \   000014                ; Setup parameters for call to function osal_mem_alloc
   \   000014   85..82       MOV       DPL,?V10
   \   000017   F583         MOV       DPH,A
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   75F006       MOV       B,#0x6
   \   00001D   12....       LCALL     ??Subroutine240_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_557:
   \   000020   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000023   8A..         MOV       ?V0,R2
   \   000025   8B..         MOV       ?V1,R3
   4464            if ( readRspCmd == NULL )
   \   000027   EA           MOV       A,R2
   \   000028   45..         ORL       A,?V1
   \   00002A   7005         JNZ       ??zclProcessInReadCmd_0
   4465            {
   4466              return FALSE; // EMBEDDED RETURN
   \   00002C   7900         MOV       R1,#0x0
   \   00002E   02....       LJMP      ??zclProcessInReadCmd_1 & 0xFFFF
   4467            }
   4468          
   4469            readRspCmd->numAttr = readCmd->numAttr;
   \                     ??zclProcessInReadCmd_0:
   \   000031   85..82       MOV       DPL,?V10
   \   000034   85..83       MOV       DPH,?V11
   \   000037   12....       LCALL     ?Subroutine89 & 0xFFFF
   4470            for ( i = 0; i < readCmd->numAttr; i++ )
   \                     ??CrossCallReturnLabel_151:
   \   00003A   75..00       MOV       ?V2,#0x0
   \   00003D   EE           MOV       A,R6
   \   00003E   2402         ADD       A,#0x2
   \   000040   F5..         MOV       ?V14,A
   \   000042   E4           CLR       A
   \   000043   3F           ADDC      A,R7
   \   000044   F5..         MOV       ?V15,A
   \   000046   800B         SJMP      ??zclProcessInReadCmd_2
   4471            {
   4472              zclReadRspStatus_t *statusRec = &(readRspCmd->attrList[i]);
   4473          
   4474              statusRec->attrID = readCmd->attrID[i];
   4475              
   4476              attrFound = zclFindAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, readCmd->attrID[i], &attrRec );
   4477              
   4478              //Validate the attribute is found and the access control
   4479              if ( ( attrFound == TRUE ) && 
   4480                   (  (attrRec.attr.accessControl & ACCESS_GLOBAL) || 
   4481                      (GET_BIT( &attrRec.attr.accessControl, ACCESS_CONTROL_MASK ) == pInMsg->hdr.fc.direction ) ) )
   4482              {
   4483                if ( zcl_AccessCtrlRead( attrRec.attr.accessControl ) )
   4484                {
   4485                  statusRec->status = zclAuthorizeRead( pInMsg->msg->endPoint,
   4486                                                        &(pInMsg->msg->srcAddr), &attrRec );
   4487                  if ( statusRec->status == ZCL_STATUS_SUCCESS )
   4488                  {
   4489                    statusRec->data = attrRec.attr.dataPtr;
   4490                    statusRec->dataType = attrRec.attr.dataType;
   4491                  }
   4492                }
   4493                else
   4494                {
   4495                  statusRec->status = ZCL_STATUS_WRITE_ONLY;
   4496                }
   4497              }
   4498              else
   4499              {
   4500                statusRec->status = ZCL_STATUS_UNSUPPORTED_ATTRIBUTE;
   \                     ??zclProcessInReadCmd_3:
   \   000048   85..82       MOV       DPL,?V6
   \   00004B   85..83       MOV       DPH,?V7
   \   00004E   7486         MOV       A,#-0x7a
   \                     ??zclProcessInReadCmd_4:
   \   000050   F0           MOVX      @DPTR,A
   4501              }
   \                     ??zclProcessInReadCmd_5:
   \   000051   05..         INC       ?V2
   \                     ??zclProcessInReadCmd_2:
   \   000053   85..82       MOV       DPL,?V10
   \   000056   85..83       MOV       DPH,?V11
   \   000059   12....       LCALL     ??Subroutine229_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_511:
   \   00005C   4003         JC        $+5
   \   00005E   02....       LJMP      ??zclProcessInReadCmd_6 & 0xFFFF
   \   000061   A8..         MOV       R0,?V2
   \   000063   E8           MOV       A,R0
   \   000064   75F006       MOV       B,#0x6
   \   000067   A4           MUL       AB
   \   000068   FA           MOV       R2,A
   \   000069   ABF0         MOV       R3,B
   \   00006B   E5..         MOV       A,?V0
   \   00006D   2A           ADD       A,R2
   \   00006E   F582         MOV       DPL,A
   \   000070   E5..         MOV       A,?V1
   \   000072   3B           ADDC      A,R3
   \   000073   F583         MOV       DPH,A
   \   000075   A3           INC       DPTR
   \   000076   8582..       MOV       ?V4,DPL
   \   000079   8583..       MOV       ?V5,DPH
   \   00007C   E8           MOV       A,R0
   \   00007D   28           ADD       A,R0
   \   00007E   F8           MOV       R0,A
   \   00007F   E4           CLR       A
   \   000080   33           RLC       A
   \   000081   F9           MOV       R1,A
   \   000082   E5..         MOV       A,?V10
   \   000084   28           ADD       A,R0
   \   000085   F582         MOV       DPL,A
   \   000087   E5..         MOV       A,?V11
   \   000089   12....       LCALL     ?Subroutine139 & 0xFFFF
   \                     ??CrossCallReturnLabel_248:
   \   00008C   12....       LCALL     ?Subroutine68 & 0xFFFF
   \                     ??CrossCallReturnLabel_114:
   \   00008F   12....       LCALL     ??Subroutine230_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_520:
   \   000092   E5..         MOV       A,?V4
   \   000094   2402         ADD       A,#0x2
   \   000096   F5..         MOV       ?V6,A
   \   000098   E4           CLR       A
   \   000099   35..         ADDC      A,?V5
   \   00009B   F5..         MOV       ?V7,A
   \   00009D   12....       LCALL     ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_540:
   \   0000A0                ; Setup parameters for call to function zclFindAttrRec
   \   0000A0   A8..         MOV       R0,?XSP + 0
   \   0000A2   A9..         MOV       R1,?XSP + 1
   \   0000A4   88..         MOV       ?V12,R0
   \   0000A6   89..         MOV       ?V13,R1
   \   0000A8   78..         MOV       R0,#?V12
   \   0000AA   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000AD   8A82         MOV       DPL,R2
   \   0000AF   8B83         MOV       DPH,R3
   \   0000B1   12....       LCALL     ??Subroutine235_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_544:
   \   0000B4   85..82       MOV       DPL,?V8
   \   0000B7   85..83       MOV       DPH,?V9
   \   0000BA   12....       LCALL     ??Subroutine222_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_466:
   \   0000BD   12....       LCALL     ?Subroutine128 & 0xFFFF
   \                     ??CrossCallReturnLabel_224:
   \   0000C0   12....       LCALL     `??zclFindAttrRec::?relay`; Banked call to: zclFindAttrRec
   \   0000C3   7402         MOV       A,#0x2
   \   0000C5   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000C8   E9           MOV       A,R1
   \   0000C9   6401         XRL       A,#0x1
   \   0000CB   6003         JZ        $+5
   \   0000CD   02....       LJMP      ??zclProcessInReadCmd_3 & 0xFFFF
   \   0000D0   7405         MOV       A,#0x5
   \   0000D2   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D5   E0           MOVX      A,@DPTR
   \   0000D6   A2E6         MOV       C,0xE0 /* A   */.6
   \   0000D8   401A         JC        ??zclProcessInReadCmd_7
   \   0000DA   85..82       MOV       DPL,?V14
   \   0000DD   85..83       MOV       DPH,?V15
   \   0000E0   12....       LCALL     ?Subroutine99 & 0xFFFF
   \                     ??CrossCallReturnLabel_166:
   \   0000E3   7405         MOV       A,#0x5
   \   0000E5   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E8   E0           MOVX      A,@DPTR
   \   0000E9   A2E7         MOV       C,0xE0 /* A   */.7
   \   0000EB   20F001       JB        B.0,??zclProcessInReadCmd_8
   \   0000EE   B3           CPL       C
   \                     ??zclProcessInReadCmd_8:
   \   0000EF   4003         JC        $+5
   \   0000F1   02....       LJMP      ??zclProcessInReadCmd_3 & 0xFFFF
   \                     ??zclProcessInReadCmd_7:
   \   0000F4   A2E0         MOV       C,0xE0 /* A   */.0
   \   0000F6   5069         JNC       ??zclProcessInReadCmd_9
   \   0000F8   8E82         MOV       DPL,R6
   \   0000FA   8F83         MOV       DPH,R7
   \   0000FC   12....       LCALL     ??Subroutine228_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_488:
   \   0000FF   E8           MOV       A,R0
   \   000100   2406         ADD       A,#0x6
   \   000102   F5..         MOV       ?V8,A
   \   000104   E4           CLR       A
   \   000105   39           ADDC      A,R1
   \   000106   F5..         MOV       ?V9,A
   \   000108   7405         MOV       A,#0x5
   \   00010A   12....       LCALL     ?XSTACK_DISP0_8
   \   00010D   E0           MOVX      A,@DPTR
   \   00010E   A2E4         MOV       C,0xE0 /* A   */.4
   \   000110   5020         JNC       ??zclProcessInReadCmd_10
   \   000112                ; Setup parameters for call to function zclGetAuthorizeCB
   \   000112   12....       LCALL     ?Subroutine127 & 0xFFFF
   \                     ??CrossCallReturnLabel_221:
   \   000115   12....       LCALL     `??zclGetAuthorizeCB::?relay`; Banked call to: zclGetAuthorizeCB
   \   000118   8A82         MOV       DPL,R2
   \   00011A   8B83         MOV       DPH,R3
   \   00011C   E582         MOV       A,DPL
   \   00011E   4583         ORL       A,DPH
   \   000120   6010         JZ        ??zclProcessInReadCmd_10
   \   000122                ; Setup parameters for indirect call
   \   000122   7901         MOV       R1,#0x1
   \   000124   AC..         MOV       R4,?XSP + 0
   \   000126   AD..         MOV       R5,?XSP + 1
   \   000128   AA..         MOV       R2,?V8
   \   00012A   AB..         MOV       R3,?V9
   \   00012C   12....       LCALL     ?CALL_IND
   \   00012F   E9           MOV       A,R1
   \   000130   8002         SJMP      ??zclProcessInReadCmd_11
   \                     ??zclProcessInReadCmd_10:
   \   000132   7400         MOV       A,#0x0
   4502            }
   \                     ??zclProcessInReadCmd_11:
   \   000134   85..82       MOV       DPL,?V6
   \   000137   85..83       MOV       DPH,?V7
   \   00013A   F0           MOVX      @DPTR,A
   \   00013B   6003         JZ        $+5
   \   00013D   02....       LJMP      ??zclProcessInReadCmd_5 & 0xFFFF
   \   000140   7406         MOV       A,#0x6
   \   000142   12....       LCALL     ?XSTACK_DISP0_8
   \   000145   12....       LCALL     ?Subroutine68 & 0xFFFF
   \                     ??CrossCallReturnLabel_115:
   \   000148   A3           INC       DPTR
   \   000149   A3           INC       DPTR
   \   00014A   A3           INC       DPTR
   \   00014B   A3           INC       DPTR
   \   00014C   12....       LCALL     ??Subroutine230_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_521:
   \   00014F   7404         MOV       A,#0x4
   \   000151   12....       LCALL     ?XSTACK_DISP0_8
   \   000154   E0           MOVX      A,@DPTR
   \   000155   85..82       MOV       DPL,?V4
   \   000158   85..83       MOV       DPH,?V5
   \   00015B   A3           INC       DPTR
   \   00015C   A3           INC       DPTR
   \   00015D   A3           INC       DPTR
   \   00015E   02....       LJMP      ??zclProcessInReadCmd_4 & 0xFFFF
   \                     ??zclProcessInReadCmd_9:
   \   000161   85..82       MOV       DPL,?V6
   \   000164   85..83       MOV       DPH,?V7
   \   000167   748F         MOV       A,#-0x71
   \   000169   02....       LJMP      ??zclProcessInReadCmd_4 & 0xFFFF
   4503          
   4504            // Build and send Read Response command
   4505            zcl_SendReadRsp( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr), pInMsg->msg->clusterId,
   4506                             readRspCmd, !pInMsg->hdr.fc.direction,
   4507                             true, pInMsg->hdr.transSeqNum );
   \                     ??zclProcessInReadCmd_6:
   \   00016C   12....       LCALL     ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_541:
   \   00016F                ; Setup parameters for call to function zcl_SendReadRsp
   \   00016F   12....       LCALL     ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_394:
   \   000172   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000175   75..01       MOV       ?V2,#0x1
   \   000178   78..         MOV       R0,#?V2
   \   00017A   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00017D   85..82       MOV       DPL,?V14
   \   000180   85..83       MOV       DPH,?V15
   \   000183   12....       LCALL     ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   000186   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000189   78..         MOV       R0,#?V0
   \   00018B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00018E   85..82       MOV       DPL,?V8
   \   000191   85..83       MOV       DPH,?V9
   \   000194   12....       LCALL     ?Subroutine107 & 0xFFFF
   \                     ??CrossCallReturnLabel_549:
   \   000197   E5..         MOV       A,?V8
   \   000199   12....       LCALL     ??Subroutine250_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_624:
   \   00019C   35..         ADDC      A,?V9
   \   00019E   FB           MOV       R3,A
   \   00019F   12....       LCALL     ?Subroutine128 & 0xFFFF
   \                     ??CrossCallReturnLabel_225:
   \   0001A2   12....       LCALL     `??zcl_SendReadRsp::?relay`; Banked call to: zcl_SendReadRsp
   \   0001A5   7405         MOV       A,#0x5
   \   0001A7   12....       LCALL     ?DEALLOC_XSTACK8
   4508            zcl_mem_free( readRspCmd );
   \   0001AA                ; Setup parameters for call to function osal_mem_free
   \   0001AA   AA..         MOV       R2,?V0
   \   0001AC   AB..         MOV       R3,?V1
   \   0001AE   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   4509          
   4510            return TRUE;
   \   0001B1   7901         MOV       R1,#0x1
   \                     ??zclProcessInReadCmd_1:
   \   0001B3   7408         MOV       A,#0x8
   \   0001B5   02....       LJMP      ?Subroutine5 & 0xFFFF
   4511          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine128:
   \   000000   E5..         MOV       A,?V8
   \   000002   12....       LCALL     ?Subroutine187 & 0xFFFF
   \                     ??CrossCallReturnLabel_602:
   \   000005   35..         ADDC      A,?V9
   \   000007   F583         MOV       DPH,A
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   F9           MOV       R1,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine99:
   \   000000   12....       LCALL     ?Subroutine195 & 0xFFFF
   \                     ??CrossCallReturnLabel_605:
   \   000003   A2E0         MOV       C,0xE0 /* A   */.0
   \   000005   92F0         MOV       B.0,C
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine55:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004                REQUIRE ??Subroutine233_0
   \   000004                ; // Fall through to label ??Subroutine233_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine58:
   \   000000   12....       LCALL     ?Subroutine168 & 0xFFFF
   \                     ??CrossCallReturnLabel_590:
   \   000003   F5..         MOV       ?V2,A
   \   000005   78..         MOV       R0,#?V2
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine179:
   \   000000   EA           MOV       A,R2
   \   000001   FE           MOV       R6,A
   \   000002   EB           MOV       A,R3
   \   000003   FF           MOV       R7,A
   \   000004   EE           MOV       A,R6
   \   000005                REQUIRE ??Subroutine245_0
   \   000005                ; // Fall through to label ??Subroutine245_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine245_0:
   \   000000   240C         ADD       A,#0xc
   \   000002   F582         MOV       DPL,A
   \   000004   E4           CLR       A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine250_0:
   \   000000   2406         ADD       A,#0x6
   \   000002   FA           MOV       R2,A
   \   000003   E4           CLR       A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine134:
   \   000000   12....       LCALL     ?Subroutine179 & 0xFFFF
   \                     ??CrossCallReturnLabel_584:
   \   000003   3F           ADDC      A,R7
   \   000004   F583         MOV       DPH,A
   \   000006   22           RET
   4512          #endif // ZCL_READ
   4513          
   4514          #ifdef ZCL_WRITE
   4515          /*********************************************************************
   4516           * @fn      processInWriteCmd
   4517           *
   4518           * @brief   Process the "Profile" Write and Write No Response Commands
   4519           *
   4520           * @param   pInMsg - incoming message to process
   4521           *
   4522           * @return  TRUE if command processed. FALSE, otherwise.
   4523           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine170:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine201_0
   \   000001                ; // Fall through to label ??Subroutine201_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4524          static uint8 zclProcessInWriteCmd( zclIncoming_t *pInMsg )
   \                     zclProcessInWriteCmd:
   4525          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV       A,#-0x18
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV       A,#-0xa
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V2,R2
   \   00000C   8B..         MOV       ?V3,R3
   4526            zclWriteCmd_t *writeCmd;
   4527            zclWriteRspCmd_t *writeRspCmd;
   4528            uint8 sendRsp = FALSE;
   \   00000E   C2..         CLR       ?VB.0
   4529            uint8 j = 0;
   \   000010   7E00         MOV       R6,#0x0
   4530            uint8 i;
   4531          
   4532            writeCmd = (zclWriteCmd_t *)pInMsg->attrCmd;
   \   000012   EA           MOV       A,R2
   \   000013   12....       LCALL     ??Subroutine245_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_585:
   \   000016   35..         ADDC      A,?V3
   \   000018   F583         MOV       DPH,A
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   F5..         MOV       ?V14,A
   \   00001D   A3           INC       DPTR
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   F5..         MOV       ?V15,A
   4533            if ( pInMsg->hdr.commandID == ZCL_CMD_WRITE )
   \   000021   8A82         MOV       DPL,R2
   \   000023   8B83         MOV       DPH,R3
   \   000025   A3           INC       DPTR
   \   000026   A3           INC       DPTR
   \   000027   A3           INC       DPTR
   \   000028   A3           INC       DPTR
   \   000029   A3           INC       DPTR
   \   00002A   A3           INC       DPTR
   \   00002B   A3           INC       DPTR
   \   00002C   E0           MOVX      A,@DPTR
   \   00002D   6402         XRL       A,#0x2
   \   00002F   701C         JNZ       ??zclProcessInWriteCmd_0
   4534            {
   4535              // We need to send a response back - allocate space for it
   4536              writeRspCmd = (zclWriteRspCmd_t *)zcl_mem_alloc( sizeof( zclWriteRspCmd_t )
   4537                      + sizeof( zclWriteRspStatus_t ) * writeCmd->numAttr );
   \   000031                ; Setup parameters for call to function osal_mem_alloc
   \   000031   85..82       MOV       DPL,?V14
   \   000034   85..83       MOV       DPH,?V15
   \   000037   12....       LCALL     ?Subroutine83 & 0xFFFF
   \                     ??CrossCallReturnLabel_139:
   \   00003A   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00003D   8A..         MOV       ?V4,R2
   \   00003F   8B..         MOV       ?V5,R3
   4538              if ( writeRspCmd == NULL )
   \   000041   EA           MOV       A,R2
   \   000042   45..         ORL       A,?V5
   \   000044   7005         JNZ       ??zclProcessInWriteCmd_1
   4539              {
   4540                return FALSE; // EMBEDDED RETURN
   \   000046   7900         MOV       R1,#0x0
   \   000048   02....       LJMP      ??zclProcessInWriteCmd_2 & 0xFFFF
   4541              }
   4542          
   4543              sendRsp = TRUE;
   \                     ??zclProcessInWriteCmd_1:
   \   00004B   D2..         SETB      ?VB.0
   4544            }
   4545          
   4546            for ( i = 0; i < writeCmd->numAttr; i++ )
   \                     ??zclProcessInWriteCmd_0:
   \   00004D   7F00         MOV       R7,#0x0
   \   00004F   8010         SJMP      ??zclProcessInWriteCmd_3
   4547            {
   4548              zclAttrRec_t attrRec;
   4549              zclWriteRec_t *statusRec = &(writeCmd->attrList[i]);
   4550          
   4551              if ( zclFindAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId,
   4552                                   statusRec->attrID, &attrRec ) )
   4553              {
   4554                if ( GET_BIT( &attrRec.attr.accessControl, ACCESS_CONTROLEXT_MASK ) != pInMsg->hdr.fc.direction )
   4555                {
   4556                  writeRspCmd->attrList[j].status = ZCL_STATUS_UNSUPPORTED_ATTRIBUTE;
   4557                  writeRspCmd->attrList[j++].attrID = statusRec->attrID;
   4558                  break;
   4559                }
   4560                if ( statusRec->dataType == attrRec.attr.dataType )
   4561                {
   4562                  uint8 status;
   4563          
   4564                  // Write the new attribute value
   4565                  if ( attrRec.attr.dataPtr != NULL )
   4566                  {
   4567                    //Handle special case for Identify
   4568                    if((pInMsg->msg->clusterId == ZCL_CLUSTER_ID_GEN_IDENTIFY) && (statusRec->attrID == ATTRID_IDENTIFY_TIME))
   4569                    {
   4570                      uint16 identifyTime; 
   4571                            
   4572                      osal_memcpy((uint8*)&identifyTime,statusRec->attrData,sizeof(uint16));
   4573                                  
   4574                      bdb_ZclIdentifyCmdInd(identifyTime, pInMsg->msg->endPoint);
   4575                      
   4576                      status = ZCL_STATUS_SUCCESS;
   4577                    }          
   4578                    else
   4579                    {                
   4580                      status = zclWriteAttrData( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
   4581                                                 &attrRec, statusRec );
   4582                    }
   4583                  }
   4584                  else // Use CB
   4585                  {
   4586                    status = zclWriteAttrDataUsingCB( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
   4587                                                      &attrRec, statusRec->attrData );
   4588                  }
   4589          
   4590                  // If successful, a write attribute status record shall NOT be generated
   4591                  if ( sendRsp && status != ZCL_STATUS_SUCCESS )
   4592                  {
   4593                    // Attribute is read only - move on to the next write attribute record
   4594                    writeRspCmd->attrList[j].status = status;
   4595                    writeRspCmd->attrList[j++].attrID = statusRec->attrID;
   4596                  }
   4597                }
   4598                else
   4599                {
   4600                  // Attribute data type is incorrect - move on to the next write attribute record
   4601                  if ( sendRsp )
   4602                  {
   4603                    writeRspCmd->attrList[j].status = ZCL_STATUS_INVALID_DATA_TYPE;
   4604                    writeRspCmd->attrList[j++].attrID = statusRec->attrID;
   4605                  }
   4606                }
   4607              }
   4608              else
   4609              {
   4610                // Attribute is not supported - move on to the next write attribute record
   4611                if ( sendRsp )
   \                     ??zclProcessInWriteCmd_4:
   \   000051   A2..         MOV       C,?VB.0
   \   000053   500B         JNC       ??CrossCallReturnLabel_9
   4612                {
   4613                  writeRspCmd->attrList[j].status = ZCL_STATUS_UNSUPPORTED_ATTRIBUTE;
   \   000055   85..82       MOV       DPL,?V12
   \   000058   85..83       MOV       DPH,?V13
   \   00005B   7486         MOV       A,#-0x7a
   4614                  writeRspCmd->attrList[j++].attrID = statusRec->attrID;
   4615                }
   4616              }
   \                     ??zclProcessInWriteCmd_5:
   \   00005D   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   000060   0F           INC       R7
   \                     ??zclProcessInWriteCmd_3:
   \   000061   85..82       MOV       DPL,?V14
   \   000064   85..83       MOV       DPH,?V15
   \   000067   E0           MOVX      A,@DPTR
   \   000068   F8           MOV       R0,A
   \   000069   EF           MOV       A,R7
   \   00006A   C3           CLR       C
   \   00006B   98           SUBB      A,R0
   \   00006C   507F         JNC       ??CrossCallReturnLabel_10
   \   00006E   EF           MOV       A,R7
   \   00006F   75F005       MOV       B,#0x5
   \   000072   A4           MUL       AB
   \   000073   F8           MOV       R0,A
   \   000074   A9F0         MOV       R1,B
   \   000076   E5..         MOV       A,?V14
   \   000078   28           ADD       A,R0
   \   000079   F582         MOV       DPL,A
   \   00007B   E5..         MOV       A,?V15
   \   00007D   12....       LCALL     ?Subroutine137 & 0xFFFF
   \                     ??CrossCallReturnLabel_244:
   \   000080   EE           MOV       A,R6
   \   000081   75F003       MOV       B,#0x3
   \   000084   A4           MUL       AB
   \   000085   F8           MOV       R0,A
   \   000086   A9F0         MOV       R1,B
   \   000088   E5..         MOV       A,?V4
   \   00008A   28           ADD       A,R0
   \   00008B   F582         MOV       DPL,A
   \   00008D   E5..         MOV       A,?V5
   \   00008F   39           ADDC      A,R1
   \   000090   F583         MOV       DPH,A
   \   000092   E582         MOV       A,DPL
   \   000094   2402         ADD       A,#0x2
   \   000096   F5..         MOV       ?V8,A
   \   000098   E4           CLR       A
   \   000099   3583         ADDC      A,DPH
   \   00009B   F5..         MOV       ?V9,A
   \   00009D   A3           INC       DPTR
   \   00009E   8582..       MOV       ?V12,DPL
   \   0000A1   8583..       MOV       ?V13,DPH
   \   0000A4   12....       LCALL     ?Subroutine117 & 0xFFFF
   \                     ??CrossCallReturnLabel_555:
   \   0000A7                ; Setup parameters for call to function zclFindAttrRec
   \   0000A7   7402         MOV       A,#0x2
   \   0000A9   12....       LCALL     ?XSTACK_DISP100_8
   \   0000AC   88..         MOV       ?V10,R0
   \   0000AE   89..         MOV       ?V11,R1
   \   0000B0   78..         MOV       R0,#?V10
   \   0000B2   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000B5   85..82       MOV       DPL,?V0
   \   0000B8   85..83       MOV       DPH,?V1
   \   0000BB   12....       LCALL     ??Subroutine241_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_560:
   \   0000BE   12....       LCALL     `??zclFindAttrRec::?relay`; Banked call to: zclFindAttrRec
   \   0000C1   7402         MOV       A,#0x2
   \   0000C3   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000C6   E9           MOV       A,R1
   \   0000C7   6088         JZ        ??zclProcessInWriteCmd_4
   \   0000C9   85..82       MOV       DPL,?V2
   \   0000CC   85..83       MOV       DPH,?V3
   \   0000CF   A3           INC       DPTR
   \   0000D0   A3           INC       DPTR
   \   0000D1   12....       LCALL     ?Subroutine99 & 0xFFFF
   \                     ??CrossCallReturnLabel_167:
   \   0000D4   7407         MOV       A,#0x7
   \   0000D6   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D9   E0           MOVX      A,@DPTR
   \   0000DA   A2E7         MOV       C,0xE0 /* A   */.7
   \   0000DC   20F001       JB        B.0,??zclProcessInWriteCmd_6
   \   0000DF   B3           CPL       C
   \                     ??zclProcessInWriteCmd_6:
   \   0000E0   4074         JC        ??zclProcessInWriteCmd_7
   \   0000E2   85..82       MOV       DPL,?V12
   \   0000E5   85..83       MOV       DPH,?V13
   \   0000E8   7486         MOV       A,#-0x7a
   \   0000EA   12....       LCALL     ?Subroutine18 & 0xFFFF
   4617            } // for loop
   4618          
   4619            if ( sendRsp )
   \                     ??CrossCallReturnLabel_10:
   \   0000ED   A2..         MOV       C,?VB.0
   \   0000EF   505E         JNC       ??zclProcessInWriteCmd_8
   4620            {
   4621              writeRspCmd->numAttr = j;
   \   0000F1   EE           MOV       A,R6
   \   0000F2   85..82       MOV       DPL,?V4
   \   0000F5   85..83       MOV       DPH,?V5
   \   0000F8   F0           MOVX      @DPTR,A
   4622              if ( writeRspCmd->numAttr == 0 )
   \   0000F9   700B         JNZ       ??zclProcessInWriteCmd_9
   4623              {
   4624                // Since all records were written successful, include a single status record
   4625                // in the resonse command with the status field set to SUCCESS and the
   4626                // attribute ID field omitted.
   4627                writeRspCmd->attrList[0].status = ZCL_STATUS_SUCCESS;
   \   0000FB   A3           INC       DPTR
   \   0000FC   E4           CLR       A
   \   0000FD   F0           MOVX      @DPTR,A
   4628                writeRspCmd->numAttr = 1;
   \   0000FE   85..82       MOV       DPL,?V4
   \   000101   85..83       MOV       DPH,?V5
   \   000104   04           INC       A
   \   000105   F0           MOVX      @DPTR,A
   4629              }
   4630          
   4631              zcl_SendWriteRsp( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
   4632                                pInMsg->msg->clusterId, writeRspCmd, !pInMsg->hdr.fc.direction,
   4633                                true, pInMsg->hdr.transSeqNum );
   \                     ??zclProcessInWriteCmd_9:
   \   000106   85..82       MOV       DPL,?V2
   \   000109   85..83       MOV       DPH,?V3
   \   00010C   12....       LCALL     ??Subroutine232_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_530:
   \   00010F                ; Setup parameters for call to function zcl_SendWriteRsp
   \   00010F   85..82       MOV       DPL,?V2
   \   000112   85..83       MOV       DPH,?V3
   \   000115   A3           INC       DPTR
   \   000116   A3           INC       DPTR
   \   000117   A3           INC       DPTR
   \   000118   A3           INC       DPTR
   \   000119   A3           INC       DPTR
   \   00011A   A3           INC       DPTR
   \   00011B   12....       LCALL     ?Subroutine63 & 0xFFFF
   \                     ??CrossCallReturnLabel_101:
   \   00011E   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000121   75..01       MOV       ?V0,#0x1
   \   000124   78..         MOV       R0,#?V0
   \   000126   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000129   85..82       MOV       DPL,?V2
   \   00012C   85..83       MOV       DPH,?V3
   \   00012F   A3           INC       DPTR
   \   000130   A3           INC       DPTR
   \   000131   E0           MOVX      A,@DPTR
   \   000132   12....       LCALL     ?Subroutine135 & 0xFFFF
   \                     ??CrossCallReturnLabel_240:
   \   000135   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000138   78..         MOV       R0,#?V4
   \   00013A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00013D   12....       LCALL     ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_86:
   \   000140   12....       LCALL     `??zcl_SendWriteRsp::?relay`; Banked call to: zcl_SendWriteRsp
   \   000143   7405         MOV       A,#0x5
   \   000145   12....       LCALL     ?DEALLOC_XSTACK8
   4634              zcl_mem_free( writeRspCmd );
   \   000148                ; Setup parameters for call to function osal_mem_free
   \   000148   AA..         MOV       R2,?V4
   \   00014A   AB..         MOV       R3,?V5
   \   00014C   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   4635            }
   4636          
   4637            return TRUE;
   \                     ??zclProcessInWriteCmd_8:
   \   00014F   7901         MOV       R1,#0x1
   \                     ??zclProcessInWriteCmd_2:
   \   000151   740A         MOV       A,#0xa
   \   000153   02....       LJMP      ?Subroutine5 & 0xFFFF
   \                     ??zclProcessInWriteCmd_7:
   \   000156   85..82       MOV       DPL,?V0
   \   000159   85..83       MOV       DPH,?V1
   \   00015C   A3           INC       DPTR
   \   00015D   A3           INC       DPTR
   \   00015E   E0           MOVX      A,@DPTR
   \   00015F   F8           MOV       R0,A
   \   000160   7406         MOV       A,#0x6
   \   000162   12....       LCALL     ?XSTACK_DISP0_8
   \   000165   E0           MOVX      A,@DPTR
   \   000166   68           XRL       A,R0
   \   000167   6003         JZ        $+5
   \   000169   02....       LJMP      ??zclProcessInWriteCmd_10 & 0xFFFF
   \   00016C   12....       LCALL     ?Subroutine117 & 0xFFFF
   \                     ??CrossCallReturnLabel_556:
   \   00016F   7408         MOV       A,#0x8
   \   000171   12....       LCALL     ?XSTACK_DISP0_8
   \   000174   12....       LCALL     ??Subroutine218_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_432:
   \   000177   606F         JZ        ??zclProcessInWriteCmd_11
   \   000179   85..82       MOV       DPL,?V6
   \   00017C   85..83       MOV       DPH,?V7
   \   00017F   A3           INC       DPTR
   \   000180   A3           INC       DPTR
   \   000181   A3           INC       DPTR
   \   000182   A3           INC       DPTR
   \   000183   E0           MOVX      A,@DPTR
   \   000184   6403         XRL       A,#0x3
   \   000186   7002         JNZ       ??zclProcessInWriteCmd_12
   \   000188   A3           INC       DPTR
   \   000189   E0           MOVX      A,@DPTR
   \                     ??zclProcessInWriteCmd_12:
   \   00018A   704A         JNZ       ??zclProcessInWriteCmd_13
   \   00018C   85..82       MOV       DPL,?V0
   \   00018F   85..83       MOV       DPH,?V1
   \   000192   12....       LCALL     ??Subroutine218_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_433:
   \   000195   703F         JNZ       ??zclProcessInWriteCmd_13
   \   000197                ; Setup parameters for call to function osal_memcpy
   \   000197   85..82       MOV       DPL,?V0
   \   00019A   85..83       MOV       DPH,?V1
   \   00019D   A3           INC       DPTR
   \   00019E   A3           INC       DPTR
   \   00019F   A3           INC       DPTR
   \   0001A0   12....       LCALL     ??Subroutine233_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_538:
   \   0001A3   75..00       MOV       ?V10,#0x0
   \   0001A6   78..         MOV       R0,#?V8
   \   0001A8   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0001AB   7C02         MOV       R4,#0x2
   \   0001AD   7D00         MOV       R5,#0x0
   \   0001AF   7403         MOV       A,#0x3
   \   0001B1   12....       LCALL     ?XSTACK_DISP101_8
   \   0001B4   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0001B7   7403         MOV       A,#0x3
   \   0001B9   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001BC                ; Setup parameters for call to function bdb_ZclIdentifyCmdInd
   \   0001BC   85..82       MOV       DPL,?V2
   \   0001BF   85..83       MOV       DPH,?V3
   \   0001C2   E0           MOVX      A,@DPTR
   \   0001C3   F8           MOV       R0,A
   \   0001C4   12....       LCALL     ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_104:
   \   0001C7   85..82       MOV       DPL,?XSP + 0
   \   0001CA   85..83       MOV       DPH,?XSP + 1
   \   0001CD   12....       LCALL     ??Subroutine224_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_462:
   \   0001D0   12....       LCALL     `??bdb_ZclIdentifyCmdInd::?relay`; Banked call to: bdb_ZclIdentifyCmdInd
   \   0001D3   02....       LJMP      ??CrossCallReturnLabel_9 & 0xFFFF
   \                     ??zclProcessInWriteCmd_13:
   \   0001D6                ; Setup parameters for call to function zclWriteAttrData
   \   0001D6   78..         MOV       R0,#?V0
   \   0001D8   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001DB   7404         MOV       A,#0x4
   \   0001DD   12....       LCALL     ?XSTACK_DISP102_8
   \   0001E0   12....       LCALL     ?Subroutine126 & 0xFFFF
   \                     ??CrossCallReturnLabel_218:
   \   0001E3   12....       LCALL     `??zclWriteAttrData::?relay`; Banked call to: zclWriteAttrData
   \   0001E6   8017         SJMP      ??zclProcessInWriteCmd_14
   \                     ??zclProcessInWriteCmd_11:
   \   0001E8                ; Setup parameters for call to function zclWriteAttrDataUsingCB
   \   0001E8   85..82       MOV       DPL,?V0
   \   0001EB   85..83       MOV       DPH,?V1
   \   0001EE   A3           INC       DPTR
   \   0001EF   A3           INC       DPTR
   \   0001F0   A3           INC       DPTR
   \   0001F1   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   0001F4   7404         MOV       A,#0x4
   \   0001F6   12....       LCALL     ?XSTACK_DISP102_8
   \   0001F9   12....       LCALL     ?Subroutine126 & 0xFFFF
   \                     ??CrossCallReturnLabel_219:
   \   0001FC   12....       LCALL     `??zclWriteAttrDataUsingCB::?relay`; Banked call to: zclWriteAttrDataUsingCB
   \                     ??zclProcessInWriteCmd_14:
   \   0001FF   7402         MOV       A,#0x2
   \   000201   12....       LCALL     ?DEALLOC_XSTACK8
   \   000204   E9           MOV       A,R1
   \   000205   A2..         MOV       C,?VB.0
   \   000207   4003         JC        $+5
   \   000209   02....       LJMP      ??CrossCallReturnLabel_9 & 0xFFFF
   \   00020C   7003         JNZ       $+5
   \   00020E   02....       LJMP      ??CrossCallReturnLabel_9 & 0xFFFF
   \   000211   85..82       MOV       DPL,?V12
   \   000214   85..83       MOV       DPH,?V13
   \   000217   02....       LJMP      ??zclProcessInWriteCmd_5 & 0xFFFF
   \                     ??zclProcessInWriteCmd_10:
   \   00021A   A2..         MOV       C,?VB.0
   \   00021C   4003         JC        $+5
   \   00021E   02....       LJMP      ??CrossCallReturnLabel_9 & 0xFFFF
   \   000221   85..82       MOV       DPL,?V12
   \   000224   85..83       MOV       DPH,?V13
   \   000227   748D         MOV       A,#-0x73
   \   000229   02....       LJMP      ??zclProcessInWriteCmd_5 & 0xFFFF
   4638          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   12....       LCALL     ?Subroutine147 & 0xFFFF
   \                     ??CrossCallReturnLabel_262:
   \   000003   12....       LCALL     ?Subroutine172 & 0xFFFF
   \                     ??CrossCallReturnLabel_494:
   \   000006   85..82       MOV       DPL,?V8
   \   000009   85..83       MOV       DPH,?V9
   \   00000C   E8           MOV       A,R0
   \   00000D   F0           MOVX      @DPTR,A
   \   00000E   A3           INC       DPTR
   \   00000F   E9           MOV       A,R1
   \   000010   F0           MOVX      @DPTR,A
   \   000011   0E           INC       R6
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine126:
   \   000000   E5..         MOV       A,?V6
   \   000002   12....       LCALL     ??Subroutine250_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_628:
   \   000005   35..         ADDC      A,?V7
   \   000007   FB           MOV       R3,A
   \   000008   12....       LCALL     ?Subroutine186 & 0xFFFF
   \                     ??CrossCallReturnLabel_564:
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine117:
   \   000000   85..82       MOV       DPL,?V2
   \   000003   85..83       MOV       DPH,?V3
   \   000006                REQUIRE ??Subroutine239_0
   \   000006                ; // Fall through to label ??Subroutine239_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine83:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   12....       LCALL     ?Subroutine185 & 0xFFFF
   \                     ??CrossCallReturnLabel_559:
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine61:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004   12....       LCALL     ?Subroutine159 & 0xFFFF
   \                     ??CrossCallReturnLabel_569:
   \   000007   12....       LCALL     ?Subroutine189 & 0xFFFF
   \                     ??CrossCallReturnLabel_630:
   \   00000A   3F           ADDC      A,R7
   \   00000B   FB           MOV       R3,A
   \   00000C   EE           MOV       A,R6
   \   00000D   12....       LCALL     ?Subroutine187 & 0xFFFF
   \                     ??CrossCallReturnLabel_599:
   \   000010   3F           ADDC      A,R7
   \   000011   F583         MOV       DPH,A
   \   000013   E0           MOVX      A,@DPTR
   \   000014   F9           MOV       R1,A
   \   000015   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine241_0:
   \   000000   12....       LCALL     ??Subroutine242_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_572:
   \   000003   85..82       MOV       DPL,?V6
   \   000006   85..83       MOV       DPH,?V7
   \   000009   12....       LCALL     ?Subroutine170 & 0xFFFF
   \                     ??CrossCallReturnLabel_612:
   \   00000C   12....       LCALL     ?Subroutine186 & 0xFFFF
   \                     ??CrossCallReturnLabel_565:
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine186:
   \   000000   E5..         MOV       A,?V6
   \   000002   2414         ADD       A,#0x14
   \   000004   F582         MOV       DPL,A
   \   000006   E4           CLR       A
   \   000007   35..         ADDC      A,?V7
   \   000009   F583         MOV       DPH,A
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   F9           MOV       R1,A
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine189:
   \   000000   EE           MOV       A,R6
   \   000001                REQUIRE ??Subroutine250_0
   \   000001                ; // Fall through to label ??Subroutine250_0
   4639          
   4640          /*********************************************************************
   4641           * @fn      zclRevertWriteUndividedCmd
   4642           *
   4643           * @brief   Revert the "Profile" Write Undevided Command
   4644           *
   4645           * @param   pInMsg - incoming message to process
   4646           * @param   curWriteRec - old data
   4647           * @param   numAttr - number of attributes to be reverted
   4648           *
   4649           * @return  none
   4650           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4651          static void zclRevertWriteUndividedCmd( zclIncoming_t *pInMsg,
   \                     zclRevertWriteUndividedCmd:
   4652                                              zclWriteRec_t *curWriteRec, uint16 numAttr )
   4653          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV       A,#-0x8
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V2,R2
   \   00000C   8B..         MOV       ?V3,R3
   \   00000E   8C..         MOV       ?V10,R4
   \   000010   8D..         MOV       ?V11,R5
   4654            uint8 i;
   4655          
   4656            for ( i = 0; i < numAttr; i++ )
   \   000012   75..00       MOV       ?V0,#0x0
   \   000015   741C         MOV       A,#0x1c
   \   000017   12....       LCALL     ?XSTACK_DISP0_8
   \   00001A   12....       LCALL     ??Subroutine233_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_539:
   \   00001D   802F         SJMP      ??zclRevertWriteUndividedCmd_0
   4657            {
   4658              zclAttrRec_t attrRec;
   4659              zclWriteRec_t *statusRec = &(curWriteRec[i]);
   4660          
   4661              if ( !zclFindAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId,
   4662                                    statusRec->attrID, &attrRec ) )
   4663              {
   4664                break; // should never happen
   4665              }
   4666          
   4667              if ( attrRec.attr.dataPtr != NULL )
   4668              {
   4669                // Just copy the old data back - no need to validate the data
   4670                uint16 dataLen = zclGetAttrDataLength( attrRec.attr.dataType, statusRec->attrData );
   4671                zcl_memcpy( attrRec.attr.dataPtr, statusRec->attrData, dataLen );
   4672              }
   4673              else // Use CB
   4674              {
   4675                // Write the old data back
   4676                zclWriteAttrDataUsingCB( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
   4677                                         &attrRec, statusRec->attrData );
   \                     ??zclRevertWriteUndividedCmd_1:
   \   00001F   85..82       MOV       DPL,?V2
   \   000022   85..83       MOV       DPH,?V3
   \   000025   12....       LCALL     ??Subroutine232_0 & 0xFFFF
   4678              }
   \                     ??CrossCallReturnLabel_531:
   \   000028                ; Setup parameters for call to function zclWriteAttrDataUsingCB
   \   000028   8A..         MOV       ?V4,R2
   \   00002A   8B..         MOV       ?V5,R3
   \   00002C   78..         MOV       R0,#?V4
   \   00002E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000031   7402         MOV       A,#0x2
   \   000033   12....       LCALL     ?XSTACK_DISP102_8
   \   000036   12....       LCALL     ?Subroutine189 & 0xFFFF
   \                     ??CrossCallReturnLabel_629:
   \   000039   3F           ADDC      A,R7
   \   00003A   FB           MOV       R3,A
   \   00003B   EE           MOV       A,R6
   \   00003C   12....       LCALL     ?Subroutine129 & 0xFFFF
   \                     ??CrossCallReturnLabel_228:
   \   00003F   3F           ADDC      A,R7
   \   000040   F583         MOV       DPH,A
   \   000042   E0           MOVX      A,@DPTR
   \   000043   F9           MOV       R1,A
   \   000044   12....       LCALL     `??zclWriteAttrDataUsingCB::?relay`; Banked call to: zclWriteAttrDataUsingCB
   \   000047   7402         MOV       A,#0x2
   \   000049   12....       LCALL     ?DEALLOC_XSTACK8
   \                     ??zclRevertWriteUndividedCmd_2:
   \   00004C   05..         INC       ?V0
   \                     ??zclRevertWriteUndividedCmd_0:
   \   00004E   C3           CLR       C
   \   00004F   E5..         MOV       A,?V0
   \   000051   95..         SUBB      A,?V8
   \   000053   E4           CLR       A
   \   000054   95..         SUBB      A,?V9
   \   000056   4003         JC        $+5
   \   000058   02....       LJMP      ??zclRevertWriteUndividedCmd_3 & 0xFFFF
   \   00005B   E5..         MOV       A,?V0
   \   00005D   75F005       MOV       B,#0x5
   \   000060   A4           MUL       AB
   \   000061   F8           MOV       R0,A
   \   000062   A9F0         MOV       R1,B
   \   000064   E5..         MOV       A,?V10
   \   000066   28           ADD       A,R0
   \   000067   FE           MOV       R6,A
   \   000068   E5..         MOV       A,?V11
   \   00006A   39           ADDC      A,R1
   \   00006B   FF           MOV       R7,A
   \   00006C   85..82       MOV       DPL,?V2
   \   00006F   85..83       MOV       DPH,?V3
   \   000072   12....       LCALL     ?Subroutine104 & 0xFFFF
   \                     ??CrossCallReturnLabel_176:
   \   000075                ; Setup parameters for call to function zclFindAttrRec
   \   000075   A8..         MOV       R0,?XSP + 0
   \   000077   A9..         MOV       R1,?XSP + 1
   \   000079   88..         MOV       ?V6,R0
   \   00007B   89..         MOV       ?V7,R1
   \   00007D   78..         MOV       R0,#?V6
   \   00007F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000082   8E82         MOV       DPL,R6
   \   000084   8F83         MOV       DPH,R7
   \   000086   12....       LCALL     ??Subroutine235_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_545:
   \   000089   85..82       MOV       DPL,?V4
   \   00008C   85..83       MOV       DPH,?V5
   \   00008F   12....       LCALL     ??Subroutine222_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_467:
   \   000092   E5..         MOV       A,?V4
   \   000094   12....       LCALL     ?Subroutine129 & 0xFFFF
   \                     ??CrossCallReturnLabel_229:
   \   000097   35..         ADDC      A,?V5
   \   000099   F583         MOV       DPH,A
   \   00009B   E0           MOVX      A,@DPTR
   \   00009C   F9           MOV       R1,A
   \   00009D   12....       LCALL     `??zclFindAttrRec::?relay`; Banked call to: zclFindAttrRec
   \   0000A0   7402         MOV       A,#0x2
   \   0000A2   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000A5   E9           MOV       A,R1
   \   0000A6   604D         JZ        ??zclRevertWriteUndividedCmd_3
   \   0000A8   EE           MOV       A,R6
   \   0000A9   2403         ADD       A,#0x3
   \   0000AB   F5..         MOV       ?V4,A
   \   0000AD   E4           CLR       A
   \   0000AE   3F           ADDC      A,R7
   \   0000AF   F5..         MOV       ?V5,A
   \   0000B1   85..82       MOV       DPL,?V4
   \   0000B4   F583         MOV       DPH,A
   \   0000B6   12....       LCALL     ??Subroutine224_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_463:
   \   0000B9   7406         MOV       A,#0x6
   \   0000BB   12....       LCALL     ?XSTACK_DISP0_8
   \   0000BE   12....       LCALL     ??Subroutine232_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_532:
   \   0000C1   EE           MOV       A,R6
   \   0000C2   4F           ORL       A,R7
   \   0000C3   7003         JNZ       $+5
   \   0000C5   02....       LJMP      ??zclRevertWriteUndividedCmd_1 & 0xFFFF
   \   0000C8                ; Setup parameters for call to function zclGetAttrDataLength
   \   0000C8   7404         MOV       A,#0x4
   \   0000CA   12....       LCALL     ?XSTACK_DISP0_8
   \   0000CD   E0           MOVX      A,@DPTR
   \   0000CE   F9           MOV       R1,A
   \   0000CF   12....       LCALL     `??zclGetAttrDataLength::?relay`; Banked call to: zclGetAttrDataLength
   \   0000D2   8A..         MOV       ?V6,R2
   \   0000D4   8B..         MOV       ?V7,R3
   \   0000D6   AC..         MOV       R4,?V6
   \   0000D8   AD..         MOV       R5,?V7
   \   0000DA                ; Setup parameters for call to function osal_memcpy
   \   0000DA   85..82       MOV       DPL,?V4
   \   0000DD   85..83       MOV       DPH,?V5
   \   0000E0   12....       LCALL     ?Subroutine65 & 0xFFFF
   4679            } // for loop
   \                     ??CrossCallReturnLabel_107:
   \   0000E3   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000E6   EE           MOV       A,R6
   \   0000E7   FA           MOV       R2,A
   \   0000E8   EF           MOV       A,R7
   \   0000E9   FB           MOV       R3,A
   \   0000EA   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000ED   7403         MOV       A,#0x3
   \   0000EF   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000F2   02....       LJMP      ??zclRevertWriteUndividedCmd_2 & 0xFFFF
   4680          }
   \                     ??zclRevertWriteUndividedCmd_3:
   \   0000F5   7408         MOV       A,#0x8
   \   0000F7   80..         SJMP      ??Subroutine236_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine236_0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine237_0
   \   000003                ; // Fall through to label ??Subroutine237_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine104:
   \   000000   12....       LCALL     ?Subroutine172 & 0xFFFF
   \                     ??CrossCallReturnLabel_499:
   \   000003   88..         MOV       ?V4,R0
   \   000005   89..         MOV       ?V5,R1
   \   000007   22           RET
   4681          
   4682          /*********************************************************************
   4683           * @fn      zclProcessInWriteUndividedCmd
   4684           *
   4685           * @brief   Process the "Profile" Write Undivided Command
   4686           *
   4687           * @param   pInMsg - incoming message to process
   4688           *
   4689           * @return  TRUE if command processed. FALSE, otherwise.
   4690           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4691          static uint8 zclProcessInWriteUndividedCmd( zclIncoming_t *pInMsg )
   \                     zclProcessInWriteUndividedCmd:
   4692          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV       A,#-0x18
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV       A,#-0xc
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V4,R2
   \   00000C   8B..         MOV       ?V5,R3
   4693            zclWriteCmd_t *writeCmd;
   4694            zclWriteRspCmd_t *writeRspCmd;
   4695            zclAttrRec_t attrRec;
   4696            uint16 dataLen;
   4697            uint16 curLen = 0;
   \   00000E   75..00       MOV       ?V8,#0x0
   \   000011   75..00       MOV       ?V9,#0x0
   4698            uint8 j = 0;
   \   000014   7E00         MOV       R6,#0x0
   4699            uint8 i;
   4700          
   4701            writeCmd = (zclWriteCmd_t *)pInMsg->attrCmd;
   \   000016   EA           MOV       A,R2
   \   000017   12....       LCALL     ??Subroutine245_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_586:
   \   00001A   35..         ADDC      A,?V5
   \   00001C   F583         MOV       DPH,A
   \   00001E   12....       LCALL     ??Subroutine228_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_489:
   \   000021   7402         MOV       A,#0x2
   \   000023   12....       LCALL     ?XSTACK_DISP0_8
   \   000026   12....       LCALL     ??Subroutine230_0 & 0xFFFF
   4702          
   4703            // Allocate space for Write Response Command
   4704            writeRspCmd = (zclWriteRspCmd_t *)zcl_mem_alloc( sizeof( zclWriteRspCmd_t )
   4705                             + sizeof( zclWriteRspStatus_t )* writeCmd->numAttr );
   \                     ??CrossCallReturnLabel_522:
   \   000029                ; Setup parameters for call to function osal_mem_alloc
   \   000029   7402         MOV       A,#0x2
   \   00002B   12....       LCALL     ?XSTACK_DISP0_8
   \   00002E   12....       LCALL     ?Subroutine157 & 0xFFFF
   \                     ??CrossCallReturnLabel_282:
   \   000031   12....       LCALL     ?Subroutine83 & 0xFFFF
   \                     ??CrossCallReturnLabel_140:
   \   000034   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000037   8A..         MOV       ?V0,R2
   \   000039   8B..         MOV       ?V1,R3
   4706            if ( writeRspCmd == NULL )
   \   00003B   EA           MOV       A,R2
   \   00003C   45..         ORL       A,?V1
   \   00003E   7003         JNZ       $+5
   \   000040   02....       LJMP      ??zclProcessInWriteUndividedCmd_0 & 0xFFFF
   4707            {
   4708              return FALSE; // EMBEDDED RETURN
   4709            }
   4710          
   4711            // If any attribute cannot be written, no attribute values are changed. Hence,
   4712            // make sure all the attributes are supported and writable
   4713            for ( i = 0; i < writeCmd->numAttr; i++ )
   \   000043   7F00         MOV       R7,#0x0
   \   000045   8043         SJMP      ??zclProcessInWriteUndividedCmd_1
   4714            {
   4715              zclWriteRec_t *statusRec = &(writeCmd->attrList[i]);
   4716          
   4717              if ( !zclFindAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId,
   4718                                    statusRec->attrID, &attrRec ) )
   4719              {
   4720                // Attribute is not supported - stop here
   4721                writeRspCmd->attrList[j].status = ZCL_STATUS_UNSUPPORTED_ATTRIBUTE;
   4722                writeRspCmd->attrList[j++].attrID = statusRec->attrID;
   4723                break;
   4724              }
   4725          
   4726              if ( statusRec->dataType != attrRec.attr.dataType )
   4727              {
   4728                // Attribute data type is incorrect - stope here
   4729                writeRspCmd->attrList[j].status = ZCL_STATUS_INVALID_DATA_TYPE;
   4730                writeRspCmd->attrList[j++].attrID = statusRec->attrID;
   4731                break;
   4732              }
   4733          
   4734              if ( !zcl_AccessCtrlWrite( attrRec.attr.accessControl ) )
   4735              {
   4736                // Attribute is not writable - stop here
   4737                writeRspCmd->attrList[j].status = ZCL_STATUS_READ_ONLY;
   4738                writeRspCmd->attrList[j++].attrID = statusRec->attrID;
   4739                break;
   4740              }
   4741          
   4742              if ( zcl_AccessCtrlAuthWrite( attrRec.attr.accessControl ) )
   4743              {
   4744                // Not authorized to write - stop here
   4745                writeRspCmd->attrList[j].status = ZCL_STATUS_NOT_AUTHORIZED;
   4746                writeRspCmd->attrList[j++].attrID = statusRec->attrID;
   4747                break;
   4748              }
   4749          
   4750              // Attribute Data length
   4751              if ( attrRec.attr.dataPtr != NULL )
   4752              {
   4753                dataLen = zclGetAttrDataLength( attrRec.attr.dataType, attrRec.attr.dataPtr );
   4754              }
   4755              else // Use CB
   4756              {
   4757                dataLen = zclGetAttrDataLengthUsingCB( pInMsg->msg->endPoint, pInMsg->msg->clusterId,
   4758                                                       statusRec->attrID );
   \                     ??zclProcessInWriteUndividedCmd_2:
   \   000047   85..82       MOV       DPL,?V4
   \   00004A   85..83       MOV       DPH,?V5
   \   00004D   12....       LCALL     ?Subroutine84 & 0xFFFF
   4759              }
   \                     ??CrossCallReturnLabel_142:
   \   000050   FC           MOV       R4,A
   \   000051   A3           INC       DPTR
   \   000052   E0           MOVX      A,@DPTR
   \   000053   FD           MOV       R5,A
   \   000054   8882         MOV       DPL,R0
   \   000056   8983         MOV       DPH,R1
   \   000058   12....       LCALL     ??Subroutine222_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_468:
   \   00005B   12....       LCALL     ?Subroutine127 & 0xFFFF
   \                     ??CrossCallReturnLabel_222:
   \   00005E   12....       LCALL     `??zclGetAttrDataLengthUsingCB::?relay`; Banked call to: zclGetAttrDataLengthUsingCB
   \                     ??zclProcessInWriteUndividedCmd_3:
   \   000061   85..82       MOV       DPL,?XSP + 0
   \   000064   85..83       MOV       DPH,?XSP + 1
   \   000067   12....       LCALL     ??Subroutine244_0 & 0xFFFF
   4760          
   4761              // add padding if needed
   4762              if ( PADDING_NEEDED( dataLen ) )
   \                     ??CrossCallReturnLabel_578:
   \   00006A   85..82       MOV       DPL,?XSP + 0
   \   00006D   85..83       MOV       DPH,?XSP + 1
   \   000070   E0           MOVX      A,@DPTR
   \   000071   A2E0         MOV       C,0xE0 /* A   */.0
   \   000073   5003         JNC       ??CrossCallReturnLabel_255
   4763              {
   4764                dataLen++;
   \   000075   12....       LCALL     ?Subroutine143 & 0xFFFF
   4765              }
   4766          
   4767              curLen += dataLen;
   \                     ??CrossCallReturnLabel_255:
   \   000078   85..82       MOV       DPL,?XSP + 0
   \   00007B   85..83       MOV       DPH,?XSP + 1
   \   00007E   E0           MOVX      A,@DPTR
   \   00007F   25..         ADD       A,?V8
   \   000081   F5..         MOV       ?V8,A
   \   000083   A3           INC       DPTR
   \   000084   E0           MOVX      A,@DPTR
   \   000085   35..         ADDC      A,?V9
   \   000087   F5..         MOV       ?V9,A
   \   000089   0F           INC       R7
   \                     ??zclProcessInWriteUndividedCmd_1:
   \   00008A   7402         MOV       A,#0x2
   \   00008C   12....       LCALL     ?XSTACK_DISP0_8
   \   00008F   12....       LCALL     ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_129:
   \   000092   5043         JNC       ??zclProcessInWriteUndividedCmd_4
   \   000094   EF           MOV       A,R7
   \   000095   75F005       MOV       B,#0x5
   \   000098   A4           MUL       AB
   \   000099   F8           MOV       R0,A
   \   00009A   A9F0         MOV       R1,B
   \   00009C   7402         MOV       A,#0x2
   \   00009E   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A1   12....       LCALL     ?Subroutine71 & 0xFFFF
   \                     ??CrossCallReturnLabel_118:
   \   0000A4   12....       LCALL     ?Subroutine116 & 0xFFFF
   \                     ??CrossCallReturnLabel_201:
   \   0000A7   12....       LCALL     ?XSTACK_DISP100_8
   \   0000AA   88..         MOV       ?V10,R0
   \   0000AC   89..         MOV       ?V11,R1
   \   0000AE   78..         MOV       R0,#?V10
   \   0000B0   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000B3   12....       LCALL     ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_561:
   \   0000B6   12....       LCALL     `??zclFindAttrRec::?relay`; Banked call to: zclFindAttrRec
   \   0000B9   7402         MOV       A,#0x2
   \   0000BB   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000BE   E9           MOV       A,R1
   \   0000BF   7047         JNZ       ??zclProcessInWriteUndividedCmd_5
   \   0000C1   85..82       MOV       DPL,?V0
   \   0000C4   85..83       MOV       DPH,?V1
   \   0000C7   A3           INC       DPTR
   \   0000C8   7486         MOV       A,#-0x7a
   \                     ??zclProcessInWriteUndividedCmd_6:
   \   0000CA   12....       LCALL     ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   0000CD   12....       LCALL     ?Subroutine91 & 0xFFFF
   \                     ??CrossCallReturnLabel_153:
   \   0000D0   A3           INC       DPTR
   \   0000D1   A3           INC       DPTR
   \   0000D2   12....       LCALL     ??Subroutine230_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_523:
   \   0000D5   7E01         MOV       R6,#0x1
   4768            } // for loop
   4769          
   4770            writeRspCmd->numAttr = j;
   \                     ??zclProcessInWriteUndividedCmd_4:
   \   0000D7   EE           MOV       A,R6
   \   0000D8   85..82       MOV       DPL,?V0
   \   0000DB   85..83       MOV       DPH,?V1
   \   0000DE   F0           MOVX      @DPTR,A
   4771            if ( writeRspCmd->numAttr == 0 ) // All attributes can be written
   \   0000DF   6003         JZ        $+5
   \   0000E1   02....       LJMP      ??zclProcessInWriteUndividedCmd_7 & 0xFFFF
   4772            {
   4773              uint8 *curDataPtr;
   4774              zclWriteRec_t *curWriteRec;
   4775          
   4776              // calculate the length of the current data header
   4777              uint8 hdrLen = j * sizeof( zclWriteRec_t );
   \   0000E4   75F005       MOV       B,#0x5
   \   0000E7   A4           MUL       AB
   \   0000E8   FF           MOV       R7,A
   4778          
   4779              // Allocate space to keep a copy of the current data
   4780              curWriteRec = (zclWriteRec_t *) zcl_mem_alloc( hdrLen + curLen );
   \   0000E9                ; Setup parameters for call to function osal_mem_alloc
   \   0000E9   25..         ADD       A,?V8
   \   0000EB   FA           MOV       R2,A
   \   0000EC   E4           CLR       A
   \   0000ED   35..         ADDC      A,?V9
   \   0000EF   FB           MOV       R3,A
   \   0000F0   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0000F3   8A..         MOV       ?V14,R2
   \   0000F5   8B..         MOV       ?V15,R3
   4781              if ( curWriteRec == NULL )
   \   0000F7   EA           MOV       A,R2
   \   0000F8   45..         ORL       A,?V15
   \   0000FA   705C         JNZ       ??zclProcessInWriteUndividedCmd_8
   4782              {
   4783                zcl_mem_free(writeRspCmd );
   \   0000FC                ; Setup parameters for call to function osal_mem_free
   \   0000FC   AA..         MOV       R2,?V0
   \   0000FE   AB..         MOV       R3,?V1
   \   000100   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   4784                return FALSE; // EMBEDDED RETURN
   \                     ??zclProcessInWriteUndividedCmd_0:
   \   000103   7900         MOV       R1,#0x0
   \   000105   02....       LJMP      ??zclProcessInWriteUndividedCmd_9 & 0xFFFF
   4785              }
   \                     ??zclProcessInWriteUndividedCmd_5:
   \   000108   7408         MOV       A,#0x8
   \   00010A   12....       LCALL     ?XSTACK_DISP0_8
   \   00010D   12....       LCALL     ??Subroutine226_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_475:
   \   000110   A3           INC       DPTR
   \   000111   A3           INC       DPTR
   \   000112   E0           MOVX      A,@DPTR
   \   000113   69           XRL       A,R1
   \   000114   600B         JZ        ??zclProcessInWriteUndividedCmd_10
   \   000116   85..82       MOV       DPL,?V0
   \   000119   85..83       MOV       DPH,?V1
   \   00011C   A3           INC       DPTR
   \   00011D   748D         MOV       A,#-0x73
   \   00011F   80A9         SJMP      ??zclProcessInWriteUndividedCmd_6
   \                     ??zclProcessInWriteUndividedCmd_10:
   \   000121   7409         MOV       A,#0x9
   \   000123   12....       LCALL     ?XSTACK_DISP0_8
   \   000126   E0           MOVX      A,@DPTR
   \   000127   A2E1         MOV       C,0xE0 /* A   */.1
   \   000129   400B         JC        ??zclProcessInWriteUndividedCmd_11
   \   00012B   85..82       MOV       DPL,?V0
   \   00012E   85..83       MOV       DPH,?V1
   \   000131   A3           INC       DPTR
   \   000132   7488         MOV       A,#-0x78
   \   000134   8094         SJMP      ??zclProcessInWriteUndividedCmd_6
   \                     ??zclProcessInWriteUndividedCmd_11:
   \   000136   A2E5         MOV       C,0xE0 /* A   */.5
   \   000138   500B         JNC       ??zclProcessInWriteUndividedCmd_12
   \   00013A   85..82       MOV       DPL,?V0
   \   00013D   85..83       MOV       DPH,?V1
   \   000140   A3           INC       DPTR
   \   000141   747E         MOV       A,#0x7e
   \   000143   8085         SJMP      ??zclProcessInWriteUndividedCmd_6
   \                     ??zclProcessInWriteUndividedCmd_12:
   \   000145   740A         MOV       A,#0xa
   \   000147   12....       LCALL     ?XSTACK_DISP0_8
   \   00014A   12....       LCALL     ??Subroutine199_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_354:
   \   00014D   7003         JNZ       $+5
   \   00014F   02....       LJMP      ??zclProcessInWriteUndividedCmd_2 & 0xFFFF
   \   000152                ; Setup parameters for call to function zclGetAttrDataLength
   \   000152   12....       LCALL     `??zclGetAttrDataLength::?relay`; Banked call to: zclGetAttrDataLength
   \   000155   02....       LJMP      ??zclProcessInWriteUndividedCmd_3 & 0xFFFF
   4786          
   4787              curDataPtr = (uint8 *)((uint8 *)curWriteRec + hdrLen);
   \                     ??zclProcessInWriteUndividedCmd_8:
   \   000158   EA           MOV       A,R2
   \   000159   2F           ADD       A,R7
   \   00015A   F5..         MOV       ?V8,A
   \   00015C   E4           CLR       A
   \   00015D   3B           ADDC      A,R3
   \   00015E   F5..         MOV       ?V9,A
   4788          
   4789              // Write the new data over
   4790              for ( i = 0; i < writeCmd->numAttr; i++ )
   \   000160   7F00         MOV       R7,#0x0
   \   000162   801C         SJMP      ??zclProcessInWriteUndividedCmd_13
   4791              {
   4792                uint8 status;
   4793                zclWriteRec_t *statusRec = &(writeCmd->attrList[i]);
   4794                zclWriteRec_t *curStatusRec = &(curWriteRec[i]);
   4795          
   4796                if ( !zclFindAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId,
   4797                                      statusRec->attrID, &attrRec ) )
   4798                {
   4799                  break; // should never happen
   4800                }
   4801          
   4802                // Keep a copy of the current data before before writing the new data over
   4803                curStatusRec->attrID = statusRec->attrID;
   4804                curStatusRec->attrData = curDataPtr;
   4805          
   4806                if ( attrRec.attr.dataPtr != NULL )
   4807                {
   4808                  // Read the current value
   4809                  zclReadAttrData( curDataPtr, &attrRec, &dataLen );
   4810          
   4811                  // Write the new attribute value
   4812                  status = zclWriteAttrData( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
   4813                                             &attrRec, statusRec );
   4814                }
   4815                else // Use CBs
   4816                {
   4817                  // Read the current value
   4818                  zclReadAttrDataUsingCB( pInMsg->msg->endPoint, pInMsg->msg->clusterId,
   4819                                          statusRec->attrID, curDataPtr, &dataLen );
   4820                  // Write the new attribute value
   4821                  status = zclWriteAttrDataUsingCB( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
   4822                                                    &attrRec, statusRec->attrData );
   4823                }
   4824          
   4825                // If successful, a write attribute status record shall NOT be generated
   4826                if ( status != ZCL_STATUS_SUCCESS )
   4827                {
   4828                  writeRspCmd->attrList[j].status = status;
   4829                  writeRspCmd->attrList[j++].attrID = statusRec->attrID;
   4830          
   4831                  // Since this write failed, we need to revert all the pervious writes
   4832                  zclRevertWriteUndividedCmd( pInMsg, curWriteRec, i);
   4833                  break;
   4834                }
   4835          
   4836                // add padding if needed
   4837                if ( PADDING_NEEDED( dataLen ) )
   \                     ??zclProcessInWriteUndividedCmd_14:
   \   000164   85..82       MOV       DPL,?XSP + 0
   \   000167   85..83       MOV       DPH,?XSP + 1
   \   00016A   E0           MOVX      A,@DPTR
   \   00016B   A2E0         MOV       C,0xE0 /* A   */.0
   \   00016D   5003         JNC       ??CrossCallReturnLabel_256
   4838                {
   4839                  dataLen++;
   \   00016F   12....       LCALL     ?Subroutine143 & 0xFFFF
   4840                }
   4841          
   4842                curDataPtr += dataLen;
   \                     ??CrossCallReturnLabel_256:
   \   000172   12....       LCALL     ?Subroutine105 & 0xFFFF
   \                     ??CrossCallReturnLabel_493:
   \   000175   E5..         MOV       A,?V8
   \   000177   28           ADD       A,R0
   \   000178   F5..         MOV       ?V8,A
   \   00017A   E5..         MOV       A,?V9
   \   00017C   39           ADDC      A,R1
   \   00017D   F5..         MOV       ?V9,A
   \   00017F   0F           INC       R7
   \                     ??zclProcessInWriteUndividedCmd_13:
   \   000180   7402         MOV       A,#0x2
   \   000182   12....       LCALL     ?XSTACK_DISP0_8
   \   000185   12....       LCALL     ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_130:
   \   000188   4003         JC        $+5
   \   00018A   02....       LJMP      ??zclProcessInWriteUndividedCmd_15 & 0xFFFF
   \   00018D   EF           MOV       A,R7
   \   00018E   75F005       MOV       B,#0x5
   \   000191   A4           MUL       AB
   \   000192   F8           MOV       R0,A
   \   000193   A9F0         MOV       R1,B
   \   000195   7402         MOV       A,#0x2
   \   000197   12....       LCALL     ?XSTACK_DISP0_8
   \   00019A   12....       LCALL     ?Subroutine71 & 0xFFFF
   \                     ??CrossCallReturnLabel_119:
   \   00019D   E5..         MOV       A,?V14
   \   00019F   28           ADD       A,R0
   \   0001A0   F5..         MOV       ?V12,A
   \   0001A2   E5..         MOV       A,?V15
   \   0001A4   39           ADDC      A,R1
   \   0001A5   F5..         MOV       ?V13,A
   \   0001A7   12....       LCALL     ?Subroutine116 & 0xFFFF
   \                     ??CrossCallReturnLabel_202:
   \   0001AA   12....       LCALL     ?XSTACK_DISP100_8
   \   0001AD   88..         MOV       ?V10,R0
   \   0001AF   89..         MOV       ?V11,R1
   \   0001B1   78..         MOV       R0,#?V10
   \   0001B3   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001B6   12....       LCALL     ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_562:
   \   0001B9   12....       LCALL     `??zclFindAttrRec::?relay`; Banked call to: zclFindAttrRec
   \   0001BC   7402         MOV       A,#0x2
   \   0001BE   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001C1   E9           MOV       A,R1
   \   0001C2   7003         JNZ       $+5
   \   0001C4   02....       LJMP      ??zclProcessInWriteUndividedCmd_15 & 0xFFFF
   \   0001C7   85..82       MOV       DPL,?V2
   \   0001CA   85..83       MOV       DPH,?V3
   \   0001CD   12....       LCALL     ??Subroutine228_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_490:
   \   0001D0   85..82       MOV       DPL,?V12
   \   0001D3   85..83       MOV       DPH,?V13
   \   0001D6   12....       LCALL     ??Subroutine230_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_524:
   \   0001D9   85..82       MOV       DPL,?V12
   \   0001DC   85..83       MOV       DPH,?V13
   \   0001DF   A3           INC       DPTR
   \   0001E0   A3           INC       DPTR
   \   0001E1   A3           INC       DPTR
   \   0001E2   E5..         MOV       A,?V8
   \   0001E4   F0           MOVX      @DPTR,A
   \   0001E5   A3           INC       DPTR
   \   0001E6   E5..         MOV       A,?V9
   \   0001E8   F0           MOVX      @DPTR,A
   \   0001E9   740A         MOV       A,#0xa
   \   0001EB   12....       LCALL     ?XSTACK_DISP0_8
   \   0001EE   12....       LCALL     ??Subroutine218_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_434:
   \   0001F1   6039         JZ        ??zclProcessInWriteUndividedCmd_16
   \   0001F3                ; Setup parameters for call to function zclReadAttrData
   \   0001F3   A8..         MOV       R0,?XSP + 0
   \   0001F5   A9..         MOV       R1,?XSP + 1
   \   0001F7   88..         MOV       ?V6,R0
   \   0001F9   89..         MOV       ?V7,R1
   \   0001FB   78..         MOV       R0,#?V6
   \   0001FD   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000200   7406         MOV       A,#0x6
   \   000202   12....       LCALL     ?XSTACK_DISP102_8
   \   000205   AA..         MOV       R2,?V8
   \   000207   AB..         MOV       R3,?V9
   \   000209   12....       LCALL     `??zclReadAttrData::?relay`; Banked call to: zclReadAttrData
   \   00020C   7402         MOV       A,#0x2
   \   00020E   12....       LCALL     ?DEALLOC_XSTACK8
   \   000211   85..82       MOV       DPL,?V4
   \   000214   85..83       MOV       DPH,?V5
   \   000217   12....       LCALL     ??Subroutine239_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_553:
   \   00021A                ; Setup parameters for call to function zclWriteAttrData
   \   00021A   78..         MOV       R0,#?V2
   \   00021C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00021F   7406         MOV       A,#0x6
   \   000221   12....       LCALL     ?XSTACK_DISP102_8
   \   000224   12....       LCALL     ?Subroutine126 & 0xFFFF
   \                     ??CrossCallReturnLabel_220:
   \   000227   12....       LCALL     `??zclWriteAttrData::?relay`; Banked call to: zclWriteAttrData
   \   00022A   8046         SJMP      ??zclProcessInWriteUndividedCmd_17
   \                     ??zclProcessInWriteUndividedCmd_16:
   \   00022C   85..82       MOV       DPL,?V4
   \   00022F   85..83       MOV       DPH,?V5
   \   000232   12....       LCALL     ??Subroutine239_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_554:
   \   000235                ; Setup parameters for call to function zclReadAttrDataUsingCB
   \   000235   A8..         MOV       R0,?XSP + 0
   \   000237   A9..         MOV       R1,?XSP + 1
   \   000239   88..         MOV       ?V10,R0
   \   00023B   89..         MOV       ?V11,R1
   \   00023D   78..         MOV       R0,#?V10
   \   00023F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000242   78..         MOV       R0,#?V8
   \   000244   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000247   12....       LCALL     ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_563:
   \   00024A   12....       LCALL     `??zclReadAttrDataUsingCB::?relay`; Banked call to: zclReadAttrDataUsingCB
   \   00024D   7404         MOV       A,#0x4
   \   00024F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000252   85..82       MOV       DPL,?V4
   \   000255   85..83       MOV       DPH,?V5
   \   000258   12....       LCALL     ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_145:
   \   00025B   A3           INC       DPTR
   \   00025C   A3           INC       DPTR
   \   00025D   A3           INC       DPTR
   \   00025E   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000261   7406         MOV       A,#0x6
   \   000263   12....       LCALL     ?XSTACK_DISP102_8
   \   000266   E8           MOV       A,R0
   \   000267   12....       LCALL     ??Subroutine250_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_625:
   \   00026A   39           ADDC      A,R1
   \   00026B   FB           MOV       R3,A
   \   00026C   12....       LCALL     ?Subroutine127 & 0xFFFF
   \                     ??CrossCallReturnLabel_223:
   \   00026F   12....       LCALL     `??zclWriteAttrDataUsingCB::?relay`; Banked call to: zclWriteAttrDataUsingCB
   \                     ??zclProcessInWriteUndividedCmd_17:
   \   000272   7402         MOV       A,#0x2
   \   000274   12....       LCALL     ?DEALLOC_XSTACK8
   \   000277   E9           MOV       A,R1
   \   000278   FA           MOV       R2,A
   \   000279   EA           MOV       A,R2
   \   00027A   7003         JNZ       $+5
   \   00027C   02....       LJMP      ??zclProcessInWriteUndividedCmd_14 & 0xFFFF
   \   00027F   EE           MOV       A,R6
   \   000280   75F003       MOV       B,#0x3
   \   000283   A4           MUL       AB
   \   000284   F8           MOV       R0,A
   \   000285   A9F0         MOV       R1,B
   \   000287   E5..         MOV       A,?V0
   \   000289   28           ADD       A,R0
   \   00028A   F8           MOV       R0,A
   \   00028B   E5..         MOV       A,?V1
   \   00028D   39           ADDC      A,R1
   \   00028E   F9           MOV       R1,A
   \   00028F   EA           MOV       A,R2
   \   000290   8882         MOV       DPL,R0
   \   000292   8983         MOV       DPH,R1
   \   000294   A3           INC       DPTR
   \   000295   12....       LCALL     ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   000298   12....       LCALL     ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_580:
   \   00029B   0E           INC       R6
   \   00029C                ; Setup parameters for call to function zclRevertWriteUndividedCmd
   \   00029C   EF           MOV       A,R7
   \   00029D   F5..         MOV       ?V2,A
   \   00029F   75..00       MOV       ?V3,#0x0
   \   0002A2   78..         MOV       R0,#?V2
   \   0002A4   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0002A7   AC..         MOV       R4,?V14
   \   0002A9   AD..         MOV       R5,?V15
   \   0002AB   AA..         MOV       R2,?V4
   \   0002AD   AB..         MOV       R3,?V5
   \   0002AF   12....       LCALL     `??zclRevertWriteUndividedCmd::?relay`; Banked call to: zclRevertWriteUndividedCmd
   \   0002B2   7402         MOV       A,#0x2
   \   0002B4   12....       LCALL     ?DEALLOC_XSTACK8
   4843              } // for loop
   4844          
   4845              writeRspCmd->numAttr = j;
   \                     ??zclProcessInWriteUndividedCmd_15:
   \   0002B7   EE           MOV       A,R6
   \   0002B8   85..82       MOV       DPL,?V0
   \   0002BB   85..83       MOV       DPH,?V1
   \   0002BE   F0           MOVX      @DPTR,A
   4846              if ( writeRspCmd->numAttr  == 0 )
   \   0002BF   7007         JNZ       ??zclProcessInWriteUndividedCmd_18
   4847              {
   4848                // Since all records were written successful, include a single status record
   4849                // in the resonse command with the status field set to SUCCESS and the
   4850                // attribute ID field omitted.
   4851                writeRspCmd->attrList[0].status = ZCL_STATUS_SUCCESS;
   \   0002C1   A3           INC       DPTR
   \   0002C2   E4           CLR       A
   \   0002C3   12....       LCALL     ?Subroutine147 & 0xFFFF
   4852                writeRspCmd->numAttr = 1;
   4853              }
   \                     ??CrossCallReturnLabel_263:
   \   0002C6   04           INC       A
   \   0002C7   F0           MOVX      @DPTR,A
   4854          
   4855              zcl_mem_free( curWriteRec );
   \                     ??zclProcessInWriteUndividedCmd_18:
   \   0002C8                ; Setup parameters for call to function osal_mem_free
   \   0002C8   AA..         MOV       R2,?V14
   \   0002CA   AB..         MOV       R3,?V15
   \   0002CC   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   4856            }
   4857          
   4858            zcl_SendWriteRsp( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
   4859                              pInMsg->msg->clusterId, writeRspCmd, !pInMsg->hdr.fc.direction,
   4860                              true, pInMsg->hdr.transSeqNum );
   \                     ??zclProcessInWriteUndividedCmd_7:
   \   0002CF   12....       LCALL     ?Subroutine122 & 0xFFFF
   \                     ??CrossCallReturnLabel_534:
   \   0002D2                ; Setup parameters for call to function zcl_SendWriteRsp
   \   0002D2   85..82       MOV       DPL,?V4
   \   0002D5   85..83       MOV       DPH,?V5
   \   0002D8   12....       LCALL     ??Subroutine206_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_393:
   \   0002DB   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0002DE   75..01       MOV       ?V2,#0x1
   \   0002E1   78..         MOV       R0,#?V2
   \   0002E3   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0002E6   85..82       MOV       DPL,?V4
   \   0002E9   85..83       MOV       DPH,?V5
   \   0002EC   A3           INC       DPTR
   \   0002ED   A3           INC       DPTR
   \   0002EE   12....       LCALL     ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_81:
   \   0002F1   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0002F4   78..         MOV       R0,#?V0
   \   0002F6   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0002F9   12....       LCALL     ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_87:
   \   0002FC   12....       LCALL     `??zcl_SendWriteRsp::?relay`; Banked call to: zcl_SendWriteRsp
   \   0002FF   7405         MOV       A,#0x5
   \   000301   12....       LCALL     ?DEALLOC_XSTACK8
   4861            zcl_mem_free( writeRspCmd );
   \   000304                ; Setup parameters for call to function osal_mem_free
   \   000304   AA..         MOV       R2,?V0
   \   000306   AB..         MOV       R3,?V1
   \   000308   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   4862          
   4863            return TRUE;
   \   00030B   7901         MOV       R1,#0x1
   \                     ??zclProcessInWriteUndividedCmd_9:
   \   00030D   740C         MOV       A,#0xc
   \   00030F                REQUIRE ?Subroutine5
   \   00030F                ; // Fall through to label ?Subroutine5
   4864          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine143:
   \   000000   2401         ADD       A,#0x1
   \   000002   F0           MOVX      @DPTR,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   3400         ADDC      A,#0x0
   \   000007   F0           MOVX      @DPTR,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine127:
   \   000000   E8           MOV       A,R0
   \   000001   12....       LCALL     ?Subroutine187 & 0xFFFF
   \                     ??CrossCallReturnLabel_601:
   \   000004   39           ADDC      A,R1
   \   000005   F583         MOV       DPH,A
   \   000007   E0           MOVX      A,@DPTR
   \   000008   F9           MOV       R1,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine116:
   \   000000   85..82       MOV       DPL,?V4
   \   000003   85..83       MOV       DPH,?V5
   \   000006   E0           MOVX      A,@DPTR
   \   000007   F5..         MOV       ?V6,A
   \   000009   A3           INC       DPTR
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   F5..         MOV       ?V7,A
   \   00000D                ; Setup parameters for call to function zclFindAttrRec
   \   00000D                ; Setup parameters for call to function zclFindAttrRec
   \   00000D   7404         MOV       A,#0x4
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine77:
   \   000000   12....       LCALL     ?Subroutine157 & 0xFFFF
   \                     ??CrossCallReturnLabel_285:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F8           MOV       R0,A
   \   000005   EF           MOV       A,R7
   \   000006   C3           CLR       C
   \   000007   98           SUBB      A,R0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine71:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   28           ADD       A,R0
   \   000002   FA           MOV       R2,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   39           ADDC      A,R1
   \   000006   8A82         MOV       DPL,R2
   \   000008   F583         MOV       DPH,A
   \   00000A   A3           INC       DPTR
   \   00000B   8582..       MOV       ?V2,DPL
   \   00000E   8583..       MOV       ?V3,DPH
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000   85..82       MOV       DPL,?V2
   \   000003   85..83       MOV       DPH,?V3
   \   000006                REQUIRE ??Subroutine241_0
   \   000006                ; // Fall through to label ??Subroutine241_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   85..82       MOV       DPL,?V2
   \   000004   85..83       MOV       DPH,?V3
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   12....       LCALL     ?Subroutine169 & 0xFFFF
   \                     ??CrossCallReturnLabel_297:
   \   000003                REQUIRE ??Subroutine243_0
   \   000003                ; // Fall through to label ??Subroutine243_0
   4865          #endif // ZCL_WRITE
   4866          
   4867          #ifdef ZCL_DISCOVER
   4868          /*********************************************************************
   4869           * @fn      zclProcessInDiscAttrs
   4870           *
   4871           * @brief   Process the "Profile" Discover Attributes Commands
   4872           *
   4873           * @param   pInMsg - incoming message to process
   4874           *
   4875           * @return  TRUE if command processed. FALSE, otherwise.
   4876           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4877          static uint8 zclProcessInDiscAttrs( zclIncoming_t *pInMsg )
   \                     zclProcessInDiscAttrs:
   4878          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV       A,#-0xa
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine179 & 0xFFFF
   4879            zclDiscoverAttrsCmd_t *pDiscoverCmd;
   4880            zclAttrRec_t attrRec;
   4881            uint16 attrID;
   4882            uint8 numAttrs;
   4883            uint8 i;
   4884          
   4885            pDiscoverCmd = (zclDiscoverAttrsCmd_t *)pInMsg->attrCmd;
   \                     ??CrossCallReturnLabel_583:
   \   00000D   3F           ADDC      A,R7
   \   00000E   12....       LCALL     ?Subroutine72 & 0xFFFF
   4886          
   4887            // Find out the number of attributes supported within the specified range
   4888            for ( i = 0, attrID = pDiscoverCmd->startAttr; i < pDiscoverCmd->maxAttrIDs; i++, attrID++ )
   \                     ??CrossCallReturnLabel_474:
   \   000011   75..00       MOV       ?V2,#0x0
   \   000014   85..82       MOV       DPL,?V0
   \   000017   F583         MOV       DPH,A
   \   000019   12....       LCALL     ??Subroutine228_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_491:
   \   00001C   85..82       MOV       DPL,?XSP + 0
   \   00001F   85..83       MOV       DPH,?XSP + 1
   \   000022   E8           MOV       A,R0
   \   000023   F0           MOVX      @DPTR,A
   \   000024   A3           INC       DPTR
   \   000025   E9           MOV       A,R1
   \   000026   8010         SJMP      ??zclProcessInDiscAttrs_0
   \                     ??zclProcessInDiscAttrs_1:
   \   000028   05..         INC       ?V2
   \   00002A   85..82       MOV       DPL,?XSP + 0
   \   00002D   85..83       MOV       DPH,?XSP + 1
   \   000030   E0           MOVX      A,@DPTR
   \   000031   2401         ADD       A,#0x1
   \   000033   F0           MOVX      @DPTR,A
   \   000034   A3           INC       DPTR
   \   000035   E0           MOVX      A,@DPTR
   \   000036   3400         ADDC      A,#0x0
   \                     ??zclProcessInDiscAttrs_0:
   \   000038   12....       LCALL     ?Subroutine147 & 0xFFFF
   \                     ??CrossCallReturnLabel_264:
   \   00003B   A3           INC       DPTR
   \   00003C   A3           INC       DPTR
   \   00003D   12....       LCALL     ??Subroutine229_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_512:
   \   000040   5037         JNC       ??zclProcessInDiscAttrs_2
   4889            {
   4890              // finds the next attribute on this endpoint/cluster after the range.
   4891              // attributes must be in numerical order in the list.
   4892              if ( !zclFindNextAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, pInMsg->hdr.fc.direction, &attrID, &attrRec ) )
   \   000042   8E82         MOV       DPL,R6
   \   000044   8F83         MOV       DPH,R7
   \   000046   12....       LCALL     ?Subroutine104 & 0xFFFF
   4893              {
   4894                break;
   4895              }
   4896            }
   \                     ??CrossCallReturnLabel_177:
   \   000049                ; Setup parameters for call to function zclFindNextAttrRec
   \   000049   7402         MOV       A,#0x2
   \   00004B   12....       LCALL     ?XSTACK_DISP100_8
   \   00004E   88..         MOV       ?V6,R0
   \   000050   89..         MOV       ?V7,R1
   \   000052   78..         MOV       R0,#?V6
   \   000054   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000057   7402         MOV       A,#0x2
   \   000059   12....       LCALL     ?XSTACK_DISP100_8
   \   00005C   88..         MOV       ?V6,R0
   \   00005E   89..         MOV       ?V7,R1
   \   000060   78..         MOV       R0,#?V6
   \   000062   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000065   8E82         MOV       DPL,R6
   \   000067   8F83         MOV       DPH,R7
   \   000069   A3           INC       DPTR
   \   00006A   A3           INC       DPTR
   \   00006B   12....       LCALL     ??Subroutine247_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_592:
   \   00006E   12....       LCALL     `??zclFindNextAttrRec::?relay`; Banked call to: zclFindNextAttrRec
   \   000071   7404         MOV       A,#0x4
   \   000073   12....       LCALL     ?DEALLOC_XSTACK8
   \   000076   E9           MOV       A,R1
   \   000077   70AF         JNZ       ??zclProcessInDiscAttrs_1
   4897          
   4898            numAttrs = i;  // store range of attributes in buffer
   4899          
   4900              // Process message for either attributes or extended attributes
   4901            if( pInMsg->hdr.commandID == ZCL_CMD_DISCOVER_ATTRS )
   \                     ??zclProcessInDiscAttrs_2:
   \   000079   8E82         MOV       DPL,R6
   \   00007B   8F83         MOV       DPH,R7
   \   00007D   A3           INC       DPTR
   \   00007E   A3           INC       DPTR
   \   00007F   A3           INC       DPTR
   \   000080   A3           INC       DPTR
   \   000081   A3           INC       DPTR
   \   000082   A3           INC       DPTR
   \   000083   A3           INC       DPTR
   \   000084   E0           MOVX      A,@DPTR
   \   000085   F8           MOV       R0,A
   \   000086   740C         MOV       A,#0xc
   \   000088   68           XRL       A,R0
   \   000089   700F         JNZ       ??zclProcessInDiscAttrs_3
   4902            {
   4903              zclProcessInDiscAttrsCmd( pInMsg, pDiscoverCmd, numAttrs );
   \   00008B                ; Setup parameters for call to function zclProcessInDiscAttrsCmd
   \   00008B   A9..         MOV       R1,?V2
   \   00008D   AC..         MOV       R4,?V0
   \   00008F   AD..         MOV       R5,?V1
   \   000091   EE           MOV       A,R6
   \   000092   FA           MOV       R2,A
   \   000093   EF           MOV       A,R7
   \   000094   FB           MOV       R3,A
   \   000095   12....       LCALL     `??zclProcessInDiscAttrsCmd::?relay`; Banked call to: zclProcessInDiscAttrsCmd
   \   000098   8012         SJMP      ??zclProcessInDiscAttrs_4
   4904            }
   4905            else if ( pInMsg->hdr.commandID == ZCL_CMD_DISCOVER_ATTRS_EXT )
   \                     ??zclProcessInDiscAttrs_3:
   \   00009A   7415         MOV       A,#0x15
   \   00009C   68           XRL       A,R0
   \   00009D   700D         JNZ       ??zclProcessInDiscAttrs_4
   4906            {
   4907              zclProcessInDiscAttrsExtCmd( pInMsg, pDiscoverCmd, numAttrs );
   \   00009F                ; Setup parameters for call to function zclProcessInDiscAttrsExtCmd
   \   00009F   A9..         MOV       R1,?V2
   \   0000A1   AC..         MOV       R4,?V0
   \   0000A3   AD..         MOV       R5,?V1
   \   0000A5   EE           MOV       A,R6
   \   0000A6   FA           MOV       R2,A
   \   0000A7   EF           MOV       A,R7
   \   0000A8   FB           MOV       R3,A
   \   0000A9   12....       LCALL     `??zclProcessInDiscAttrsExtCmd::?relay`; Banked call to: zclProcessInDiscAttrsExtCmd
   4908            }
   4909          
   4910            return TRUE;
   \                     ??zclProcessInDiscAttrs_4:
   \   0000AC   7901         MOV       R1,#0x1
   \   0000AE   740A         MOV       A,#0xa
   \   0000B0   02....       LJMP      ?Subroutine8 & 0xFFFF
   4911          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine247_0:
   \   000000   12....       LCALL     ?Subroutine163 & 0xFFFF
   \                     ??CrossCallReturnLabel_597:
   \   000003   FC           MOV       R4,A
   \   000004   85..82       MOV       DPL,?V4
   \   000007   85..83       MOV       DPH,?V5
   \   00000A   12....       LCALL     ?Subroutine170 & 0xFFFF
   \                     ??CrossCallReturnLabel_613:
   \   00000D   E5..         MOV       A,?V4
   \   00000F   12....       LCALL     ?Subroutine187 & 0xFFFF
   \                     ??CrossCallReturnLabel_604:
   \   000012   35..         ADDC      A,?V5
   \   000014   F583         MOV       DPH,A
   \   000016   E0           MOVX      A,@DPTR
   \   000017   F9           MOV       R1,A
   \   000018   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine163:
   \   000000   12....       LCALL     ?Subroutine195 & 0xFFFF
   \                     ??CrossCallReturnLabel_607:
   \   000003   5401         ANL       A,#0x1
   \   000005   22           RET
   4912          
   4913          /*********************************************************************
   4914           * @fn      zclProcessInDiscAttrsCmd
   4915           *
   4916           * @brief   Process the Discover Attributes Command
   4917           *
   4918           * @param   pInMsg - incoming message to process
   4919           *
   4920           * @param   pDiscoverCmd - structure from requesting command
   4921           *
   4922           * @param   attrLenBuf - describes the amount of attributes to be processed
   4923           *
   4924           * @return  none
   4925           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   75..00       MOV       ?V2,#0x0
   \   000003   85..82       MOV       DPL,?V4
   \   000006   85..83       MOV       DPH,?V5
   \   000009   12....       LCALL     ?Subroutine172 & 0xFFFF
   \                     ??CrossCallReturnLabel_495:
   \   00000C   85..82       MOV       DPL,?XSP + 0
   \   00000F   85..83       MOV       DPH,?XSP + 1
   \   000012                REQUIRE ??Subroutine230_0
   \   000012                ; // Fall through to label ??Subroutine230_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   740A         MOV       A,#0xa
   \   000002                REQUIRE ??Subroutine236_0
   \   000002                ; // Fall through to label ??Subroutine236_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4926          static void zclProcessInDiscAttrsCmd( zclIncoming_t *pInMsg, zclDiscoverAttrsCmd_t *pDiscoverCmd, uint8 numAttrs )
   \                     zclProcessInDiscAttrsCmd:
   4927          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV       A,#-0xa
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V6,R2
   \   00000C   8B..         MOV       ?V7,R3
   \   00000E   8C..         MOV       ?V4,R4
   \   000010   8D..         MOV       ?V5,R5
   \   000012   E9           MOV       A,R1
   \   000013   FE           MOV       R6,A
   4928            zclDiscoverAttrsRspCmd_t *pDiscoverRsp;
   4929            uint8 discComplete = TRUE;
   \   000014   7F01         MOV       R7,#0x1
   4930            zclAttrRec_t attrRec;
   4931            uint16 attrID;
   4932            uint8 i;
   4933          
   4934            // Allocate space for the response command
   4935            pDiscoverRsp = (zclDiscoverAttrsRspCmd_t *)zcl_mem_alloc( sizeof (zclDiscoverAttrsRspCmd_t)
   4936                                                                    + sizeof ( zclDiscoverAttrInfo_t ) * numAttrs );
   \   000016                ; Setup parameters for call to function osal_mem_alloc
   \   000016   12....       LCALL     ?Subroutine133 & 0xFFFF
   \                     ??CrossCallReturnLabel_619:
   \   000019   39           ADDC      A,R1
   \   00001A   FB           MOV       R3,A
   \   00001B   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00001E   8A..         MOV       ?V0,R2
   \   000020   8B..         MOV       ?V1,R3
   4937            if ( pDiscoverRsp == NULL )
   \   000022   EA           MOV       A,R2
   \   000023   45..         ORL       A,?V1
   \   000025   7003         JNZ       $+5
   \   000027   02....       LJMP      ??zclProcessInDiscAttrsCmd_0 & 0xFFFF
   4938            {
   4939              return; // EMBEDDED RETURN
   4940            }
   4941          
   4942            if ( numAttrs != 0 )
   \   00002A   12....       LCALL     ?Subroutine132 & 0xFFFF
   \                     ??CrossCallReturnLabel_235:
   \   00002D   7003         JNZ       $+5
   \   00002F   02....       LJMP      ??zclProcessInDiscAttrsCmd_1 & 0xFFFF
   4943            {
   4944              for ( i = 0, attrID = pDiscoverCmd->startAttr; i < numAttrs; i++, attrID++ )
   \   000032   12....       LCALL     ?Subroutine34 & 0xFFFF
   4945              {
   4946                if ( !zclFindNextAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, pInMsg->hdr.fc.direction, &attrID, &attrRec ) )
   \                     ??CrossCallReturnLabel_526:
   \   000035   12....       LCALL     ?Subroutine108 & 0xFFFF
   \                     ??CrossCallReturnLabel_180:
   \   000038   12....       LCALL     ?XSTACK_DISP100_8
   \   00003B   88..         MOV       ?V10,R0
   \   00003D   89..         MOV       ?V11,R1
   \   00003F   78..         MOV       R0,#?V10
   \   000041   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000044   7402         MOV       A,#0x2
   \   000046   12....       LCALL     ?XSTACK_DISP100_8
   \   000049   88..         MOV       ?V10,R0
   \   00004B   89..         MOV       ?V11,R1
   \   00004D   78..         MOV       R0,#?V10
   \   00004F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000052   12....       LCALL     ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_593:
   \   000055   12....       LCALL     `??zclFindNextAttrRec::?relay`; Banked call to: zclFindNextAttrRec
   \   000058   7404         MOV       A,#0x4
   \   00005A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00005D   E9           MOV       A,R1
   \   00005E   6026         JZ        ??zclProcessInDiscAttrsCmd_2
   4947                {
   4948                  break; // should not happen, as numAttrs already calculated
   4949                }
   4950          
   4951                pDiscoverRsp->attrList[i].attrID = attrRec.attr.attrId;
   \   000060   E5..         MOV       A,?V2
   \   000062   75F003       MOV       B,#0x3
   \   000065   A4           MUL       AB
   \   000066   F8           MOV       R0,A
   \   000067   A9F0         MOV       R1,B
   \   000069   E5..         MOV       A,?V0
   \   00006B   28           ADD       A,R0
   \   00006C   F8           MOV       R0,A
   \   00006D   E5..         MOV       A,?V1
   \   00006F   39           ADDC      A,R1
   \   000070   F9           MOV       R1,A
   \   000071   7404         MOV       A,#0x4
   \   000073   12....       LCALL     ?XSTACK_DISP0_8
   \   000076   12....       LCALL     ?Subroutine43 & 0xFFFF
   4952                pDiscoverRsp->attrList[i].dataType = attrRec.attr.dataType;
   \                     ??CrossCallReturnLabel_581:
   \   000079   7406         MOV       A,#0x6
   \   00007B   12....       LCALL     ?XSTACK_DISP0_8
   \   00007E   12....       LCALL     ?Subroutine111 & 0xFFFF
   4953              }
   \                     ??CrossCallReturnLabel_192:
   \   000081   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   000084   40AF         JC        ??CrossCallReturnLabel_526
   4954          
   4955              // Are there more attributes to be discovered?
   4956              if ( zclFindNextAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, pInMsg->hdr.fc.direction, &attrID, &attrRec ) )
   \                     ??zclProcessInDiscAttrsCmd_2:
   \   000086   12....       LCALL     ?Subroutine112 & 0xFFFF
   \                     ??CrossCallReturnLabel_193:
   \   000089   12....       LCALL     ?XSTACK_DISP100_8
   \   00008C   88..         MOV       ?V4,R0
   \   00008E   89..         MOV       ?V5,R1
   \   000090   78..         MOV       R0,#?V4
   \   000092   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000095   7402         MOV       A,#0x2
   \   000097   12....       LCALL     ?XSTACK_DISP100_8
   \   00009A   88..         MOV       ?V4,R0
   \   00009C   89..         MOV       ?V5,R1
   \   00009E   78..         MOV       R0,#?V4
   \   0000A0   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000A3   12....       LCALL     ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   0000A6   12....       LCALL     `??zclFindNextAttrRec::?relay`; Banked call to: zclFindNextAttrRec
   \   0000A9   7404         MOV       A,#0x4
   \   0000AB   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000AE   E9           MOV       A,R1
   \   0000AF   6002         JZ        ??zclProcessInDiscAttrsCmd_1
   4957              {
   4958                discComplete = FALSE;
   \   0000B1   7F00         MOV       R7,#0x0
   4959              }
   4960            }
   4961          
   4962            pDiscoverRsp->discComplete = discComplete;
   \                     ??zclProcessInDiscAttrsCmd_1:
   \   0000B3   12....       LCALL     ?Subroutine16 & 0xFFFF
   4963            pDiscoverRsp->numAttr = numAttrs;
   4964          
   4965            zcl_SendDiscoverAttrsRspCmd( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   4966                                         pInMsg->msg->clusterId, pDiscoverRsp, !(pInMsg->hdr.fc.direction),
   4967                                         true, pInMsg->hdr.transSeqNum );
   \                     ??CrossCallReturnLabel_4:
   \   0000B6   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000B9   75..01       MOV       ?V4,#0x1
   \   0000BC   78..         MOV       R0,#?V4
   \   0000BE   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000C1   12....       LCALL     ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_588:
   \   0000C4   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000C7   78..         MOV       R0,#?V0
   \   0000C9   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000CC   12....       LCALL     ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   0000CF   12....       LCALL     `??zcl_SendDiscoverAttrsRspCmd::?relay`; Banked call to: zcl_SendDiscoverAttrsRspCmd
   \   0000D2   7405         MOV       A,#0x5
   \   0000D4   12....       LCALL     ?DEALLOC_XSTACK8
   4968            zcl_mem_free( pDiscoverRsp );
   \   0000D7                ; Setup parameters for call to function osal_mem_free
   \   0000D7   AA..         MOV       R2,?V0
   \   0000D9   AB..         MOV       R3,?V1
   \   0000DB   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   4969          
   4970            return;
   \                     ??zclProcessInDiscAttrsCmd_0:
   \   0000DE   02....       LJMP      ?Subroutine6 & 0xFFFF
   4971          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine57:
   \   000000   85..82       MOV       DPL,?V8
   \   000003   85..83       MOV       DPH,?V9
   \   000006                REQUIRE ??Subroutine246_0
   \   000006                ; // Fall through to label ??Subroutine246_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine49:
   \   000000   85..82       MOV       DPL,?V8
   \   000003   85..83       MOV       DPH,?V9
   \   000006                REQUIRE ??Subroutine247_0
   \   000006                ; // Fall through to label ??Subroutine247_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine132:
   \   000000   E5..         MOV       A,?V6
   \   000002   2402         ADD       A,#0x2
   \   000004   F5..         MOV       ?V8,A
   \   000006   E4           CLR       A
   \   000007   35..         ADDC      A,?V7
   \   000009   F5..         MOV       ?V9,A
   \   00000B   EE           MOV       A,R6
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine112:
   \   000000   12....       LCALL     ?Subroutine160 & 0xFFFF
   \                     ??CrossCallReturnLabel_623:
   \   000003                ; Setup parameters for call to function zclFindNextAttrRec
   \   000003                ; Setup parameters for call to function zclFindNextAttrRec
   \   000003   7402         MOV       A,#0x2
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine160:
   \   000000   85..82       MOV       DPL,?V6
   \   000003   85..83       MOV       DPH,?V7
   \   000006                REQUIRE ??Subroutine249_0
   \   000006                ; // Fall through to label ??Subroutine249_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine108:
   \   000000   85..82       MOV       DPL,?V6
   \   000003   85..83       MOV       DPH,?V7
   \   000006   12....       LCALL     ?Subroutine167 & 0xFFFF
   \                     ??CrossCallReturnLabel_295:
   \   000009                ; Setup parameters for call to function zclFindNextAttrRec
   \   000009                ; Setup parameters for call to function zclFindNextAttrRec
   \   000009   7402         MOV       A,#0x2
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine54:
   \   000000   85..82       MOV       DPL,?V2
   \   000003   85..83       MOV       DPH,?V3
   \   000006   12....       LCALL     ?Subroutine159 & 0xFFFF
   \                     ??CrossCallReturnLabel_568:
   \   000009   E5..         MOV       A,?V2
   \   00000B   12....       LCALL     ??Subroutine250_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_627:
   \   00000E   35..         ADDC      A,?V3
   \   000010   FB           MOV       R3,A
   \   000011   E5..         MOV       A,?V2
   \   000013   12....       LCALL     ?Subroutine187 & 0xFFFF
   \                     ??CrossCallReturnLabel_598:
   \   000016   35..         ADDC      A,?V3
   \   000018   F583         MOV       DPH,A
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   F9           MOV       R1,A
   \   00001C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine52:
   \   000000   85..82       MOV       DPL,?V8
   \   000003   85..83       MOV       DPH,?V9
   \   000006   12....       LCALL     ?Subroutine163 & 0xFFFF
   \                     ??CrossCallReturnLabel_596:
   \   000009   12....       LCALL     ?Subroutine156 & 0xFFFF
   \                     ??CrossCallReturnLabel_281:
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004   F0           MOVX      @DPTR,A
   \   000005   05..         INC       ?V2
   \   000007   85..82       MOV       DPL,?XSP + 0
   \   00000A   85..83       MOV       DPH,?XSP + 1
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   2F           ADD       A,R7
   \   00000F   F0           MOVX      @DPTR,A
   \   000010   A3           INC       DPTR
   \   000011   E0           MOVX      A,@DPTR
   \   000012   3400         ADDC      A,#0x0
   \   000014   F0           MOVX      @DPTR,A
   \   000015   E5..         MOV       A,?V2
   \   000017   C3           CLR       C
   \   000018   9E           SUBB      A,R6
   \   000019   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   EF           MOV       A,R7
   \   000001   85..82       MOV       DPL,?V0
   \   000004   85..83       MOV       DPH,?V1
   \   000007   F0           MOVX      @DPTR,A
   \   000008   EE           MOV       A,R6
   \   000009   A3           INC       DPTR
   \   00000A   F0           MOVX      @DPTR,A
   \   00000B   12....       LCALL     ?Subroutine160 & 0xFFFF
   \                     ??CrossCallReturnLabel_622:
   \   00000E                ; Setup parameters for call to function zcl_SendDiscoverAttrsRspCmd
   \   00000E                ; Setup parameters for call to function zcl_SendDiscoverAttrsExtRsp
   \   00000E   85..82       MOV       DPL,?V6
   \   000011   85..83       MOV       DPH,?V7
   \   000014   A3           INC       DPTR
   \   000015   A3           INC       DPTR
   \   000016   A3           INC       DPTR
   \   000017   A3           INC       DPTR
   \   000018   A3           INC       DPTR
   \   000019   A3           INC       DPTR
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   F5..         MOV       ?V4,A
   \   00001D   78..         MOV       R0,#?V4
   \   00001F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine156:
   \   000000   FC           MOV       R4,A
   \   000001   85..82       MOV       DPL,?V2
   \   000004   85..83       MOV       DPH,?V3
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   FA           MOV       R2,A
   \   00000D   A3           INC       DPTR
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   FB           MOV       R3,A
   \   000010   E5..         MOV       A,?V2
   \   000012   2414         ADD       A,#0x14
   \   000014   F582         MOV       DPL,A
   \   000016   E4           CLR       A
   \   000017   35..         ADDC      A,?V3
   \   000019   F583         MOV       DPH,A
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   F9           MOV       R1,A
   \   00001D   22           RET
   4972          
   4973          /*********************************************************************
   4974           * @fn      zclProcessInDiscAttrsExtCmd
   4975           *
   4976           * @brief   Process the Discover Attributes Extended Command
   4977           *
   4978           * @param   pInMsg - incoming message to process
   4979           *
   4980           * @param   pDiscoverCmd - structure from requesting command
   4981           *
   4982           * @param   attrLenBuf - describes the amount of attributes to be processed
   4983           *
   4984           * @return  none
   4985           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4986          static void zclProcessInDiscAttrsExtCmd( zclIncoming_t *pInMsg, zclDiscoverAttrsCmd_t *pDiscoverCmd, uint8 numAttrs )
   \                     zclProcessInDiscAttrsExtCmd:
   4987          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV       A,#-0xa
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V6,R2
   \   00000C   8B..         MOV       ?V7,R3
   \   00000E   8C..         MOV       ?V4,R4
   \   000010   8D..         MOV       ?V5,R5
   \   000012   E9           MOV       A,R1
   \   000013   FE           MOV       R6,A
   4988            zclDiscoverAttrsExtRsp_t *pDiscoverExtRsp;
   4989            uint8 discComplete = TRUE;
   \   000014   7F01         MOV       R7,#0x1
   4990            zclAttrRec_t attrRec;
   4991            uint16 attrID;
   4992            uint8 i;
   4993          
   4994              // Allocate space for the response command
   4995            pDiscoverExtRsp = (zclDiscoverAttrsExtRsp_t *)zcl_mem_alloc( sizeof (zclDiscoverAttrsExtRsp_t)
   4996                                                                   + sizeof ( zclExtAttrInfo_t ) * numAttrs );
   \   000016                ; Setup parameters for call to function osal_mem_alloc
   \   000016   F5..         MOV       ?V0,A
   \   000018   75..00       MOV       ?V1,#0x0
   \   00001B   7402         MOV       A,#0x2
   \   00001D   78..         MOV       R0,#?V0
   \   00001F   12....       LCALL     ?S_SHL
   \   000022   E5..         MOV       A,?V0
   \   000024   12....       LCALL     ??Subroutine248_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_617:
   \   000027   35..         ADDC      A,?V1
   \   000029   FB           MOV       R3,A
   \   00002A   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00002D   8A..         MOV       ?V0,R2
   \   00002F   8B..         MOV       ?V1,R3
   4997            if ( pDiscoverExtRsp == NULL )
   \   000031   EA           MOV       A,R2
   \   000032   45..         ORL       A,?V1
   \   000034   7003         JNZ       $+5
   \   000036   02....       LJMP      ??zclProcessInDiscAttrsExtCmd_0 & 0xFFFF
   4998            {
   4999              return; // EMBEDDED RETURN
   5000            }
   5001          
   5002          
   5003            if ( numAttrs != 0 )
   \   000039   12....       LCALL     ?Subroutine132 & 0xFFFF
   \                     ??CrossCallReturnLabel_236:
   \   00003C   7003         JNZ       $+5
   \   00003E   02....       LJMP      ??zclProcessInDiscAttrsExtCmd_1 & 0xFFFF
   5004            {
   5005              for ( i = 0, attrID = pDiscoverCmd->startAttr; i < numAttrs; i++, attrID++ )
   \   000041   12....       LCALL     ?Subroutine34 & 0xFFFF
   5006              {
   5007                if ( !zclFindNextAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, pInMsg->hdr.fc.direction, &attrID, &attrRec ) )
   \                     ??CrossCallReturnLabel_527:
   \   000044   12....       LCALL     ?Subroutine108 & 0xFFFF
   \                     ??CrossCallReturnLabel_181:
   \   000047   12....       LCALL     ?XSTACK_DISP100_8
   \   00004A   88..         MOV       ?V10,R0
   \   00004C   89..         MOV       ?V11,R1
   \   00004E   78..         MOV       R0,#?V10
   \   000050   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000053   7402         MOV       A,#0x2
   \   000055   12....       LCALL     ?XSTACK_DISP100_8
   \   000058   88..         MOV       ?V10,R0
   \   00005A   89..         MOV       ?V11,R1
   \   00005C   78..         MOV       R0,#?V10
   \   00005E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000061   12....       LCALL     ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_594:
   \   000064   12....       LCALL     `??zclFindNextAttrRec::?relay`; Banked call to: zclFindNextAttrRec
   \   000067   7404         MOV       A,#0x4
   \   000069   12....       LCALL     ?DEALLOC_XSTACK8
   \   00006C   E9           MOV       A,R1
   \   00006D   603B         JZ        ??zclProcessInDiscAttrsExtCmd_2
   5008                {
   5009                  break; // Should not happen, as numAttrs already calculated
   5010                }
   5011          
   5012                pDiscoverExtRsp->aExtAttrInfo[i].attrID = attrRec.attr.attrId;
   \   00006F   E5..         MOV       A,?V2
   \   000071   F5..         MOV       ?V4,A
   \   000073   75..00       MOV       ?V5,#0x0
   \   000076   7402         MOV       A,#0x2
   \   000078   78..         MOV       R0,#?V4
   \   00007A   12....       LCALL     ?S_SHL
   \   00007D   E5..         MOV       A,?V0
   \   00007F   25..         ADD       A,?V4
   \   000081   F8           MOV       R0,A
   \   000082   E5..         MOV       A,?V1
   \   000084   35..         ADDC      A,?V5
   \   000086   F9           MOV       R1,A
   \   000087   7404         MOV       A,#0x4
   \   000089   12....       LCALL     ?XSTACK_DISP0_8
   \   00008C   12....       LCALL     ?Subroutine43 & 0xFFFF
   5013                pDiscoverExtRsp->aExtAttrInfo[i].attrDataType = attrRec.attr.dataType;
   \                     ??CrossCallReturnLabel_582:
   \   00008F   7406         MOV       A,#0x6
   \   000091   12....       LCALL     ?XSTACK_DISP0_8
   \   000094   12....       LCALL     ?Subroutine110 & 0xFFFF
   \                     ??CrossCallReturnLabel_188:
   \   000097   F0           MOVX      @DPTR,A
   5014                pDiscoverExtRsp->aExtAttrInfo[i].attrAccessControl = attrRec.attr.accessControl & ACCESS_CONTROLEXT_MASK;
   \   000098   7407         MOV       A,#0x7
   \   00009A   12....       LCALL     ?XSTACK_DISP0_8
   \   00009D   E0           MOVX      A,@DPTR
   \   00009E   5407         ANL       A,#0x7
   \   0000A0   8882         MOV       DPL,R0
   \   0000A2   8983         MOV       DPH,R1
   \   0000A4   A3           INC       DPTR
   \   0000A5   12....       LCALL     ?Subroutine19 & 0xFFFF
   5015              }
   \                     ??CrossCallReturnLabel_12:
   \   0000A8   409A         JC        ??CrossCallReturnLabel_527
   5016          
   5017              // Are there more attributes to be discovered?
   5018              if ( zclFindNextAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, pInMsg->hdr.fc.direction, &attrID, &attrRec ) )
   \                     ??zclProcessInDiscAttrsExtCmd_2:
   \   0000AA   12....       LCALL     ?Subroutine112 & 0xFFFF
   \                     ??CrossCallReturnLabel_194:
   \   0000AD   12....       LCALL     ?XSTACK_DISP100_8
   \   0000B0   88..         MOV       ?V4,R0
   \   0000B2   89..         MOV       ?V5,R1
   \   0000B4   78..         MOV       R0,#?V4
   \   0000B6   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000B9   7402         MOV       A,#0x2
   \   0000BB   12....       LCALL     ?XSTACK_DISP100_8
   \   0000BE   88..         MOV       ?V4,R0
   \   0000C0   89..         MOV       ?V5,R1
   \   0000C2   78..         MOV       R0,#?V4
   \   0000C4   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000C7   12....       LCALL     ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   0000CA   12....       LCALL     `??zclFindNextAttrRec::?relay`; Banked call to: zclFindNextAttrRec
   \   0000CD   7404         MOV       A,#0x4
   \   0000CF   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000D2   E9           MOV       A,R1
   \   0000D3   6002         JZ        ??zclProcessInDiscAttrsExtCmd_1
   5019              {
   5020                discComplete = FALSE;
   \   0000D5   7F00         MOV       R7,#0x0
   5021              }
   5022            }
   5023          
   5024            pDiscoverExtRsp->discComplete = discComplete;
   \                     ??zclProcessInDiscAttrsExtCmd_1:
   \   0000D7   12....       LCALL     ?Subroutine16 & 0xFFFF
   5025            pDiscoverExtRsp->numAttr = numAttrs;
   5026          
   5027            zcl_SendDiscoverAttrsExtRsp( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   5028                                         pInMsg->msg->clusterId, pDiscoverExtRsp, !(pInMsg->hdr.fc.direction),
   5029                                         true, pInMsg->hdr.transSeqNum );
   \                     ??CrossCallReturnLabel_5:
   \   0000DA   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000DD   75..01       MOV       ?V4,#0x1
   \   0000E0   78..         MOV       R0,#?V4
   \   0000E2   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000E5   12....       LCALL     ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_589:
   \   0000E8   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000EB   78..         MOV       R0,#?V0
   \   0000ED   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000F0   12....       LCALL     ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   0000F3   12....       LCALL     `??zcl_SendDiscoverAttrsExtRsp::?relay`; Banked call to: zcl_SendDiscoverAttrsExtRsp
   \   0000F6   7405         MOV       A,#0x5
   \   0000F8   12....       LCALL     ?DEALLOC_XSTACK8
   5030          
   5031            zcl_mem_free( pDiscoverExtRsp );
   \   0000FB                ; Setup parameters for call to function osal_mem_free
   \   0000FB   AA..         MOV       R2,?V0
   \   0000FD   AB..         MOV       R3,?V1
   \   0000FF   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   5032          
   5033            return;
   \                     ??zclProcessInDiscAttrsExtCmd_0:
   \   000102   02....       LJMP      ?Subroutine6 & 0xFFFF
   5034          }
   5035          
   5036          /*********************************************************************
   5037           * @fn      zclProcessInDiscCmd
   5038           *
   5039           * @brief   Process the "Profile" Discover Command
   5040           *
   5041           * @param   pInMsg - incoming message to process
   5042           *
   5043           * @return  TRUE if command processed. FALSE, otherwise.
   5044           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   5045          static uint8 zclProcessInDiscCmd( zclIncoming_t *pInMsg )
   \                     zclProcessInDiscCmd:
   5046          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV       A,#-0xa
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine134 & 0xFFFF
   5047            zclDiscoverCmdsCmd_t *pDiscoverCmd;
   5048            zclDiscoverCmdsCmdRsp_t cmdRsp;
   5049            ZStatus_t status;
   5050            zclCommandRec_t cmdRec;
   5051            uint8 cmdID;
   5052            uint8 i;
   5053            uint8 j;
   5054          
   5055            pDiscoverCmd = (zclDiscoverCmdsCmd_t *)pInMsg->attrCmd;
   \                     ??CrossCallReturnLabel_238:
   \   00000D   12....       LCALL     ?Subroutine109 & 0xFFFF
   5056          
   5057            // Find out the number of commands supported within the specified range
   5058            for ( i = 0, cmdID = pDiscoverCmd->startCmdID; i < pDiscoverCmd->maxCmdID; i++, cmdID++ )
   \                     ??CrossCallReturnLabel_186:
   \   000010   75..00       MOV       ?V0,#0x0
   \   000013   85..82       MOV       DPL,?V4
   \   000016   F583         MOV       DPH,A
   \   000018   12....       LCALL     ?Subroutine119 & 0xFFFF
   \                     ??CrossCallReturnLabel_205:
   \   00001B   EE           MOV       A,R6
   \   00001C   2407         ADD       A,#0x7
   \   00001E   F5..         MOV       ?V8,A
   \   000020   E4           CLR       A
   \   000021   3F           ADDC      A,R7
   \   000022   F5..         MOV       ?V9,A
   \   000024   EE           MOV       A,R6
   \   000025   2402         ADD       A,#0x2
   \   000027   F5..         MOV       ?V6,A
   \   000029   E4           CLR       A
   \   00002A   3F           ADDC      A,R7
   \   00002B   F5..         MOV       ?V7,A
   \   00002D   800B         SJMP      ??zclProcessInDiscCmd_0
   \                     ??zclProcessInDiscCmd_1:
   \   00002F   05..         INC       ?V0
   \   000031   85..82       MOV       DPL,?XSP + 0
   \   000034   85..83       MOV       DPH,?XSP + 1
   \   000037   E0           MOVX      A,@DPTR
   \   000038   04           INC       A
   \   000039   F0           MOVX      @DPTR,A
   \                     ??zclProcessInDiscCmd_0:
   \   00003A   85..82       MOV       DPL,?V4
   \   00003D   85..83       MOV       DPH,?V5
   \   000040   A3           INC       DPTR
   \   000041   12....       LCALL     ??Subroutine251_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_632:
   \   000044   502B         JNC       ??zclProcessInDiscCmd_2
   5059            {
   5060              if ( !zclFindNextCmdRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, pInMsg->hdr.commandID, pInMsg->hdr.fc.direction, &cmdID, &cmdRec ) )
   \   000046   12....       LCALL     ?Subroutine73 & 0xFFFF
   5061              {
   5062                break;  // Command not supported
   5063              }
   5064            }
   \                     ??CrossCallReturnLabel_120:
   \   000049   12....       LCALL     ?XSTACK_DISP100_8
   \   00004C   88..         MOV       ?V10,R0
   \   00004E   89..         MOV       ?V11,R1
   \   000050   78..         MOV       R0,#?V10
   \   000052   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000055   7402         MOV       A,#0x2
   \   000057   12....       LCALL     ?XSTACK_DISP100_8
   \   00005A   88..         MOV       ?V10,R0
   \   00005C   89..         MOV       ?V11,R1
   \   00005E   78..         MOV       R0,#?V10
   \   000060   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000063   12....       LCALL     ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   000066   12....       LCALL     `??zclFindNextCmdRec::?relay`; Banked call to: zclFindNextCmdRec
   \   000069   7404         MOV       A,#0x4
   \   00006B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00006E   E9           MOV       A,R1
   \   00006F   70BE         JNZ       ??zclProcessInDiscCmd_1
   5065          
   5066            // Allocate space for the response command
   5067            cmdRsp.pCmdID = zcl_mem_alloc( i ); // size of number of commands returned
   \                     ??zclProcessInDiscCmd_2:
   \   000071                ; Setup parameters for call to function osal_mem_alloc
   \   000071   AA..         MOV       R2,?V0
   \   000073   7B00         MOV       R3,#0x0
   \   000075   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000078   8A..         MOV       ?V2,R2
   \   00007A   8B..         MOV       ?V3,R3
   \   00007C   A8..         MOV       R0,?V2
   \   00007E   A9..         MOV       R1,?V3
   \   000080   7404         MOV       A,#0x4
   \   000082   12....       LCALL     ?XSTACK_DISP0_8
   \   000085   12....       LCALL     ??Subroutine230_0 & 0xFFFF
   5068          
   5069            if ( cmdRsp.pCmdID == NULL )
   \                     ??CrossCallReturnLabel_525:
   \   000088   E8           MOV       A,R0
   \   000089   49           ORL       A,R1
   \   00008A   7003         JNZ       $+5
   \   00008C   02....       LJMP      ??zclProcessInDiscCmd_3 & 0xFFFF
   5070            {
   5071              return FALSE; // EMBEDDED RETURN
   5072            }
   5073          
   5074            if ( i != 0 )
   \   00008F   E5..         MOV       A,?V0
   \   000091   6066         JZ        ??zclProcessInDiscCmd_4
   5075            {
   5076              for ( j = 0, cmdID = pDiscoverCmd->startCmdID; j < i; j++, cmdID++ )
   \   000093   75..00       MOV       ?V1,#0x0
   \   000096   85..82       MOV       DPL,?V4
   \   000099   85..83       MOV       DPH,?V5
   \   00009C   12....       LCALL     ?Subroutine119 & 0xFFFF
   5077              {
   5078                if ( !zclFindNextCmdRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, pInMsg->hdr.commandID, pInMsg->hdr.fc.direction, &cmdID, &cmdRec ) )
   \                     ??CrossCallReturnLabel_206:
   \   00009F   12....       LCALL     ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_121:
   \   0000A2   12....       LCALL     ?XSTACK_DISP100_8
   \   0000A5   88..         MOV       ?V4,R0
   \   0000A7   89..         MOV       ?V5,R1
   \   0000A9   78..         MOV       R0,#?V4
   \   0000AB   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000AE   7402         MOV       A,#0x2
   \   0000B0   12....       LCALL     ?XSTACK_DISP100_8
   \   0000B3   88..         MOV       ?V4,R0
   \   0000B5   89..         MOV       ?V5,R1
   \   0000B7   78..         MOV       R0,#?V4
   \   0000B9   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000BC   12....       LCALL     ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   0000BF   12....       LCALL     `??zclFindNextCmdRec::?relay`; Banked call to: zclFindNextCmdRec
   \   0000C2   7404         MOV       A,#0x4
   \   0000C4   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000C7   E9           MOV       A,R1
   \   0000C8   602F         JZ        ??zclProcessInDiscCmd_4
   5079                {
   5080                  break; // Attribute not supported
   5081                }
   5082          
   5083                cmdRsp.pCmdID[j] = cmdRec.cmdID;
   \   0000CA   7408         MOV       A,#0x8
   \   0000CC   12....       LCALL     ?XSTACK_DISP0_8
   \   0000CF   E0           MOVX      A,@DPTR
   \   0000D0   C0E0         PUSH      A
   \   0000D2   A8..         MOV       R0,?V1
   \   0000D4   7404         MOV       A,#0x4
   \   0000D6   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D9   E0           MOVX      A,@DPTR
   \   0000DA   28           ADD       A,R0
   \   0000DB   FA           MOV       R2,A
   \   0000DC   A3           INC       DPTR
   \   0000DD   E0           MOVX      A,@DPTR
   \   0000DE   3400         ADDC      A,#0x0
   \   0000E0   8A82         MOV       DPL,R2
   \   0000E2   F583         MOV       DPH,A
   \   0000E4   D0E0         POP       A
   \   0000E6   F0           MOVX      @DPTR,A
   5084              }
   \   0000E7   05..         INC       ?V1
   \   0000E9   85..82       MOV       DPL,?XSP + 0
   \   0000EC   85..83       MOV       DPH,?XSP + 1
   \   0000EF   E0           MOVX      A,@DPTR
   \   0000F0   04           INC       A
   \   0000F1   F0           MOVX      @DPTR,A
   \   0000F2   E5..         MOV       A,?V1
   \   0000F4   C3           CLR       C
   \   0000F5   95..         SUBB      A,?V0
   \   0000F7   40A6         JC        ??CrossCallReturnLabel_206
   5085            }
   5086          
   5087            // Are there more commands to be discovered?
   5088            if ( zclFindNextCmdRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, pInMsg->hdr.commandID, pInMsg->hdr.fc.direction, &cmdID, &cmdRec ) )
   \                     ??zclProcessInDiscCmd_4:
   \   0000F9   12....       LCALL     ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_122:
   \   0000FC   12....       LCALL     ?XSTACK_DISP100_8
   \   0000FF   88..         MOV       ?V4,R0
   \   000101   89..         MOV       ?V5,R1
   \   000103   78..         MOV       R0,#?V4
   \   000105   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000108   7402         MOV       A,#0x2
   \   00010A   12....       LCALL     ?XSTACK_DISP100_8
   \   00010D   88..         MOV       ?V4,R0
   \   00010F   89..         MOV       ?V5,R1
   \   000111   78..         MOV       R0,#?V4
   \   000113   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000116   12....       LCALL     ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   000119   12....       LCALL     `??zclFindNextCmdRec::?relay`; Banked call to: zclFindNextCmdRec
   \   00011C   7404         MOV       A,#0x4
   \   00011E   12....       LCALL     ?DEALLOC_XSTACK8
   \   000121   E9           MOV       A,R1
   \   000122   6008         JZ        ??zclProcessInDiscCmd_5
   5089            {
   5090              cmdRsp.discComplete = FALSE;
   \   000124   7401         MOV       A,#0x1
   \   000126   12....       LCALL     ?XSTACK_DISP0_8
   \   000129   E4           CLR       A
   \   00012A   8007         SJMP      ??zclProcessInDiscCmd_6
   5091            }
   5092            else
   5093            {
   5094              cmdRsp.discComplete = TRUE;
   \                     ??zclProcessInDiscCmd_5:
   \   00012C   7401         MOV       A,#0x1
   \   00012E   12....       LCALL     ?XSTACK_DISP0_8
   \   000131   7401         MOV       A,#0x1
   \                     ??zclProcessInDiscCmd_6:
   \   000133   F0           MOVX      @DPTR,A
   5095            }
   5096          
   5097            // pass the command requested
   5098            cmdRsp.cmdType = pInMsg->hdr.commandID;
   \   000134   85..82       MOV       DPL,?V8
   \   000137   85..83       MOV       DPH,?V9
   \   00013A   E0           MOVX      A,@DPTR
   \   00013B   C0E0         PUSH      A
   \   00013D   7402         MOV       A,#0x2
   \   00013F   12....       LCALL     ?XSTACK_DISP0_8
   \   000142   D0E0         POP       A
   \   000144   F0           MOVX      @DPTR,A
   5099          
   5100            // store number of commands returned
   5101            cmdRsp.numCmd = j;
   \   000145   7403         MOV       A,#0x3
   \   000147   12....       LCALL     ?XSTACK_DISP0_8
   \   00014A   E5..         MOV       A,?V1
   \   00014C   12....       LCALL     ?Subroutine30 & 0xFFFF
   5102          
   5103            status = zcl_SendDiscoverCmdsRspCmd( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   5104                                                pInMsg->msg->clusterId, &cmdRsp, !(pInMsg->hdr.fc.direction),
   5105                                                true, pInMsg->hdr.transSeqNum );
   \                     ??CrossCallReturnLabel_33:
   \   00014F   F5..         MOV       ?V0,A
   \   000151   A3           INC       DPTR
   \   000152   E0           MOVX      A,@DPTR
   \   000153   F5..         MOV       ?V1,A
   \   000155                ; Setup parameters for call to function zcl_SendDiscoverCmdsRspCmd
   \   000155   12....       LCALL     ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_395:
   \   000158   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00015B   75..01       MOV       ?V2,#0x1
   \   00015E   78..         MOV       R0,#?V2
   \   000160   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000163   85..82       MOV       DPL,?V6
   \   000166   85..83       MOV       DPH,?V7
   \   000169   12....       LCALL     ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_82:
   \   00016C   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00016F   7404         MOV       A,#0x4
   \   000171   12....       LCALL     ?XSTACK_DISP100_8
   \   000174   88..         MOV       ?V2,R0
   \   000176   89..         MOV       ?V3,R1
   \   000178   78..         MOV       R0,#?V2
   \   00017A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00017D   85..82       MOV       DPL,?V0
   \   000180   85..83       MOV       DPH,?V1
   \   000183   12....       LCALL     ?Subroutine107 & 0xFFFF
   \                     ??CrossCallReturnLabel_550:
   \   000186   E5..         MOV       A,?V0
   \   000188   12....       LCALL     ??Subroutine250_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_626:
   \   00018B   35..         ADDC      A,?V1
   \   00018D   FB           MOV       R3,A
   \   00018E   E5..         MOV       A,?V0
   \   000190   12....       LCALL     ?Subroutine129 & 0xFFFF
   \                     ??CrossCallReturnLabel_230:
   \   000193   35..         ADDC      A,?V1
   \   000195   F583         MOV       DPH,A
   \   000197   E0           MOVX      A,@DPTR
   \   000198   F9           MOV       R1,A
   \   000199   12....       LCALL     `??zcl_SendDiscoverCmdsRspCmd::?relay`; Banked call to: zcl_SendDiscoverCmdsRspCmd
   \   00019C   7405         MOV       A,#0x5
   \   00019E   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001A1   E9           MOV       A,R1
   \   0001A2   FE           MOV       R6,A
   5106          
   5107            zcl_mem_free( cmdRsp.pCmdID );
   \   0001A3                ; Setup parameters for call to function osal_mem_free
   \   0001A3   7404         MOV       A,#0x4
   \   0001A5   12....       LCALL     ?XSTACK_DISP0_8
   \   0001A8   12....       LCALL     ??Subroutine224_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_464:
   \   0001AB   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   5108          
   5109            if ( status == ZSuccess )
   \   0001AE   EE           MOV       A,R6
   \   0001AF   7004         JNZ       ??zclProcessInDiscCmd_3
   5110            {
   5111              return TRUE;
   \   0001B1   7901         MOV       R1,#0x1
   \   0001B3   8002         SJMP      ??zclProcessInDiscCmd_7
   5112            }
   5113            else
   5114            {
   5115              return FALSE;
   \                     ??zclProcessInDiscCmd_3:
   \   0001B5   7900         MOV       R1,#0x0
   5116            }
   \                     ??zclProcessInDiscCmd_7:
   \   0001B7   02....       LJMP      ?Subroutine6 & 0xFFFF
   5117          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine119:
   \   000000   12....       LCALL     ?Subroutine175 & 0xFFFF
   \                     ??CrossCallReturnLabel_308:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine73:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004   12....       LCALL     ??Subroutine249_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_621:
   \   000007                ; Setup parameters for call to function zclFindNextCmdRec
   \   000007                ; Setup parameters for call to function zclFindNextCmdRec
   \   000007                ; Setup parameters for call to function zclFindNextCmdRec
   \   000007   7406         MOV       A,#0x6
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000   85..82       MOV       DPL,?V6
   \   000003   85..83       MOV       DPH,?V7
   \   000006   12....       LCALL     ?Subroutine163 & 0xFFFF
   \                     ??CrossCallReturnLabel_595:
   \   000009   FD           MOV       R5,A
   \   00000A   85..82       MOV       DPL,?V8
   \   00000D   85..83       MOV       DPH,?V9
   \   000010   E0           MOVX      A,@DPTR
   \   000011   12....       LCALL     ?Subroutine156 & 0xFFFF
   \                     ??CrossCallReturnLabel_280:
   \   000014   22           RET

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zcl_radius>`:
   \   000000   1E           DB 30

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_event_loop::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_event_loop

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_registerForMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_registerForMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_registerForMsgExt::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_registerForMsgExt

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_addExternalFoundationHandler::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_addExternalFoundationHandler

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_getExternalFoundationHandler::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_getExternalFoundationHandler

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_HandleExternal::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_HandleExternal

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_getRawAFMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_getRawAFMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_getParsedTransSeqNum::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_getParsedTransSeqNum

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_registerPlugin::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_registerPlugin

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_registerCmdList::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_registerCmdList

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_registerAttrList::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_registerAttrList

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_registerClusterOptionList::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_registerClusterOptionList

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_registerValidateAttrData::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_registerValidateAttrData

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_registerReadWriteCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_registerReadWriteCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_DeviceOperational::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_DeviceOperational

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_SendCommand::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_SendCommand

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_SendRead::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_SendRead

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_SendReadRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_SendReadRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_SendWriteRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_SendWriteRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_SendWriteRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_SendWriteRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_SendConfigReportRspCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_SendConfigReportRspCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_SendReadReportCfgRspCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_SendReadReportCfgRspCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_SendReportCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_SendReportCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_SendDefaultRspCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_SendDefaultRspCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_SendDiscoverCmdsCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_SendDiscoverCmdsCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_SendDiscoverCmdsRspCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_SendDiscoverCmdsRspCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_SendDiscoverAttrsCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_SendDiscoverAttrsCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_SendDiscoverAttrsRspCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_SendDiscoverAttrsRspCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_SendDiscoverAttrsExt::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_SendDiscoverAttrsExt

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_SendDiscoverAttrsExtRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_SendDiscoverAttrsExtRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_ProcessMessageMSG::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_ProcessMessageMSG

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclParseHdr::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclParseHdr

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclBuildHdr::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclBuildHdr

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclFindCmdRecsList::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclFindCmdRecsList

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclFindCmdRec::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclFindCmdRec

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclFindAttrRecsList::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclFindAttrRecsList

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclFindAttrRec::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclFindAttrRec

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGetReadWriteCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGetReadWriteCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGetAuthorizeCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGetAuthorizeCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclFindClusterOption::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclFindClusterOption

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGetClusterOption::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGetClusterOption

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSetSecurityOption::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSetSecurityOption

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclFindNextCmdRec::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclFindNextCmdRec

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclFindNextAttrRec::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclFindNextAttrRec

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSerializeData::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSerializeData

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclAnalogDataType::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclAnalogDataType

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGetDataTypeLength::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGetDataTypeLength

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGetAttrDataLength::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGetAttrDataLength

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclReadAttrData::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclReadAttrData

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_ReadAttrData::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_ReadAttrData

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGetAttrDataLengthUsingCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGetAttrDataLengthUsingCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclReadAttrDataUsingCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclReadAttrDataUsingCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclWriteAttrData::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclWriteAttrData

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclWriteAttrDataUsingCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclWriteAttrDataUsingCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclAuthorizeWrite::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclAuthorizeWrite

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclParseInReadCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclParseInReadCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclParseInReadRspCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclParseInReadRspCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclParseInWriteCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclParseInWriteCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclParseInWriteRspCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclParseInWriteRspCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclParseInConfigReportCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclParseInConfigReportCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclParseInReadReportCfgCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclParseInReadReportCfgCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclParseInDefaultRspCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclParseInDefaultRspCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclParseInDiscAttrsCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclParseInDiscAttrsCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclParseInDiscAttrsRspCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclParseInDiscAttrsRspCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclParseInDiscCmdsCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclParseInDiscCmdsCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclParseInDiscCmdsRspCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclParseInDiscCmdsRspCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclParseInDiscAttrsExtRspCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclParseInDiscAttrsExtRspCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclProcessInReadCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclProcessInReadCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclProcessInWriteCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclProcessInWriteCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclRevertWriteUndividedCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclRevertWriteUndividedCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclProcessInWriteUndividedCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclProcessInWriteUndividedCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclProcessInDiscAttrs::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclProcessInDiscAttrs

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclProcessInDiscAttrsCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclProcessInDiscAttrsCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclProcessInDiscAttrsExtCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclProcessInDiscAttrsExtCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclProcessInDiscCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclProcessInDiscCmd
   5118          
   5119          #endif // ZCL_DISCOVER
   5120          
   5121          
   5122          /*********************************************************************
   5123          *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      2     26   zclAnalogDataType
      0     29   zclAuthorizeWrite
        0     14   -> zclGetAuthorizeCB
      1     39   zclBuildHdr
      2     54   zclFindAttrRec
        0     16   -> zclFindAttrRecsList
      2     16   zclFindAttrRecsList
      0     19   zclFindClusterOption
      2     16   zclFindCmdRec
        0     14   -> zclFindCmdRecsList
      2     16   zclFindCmdRecsList
      0     50   zclFindNextAttrRec
        0     16   -> zclFindAttrRecsList
      1     50   zclFindNextCmdRec
        0     16   -> zclFindCmdRecsList
      0     45   zclGetAttrDataLength
        0      9   -> zclGetDataTypeLength
      0     58   zclGetAttrDataLengthUsingCB
        0     18   -> zclGetReadWriteCB
      0     42   zclGetAuthorizeCB
        0     10   -> zclFindAttrRecsList
      0     46   zclGetClusterOption
        0     10   -> zclFindClusterOption
      0     26   zclGetDataTypeLength
      0     28   zclGetReadWriteCB
        0     10   -> zclFindAttrRecsList
      1     48   zclParseHdr
        0     12   -> osal_memset
      1     24   zclParseInConfigReportCmd
        0     24   -> osal_mem_alloc
        0     24   -> osal_memset
        0     24   -> zclAnalogDataType
        0     24   -> zclGetAttrDataLength
        0     24   -> zclGetDataTypeLength
      1     10   zclParseInDefaultRspCmd
        0     10   -> osal_mem_alloc
      1     10   zclParseInDiscAttrsCmd
        0     10   -> osal_mem_alloc
      1     14   zclParseInDiscAttrsExtRspCmd
        0     14   -> osal_mem_alloc
      1     12   zclParseInDiscAttrsRspCmd
        0     12   -> osal_mem_alloc
      1     10   zclParseInDiscCmdsCmd
        0     10   -> osal_mem_alloc
      1     12   zclParseInDiscCmdsRspCmd
        0     12   -> osal_mem_alloc
      1     12   zclParseInReadCmd
        0     12   -> osal_mem_alloc
      1     12   zclParseInReadReportCfgCmd
        0     12   -> osal_mem_alloc
      1     25   zclParseInReadRspCmd
        0     22   -> osal_mem_alloc
        0     25   -> osal_memcpy
        0     22   -> zclGetAttrDataLength
      1     25   zclParseInWriteCmd
        0     22   -> osal_mem_alloc
        0     25   -> osal_memcpy
        0     22   -> zclGetAttrDataLength
      1     16   zclParseInWriteRspCmd
        0     16   -> osal_mem_alloc
      0     30   zclProcessInDiscAttrs
        0     30   -> zclFindNextAttrRec
        0     26   -> zclProcessInDiscAttrsCmd
        0     26   -> zclProcessInDiscAttrsExtCmd
      1     61   zclProcessInDiscAttrsCmd
        0     30   -> osal_mem_alloc
        0     30   -> osal_mem_free
        0     34   -> zclFindNextAttrRec
        0     35   -> zcl_SendDiscoverAttrsRspCmd
      1     61   zclProcessInDiscAttrsExtCmd
        0     30   -> osal_mem_alloc
        0     30   -> osal_mem_free
        0     34   -> zclFindNextAttrRec
        0     35   -> zcl_SendDiscoverAttrsExtRsp
      1     35   zclProcessInDiscCmd
        0     30   -> osal_mem_alloc
        0     30   -> osal_mem_free
        0     34   -> zclFindNextCmdRec
        0     35   -> zcl_SendDiscoverCmdsRspCmd
      1     37   zclProcessInReadCmd
        0     32   -> osal_mem_alloc
        0     32   -> osal_mem_free
        0     34   -> zclFindAttrRec
        0     32   -> zclGetAuthorizeCB
        0     37   -> zcl_SendReadRsp
      1     39   zclProcessInWriteCmd
        0     34   -> bdb_ZclIdentifyCmdInd
        0     34   -> osal_mem_alloc
        0     34   -> osal_mem_free
        0     37   -> osal_memcpy
        0     36   -> zclFindAttrRec
        0     36   -> zclWriteAttrData
        0     36   -> zclWriteAttrDataUsingCB
        0     39   -> zcl_SendWriteRsp
      1     41   zclProcessInWriteUndividedCmd
        0     36   -> osal_mem_alloc
        0     36   -> osal_mem_free
        0     38   -> zclFindAttrRec
        0     36   -> zclGetAttrDataLength
        0     36   -> zclGetAttrDataLengthUsingCB
        0     38   -> zclReadAttrData
        0     40   -> zclReadAttrDataUsingCB
        0     38   -> zclRevertWriteUndividedCmd
        0     38   -> zclWriteAttrData
        0     38   -> zclWriteAttrDataUsingCB
        0     41   -> zcl_SendWriteRsp
      0     56   zclReadAttrData
        0     18   -> osal_memcpy
        0     15   -> zclGetAttrDataLength
      0     60   zclReadAttrDataUsingCB
        0     16   -> zclGetReadWriteCB
      0     69   zclRevertWriteUndividedCmd
        0     31   -> osal_memcpy
        0     30   -> zclFindAttrRec
        0     28   -> zclGetAttrDataLength
        0     30   -> zclWriteAttrDataUsingCB
      1     45   zclSerializeData
        0     19   -> osal_buffer_uint32
        0     18   -> osal_memcpy
      0     46   zclSetSecurityOption
        0     10   -> zclFindClusterOption
      0     56   zclWriteAttrData
        0     18   -> osal_memcpy
        0     15   -> zclAuthorizeWrite
        0     15   -> zclGetAttrDataLength
      0     56   zclWriteAttrDataUsingCB
        0     14   -> zclAuthorizeWrite
        0     14   -> zclGetReadWriteCB
      0     61   zcl_DeviceOperational
        0     23   -> zclFindAttrRec
        0     23   -> zclReadAttrData
      1     12   zcl_HandleExternal
        0     12   -> osal_msg_allocate
        0     12   -> osal_msg_send
        0     12   -> zcl_getExternalFoundationHandler
      2      0   zcl_Init
      1     55   zcl_ProcessMessageMSG
        0     36   -> afFindEndPointDesc
        0     36   -> osal_mem_free
        0     36   -> zclGetClusterOption
        0     36   -> zclParseHdr
        0     36   -> zclSetSecurityOption
        0     38   -> zcl_DeviceOperational
        0     43   -> zcl_SendDefaultRspCmd
      0     32   zcl_ReadAttrData
        0     26   -> zclFindAttrRec
        0     26   -> zclReadAttrData
        0     28   -> zclReadAttrDataUsingCB
      1     76   zcl_SendCommand
        0     39   -> AF_DataRequest
        0     30   -> afFindEndPointDesc
        0     30   -> osal_mem_alloc
        0     30   -> osal_mem_free
        0     33   -> osal_memcpy
        0     30   -> osal_memset
        0     30   -> zclBuildHdr
        0     30   -> zclGetClusterOption
        0     32   -> zcl_DeviceOperational
      1     36   zcl_SendConfigReportRspCmd
        0     20   -> osal_mem_alloc
        0     20   -> osal_mem_free
        0     31   -> zcl_SendCommand
      1     66   zcl_SendDefaultRspCmd
        0     23   -> zcl_SendCommand
      1     32   zcl_SendDiscoverAttrsCmd
        0     16   -> osal_mem_alloc
        0     16   -> osal_mem_free
        0     27   -> zcl_SendCommand
      1     31   zcl_SendDiscoverAttrsExt
        0     26   -> zcl_SendCommand
      1     70   zcl_SendDiscoverAttrsExtRsp
        0     24   -> osal_mem_alloc
        0     24   -> osal_mem_free
        0     35   -> zcl_SendCommand
      1     70   zcl_SendDiscoverAttrsRspCmd
        0     24   -> osal_mem_alloc
        0     24   -> osal_mem_free
        0     35   -> zcl_SendCommand
      1     31   zcl_SendDiscoverCmdsCmd
        0     25   -> zcl_SendCommand
      1     68   zcl_SendDiscoverCmdsRspCmd
        0     22   -> osal_mem_alloc
        0     22   -> osal_mem_free
        0     33   -> zcl_SendCommand
      1     36   zcl_SendRead
        0     20   -> osal_mem_alloc
        0     20   -> osal_mem_free
        0     31   -> zcl_SendCommand
      1     42   zcl_SendReadReportCfgRspCmd
        0     26   -> osal_mem_alloc
        0     26   -> osal_mem_free
        0     26   -> zclAnalogDataType
        0     26   -> zclGetDataTypeLength
        0     26   -> zclSerializeData
        0     37   -> zcl_SendCommand
      1     72   zcl_SendReadRsp
        0     24   -> osal_mem_alloc
        0     24   -> osal_mem_free
        0     24   -> zclGetAttrDataLength
        0     24   -> zclGetAttrDataLengthUsingCB
        0     28   -> zclReadAttrDataUsingCB
        0     24   -> zclSerializeData
        0     35   -> zcl_SendCommand
      1     38   zcl_SendReportCmd
        0     22   -> osal_mem_alloc
        0     22   -> osal_mem_free
        0     22   -> zclGetAttrDataLength
        0     22   -> zclSerializeData
        0     33   -> zcl_SendCommand
      1     39   zcl_SendWriteRequest
        0     22   -> osal_mem_alloc
        0     22   -> osal_mem_free
        0     22   -> zclGetAttrDataLength
        0     22   -> zclSerializeData
        0     33   -> zcl_SendCommand
      1     72   zcl_SendWriteRsp
        0     20   -> osal_mem_alloc
        0     20   -> osal_mem_free
        0     31   -> zcl_SendCommand
      1     19   zcl_addExternalFoundationHandler
        0     10   -> osal_mem_alloc
        0     10   -> osal_mem_free
      0     12   zcl_event_loop
        0     12   -> osal_msg_deallocate
        0     12   -> osal_msg_receive
        0     12   -> osal_msg_send
        0     12   -> zcl_ProcessMessageMSG
        0     12   -> zcl_getExternalFoundationHandler
      2     12   zcl_getExternalFoundationHandler
      2      0   zcl_getParsedTransSeqNum
      2      0   zcl_getRawAFMsg
      1     12   zcl_registerAttrList
        0     12   -> osal_mem_alloc
      1     12   zcl_registerClusterOptionList
        0     12   -> osal_mem_alloc
      1     12   zcl_registerCmdList
        0     12   -> osal_mem_alloc
      0      9   zcl_registerForMsg
        0      9   -> zcl_addExternalFoundationHandler
      0      9   zcl_registerForMsgExt
        0      9   -> zcl_addExternalFoundationHandler
      0     14   zcl_registerPlugin
        0     12   -> osal_mem_alloc
      0     14   zcl_registerReadWriteCB
        0     14   -> zclFindAttrRecsList
      2      0   zcl_registerValidateAttrData


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  ?<Initializer for zcl_radius>
       5  ??Subroutine198_0
       6  ??Subroutine199_0
       5  ??Subroutine200_0
       3  ??Subroutine201_0
       6  ??Subroutine202_0
       5  ??Subroutine203_0
       5  ??Subroutine204_0
       4  ??Subroutine205_0
       6  ??Subroutine206_0
       6  ??Subroutine207_0
       7  ??Subroutine208_0
       8  ??Subroutine209_0
       7  ??Subroutine210_0
       8  ??Subroutine211_0
       1  ??Subroutine212_0
      10  ??Subroutine213_0
       5  ??Subroutine214_0
       5  ??Subroutine215_0
       5  ??Subroutine216_0
       2  ??Subroutine217_0
       6  ??Subroutine218_0
       1  ??Subroutine219_0
       6  ??Subroutine220_0
       6  ??Subroutine221_0
       1  ??Subroutine222_0
       3  ??Subroutine223_0
       4  ??Subroutine224_0
       8  ??Subroutine225_0
       9  ??Subroutine226_0
       5  ??Subroutine227_0
       4  ??Subroutine228_0
       7  ??Subroutine229_0
       1  ??Subroutine230_0
       5  ??Subroutine231_0
       6  ??Subroutine232_0
       8  ??Subroutine233_0
       2  ??Subroutine234_0
       4  ??Subroutine235_0
       3  ??Subroutine236_0
       5  ??Subroutine237_0
       5  ??Subroutine238_0
       8  ??Subroutine239_0
      10  ??Subroutine240_0
      16  ??Subroutine241_0
       6  ??Subroutine242_0
       2  ??Subroutine243_0
       6  ??Subroutine244_0
       6  ??Subroutine245_0
       8  ??Subroutine246_0
      25  ??Subroutine247_0
       5  ??Subroutine248_0
       8  ??Subroutine249_0
       5  ??Subroutine250_0
       7  ??Subroutine251_0
       7  ?Subroutine0
       3  ?Subroutine1
       5  ?Subroutine10
      10  ?Subroutine100
      12  ?Subroutine101
       4  ?Subroutine102
       4  ?Subroutine103
       8  ?Subroutine104
       6  ?Subroutine105
       8  ?Subroutine106
       2  ?Subroutine107
      12  ?Subroutine108
       4  ?Subroutine109
       7  ?Subroutine11
       7  ?Subroutine110
       4  ?Subroutine111
       6  ?Subroutine112
      14  ?Subroutine113
      14  ?Subroutine114
      21  ?Subroutine115
      16  ?Subroutine116
       6  ?Subroutine117
       8  ?Subroutine118
       4  ?Subroutine119
       5  ?Subroutine12
       4  ?Subroutine120
      11  ?Subroutine121
       6  ?Subroutine122
       4  ?Subroutine123
       5  ?Subroutine124
       4  ?Subroutine125
      12  ?Subroutine126
      10  ?Subroutine127
      12  ?Subroutine128
       4  ?Subroutine129
       5  ?Subroutine13
      16  ?Subroutine130
      12  ?Subroutine131
      13  ?Subroutine132
       6  ?Subroutine133
       7  ?Subroutine134
      14  ?Subroutine135
      21  ?Subroutine136
      10  ?Subroutine137
       8  ?Subroutine138
       8  ?Subroutine139
      77  ?Subroutine14
      19  ?Subroutine140
      11  ?Subroutine141
      12  ?Subroutine142
       9  ?Subroutine143
      14  ?Subroutine144
      10  ?Subroutine145
      11  ?Subroutine146
       8  ?Subroutine147
      12  ?Subroutine148
      15  ?Subroutine149
      13  ?Subroutine15
       5  ?Subroutine150
       6  ?Subroutine151
       4  ?Subroutine152
       5  ?Subroutine153
       9  ?Subroutine154
       6  ?Subroutine155
      30  ?Subroutine156
       8  ?Subroutine157
       9  ?Subroutine158
       4  ?Subroutine159
      32  ?Subroutine16
       6  ?Subroutine160
       3  ?Subroutine161
       4  ?Subroutine162
       6  ?Subroutine163
      13  ?Subroutine164
       7  ?Subroutine165
      19  ?Subroutine166
       8  ?Subroutine167
       8  ?Subroutine168
      10  ?Subroutine169
      12  ?Subroutine17
       1  ?Subroutine170
      16  ?Subroutine171
       5  ?Subroutine172
       6  ?Subroutine173
       5  ?Subroutine174
       5  ?Subroutine175
       5  ?Subroutine176
       9  ?Subroutine177
       8  ?Subroutine178
       5  ?Subroutine179
      19  ?Subroutine18
       8  ?Subroutine180
      12  ?Subroutine181
      12  ?Subroutine182
       1  ?Subroutine183
      18  ?Subroutine184
       3  ?Subroutine185
      14  ?Subroutine186
       6  ?Subroutine187
       2  ?Subroutine188
       1  ?Subroutine189
      26  ?Subroutine19
       7  ?Subroutine190
       9  ?Subroutine191
       8  ?Subroutine192
       8  ?Subroutine193
       5  ?Subroutine194
       7  ?Subroutine195
       5  ?Subroutine196
       7  ?Subroutine197
       3  ?Subroutine2
       6  ?Subroutine20
       2  ?Subroutine21
      13  ?Subroutine22
       4  ?Subroutine23
      11  ?Subroutine24
       6  ?Subroutine25
      13  ?Subroutine26
       8  ?Subroutine27
       4  ?Subroutine28
       8  ?Subroutine29
       5  ?Subroutine3
       5  ?Subroutine30
       6  ?Subroutine31
       7  ?Subroutine32
       7  ?Subroutine33
      18  ?Subroutine34
       4  ?Subroutine35
      12  ?Subroutine36
       5  ?Subroutine37
       7  ?Subroutine38
       5  ?Subroutine39
       5  ?Subroutine4
       4  ?Subroutine40
       6  ?Subroutine41
       7  ?Subroutine42
       3  ?Subroutine43
       8  ?Subroutine44
      12  ?Subroutine45
       6  ?Subroutine46
       6  ?Subroutine47
      21  ?Subroutine48
       6  ?Subroutine49
       3  ?Subroutine5
       3  ?Subroutine50
       5  ?Subroutine51
      13  ?Subroutine52
       4  ?Subroutine53
      29  ?Subroutine54
       4  ?Subroutine55
       6  ?Subroutine56
       6  ?Subroutine57
       8  ?Subroutine58
       4  ?Subroutine59
       2  ?Subroutine6
      18  ?Subroutine60
      22  ?Subroutine61
       5  ?Subroutine62
       6  ?Subroutine63
      12  ?Subroutine64
       9  ?Subroutine65
       9  ?Subroutine66
      12  ?Subroutine67
      10  ?Subroutine68
       9  ?Subroutine69
       5  ?Subroutine7
       6  ?Subroutine70
      18  ?Subroutine71
       2  ?Subroutine72
      10  ?Subroutine73
      14  ?Subroutine74
       8  ?Subroutine75
      12  ?Subroutine76
       9  ?Subroutine77
      30  ?Subroutine78
       1  ?Subroutine79
       3  ?Subroutine8
      17  ?Subroutine80
       6  ?Subroutine81
      12  ?Subroutine82
       5  ?Subroutine83
       5  ?Subroutine84
       4  ?Subroutine85
       6  ?Subroutine86
      13  ?Subroutine87
       2  ?Subroutine88
       5  ?Subroutine89
       5  ?Subroutine9
       4  ?Subroutine90
      10  ?Subroutine91
      10  ?Subroutine92
       4  ?Subroutine93
       7  ?Subroutine94
       3  ?Subroutine95
      12  ?Subroutine96
      11  ?Subroutine97
       6  ?Subroutine98
       8  ?Subroutine99
       2  attrList
       2  clusterOptionList
       2  externalEndPointHandlerList
       2  gpCmdList
       2  plugins
       2  rawAFMsg
       1  savedZCLTransSeqNum
      33  zclAnalogDataType
       6  zclAnalogDataType::?relay
      59  zclAuthorizeWrite
       6  zclAuthorizeWrite::?relay
      98  zclBuildHdr
       6  zclBuildHdr::?relay
      92  zclCmdTable
     129  zclFindAttrRec
       6  zclFindAttrRec::?relay
      37  zclFindAttrRecsList
       6  zclFindAttrRecsList::?relay
     102  zclFindClusterOption
       6  zclFindClusterOption::?relay
     109  zclFindCmdRec
       6  zclFindCmdRec::?relay
      37  zclFindCmdRecsList
       6  zclFindCmdRecsList::?relay
     193  zclFindNextAttrRec
       6  zclFindNextAttrRec::?relay
     243  zclFindNextCmdRec
       6  zclFindNextCmdRec::?relay
      63  zclGetAttrDataLength
       6  zclGetAttrDataLength::?relay
     101  zclGetAttrDataLengthUsingCB
       6  zclGetAttrDataLengthUsingCB::?relay
      30  zclGetAuthorizeCB
       6  zclGetAuthorizeCB::?relay
      26  zclGetClusterOption
       6  zclGetClusterOption::?relay
     166  zclGetDataTypeLength
       6  zclGetDataTypeLength::?relay
      30  zclGetReadWriteCB
       6  zclGetReadWriteCB::?relay
     209  zclParseHdr
       6  zclParseHdr::?relay
     544  zclParseInConfigReportCmd
       6  zclParseInConfigReportCmd::?relay
      21  zclParseInDefaultRspCmd
       6  zclParseInDefaultRspCmd::?relay
      45  zclParseInDiscAttrsCmd
       6  zclParseInDiscAttrsCmd::?relay
     140  zclParseInDiscAttrsExtRspCmd
       6  zclParseInDiscAttrsExtRspCmd::?relay
      78  zclParseInDiscAttrsRspCmd
       6  zclParseInDiscAttrsRspCmd::?relay
      21  zclParseInDiscCmdsCmd
       6  zclParseInDiscCmdsCmd::?relay
      78  zclParseInDiscCmdsRspCmd
       6  zclParseInDiscCmdsRspCmd::?relay
     104  zclParseInReadCmd
       6  zclParseInReadCmd::?relay
      74  zclParseInReadReportCfgCmd
       6  zclParseInReadReportCfgCmd::?relay
     333  zclParseInReadRspCmd
       6  zclParseInReadRspCmd::?relay
     325  zclParseInWriteCmd
       6  zclParseInWriteCmd::?relay
     110  zclParseInWriteRspCmd
       6  zclParseInWriteRspCmd::?relay
     179  zclProcessInDiscAttrs
       6  zclProcessInDiscAttrs::?relay
     225  zclProcessInDiscAttrsCmd
       6  zclProcessInDiscAttrsCmd::?relay
     261  zclProcessInDiscAttrsExtCmd
       6  zclProcessInDiscAttrsExtCmd::?relay
     442  zclProcessInDiscCmd
       6  zclProcessInDiscCmd::?relay
     440  zclProcessInReadCmd
       6  zclProcessInReadCmd::?relay
     556  zclProcessInWriteCmd
       6  zclProcessInWriteCmd::?relay
     783  zclProcessInWriteUndividedCmd
       6  zclProcessInWriteUndividedCmd::?relay
     109  zclReadAttrData
       6  zclReadAttrData::?relay
      93  zclReadAttrDataUsingCB
       6  zclReadAttrDataUsingCB::?relay
     249  zclRevertWriteUndividedCmd
       6  zclRevertWriteUndividedCmd::?relay
     382  zclSerializeData
       6  zclSerializeData::?relay
      45  zclSetSecurityOption
       6  zclSetSecurityOption::?relay
     150  zclWriteAttrData
       6  zclWriteAttrData::?relay
     104  zclWriteAttrDataUsingCB
       6  zclWriteAttrDataUsingCB::?relay
     123  zcl_DeviceOperational
       6  zcl_DeviceOperational::?relay
     184  zcl_HandleExternal
       6  zcl_HandleExternal::?relay
       1  zcl_InSeqNum
      12  zcl_Init
       6  zcl_Init::?relay
    1074  zcl_ProcessMessageMSG
       6  zcl_ProcessMessageMSG::?relay
     131  zcl_ReadAttrData
       6  zcl_ReadAttrData::?relay
     422  zcl_SendCommand
       6  zcl_SendCommand::?relay
     257  zcl_SendConfigReportRspCmd
       6  zcl_SendConfigReportRspCmd::?relay
     129  zcl_SendDefaultRspCmd
       6  zcl_SendDefaultRspCmd::?relay
     172  zcl_SendDiscoverAttrsCmd
       6  zcl_SendDiscoverAttrsCmd::?relay
     144  zcl_SendDiscoverAttrsExt
       6  zcl_SendDiscoverAttrsExt::?relay
     250  zcl_SendDiscoverAttrsExtRsp
       6  zcl_SendDiscoverAttrsExtRsp::?relay
     229  zcl_SendDiscoverAttrsRspCmd
       6  zcl_SendDiscoverAttrsRspCmd::?relay
     199  zcl_SendDiscoverCmdsCmd
       6  zcl_SendDiscoverCmdsCmd::?relay
     319  zcl_SendDiscoverCmdsRspCmd
       6  zcl_SendDiscoverCmdsRspCmd::?relay
     196  zcl_SendRead
       6  zcl_SendRead::?relay
     534  zcl_SendReadReportCfgRspCmd
       6  zcl_SendReadReportCfgRspCmd::?relay
     411  zcl_SendReadRsp
       6  zcl_SendReadRsp::?relay
     217  zcl_SendReportCmd
       6  zcl_SendReportCmd::?relay
     217  zcl_SendWriteRequest
       6  zcl_SendWriteRequest::?relay
     242  zcl_SendWriteRsp
       6  zcl_SendWriteRsp::?relay
       1  zcl_TaskID
       2  zcl_ValidateAttrDataCB
     134  zcl_addExternalFoundationHandler
       6  zcl_addExternalFoundationHandler::?relay
      98  zcl_event_loop
       6  zcl_event_loop::?relay
      60  zcl_getExternalFoundationHandler
       6  zcl_getExternalFoundationHandler::?relay
      12  zcl_getParsedTransSeqNum
       6  zcl_getParsedTransSeqNum::?relay
      13  zcl_getRawAFMsg
       6  zcl_getRawAFMsg::?relay
       1  zcl_radius
      96  zcl_registerAttrList
       6  zcl_registerAttrList::?relay
      72  zcl_registerClusterOptionList
       6  zcl_registerClusterOptionList::?relay
      73  zcl_registerCmdList
       6  zcl_registerCmdList::?relay
      10  zcl_registerForMsg
       6  zcl_registerForMsg::?relay
       8  zcl_registerForMsgExt
       6  zcl_registerForMsgExt::?relay
      95  zcl_registerPlugin
       6  zcl_registerPlugin::?relay
      58  zcl_registerReadWriteCB
       6  zcl_registerReadWriteCB::?relay
      12  zcl_registerValidateAttrData
       6  zcl_registerValidateAttrData::?relay

 
 15 851 bytes in segment BANKED_CODE
    456 bytes in segment BANK_RELAYS
     92 bytes in segment CODE_C
      1 byte  in segment XDATA_I
      1 byte  in segment XDATA_ID
     17 bytes in segment XDATA_Z
 
    549 bytes of CODE     memory
 15 851 bytes of HUGECODE memory
     18 bytes of XDATA    memory

Errors: none
Warnings: none
