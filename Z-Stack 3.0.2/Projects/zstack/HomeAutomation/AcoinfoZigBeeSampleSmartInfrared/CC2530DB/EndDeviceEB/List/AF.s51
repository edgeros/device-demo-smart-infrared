///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V10.10.1.4655 for 8051              21/Jul/2021  15:47:01
// Copyright 2004-2017 IAR Systems AB.
// Standalone license - IAR Embedded Workbench for 8051
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        D:\work\zigbee\ti_cc2530_zstack\Z-Stack
//        3.0.2\Components\stack\af\AF.c
//    Command line       =  
//        -f C:\Users\WenHao\AppData\Local\Temp\EWBB13.tmp
//        ("D:\work\zigbee\ti_cc2530_zstack\Z-Stack
//        3.0.2\Components\stack\af\AF.c" -D CSTX_BOARD -D SECURE=1 -D
//        TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D xPOWER_SAVING -D
//        NWK_AUTO_POLL -D xZTOOL_P1 -D xMT_TASK -D xMT_APP_FUNC -D
//        xMT_SYS_FUNC -D xMT_ZDO_FUNC -D xMT_ZDO_MGMT -D xMT_APP_CNF_FUNC -D
//        LCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D ZCL_IDENTIFY -D
//        ZCL_READ -D ZCL_DISCOVER -D ZCL_WRITE -D ZCL_BASIC -D
//        ZCL_REPORTING_DEVICE -D HAL_LED=TRUE -D HAL_UART=TRUE -D HAL_KEY=TRUE
//        -D ISR_KEYINTERRUPT -lC "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\EndDeviceEB\List"
//        -lA "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\EndDeviceEB\List"
//        --diag_suppress Pe001,Pa010 -o
//        "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\EndDeviceEB\Obj"
//        -e --debug --core=plain --dptr=16,1 --data_model=large
//        --code_model=banked --calling_convention=xdata_reentrant
//        --place_constants=data_rom --nr_virtual_regs 16 -f
//        "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
//        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f
//        "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
//        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x00100000 -DZDAPP_CONFIG_PAN_ID=0xFFFF
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0}
//        -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
//        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000
//        -DENABLE_LED4_DISABLE_S1) -f "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
//        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\"
//        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\Source\"
//        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\Source\"
//        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\ZMain\TI2530DB\"
//        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\hal\include\"
//        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
//        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\mac\include\"
//        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
//        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
//        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
//        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\mt\"
//        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\osal\include\"
//        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\services\saddr\"
//        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\services\sdata\"
//        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\stack\af\"
//        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
//        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\stack\gp\"
//        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
//        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
//        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\stack\sec\"
//        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\stack\sys\"
//        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
//        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
//        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\zmac\"
//        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
//        -Ohz --require_prototypes)
//    Locale             =  Chinese (Simplified)_China.936
//    List file          =  
//        D:\work\zigbee\ti_cc2530_zstack\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\EndDeviceEB\List\AF.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME AF

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__register_banks", "*"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V3
        EXTERN ?V4
        EXTERN ?V5
        EXTERN ?V6
        EXTERN ?V7
        EXTERN ?V8
        EXTERN ?V9
        EXTERN ?V10
        EXTERN ?V11
        EXTERN ?V12
        EXTERN ?V13
        EXTERN ?V14
        EXTERN ?V15
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?CALL_IND
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?L_MOV_X
        EXTERN ?PUSH_XSTACK8_X_TWO
        EXTERN ?PUSH_XSTACK_I_FOUR
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?XLOAD_R0123
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTACK_DISP101_8
        EXTERN ?XSTORE_R0123
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC `??AF_DataRequest::?relay`
        FUNCTION `??AF_DataRequest::?relay`,0203H
        PUBLIC `??AF_DataRequestSrcRtg::?relay`
        FUNCTION `??AF_DataRequestSrcRtg::?relay`,0203H
        PUBLIC `??afAPSF_ConfigGet::?relay`
        FUNCTION `??afAPSF_ConfigGet::?relay`,0203H
        PUBLIC `??afAPSF_ConfigSet::?relay`
        FUNCTION `??afAPSF_ConfigSet::?relay`,0203H
        FUNCTION `??afBuildMSGIncoming::?relay`,0203H
        PUBLIC `??afCopyAddress::?relay`
        FUNCTION `??afCopyAddress::?relay`,0203H
        PUBLIC `??afDataConfirm::?relay`
        FUNCTION `??afDataConfirm::?relay`,0203H
        PUBLIC `??afDataReqMTU::?relay`
        FUNCTION `??afDataReqMTU::?relay`,0203H
        PUBLIC `??afDelete::?relay`
        FUNCTION `??afDelete::?relay`,0203H
        PUBLIC `??afEndPoints::?relay`
        FUNCTION `??afEndPoints::?relay`,0203H
        PUBLIC `??afFindEndPointDesc::?relay`
        FUNCTION `??afFindEndPointDesc::?relay`,0203H
        FUNCTION `??afFindEndPointDescList::?relay`,0203H
        PUBLIC `??afFindSimpleDesc::?relay`
        FUNCTION `??afFindSimpleDesc::?relay`,0203H
        PUBLIC `??afGetMatch::?relay`
        FUNCTION `??afGetMatch::?relay`,0203H
        PUBLIC `??afIncomingData::?relay`
        FUNCTION `??afIncomingData::?relay`,0203H
        PUBLIC `??afNumEndPoints::?relay`
        FUNCTION `??afNumEndPoints::?relay`,0203H
        PUBLIC `??afReflectError::?relay`
        FUNCTION `??afReflectError::?relay`,0203H
        PUBLIC `??afRegister::?relay`
        FUNCTION `??afRegister::?relay`,0203H
        PUBLIC `??afRegisterExtended::?relay`
        FUNCTION `??afRegisterExtended::?relay`,0203H
        PUBLIC `??afSetApplCB::?relay`
        FUNCTION `??afSetApplCB::?relay`,0203H
        PUBLIC `??afSetMatch::?relay`
        FUNCTION `??afSetMatch::?relay`,0203H
        PUBLIC AF_DataRequest
        FUNCTION AF_DataRequest,0a1203H
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 49, STACK
        PUBLIC AF_DataRequestDiscoverRoute
        PUBLIC AF_DataRequestSrcRtg
        FUNCTION AF_DataRequestSrcRtg,0a1203H
        ARGFRAME XSTACK, 12, STACK
        LOCFRAME XSTACK, 21, STACK
        PUBLIC afAPSF_ConfigGet
        FUNCTION afAPSF_ConfigGet,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        PUBLIC afAPSF_ConfigSet
        FUNCTION afAPSF_ConfigSet,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        FUNCTION afBuildMSGIncoming,0a1203H
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 23, STACK
        PUBLIC afCopyAddress
        FUNCTION afCopyAddress,021203H
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC afDataConfirm
        FUNCTION afDataConfirm,0a1203H
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC afDataReqMTU
        FUNCTION afDataReqMTU,021203H
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC afDelete
        FUNCTION afDelete,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC afEndPoints
        FUNCTION afEndPoints,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 3, STACK
        PUBLIC afFindEndPointDesc
        FUNCTION afFindEndPointDesc,0a1203H
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        FUNCTION afFindEndPointDescList,0203H
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC afFindSimpleDesc
        FUNCTION afFindSimpleDesc,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC afGetMatch
        FUNCTION afGetMatch,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC afIncomingData
        FUNCTION afIncomingData,0a1203H
        ARGFRAME XSTACK, 10, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 39, STACK
        PUBLIC afNumEndPoints
        FUNCTION afNumEndPoints,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC afReflectError
        FUNCTION afReflectError,0a1203H
        ARGFRAME XSTACK, 2, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC afRegister
        FUNCTION afRegister,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC afRegisterExtended
        FUNCTION afRegisterExtended,0a1203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC afSetApplCB
        FUNCTION afSetApplCB,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC afSetMatch
        FUNCTION afSetMatch,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC epList
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
APSDE_DataReq       SYMBOL "APSDE_DataReq"
`??APSDE_DataReq::?relay` SYMBOL "?relay", APSDE_DataReq
APSDE_DataReqMTU    SYMBOL "APSDE_DataReqMTU"
`??APSDE_DataReqMTU::?relay` SYMBOL "?relay", APSDE_DataReqMTU
NLME_GetShortAddr   SYMBOL "NLME_GetShortAddr"
`??NLME_GetShortAddr::?relay` SYMBOL "?relay", NLME_GetShortAddr
NLME_IsAddressBroadcast SYMBOL "NLME_IsAddressBroadcast"
`??NLME_IsAddressBroadcast::?relay` SYMBOL "?relay", NLME_IsAddressBroadcast
RTG_AddSrcRtgEntry_Guaranteed SYMBOL "RTG_AddSrcRtgEntry_Guaranteed"
`??RTG_AddSrcRtgEntry_Guaranteed::?relay` SYMBOL "?relay", RTG_AddSrcRtgEntry_Guaranteed
RTG_CheckRtStatus   SYMBOL "RTG_CheckRtStatus"
`??RTG_CheckRtStatus::?relay` SYMBOL "?relay", RTG_CheckRtStatus
aps_FindGroupForEndpoint SYMBOL "aps_FindGroupForEndpoint"
`??aps_FindGroupForEndpoint::?relay` SYMBOL "?relay", aps_FindGroupForEndpoint
bdb_zclFindingBindingEpType SYMBOL "bdb_zclFindingBindingEpType"
`??bdb_zclFindingBindingEpType::?relay` SYMBOL "?relay", bdb_zclFindingBindingEpType
osal_mem_alloc      SYMBOL "osal_mem_alloc"
`??osal_mem_alloc::?relay` SYMBOL "?relay", osal_mem_alloc
osal_mem_free       SYMBOL "osal_mem_free"
`??osal_mem_free::?relay` SYMBOL "?relay", osal_mem_free
osal_memcpy         SYMBOL "osal_memcpy"
`??osal_memcpy::?relay` SYMBOL "?relay", osal_memcpy
osal_msg_allocate   SYMBOL "osal_msg_allocate"
`??osal_msg_allocate::?relay` SYMBOL "?relay", osal_msg_allocate
osal_msg_send       SYMBOL "osal_msg_send"
`??osal_msg_send::?relay` SYMBOL "?relay", osal_msg_send
sAddrExtCpy         SYMBOL "sAddrExtCpy"
`??sAddrExtCpy::?relay` SYMBOL "?relay", sAddrExtCpy
AF_DataRequest      SYMBOL "AF_DataRequest"
`??AF_DataRequest::?relay` SYMBOL "?relay", AF_DataRequest
AF_DataRequestSrcRtg SYMBOL "AF_DataRequestSrcRtg"
`??AF_DataRequestSrcRtg::?relay` SYMBOL "?relay", AF_DataRequestSrcRtg
afAPSF_ConfigGet    SYMBOL "afAPSF_ConfigGet"
`??afAPSF_ConfigGet::?relay` SYMBOL "?relay", afAPSF_ConfigGet
afAPSF_ConfigSet    SYMBOL "afAPSF_ConfigSet"
`??afAPSF_ConfigSet::?relay` SYMBOL "?relay", afAPSF_ConfigSet
afCopyAddress       SYMBOL "afCopyAddress"
`??afCopyAddress::?relay` SYMBOL "?relay", afCopyAddress
afDataConfirm       SYMBOL "afDataConfirm"
`??afDataConfirm::?relay` SYMBOL "?relay", afDataConfirm
afDataReqMTU        SYMBOL "afDataReqMTU"
`??afDataReqMTU::?relay` SYMBOL "?relay", afDataReqMTU
afDelete            SYMBOL "afDelete"
`??afDelete::?relay` SYMBOL "?relay", afDelete
afEndPoints         SYMBOL "afEndPoints"
`??afEndPoints::?relay` SYMBOL "?relay", afEndPoints
afFindEndPointDesc  SYMBOL "afFindEndPointDesc"
`??afFindEndPointDesc::?relay` SYMBOL "?relay", afFindEndPointDesc
afFindSimpleDesc    SYMBOL "afFindSimpleDesc"
`??afFindSimpleDesc::?relay` SYMBOL "?relay", afFindSimpleDesc
afGetMatch          SYMBOL "afGetMatch"
`??afGetMatch::?relay` SYMBOL "?relay", afGetMatch
afIncomingData      SYMBOL "afIncomingData"
`??afIncomingData::?relay` SYMBOL "?relay", afIncomingData
afNumEndPoints      SYMBOL "afNumEndPoints"
`??afNumEndPoints::?relay` SYMBOL "?relay", afNumEndPoints
afReflectError      SYMBOL "afReflectError"
`??afReflectError::?relay` SYMBOL "?relay", afReflectError
afRegister          SYMBOL "afRegister"
`??afRegister::?relay` SYMBOL "?relay", afRegister
afRegisterExtended  SYMBOL "afRegisterExtended"
`??afRegisterExtended::?relay` SYMBOL "?relay", afRegisterExtended
afSetApplCB         SYMBOL "afSetApplCB"
`??afSetApplCB::?relay` SYMBOL "?relay", afSetApplCB
afSetMatch          SYMBOL "afSetMatch"
`??afSetMatch::?relay` SYMBOL "?relay", afSetMatch

        EXTERN `??APSDE_DataReq::?relay`
        FUNCTION `??APSDE_DataReq::?relay`,00H
        EXTERN `??APSDE_DataReqMTU::?relay`
        FUNCTION `??APSDE_DataReqMTU::?relay`,00H
        EXTERN `??NLME_GetShortAddr::?relay`
        FUNCTION `??NLME_GetShortAddr::?relay`,00H
        EXTERN `??NLME_IsAddressBroadcast::?relay`
        FUNCTION `??NLME_IsAddressBroadcast::?relay`,00H
        EXTERN `??RTG_AddSrcRtgEntry_Guaranteed::?relay`
        FUNCTION `??RTG_AddSrcRtgEntry_Guaranteed::?relay`,00H
        EXTERN `??RTG_CheckRtStatus::?relay`
        FUNCTION `??RTG_CheckRtStatus::?relay`,00H
        EXTERN `??aps_FindGroupForEndpoint::?relay`
        FUNCTION `??aps_FindGroupForEndpoint::?relay`,00H
        EXTERN `??bdb_zclFindingBindingEpType::?relay`
        FUNCTION `??bdb_zclFindingBindingEpType::?relay`,00H
        EXTERN `??osal_mem_alloc::?relay`
        FUNCTION `??osal_mem_alloc::?relay`,00H
        EXTERN `??osal_mem_free::?relay`
        FUNCTION `??osal_mem_free::?relay`,00H
        EXTERN `??osal_memcpy::?relay`
        FUNCTION `??osal_memcpy::?relay`,00H
        EXTERN `??osal_msg_allocate::?relay`
        FUNCTION `??osal_msg_allocate::?relay`,00H
        EXTERN `??osal_msg_send::?relay`
        FUNCTION `??osal_msg_send::?relay`,00H
        EXTERN `??sAddrExtCpy::?relay`
        FUNCTION `??sAddrExtCpy::?relay`,00H
        EXTERN APSDE_DataReq
        FUNCTION APSDE_DataReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSDE_DataReqMTU
        FUNCTION APSDE_DataReqMTU,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetShortAddr
        FUNCTION NLME_GetShortAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_IsAddressBroadcast
        FUNCTION NLME_IsAddressBroadcast,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RTG_AddSrcRtgEntry_Guaranteed
        FUNCTION RTG_AddSrcRtgEntry_Guaranteed,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RTG_CheckRtStatus
        FUNCTION RTG_CheckRtStatus,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN aps_FindGroupForEndpoint
        FUNCTION aps_FindGroupForEndpoint,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN apsfSendFragmented
        EXTERN bdb_HeadEpDescriptorList
        EXTERN bdb_zclFindingBindingEpType
        FUNCTION bdb_zclFindingBindingEpType,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_alloc
        FUNCTION osal_mem_alloc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_allocate
        FUNCTION osal_msg_allocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_send
        FUNCTION osal_msg_send,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN sAddrExtCpy
        FUNCTION sAddrExtCpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// D:\work\zigbee\ti_cc2530_zstack\Z-Stack 3.0.2\Components\stack\af\AF.c
//    1 /**************************************************************************************************
//    2   Filename:       AF.c
//    3   Revised:        $Date: 2014-11-04 10:53:36 -0800 (Tue, 04 Nov 2014) $
//    4   Revision:       $Revision: 40974 $
//    5 
//    6   Description:    Application Framework - Device Description helper functions
//    7 
//    8 
//    9   Copyright 2004-2014 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License").  You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product.  Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com.
//   38 **************************************************************************************************/
//   39 
//   40 /*********************************************************************
//   41  * INCLUDES
//   42  */
//   43 
//   44 #include "OSAL.h"
//   45 #include "AF.h"
//   46 #include "nwk_globals.h"
//   47 #include "nwk_util.h"
//   48 #include "aps_groups.h"
//   49 #include "ZDProfile.h"
//   50 #include "aps_frag.h"
//   51 #include "rtg.h"
//   52 
//   53 #if defined ( MT_AF_CB_FUNC )
//   54   #include "MT_AF.h"
//   55 #endif
//   56 
//   57 #if defined ( INTER_PAN )
//   58   #include "stub_aps.h"
//   59 #endif
//   60 
//   61 #include "bdb.h" 
//   62 #if (BDB_TOUCHLINK_CAPABILITY_ENABLED==1)
//   63   #include "bdb_tlCommissioning.h"
//   64 #endif
//   65 
//   66 /*********************************************************************
//   67  * MACROS
//   68  */
//   69 
//   70 /*********************************************************************
//   71  * @fn      afSend
//   72  *
//   73  * @brief   Helper macro for V1 API to invoke V2 API.
//   74  *
//   75  * input parameters
//   76  *
//   77  * @param  *dstAddr - Full ZB destination address: Nwk Addr + End Point.
//   78  * @param   srcEP - Origination (i.e. respond to or ack to) End Point.
//   79  * @param   cID - A valid cluster ID as specified by the Profile.
//   80  * @param   len - Number of bytes of data pointed to by next param.
//   81  * @param  *buf - A pointer to the data bytes to send.
//   82  * @param   options - Valid bit mask of AF Tx Options as defined in AF.h.
//   83  * @param  *transID - A pointer to a byte which can be modified and which will
//   84  *                    be used as the transaction sequence number of the msg.
//   85  *
//   86  * output parameters
//   87  *
//   88  * @param  *transID - Incremented by one if the return value is success.
//   89  *
//   90  * @return  afStatus_t - See previous definition of afStatus_... types.
//   91  */
//   92 #define afSend( dstAddr, srcEP, cID, len, buf, transID, options, radius ) \ 
//   93         AF_DataRequest( (dstAddr), afFindEndPointDesc( (srcEP) ), \ 
//   94                           (cID), (len), (buf), (transID), (options), (radius) )
//   95 
//   96 /*********************************************************************
//   97  * GLOBAL VARIABLES
//   98  */
//   99 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  100 epList_t *epList;
epList:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  101 
//  102 /*********************************************************************
//  103  * LOCAL FUNCTIONS
//  104  */
//  105 
//  106 static void afBuildMSGIncoming( aps_FrameFormat_t *aff, endPointDesc_t *epDesc,
//  107                 zAddrType_t *SrcAddress, uint16 SrcPanId, NLDE_Signal_t *sig,
//  108                 uint8 nwkSeqNum, uint8 SecurityUse, uint32 timestamp, uint8 radius );
//  109 
//  110 static epList_t *afFindEndPointDescList( uint8 EndPoint );
//  111 
//  112 static pDescCB afGetDescCB( endPointDesc_t *epDesc );
//  113 
//  114 /*********************************************************************
//  115  * PUBLIC FUNCTIONS
//  116  */
//  117 
//  118 /*********************************************************************
//  119  * @fn      afInit
//  120  *
//  121  * @brief   Initialization function for the AF.
//  122  *
//  123  * @param   none
//  124  *
//  125  * @return  none
//  126 void afInit( void )
//  127 {
//  128 }
//  129  */
//  130 
//  131 /*********************************************************************
//  132  * @fn      afRegisterExtended
//  133  *
//  134  * @brief   Register an Application's EndPoint description.
//  135  *
//  136  * @param   epDesc - pointer to the Application's endpoint descriptor.
//  137  * @param   descFn - pointer to descriptor callback function
//  138  * @param   applFn - pointer to the Application callback function
//  139  *
//  140  * NOTE:  The memory that epDesc is pointing to must exist after this call.
//  141  *
//  142  * @return  Pointer to epList_t on success, NULL otherwise.
//  143  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  144 epList_t *afRegisterExtended( endPointDesc_t *epDesc, pDescCB descFn, pApplCB applFn )
afRegisterExtended:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function afRegisterExtended
        CODE
//  145 {
        FUNCALL afRegisterExtended, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afRegisterExtended, bdb_zclFindingBindingEpType
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        MOV       A,#-0xe
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       ?V2,R4
        MOV       ?V3,R5
//  146   epList_t *ep = osal_mem_alloc(sizeof(epList_t));
        ; Setup parameters for call to function osal_mem_alloc
        MOV       R2,#0xb
        MOV       R3,#0x0
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV       ?V4,R2
        MOV       ?V5,R3
        MOV       R6,?V4
        MOV       R7,?V5
//  147 
//  148   if (ep != NULL)
        MOV       A,R6
        ORL       A,R7
        JZ        ??afRegisterExtended_0
//  149   {
//  150     ep->nextDesc = epList;
        MOV       DPTR,#epList
        LCALL     ?Subroutine9 & 0xFFFF
//  151     epList = ep;
??CrossCallReturnLabel_8:
        MOV       DPTR,#epList
        MOV       A,R6
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R7
        MOVX      @DPTR,A
//  152     ep->epDesc = epDesc;
        MOV       A,R6
        ADD       A,#0x2
        MOV       ?V4,A
        CLR       A
        ADDC      A,R7
        MOV       ?V5,A
        MOV       DPL,?V4
        MOV       DPH,A
        MOV       A,?V0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,?V1
        LCALL     ?Subroutine26 & 0xFFFF
//  153     ep->pfnDescCB = descFn;
??CrossCallReturnLabel_37:
        MOV       A,?V2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,?V3
        LCALL     ?Subroutine26 & 0xFFFF
//  154     ep->apsfCfg.frameDelay = APSF_DEFAULT_INTERFRAME_DELAY;
??CrossCallReturnLabel_38:
        INC       DPTR
        INC       DPTR
        MOV       A,#0x32
        LCALL     ?Subroutine23 & 0xFFFF
//  155     ep->apsfCfg.windowSize = APSF_DEFAULT_WINDOW_SIZE;
??CrossCallReturnLabel_32:
        MOV       A,#0x1
        LCALL     ?Subroutine23 & 0xFFFF
//  156     ep->flags = eEP_AllowMatch;  // Default to allow Match Descriptor.
??CrossCallReturnLabel_33:
        INC       DPTR
        MOVX      @DPTR,A
//  157     ep->pfnApplCB = applFn;
        MOV       A,#0xe
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_10:
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ??Subroutine37_0 & 0xFFFF
//  158     
//  159   #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1) 
//  160     //Make sure we add at least one application endpoint
//  161     if ((epDesc->endPoint != 0)  || (epDesc->endPoint < BDB_ZIGBEE_RESERVED_ENDPOINTS_START))
//  162     {
//  163       bdb_HeadEpDescriptorList = epList;
??CrossCallReturnLabel_67:
        MOV       DPTR,#epList
        LCALL     ??Subroutine35_0 & 0xFFFF
??CrossCallReturnLabel_52:
        MOV       DPTR,#bdb_HeadEpDescriptorList
        LCALL     ??Subroutine37_0 & 0xFFFF
//  164       ep->epDesc->epType = bdb_zclFindingBindingEpType(ep->epDesc);
??CrossCallReturnLabel_68:
        ; Setup parameters for call to function bdb_zclFindingBindingEpType
        LCALL     ?Subroutine19 & 0xFFFF
//  165     }
//  166 
//  167   #endif
//  168 #if defined ( BDB_TL_INITIATOR ) || defined ( BDB_TL_TARGET )
//  169     // find the first empty entry in the device info table
//  170     for ( uint8 i = 0; i < 5; i++ )
//  171     {
//  172       if ( touchLinkSubDevicesTbl[i] == NULL )
//  173       {
//  174         touchLinkSubDevicesTbl[i] = osal_mem_alloc(sizeof(bdbTLDeviceInfo_t));
//  175         if ( touchLinkSubDevicesTbl[i] != NULL )
//  176         {
//  177           touchLinkSubDevicesTbl[i]->deviceID = epDesc->simpleDesc->AppDeviceId;
//  178           touchLinkSubDevicesTbl[i]->endpoint = epDesc->simpleDesc->EndPoint;
//  179           touchLinkSubDevicesTbl[i]->profileID = epDesc->simpleDesc->AppProfId;
//  180           touchLinkSubDevicesTbl[i]->version = epDesc->simpleDesc->AppDevVer;
//  181           break;
//  182         }
//  183       }
//  184     }
//  185 #endif  // BDB_TL_INITIATOR || BDB_TL_TARGET
//  186   }
??CrossCallReturnLabel_88:
        LCALL     `??bdb_zclFindingBindingEpType::?relay`; Banked call to: bdb_zclFindingBindingEpType
        MOV       DPL,?V4
        MOV       DPH,?V5
        LCALL     ??Subroutine41_0 & 0xFFFF
??CrossCallReturnLabel_92:
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
//  187  
//  188   return ep;
??afRegisterExtended_0:
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
          CFI EndBlock cfiBlock0
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0
//  189 }

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R7,#0x6
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock1

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine26:
          CFI Block cfiCond2 Using cfiCommon0
          CFI Function afRegisterExtended
          CFI Conditional ??CrossCallReturnLabel_37
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond3 Using cfiCommon0
          CFI (cfiCond3) Function afRegisterExtended
          CFI (cfiCond3) Conditional ??CrossCallReturnLabel_38
          CFI (cfiCond3) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond3) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond3) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond3) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond3) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond3) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond3) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond3) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond3) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond3) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond3) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond3) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond3) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond3) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond3) CFA_SP SP+-2
          CFI (cfiCond3) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker4 Using cfiCommon1
          CFI (cfiPicker4) NoFunction
          CFI (cfiPicker4) Picker
        LCALL     ?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_44:
        RET
          CFI EndBlock cfiCond2
          CFI EndBlock cfiCond3
          CFI EndBlock cfiPicker4

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine29:
          CFI Block cfiCond5 Using cfiCommon0
          CFI Function afRegisterExtended
          CFI Conditional ??CrossCallReturnLabel_44, ??CrossCallReturnLabel_37
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond6 Using cfiCommon0
          CFI (cfiCond6) Function afRegisterExtended
          CFI (cfiCond6) Conditional ??CrossCallReturnLabel_44, ??CrossCallReturnLabel_38
          CFI (cfiCond6) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond6) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond6) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond6) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond6) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond6) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond6) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond6) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond6) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond6) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond6) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond6) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond6) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond6) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond6) CFA_SP SP+-4
          CFI (cfiCond6) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond7 Using cfiCommon0
          CFI (cfiCond7) Function afRegisterExtended
          CFI (cfiCond7) Conditional ??CrossCallReturnLabel_45, ??CrossCallReturnLabel_32
          CFI (cfiCond7) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond7) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond7) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond7) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond7) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond7) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond7) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond7) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond7) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond7) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond7) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond7) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond7) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond7) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond7) CFA_SP SP+-4
          CFI (cfiCond7) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond8 Using cfiCommon0
          CFI (cfiCond8) Function afRegisterExtended
          CFI (cfiCond8) Conditional ??CrossCallReturnLabel_45, ??CrossCallReturnLabel_33
          CFI (cfiCond8) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond8) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond8) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond8) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond8) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond8) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond8) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond8) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond8) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond8) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond8) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond8) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond8) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond8) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond8) CFA_SP SP+-4
          CFI (cfiCond8) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker9 Using cfiCommon1
          CFI (cfiPicker9) NoFunction
          CFI (cfiPicker9) Picker
        LCALL     ?Subroutine33 & 0xFFFF
??CrossCallReturnLabel_48:
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        RET
          CFI EndBlock cfiCond5
          CFI EndBlock cfiCond6
          CFI EndBlock cfiCond7
          CFI EndBlock cfiCond8
          CFI EndBlock cfiPicker9

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine23:
          CFI Block cfiCond10 Using cfiCommon0
          CFI Function afRegisterExtended
          CFI Conditional ??CrossCallReturnLabel_32
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond11 Using cfiCommon0
          CFI (cfiCond11) Function afRegisterExtended
          CFI (cfiCond11) Conditional ??CrossCallReturnLabel_33
          CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond11) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond11) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond11) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond11) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond11) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond11) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond11) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond11) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond11) CFA_SP SP+-2
          CFI (cfiCond11) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker12 Using cfiCommon1
          CFI (cfiPicker12) NoFunction
          CFI (cfiPicker12) Picker
        LCALL     ?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_45:
        INC       DPTR
        INC       DPTR
        INC       DPTR
        RET
          CFI EndBlock cfiCond10
          CFI EndBlock cfiCond11
          CFI EndBlock cfiPicker12
//  190 
//  191 /*********************************************************************
//  192  * @fn      afRegister
//  193  *
//  194  * @brief   Register an Application's EndPoint description.
//  195  *
//  196  * @param   epDesc - pointer to the Application's endpoint descriptor.
//  197  *
//  198  * NOTE:  The memory that epDesc is pointing to must exist after this call.
//  199  *
//  200  * @return  afStatus_SUCCESS - Registered
//  201  *          afStatus_MEM_FAIL - not enough memory to add descriptor
//  202  *          afStatus_INVALID_PARAMETER - duplicate endpoint
//  203  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  204 afStatus_t afRegister( endPointDesc_t *epDesc )
afRegister:
          CFI Block cfiBlock13 Using cfiCommon0
          CFI Function afRegister
        CODE
//  205 {
        FUNCALL afRegister, afFindEndPointDescList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afRegister, afRegisterExtended
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
//  206   if (afFindEndPointDescList(epDesc->endPoint))  // Look for duplicate endpoint.
        ; Setup parameters for call to function afFindEndPointDescList
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
        MOV       ?V1,R3
        MOV       A,R2
        ORL       A,?V1
        JZ        ??afRegister_0
//  207   {
//  208     return afStatus_INVALID_PARAMETER;
        MOV       R1,#0x2
        SJMP      ??afRegister_1
//  209   }
//  210 
//  211   return ((NULL == afRegisterExtended(epDesc, NULL, NULL)) ? afStatus_MEM_FAIL : afStatus_SUCCESS);
??afRegister_0:
        ; Setup parameters for call to function afRegisterExtended
        CLR       A
        MOV       ?V0,A
        MOV       ?V1,A
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 12)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??afRegisterExtended::?relay`; Banked call to: afRegisterExtended
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        MOV       ?V1,R3
        MOV       A,R2
        ORL       A,?V1
        JNZ       ??afRegister_2
        MOV       R1,#0x10
        SJMP      ??afRegister_1
??afRegister_2:
        MOV       R1,#0x0
??afRegister_1:
        LJMP      ?Subroutine1 & 0xFFFF
//  212 }
          CFI EndBlock cfiBlock13
//  213 
//  214 /*********************************************************************
//  215  * @fn      afDelete
//  216  *
//  217  * @brief   Delete an Application's EndPoint descriptor and frees the memory
//  218  *
//  219  * @param   EndPoint - Application Endpoint to delete
//  220  *
//  221  * @return  afStatus_SUCCESS - endpoint deleted
//  222  *          afStatus_INVALID_PARAMETER - endpoint not found
//  223  *          afStatus_FAILED - endpoint list empty
//  224  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  225 afStatus_t afDelete( uint8 EndPoint )
afDelete:
          CFI Block cfiBlock14 Using cfiCommon0
          CFI Function afDelete
        CODE
//  226 {
        FUNCALL afDelete, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afDelete, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV       A,R1
        MOV       R6,A
//  227   epList_t *epCurrent;
//  228   epList_t *epPrevious;
//  229 
//  230   if ( epList != NULL )
        MOV       DPTR,#epList
        LCALL     ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_13:
        JZ        ??afDelete_0
//  231   {
//  232     epPrevious = epCurrent = epList;
        MOV       DPTR,#epList
        LCALL     ??Subroutine39_0 & 0xFFFF
//  233 
//  234     // first element of the list matches
//  235     if ( epCurrent->epDesc->endPoint == EndPoint )
??CrossCallReturnLabel_79:
        LCALL     ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_3:
        JNZ       ??afDelete_1
//  236     {
//  237       epList = epCurrent->nextDesc;
        MOV       DPTR,#epList
        SJMP      ??afDelete_2
//  238       osal_mem_free( epCurrent );
//  239 
//  240       return ( afStatus_SUCCESS );
//  241     }
//  242     else
//  243     {
//  244       // search the list
//  245       for ( epCurrent = epPrevious->nextDesc;
//  246             epCurrent != NULL;
//  247             epCurrent = epCurrent->nextDesc )
//  248       {
//  249         if ( epCurrent->epDesc->endPoint == EndPoint )
//  250         {
//  251           epPrevious->nextDesc = epCurrent->nextDesc;
//  252           osal_mem_free( epCurrent );
//  253 
//  254           // delete the entry and free the memory
//  255           return ( afStatus_SUCCESS );
//  256         }
//  257         epPrevious = epCurrent;
??afDelete_3:
        MOV       A,R2
        MOV       R0,A
        MOV       A,R3
        MOV       R1,A
??afDelete_1:
        MOV       A,R4
        MOV       R2,A
        MOV       A,R5
        MOV       R3,A
        MOV       A,R2
        ORL       A,R3
        JZ        ??afDelete_4
        LCALL     ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_4:
        JNZ       ??afDelete_3
        MOV       DPL,R0
        MOV       DPH,R1
??afDelete_2:
        MOV       A,R4
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R5
        MOVX      @DPTR,A
        ; Setup parameters for call to function osal_mem_free
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
        MOV       R1,#0x0
        SJMP      ??afDelete_5
//  258       }
//  259     }
//  260 
//  261     // no endpoint found
//  262     return ( afStatus_INVALID_PARAMETER );
??afDelete_4:
        MOV       R1,#0x2
        SJMP      ??afDelete_5
//  263   }
//  264   else
//  265   {
//  266     // epList is empty
//  267     return ( afStatus_FAILED );
??afDelete_0:
        MOV       R1,#0x1
//  268   }
??afDelete_5:
          CFI EndBlock cfiBlock14
        REQUIRE ?Subroutine2
        ; // Fall through to label ?Subroutine2
//  269 }

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiBlock15 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R7,#0x1
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock15

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine7:
          CFI Block cfiCond16 Using cfiCommon0
          CFI Function afDelete
          CFI Conditional ??CrossCallReturnLabel_3
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond17 Using cfiCommon0
          CFI (cfiCond17) Function afDelete
          CFI (cfiCond17) Conditional ??CrossCallReturnLabel_4
          CFI (cfiCond17) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond17) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond17) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond17) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond17) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond17) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond17) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond17) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond17) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond17) CFA_SP SP+-2
          CFI (cfiCond17) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker18 Using cfiCommon1
          CFI (cfiPicker18) NoFunction
          CFI (cfiPicker18) Picker
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        MOV       R4,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R5,A
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R7,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R7
        MOVX      A,@DPTR
        XRL       A,R6
        RET
          CFI EndBlock cfiCond16
          CFI EndBlock cfiCond17
          CFI EndBlock cfiPicker18
//  270 
//  271 /*********************************************************************
//  272  * @fn          afDataConfirm
//  273  *
//  274  * @brief       This function will generate the Data Confirm back to
//  275  *              the application.
//  276  *
//  277  * @param       endPoint - confirm end point
//  278  * @param       transID - transaction ID from APSDE_DATA_REQUEST
//  279  * @param       status - status of APSDE_DATA_REQUEST
//  280  *
//  281  * @return      none
//  282  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  283 void afDataConfirm( uint8 endPoint, uint8 transID, ZStatus_t status )
afDataConfirm:
          CFI Block cfiBlock19 Using cfiCommon0
          CFI Function afDataConfirm
        CODE
//  284 {
        FUNCALL afDataConfirm, afFindEndPointDesc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afDataConfirm, osal_msg_allocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afDataConfirm, osal_msg_send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V4
        REQUIRE ?V5
        MOV       A,#-0xe
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV       ?V0,R1
        MOV       ?V1,R2
        MOV       ?V2,R3
//  285   endPointDesc_t *epDesc;
//  286   afDataConfirm_t *msgPtr;
//  287 
//  288   // Find the endpoint description
//  289   epDesc = afFindEndPointDesc( endPoint );
        ; Setup parameters for call to function afFindEndPointDesc
        LCALL     `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
        MOV       ?V4,R2
        MOV       ?V5,R3
        MOV       R6,?V4
        MOV       R7,?V5
//  290   if ( epDesc == NULL )
        MOV       A,R6
        ORL       A,R7
        JZ        ??afDataConfirm_0
//  291     return;
//  292 
//  293   // Determine the incoming command type
//  294   msgPtr = (afDataConfirm_t *)osal_msg_allocate( sizeof(afDataConfirm_t) );
        ; Setup parameters for call to function osal_msg_allocate
        MOV       R2,#0x4
        MOV       R3,#0x0
        LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
//  295   if ( msgPtr )
        MOV       A,R2
        ORL       A,R3
        JZ        ??afDataConfirm_0
//  296   {
//  297     // Build the Data Confirm message
//  298     msgPtr->hdr.event = AF_DATA_CONFIRM_CMD;
        MOV       DPL,R2
        MOV       DPH,R3
        MOV       A,#-0x3
        MOVX      @DPTR,A
//  299     msgPtr->hdr.status = status;
        INC       DPTR
        MOV       A,?V2
        LCALL     ?Subroutine28 & 0xFFFF
//  300     msgPtr->endpoint = endPoint;
//  301     msgPtr->transID = transID;
//  302 
//  303 #if defined ( MT_AF_CB_FUNC )
//  304     /* If MT has subscribed for this callback, don't send as a message. */
//  305     if ( AFCB_CHECK(CB_ID_AF_DATA_CNF,*(epDesc->task_id)) )
//  306     {
//  307       /* Send callback if it's subscribed */
//  308       MT_AfDataConfirm ((void *)msgPtr);
//  309       /* Release the memory. */
//  310       osal_msg_deallocate( (void *)msgPtr );
//  311     }
//  312     else
//  313 #endif
//  314     {
//  315       /* send message through task message */
//  316       osal_msg_send( *(epDesc->task_id), (uint8 *)msgPtr );
//  317     }
//  318   }
??CrossCallReturnLabel_41:
        MOV       A,?V0
        LCALL     ?Subroutine28 & 0xFFFF
??CrossCallReturnLabel_42:
        INC       DPTR
        MOV       A,?V1
        LCALL     ?Subroutine33 & 0xFFFF
??CrossCallReturnLabel_49:
        LCALL     ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_5:
        LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
//  319 }
??afDataConfirm_0:
        LJMP      ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock19

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine33:
          CFI Block cfiCond20 Using cfiCommon0
          CFI Function afRegisterExtended
          CFI Conditional ??CrossCallReturnLabel_48, ??CrossCallReturnLabel_44, ??CrossCallReturnLabel_37
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-6
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond21 Using cfiCommon0
          CFI (cfiCond21) Function afRegisterExtended
          CFI (cfiCond21) Conditional ??CrossCallReturnLabel_48, ??CrossCallReturnLabel_44, ??CrossCallReturnLabel_38
          CFI (cfiCond21) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond21) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond21) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond21) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond21) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond21) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond21) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond21) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond21) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond21) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond21) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond21) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond21) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond21) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond21) CFA_SP SP+-6
          CFI (cfiCond21) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond22 Using cfiCommon0
          CFI (cfiCond22) Function afRegisterExtended
          CFI (cfiCond22) Conditional ??CrossCallReturnLabel_48, ??CrossCallReturnLabel_45, ??CrossCallReturnLabel_32
          CFI (cfiCond22) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond22) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond22) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond22) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond22) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond22) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond22) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond22) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond22) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond22) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond22) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond22) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond22) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond22) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond22) CFA_SP SP+-6
          CFI (cfiCond22) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond23 Using cfiCommon0
          CFI (cfiCond23) Function afRegisterExtended
          CFI (cfiCond23) Conditional ??CrossCallReturnLabel_48, ??CrossCallReturnLabel_45, ??CrossCallReturnLabel_33
          CFI (cfiCond23) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond23) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond23) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond23) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond23) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond23) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond23) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond23) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond23) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond23) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond23) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond23) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond23) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond23) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond23) CFA_SP SP+-6
          CFI (cfiCond23) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond24 Using cfiCommon0
          CFI (cfiCond24) Function afDataConfirm
          CFI (cfiCond24) Conditional ??CrossCallReturnLabel_49
          CFI (cfiCond24) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond24) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond24) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond24) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond24) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond24) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond24) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond24) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond24) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond24) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond24) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond24) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond24) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond24) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond24) CFA_SP SP+-2
          CFI (cfiCond24) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond25 Using cfiCommon0
          CFI (cfiCond25) Function AF_DataRequest
          CFI (cfiCond25) Conditional ??CrossCallReturnLabel_50
          CFI (cfiCond25) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond25) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond25) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond25) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond25) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond25) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond25) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond25) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond25) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond25) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond25) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond25) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond25) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond25) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond25) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond25) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond25) CFA_SP SP+-2
          CFI (cfiCond25) CFA_XSP16 add(XSP16, 49)
          CFI Block cfiCond26 Using cfiCommon0
          CFI (cfiCond26) Function AF_DataRequest
          CFI (cfiCond26) Conditional ??CrossCallReturnLabel_51
          CFI (cfiCond26) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond26) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond26) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond26) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond26) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond26) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond26) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond26) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond26) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond26) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond26) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond26) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond26) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond26) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond26) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond26) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond26) CFA_SP SP+-2
          CFI (cfiCond26) CFA_XSP16 add(XSP16, 49)
          CFI Block cfiPicker27 Using cfiCommon1
          CFI (cfiPicker27) NoFunction
          CFI (cfiPicker27) Picker
        MOVX      @DPTR,A
        ; Setup parameters for call to function osal_msg_send
        ; Setup parameters for call to function afFindEndPointDescList
        MOV       DPL,R6
        MOV       DPH,R7
        RET
          CFI EndBlock cfiCond20
          CFI EndBlock cfiCond21
          CFI EndBlock cfiCond22
          CFI EndBlock cfiCond23
          CFI EndBlock cfiCond24
          CFI EndBlock cfiCond25
          CFI EndBlock cfiCond26
          CFI EndBlock cfiPicker27
//  320 
//  321 /*********************************************************************
//  322  * @fn          afReflectError
//  323  *
//  324  * @brief       This function will generate the Reflect Error message to
//  325  *              the application.
//  326  *
//  327  * @param       srcEP - Source Endpoint
//  328  * @param       dstAddrMode - mode of dstAdd - 0 - normal short addr, 1 - group Address
//  329  * @param       dstAddr - intended destination
//  330  * @param       dstEP - Destination Endpoint
//  331  * @param       transID - transaction ID from APSDE_DATA_REQUEST
//  332  * @param       status - status of APSDE_DATA_REQUEST
//  333  *
//  334  * @return      none
//  335  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  336 void afReflectError( uint8 srcEP, uint8 dstAddrMode, uint16 dstAddr, uint8 dstEP,
afReflectError:
          CFI Block cfiBlock28 Using cfiCommon0
          CFI Function afReflectError
        CODE
//  337                      uint8 transID, ZStatus_t status )
//  338 {
        FUNCALL afReflectError, afFindEndPointDesc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afReflectError, osal_msg_allocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afReflectError, osal_msg_send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V6
        REQUIRE ?V7
        MOV       A,#-0x10
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
        MOV       ?V3,R2
        MOV       A,R4
        MOV       R6,A
        MOV       A,R5
        MOV       R7,A
        MOV       ?V4,R3
//  339   endPointDesc_t *epDesc;
//  340   afReflectError_t *msgPtr;
//  341 
//  342   // Find the endpoint description
//  343   epDesc = afFindEndPointDesc( srcEP );
        ; Setup parameters for call to function afFindEndPointDesc
        LCALL     `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
        MOV       ?V0,R2
        MOV       ?V1,R3
//  344   if ( epDesc == NULL )
        MOV       A,R2
        ORL       A,?V1
        JZ        ??afReflectError_0
//  345     return;
//  346 
//  347   // Determine the incoming command type
//  348   msgPtr = (afReflectError_t *)osal_msg_allocate( sizeof(afReflectError_t) );
        ; Setup parameters for call to function osal_msg_allocate
        MOV       R2,#0x7
        MOV       R3,#0x0
        LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
//  349   if ( msgPtr )
        MOV       A,R2
        ORL       A,R3
        JZ        ??afReflectError_0
//  350   {
//  351     // Build the Data Confirm message
//  352     msgPtr->hdr.event = AF_REFLECT_ERROR_CMD;
        MOV       DPL,R2
        MOV       DPH,R3
        MOV       A,#-0x2
        MOVX      @DPTR,A
//  353     msgPtr->hdr.status = status;
        MOV       A,#0x11
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        LCALL     ?Subroutine28 & 0xFFFF
//  354     msgPtr->endpoint = dstEP;
??CrossCallReturnLabel_43:
        MOV       A,?V4
        MOVX      @DPTR,A
//  355     msgPtr->transID = transID;
        MOV       A,#0x10
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine27 & 0xFFFF
//  356     msgPtr->dstAddrMode = dstAddrMode;
//  357     msgPtr->dstAddr = dstAddr;
//  358 
//  359 #if defined ( MT_AF_CB_FUNC )
//  360     /* If MT has subscribed for this callback, don't send as a message. */
//  361     if ( AFCB_CHECK( CB_ID_AF_REFLECT_ERROR, *(epDesc->task_id) ) )
//  362     {
//  363       /* Send callback if it's subscribed */
//  364       MT_AfReflectError( (void *)msgPtr );
//  365       /* Release the memory. */
//  366       osal_msg_deallocate( (void *)msgPtr );
//  367     }
//  368     else
//  369 #endif
//  370     {
//  371       /* send message through task message */
//  372       osal_msg_send( *(epDesc->task_id), (uint8 *)msgPtr );
//  373     }
//  374   }
??CrossCallReturnLabel_39:
        MOV       A,?V3
        LCALL     ?Subroutine27 & 0xFFFF
??CrossCallReturnLabel_40:
        INC       DPTR
        MOV       A,R6
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R7
        LCALL     ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_34:
        LCALL     ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_6:
        LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
//  375 }
??afReflectError_0:
          CFI EndBlock cfiBlock28
        REQUIRE ?Subroutine3
        ; // Fall through to label ?Subroutine3

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine3:
          CFI Block cfiBlock29 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R7,#0x8
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock29

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine28:
          CFI Block cfiCond30 Using cfiCommon0
          CFI Function afDataConfirm
          CFI Conditional ??CrossCallReturnLabel_41
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond31 Using cfiCommon0
          CFI (cfiCond31) Function afDataConfirm
          CFI (cfiCond31) Conditional ??CrossCallReturnLabel_42
          CFI (cfiCond31) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond31) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond31) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond31) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond31) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond31) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond31) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond31) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond31) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond31) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond31) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond31) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond31) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond31) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond31) CFA_SP SP+-2
          CFI (cfiCond31) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond32 Using cfiCommon0
          CFI (cfiCond32) Function afReflectError
          CFI (cfiCond32) Conditional ??CrossCallReturnLabel_43
          CFI (cfiCond32) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond32) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond32) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond32) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond32) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond32) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond32) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond32) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond32) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond32) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond32) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond32) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond32) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond32) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond32) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond32) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond32) CFA_SP SP+-2
          CFI (cfiCond32) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker33 Using cfiCommon1
          CFI (cfiPicker33) NoFunction
          CFI (cfiPicker33) Picker
        MOVX      @DPTR,A
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        RET
          CFI EndBlock cfiCond30
          CFI EndBlock cfiCond31
          CFI EndBlock cfiCond32
          CFI EndBlock cfiPicker33

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine27:
          CFI Block cfiCond34 Using cfiCommon0
          CFI Function afReflectError
          CFI Conditional ??CrossCallReturnLabel_39
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond35 Using cfiCommon0
          CFI (cfiCond35) Function afReflectError
          CFI (cfiCond35) Conditional ??CrossCallReturnLabel_40
          CFI (cfiCond35) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond35) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond35) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond35) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond35) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond35) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond35) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond35) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond35) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond35) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond35) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond35) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond35) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond35) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond35) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond35) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond35) CFA_SP SP+-2
          CFI (cfiCond35) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker36 Using cfiCommon1
          CFI (cfiPicker36) NoFunction
          CFI (cfiPicker36) Picker
        MOVX      @DPTR,A
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        RET
          CFI EndBlock cfiCond34
          CFI EndBlock cfiCond35
          CFI EndBlock cfiPicker36

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine8:
          CFI Block cfiCond37 Using cfiCommon0
          CFI Function afDataConfirm
          CFI Conditional ??CrossCallReturnLabel_5
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond38 Using cfiCommon0
          CFI (cfiCond38) Function afReflectError
          CFI (cfiCond38) Conditional ??CrossCallReturnLabel_6
          CFI (cfiCond38) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond38) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond38) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond38) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond38) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond38) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond38) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond38) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond38) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond38) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond38) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond38) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond38) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond38) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond38) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond38) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond38) CFA_SP SP+-2
          CFI (cfiCond38) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond39 Using cfiCommon0
          CFI (cfiCond39) Function afBuildMSGIncoming
          CFI (cfiCond39) Conditional ??CrossCallReturnLabel_7
          CFI (cfiCond39) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond39) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond39) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond39) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond39) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond39) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond39) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond39) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond39) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond39) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond39) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond39) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond39) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond39) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond39) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond39) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond39) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond39) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond39) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond39) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond39) CFA_SP SP+-2
          CFI (cfiCond39) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiPicker40 Using cfiCommon1
          CFI (cfiPicker40) NoFunction
          CFI (cfiPicker40) Picker
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        MOVX      A,@DPTR
        MOV       R1,A
        RET
          CFI EndBlock cfiCond37
          CFI EndBlock cfiCond38
          CFI EndBlock cfiCond39
          CFI EndBlock cfiPicker40
//  376 
//  377 /*********************************************************************
//  378  * @fn          afIncomingData
//  379  *
//  380  * @brief       Transfer a data PDU (ASDU) from the APS sub-layer to the AF.
//  381  *
//  382  * @param       aff  - pointer to APS frame format
//  383  * @param       SrcAddress  - Source address
//  384  * @param       SrcPanId  - Source PAN ID
//  385  * @param       sig - incoming message's link quality
//  386  * @param       nwkSeqNum - incoming network sequence number (from nwk header frame)
//  387  * @param       SecurityUse - Security enable/disable
//  388  * @param       timestamp - the MAC Timer2 timestamp at Rx.
//  389  * @param       radius - incoming messages received radius
//  390  *
//  391  * @return      none
//  392  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  393 void afIncomingData( aps_FrameFormat_t *aff, zAddrType_t *SrcAddress, uint16 SrcPanId,
afIncomingData:
          CFI Block cfiBlock41 Using cfiCommon0
          CFI Function afIncomingData
        CODE
//  394                      NLDE_Signal_t *sig, uint8 nwkSeqNum, uint8 SecurityUse,
//  395                      uint32 timestamp, uint8 radius )
//  396 {
        FUNCALL afIncomingData, aps_FindGroupForEndpoint
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afIncomingData, afFindEndPointDesc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afIncomingData, afFindEndPointDesc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afIncomingData, afFindEndPointDescList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afIncomingData, afFindEndPointDescList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afIncomingData, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afIncomingData, afBuildMSGIncoming
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afIncomingData, aps_FindGroupForEndpoint
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afIncomingData, afFindEndPointDesc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V11
        REQUIRE ?V12
        REQUIRE ?V13
        REQUIRE ?V14
        REQUIRE ?V15
        MOV       A,#-0x18
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 24)
        ; Saved register size: 24
        ; Auto size: 3
        MOV       A,#-0x3
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 27)
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R4
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R5
        MOVX      @DPTR,A
        MOV       A,R1
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      @DPTR,A
        MOV       ?V8,R2
        MOV       ?V9,R3
//  397   endPointDesc_t *epDesc = NULL;
//  398   epList_t *pList = epList;
        MOV       DPTR,#epList
        MOVX      A,@DPTR
        MOV       ?V2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V3,A
//  399 #if !defined ( APS_NO_GROUPS )
//  400   uint8 grpEp = APS_GROUPS_EP_NOT_FOUND;
        MOV       R6,#-0x2
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        ANL       A,#0xc
        XRL       A,#0xc
        JNZ       ??afIncomingData_0
//  401 #endif
//  402 
//  403   if ( ((aff->FrmCtrl & APS_DELIVERYMODE_MASK) == APS_FC_DM_GROUP) )
//  404   {
//  405 #if !defined ( APS_NO_GROUPS )
//  406     // Find the first endpoint for this group
//  407     grpEp = aps_FindGroupForEndpoint( aff->GroupID, APS_GROUPS_FIND_FIRST );
        ; Setup parameters for call to function aps_FindGroupForEndpoint
        MOV       R1,#-0x2
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ??Subroutine39_0 & 0xFFFF
??CrossCallReturnLabel_80:
        LCALL     `??aps_FindGroupForEndpoint::?relay`; Banked call to: aps_FindGroupForEndpoint
        MOV       A,R1
        MOV       R6,A
//  408     if ( grpEp == APS_GROUPS_EP_NOT_FOUND )
        MOV       A,#-0x2
        XRL       A,R6
        JNZ       $+5
        LJMP      ??afIncomingData_1 & 0xFFFF
//  409       return;   // No endpoint found
//  410 
//  411     epDesc = afFindEndPointDesc( grpEp );
        ; Setup parameters for call to function afFindEndPointDesc
        LCALL     `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
        MOV       ?V0,R2
        MOV       ?V1,R3
//  412     if ( epDesc == NULL )
        MOV       A,R2
        ORL       A,?V1
        JNZ       ??afIncomingData_2
//  413       return;   // Endpoint descriptor not found
        LJMP      ??afIncomingData_1 & 0xFFFF
//  414 
//  415     pList = afFindEndPointDescList( epDesc->endPoint );
//  416 #else
//  417     return; // Not supported
//  418 #endif
//  419   }
//  420   else if ( aff->DstEndPoint == AF_BROADCAST_ENDPOINT )
??afIncomingData_0:
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,#-0x1
        XRL       A,R1
        JNZ       ??afIncomingData_3
//  421   {
//  422     // Set the list
//  423     if ( pList != NULL )
        MOV       A,?V2
        ORL       A,?V3
        JNZ       $+5
        LJMP      ??afIncomingData_1 & 0xFFFF
//  424     {
//  425       epDesc = pList->epDesc;
        LCALL     ?Subroutine14 & 0xFFFF
//  426     }
//  427   }
??CrossCallReturnLabel_65:
        MOV       A,#0x1b
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V14,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V15,A
        MOV       A,#0x20
        LCALL     ?XSTACK_DISP0_8
        MOV       R0,#?V4
        LCALL     ?L_MOV_X
        SJMP      ??CrossCallReturnLabel_66
//  428   else if ( (epDesc = afFindEndPointDesc( aff->DstEndPoint )) )
??afIncomingData_3:
        ; Setup parameters for call to function afFindEndPointDesc
        LCALL     `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       R1,?V1
        MOV       A,R2
        ORL       A,R1
        JZ        ??CrossCallReturnLabel_65
//  429   {
//  430     pList = afFindEndPointDescList( epDesc->endPoint );
??afIncomingData_2:
        ; Setup parameters for call to function afFindEndPointDescList
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
        MOV       ?V2,R2
        MOV       ?V3,R3
        SJMP      ??CrossCallReturnLabel_65
//  431   }
//  432 
//  433   while ( epDesc )
//  434   {
//  435     uint16 epProfileID = 0xFFFE;  // Invalid Profile ID
//  436 
//  437     if ( pList->pfnDescCB )
//  438     {
//  439       uint16 *pID = (uint16 *)(pList->pfnDescCB(
//  440                                  AF_DESCRIPTOR_PROFILE_ID, epDesc->endPoint ));
//  441       if ( pID )
//  442       {
//  443         epProfileID = *pID;
//  444         osal_mem_free( pID );
//  445       }
//  446     }
//  447     else if ( epDesc->simpleDesc )
//  448     {
//  449       epProfileID = epDesc->simpleDesc->AppProfId;
//  450     }
//  451 
//  452     // First part of verification is to make sure that:
//  453     // the local Endpoint ProfileID matches the received ProfileID OR
//  454     // the message is specifically send to ZDO (this excludes the broadcast endpoint) OR
//  455     // if the Wildcard ProfileID is received the message should not be sent to ZDO endpoint
//  456     if ( (aff->ProfileID == epProfileID) ||
//  457          ((epDesc->endPoint == ZDO_EP) && (aff->ProfileID == ZDO_PROFILE_ID)) ||
//  458          ((epDesc->endPoint != ZDO_EP) && ( aff->ProfileID == ZDO_WILDCARD_PROFILE_ID )) )
//  459     {
//  460       // Save original endpoint
//  461       uint8 endpoint = aff->DstEndPoint;
//  462 
//  463       // overwrite with descriptor's endpoint
//  464       aff->DstEndPoint = epDesc->endPoint;
//  465 
//  466       afBuildMSGIncoming( aff, epDesc, SrcAddress, SrcPanId, sig,
//  467                          nwkSeqNum, SecurityUse, timestamp, radius );
//  468 
//  469       // Restore with original endpoint
//  470       aff->DstEndPoint = endpoint;
//  471     }
//  472 
//  473     if ( ((aff->FrmCtrl & APS_DELIVERYMODE_MASK) == APS_FC_DM_GROUP) )
//  474     {
//  475 #if !defined ( APS_NO_GROUPS )
//  476       // Find the next endpoint for this group
//  477       grpEp = aps_FindGroupForEndpoint( aff->GroupID, grpEp );
//  478       if ( grpEp == APS_GROUPS_EP_NOT_FOUND )
//  479         return;   // No endpoint found
//  480 
//  481       epDesc = afFindEndPointDesc( grpEp );
//  482       if ( epDesc == NULL )
//  483         return;   // Endpoint descriptor not found
//  484 
//  485       pList = afFindEndPointDescList( epDesc->endPoint );
//  486 #else
//  487       return;
//  488 #endif
//  489     }
//  490     else if ( aff->DstEndPoint == AF_BROADCAST_ENDPOINT )
//  491     {
//  492       pList = pList->nextDesc;
//  493       if ( pList )
//  494         epDesc = pList->epDesc;
??afIncomingData_4:
        LCALL     ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_66:
        MOV       A,?V0
        ORL       A,?V1
        JNZ       $+5
        LJMP      ??afIncomingData_1 & 0xFFFF
        SJMP      ??afIncomingData_5
??afIncomingData_6:
        ; Setup parameters for call to function afFindEndPointDescList
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
        MOV       ?V2,R2
        MOV       ?V3,R3
??afIncomingData_5:
        MOV       ?V10,#-0x2
        MOV       ?V11,#-0x1
        MOV       DPL,?V2
        MOV       DPH,?V3
        LCALL     ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_16:
        MOV       DPL,?V0
        MOV       DPH,?V1
        JZ        ??afIncomingData_7
        ; Setup parameters for indirect call
        LCALL     ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_28:
        LCALL     ?CALL_IND
        MOV       A,R2
        ORL       A,R3
        JZ        ??afIncomingData_8
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        MOV       ?V10,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V11,A
        ; Setup parameters for call to function osal_mem_free
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
        SJMP      ??afIncomingData_8
??afIncomingData_7:
        LCALL     ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_0:
        JZ        ??afIncomingData_8
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V10,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V11,A
??afIncomingData_8:
        MOV       DPL,?V8
        MOV       DPH,?V9
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_58:
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOVX      A,@DPTR
        MOV       R2,A
        MOV       A,?V10
        XRL       A,R0
        JNZ       ??afIncomingData_9
        MOV       A,?V11
        XRL       A,R1
??afIncomingData_9:
        JZ        ??afIncomingData_10
        MOV       A,R2
        JNZ       ??afIncomingData_11
        MOV       A,R0
        ORL       A,R1
        JNZ       ??afIncomingData_12
        SJMP      ??afIncomingData_10
??afIncomingData_11:
        MOV       A,#-0x1
        XRL       A,R0
        JNZ       ??afIncomingData_13
        MOV       A,#-0x1
        XRL       A,R1
??afIncomingData_13:
        JNZ       ??afIncomingData_12
??afIncomingData_10:
        MOV       DPL,?V8
        MOV       DPH,?V9
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R7,A
        MOV       A,R2
        MOV       DPL,?V8
        MOV       DPH,?V9
        INC       DPTR
        INC       DPTR
        MOVX      @DPTR,A
        ; Setup parameters for call to function afBuildMSGIncoming
        MOV       A,#0x24
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V10,A
        MOV       R0,#?V10
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 28)
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_FOUR
          CFI CFA_XSP16 add(XSP16, 32)
        MOV       A,#0x24
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V10,A
        MOV       R0,#?V10
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 33)
        MOV       A,#0x23
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 35)
        MOV       R0,#?V14
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 37)
        MOV       A,#0xb
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 39)
        MOV       A,#0xc
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       R4,?V0
        MOV       R5,?V1
        MOV       R2,?V8
        MOV       R3,?V9
        LCALL     `??afBuildMSGIncoming::?relay`; Banked call to: afBuildMSGIncoming
        MOV       A,#0xc
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 27)
        MOV       A,R7
        MOV       DPL,?V8
        MOV       DPH,?V9
        INC       DPTR
        INC       DPTR
        MOVX      @DPTR,A
??afIncomingData_12:
        MOV       DPL,?V8
        MOV       DPH,?V9
        MOVX      A,@DPTR
        ANL       A,#0xc
        XRL       A,#0xc
        JNZ       ??afIncomingData_14
        ; Setup parameters for call to function aps_FindGroupForEndpoint
        MOV       A,R6
        MOV       R1,A
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ??Subroutine39_0 & 0xFFFF
??CrossCallReturnLabel_81:
        LCALL     `??aps_FindGroupForEndpoint::?relay`; Banked call to: aps_FindGroupForEndpoint
        MOV       A,R1
        MOV       R6,A
        MOV       A,#-0x2
        XRL       A,R6
        JZ        ??afIncomingData_1
        ; Setup parameters for call to function afFindEndPointDesc
        LCALL     `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       A,R2
        ORL       A,?V1
        JZ        $+5
        LJMP      ??afIncomingData_6 & 0xFFFF
        SJMP      ??afIncomingData_1
??afIncomingData_14:
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        CPL       A
        JNZ       ??afIncomingData_1
        MOV       DPL,?V2
        MOV       DPH,?V3
        MOVX      A,@DPTR
        MOV       ?V2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V3,A
        MOV       A,?V2
        ORL       A,?V3
        JZ        $+5
        LJMP      ??afIncomingData_4 & 0xFFFF
//  495       else
//  496         epDesc = NULL;
//  497     }
//  498     else
//  499       epDesc = NULL;
//  500   }
//  501 }
??afIncomingData_1:
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
        MOV       R7,#0x10
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock41

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine17:
          CFI Block cfiCond42 Using cfiCommon0
          CFI Function afIncomingData
          CFI Conditional ??CrossCallReturnLabel_58
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 27)
          CFI Block cfiCond43 Using cfiCommon0
          CFI (cfiCond43) Function afBuildMSGIncoming
          CFI (cfiCond43) Conditional ??CrossCallReturnLabel_59
          CFI (cfiCond43) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond43) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond43) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond43) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond43) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond43) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond43) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond43) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond43) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond43) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond43) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond43) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond43) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond43) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond43) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond43) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond43) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond43) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond43) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond43) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond43) CFA_SP SP+-2
          CFI (cfiCond43) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiPicker44 Using cfiCommon1
          CFI (cfiPicker44) NoFunction
          CFI (cfiPicker44) Picker
        INC       DPTR
        INC       DPTR
        INC       DPTR
          CFI EndBlock cfiCond42
          CFI EndBlock cfiCond43
          CFI EndBlock cfiPicker44
        REQUIRE ??Subroutine34_0
        ; // Fall through to label ??Subroutine34_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine34_0:
          CFI Block cfiCond45 Using cfiCommon0
          CFI Function AF_DataRequest
          CFI Conditional ??CrossCallReturnLabel_57
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 49)
          CFI Block cfiCond46 Using cfiCommon0
          CFI (cfiCond46) Function afIncomingData
          CFI (cfiCond46) Conditional ??CrossCallReturnLabel_58
          CFI (cfiCond46) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond46) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond46) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond46) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond46) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond46) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond46) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond46) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond46) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond46) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond46) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond46) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond46) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond46) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond46) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond46) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond46) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond46) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond46) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond46) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond46) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond46) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond46) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond46) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond46) CFA_SP SP+-2
          CFI (cfiCond46) CFA_XSP16 add(XSP16, 27)
          CFI Block cfiCond47 Using cfiCommon0
          CFI (cfiCond47) Function afBuildMSGIncoming
          CFI (cfiCond47) Conditional ??CrossCallReturnLabel_59
          CFI (cfiCond47) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond47) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond47) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond47) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond47) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond47) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond47) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond47) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond47) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond47) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond47) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond47) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond47) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond47) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond47) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond47) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond47) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond47) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond47) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond47) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond47) CFA_SP SP+-2
          CFI (cfiCond47) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiPicker48 Using cfiCommon1
          CFI (cfiPicker48) NoFunction
          CFI (cfiPicker48) Picker
        INC       DPTR
          CFI EndBlock cfiCond45
          CFI EndBlock cfiCond46
          CFI EndBlock cfiCond47
          CFI EndBlock cfiPicker48
        REQUIRE ??Subroutine35_0
        ; // Fall through to label ??Subroutine35_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine35_0:
          CFI Block cfiCond49 Using cfiCommon0
          CFI Function afRegisterExtended
          CFI Conditional ??CrossCallReturnLabel_52
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond50 Using cfiCommon0
          CFI (cfiCond50) Function AF_DataRequest
          CFI (cfiCond50) Conditional ??CrossCallReturnLabel_53
          CFI (cfiCond50) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond50) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond50) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond50) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond50) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond50) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond50) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond50) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond50) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond50) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond50) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond50) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond50) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond50) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond50) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond50) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond50) CFA_SP SP+-2
          CFI (cfiCond50) CFA_XSP16 add(XSP16, 49)
          CFI Block cfiCond51 Using cfiCommon0
          CFI (cfiCond51) Function AF_DataRequest
          CFI (cfiCond51) Conditional ??CrossCallReturnLabel_54
          CFI (cfiCond51) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond51) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond51) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond51) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond51) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond51) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond51) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond51) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond51) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond51) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond51) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond51) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond51) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond51) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond51) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond51) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond51) CFA_SP SP+-2
          CFI (cfiCond51) CFA_XSP16 add(XSP16, 49)
          CFI Block cfiCond52 Using cfiCommon0
          CFI (cfiCond52) Function AF_DataRequest
          CFI (cfiCond52) Conditional ??CrossCallReturnLabel_55
          CFI (cfiCond52) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond52) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond52) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond52) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond52) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond52) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond52) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond52) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond52) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond52) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond52) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond52) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond52) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond52) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond52) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond52) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond52) CFA_SP SP+-2
          CFI (cfiCond52) CFA_XSP16 add(XSP16, 49)
          CFI Block cfiCond53 Using cfiCommon0
          CFI (cfiCond53) Function AF_DataRequest
          CFI (cfiCond53) Conditional ??CrossCallReturnLabel_56
          CFI (cfiCond53) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond53) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond53) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond53) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond53) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond53) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond53) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond53) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond53) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond53) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond53) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond53) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond53) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond53) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond53) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond53) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond53) CFA_SP SP+-2
          CFI (cfiCond53) CFA_XSP16 add(XSP16, 49)
          CFI Block cfiCond54 Using cfiCommon0
          CFI (cfiCond54) Function AF_DataRequest
          CFI (cfiCond54) Conditional ??CrossCallReturnLabel_57
          CFI (cfiCond54) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond54) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond54) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond54) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond54) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond54) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond54) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond54) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond54) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond54) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond54) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond54) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond54) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond54) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond54) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond54) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond54) CFA_SP SP+-2
          CFI (cfiCond54) CFA_XSP16 add(XSP16, 49)
          CFI Block cfiCond55 Using cfiCommon0
          CFI (cfiCond55) Function afIncomingData
          CFI (cfiCond55) Conditional ??CrossCallReturnLabel_58
          CFI (cfiCond55) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond55) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond55) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond55) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond55) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond55) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond55) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond55) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond55) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond55) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond55) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond55) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond55) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond55) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond55) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond55) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond55) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond55) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond55) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond55) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond55) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond55) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond55) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond55) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond55) CFA_SP SP+-2
          CFI (cfiCond55) CFA_XSP16 add(XSP16, 27)
          CFI Block cfiCond56 Using cfiCommon0
          CFI (cfiCond56) Function afBuildMSGIncoming
          CFI (cfiCond56) Conditional ??CrossCallReturnLabel_59
          CFI (cfiCond56) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond56) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond56) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond56) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond56) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond56) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond56) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond56) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond56) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond56) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond56) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond56) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond56) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond56) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond56) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond56) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond56) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond56) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond56) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond56) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond56) CFA_SP SP+-2
          CFI (cfiCond56) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiPicker57 Using cfiCommon1
          CFI (cfiPicker57) NoFunction
          CFI (cfiPicker57) Picker
        LCALL     ?Subroutine32 & 0xFFFF
??CrossCallReturnLabel_63:
        RET
          CFI EndBlock cfiCond49
          CFI EndBlock cfiCond50
          CFI EndBlock cfiCond51
          CFI EndBlock cfiCond52
          CFI EndBlock cfiCond53
          CFI EndBlock cfiCond54
          CFI EndBlock cfiCond55
          CFI EndBlock cfiCond56
          CFI EndBlock cfiPicker57

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine32:
          CFI Block cfiCond58 Using cfiCommon0
          CFI Function afIncomingData
          CFI Conditional ??CrossCallReturnLabel_63, ??CrossCallReturnLabel_58
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 27)
          CFI Block cfiCond59 Using cfiCommon0
          CFI (cfiCond59) Function afBuildMSGIncoming
          CFI (cfiCond59) Conditional ??CrossCallReturnLabel_63, ??CrossCallReturnLabel_59
          CFI (cfiCond59) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond59) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond59) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond59) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond59) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond59) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond59) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond59) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond59) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond59) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond59) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond59) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond59) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond59) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond59) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond59) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond59) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond59) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond59) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond59) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond59) CFA_SP SP+-4
          CFI (cfiCond59) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond60 Using cfiCommon0
          CFI (cfiCond60) Function AF_DataRequest
          CFI (cfiCond60) Conditional ??CrossCallReturnLabel_63, ??CrossCallReturnLabel_57
          CFI (cfiCond60) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond60) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond60) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond60) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond60) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond60) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond60) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond60) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond60) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond60) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond60) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond60) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond60) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond60) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond60) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond60) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond60) CFA_SP SP+-4
          CFI (cfiCond60) CFA_XSP16 add(XSP16, 49)
          CFI Block cfiCond61 Using cfiCommon0
          CFI (cfiCond61) Function afRegisterExtended
          CFI (cfiCond61) Conditional ??CrossCallReturnLabel_63, ??CrossCallReturnLabel_52
          CFI (cfiCond61) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond61) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond61) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond61) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond61) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond61) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond61) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond61) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond61) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond61) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond61) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond61) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond61) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond61) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond61) CFA_SP SP+-4
          CFI (cfiCond61) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond62 Using cfiCommon0
          CFI (cfiCond62) Function AF_DataRequest
          CFI (cfiCond62) Conditional ??CrossCallReturnLabel_63, ??CrossCallReturnLabel_53
          CFI (cfiCond62) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond62) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond62) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond62) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond62) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond62) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond62) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond62) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond62) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond62) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond62) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond62) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond62) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond62) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond62) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond62) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond62) CFA_SP SP+-4
          CFI (cfiCond62) CFA_XSP16 add(XSP16, 49)
          CFI Block cfiCond63 Using cfiCommon0
          CFI (cfiCond63) Function AF_DataRequest
          CFI (cfiCond63) Conditional ??CrossCallReturnLabel_63, ??CrossCallReturnLabel_54
          CFI (cfiCond63) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond63) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond63) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond63) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond63) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond63) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond63) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond63) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond63) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond63) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond63) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond63) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond63) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond63) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond63) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond63) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond63) CFA_SP SP+-4
          CFI (cfiCond63) CFA_XSP16 add(XSP16, 49)
          CFI Block cfiCond64 Using cfiCommon0
          CFI (cfiCond64) Function AF_DataRequest
          CFI (cfiCond64) Conditional ??CrossCallReturnLabel_63, ??CrossCallReturnLabel_55
          CFI (cfiCond64) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond64) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond64) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond64) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond64) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond64) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond64) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond64) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond64) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond64) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond64) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond64) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond64) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond64) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond64) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond64) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond64) CFA_SP SP+-4
          CFI (cfiCond64) CFA_XSP16 add(XSP16, 49)
          CFI Block cfiCond65 Using cfiCommon0
          CFI (cfiCond65) Function AF_DataRequest
          CFI (cfiCond65) Conditional ??CrossCallReturnLabel_63, ??CrossCallReturnLabel_56
          CFI (cfiCond65) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond65) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond65) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond65) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond65) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond65) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond65) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond65) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond65) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond65) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond65) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond65) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond65) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond65) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond65) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond65) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond65) CFA_SP SP+-4
          CFI (cfiCond65) CFA_XSP16 add(XSP16, 49)
          CFI Block cfiCond66 Using cfiCommon0
          CFI (cfiCond66) Function afBuildMSGIncoming
          CFI (cfiCond66) Conditional ??CrossCallReturnLabel_62, ??CrossCallReturnLabel_19
          CFI (cfiCond66) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond66) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond66) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond66) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond66) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond66) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond66) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond66) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond66) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond66) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond66) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond66) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond66) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond66) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond66) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond66) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond66) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond66) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond66) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond66) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond66) CFA_SP SP+-4
          CFI (cfiCond66) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond67 Using cfiCommon0
          CFI (cfiCond67) Function afBuildMSGIncoming
          CFI (cfiCond67) Conditional ??CrossCallReturnLabel_62, ??CrossCallReturnLabel_20
          CFI (cfiCond67) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond67) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond67) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond67) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond67) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond67) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond67) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond67) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond67) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond67) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond67) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond67) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond67) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond67) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond67) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond67) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond67) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond67) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond67) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond67) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond67) CFA_SP SP+-4
          CFI (cfiCond67) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond68 Using cfiCommon0
          CFI (cfiCond68) Function afBuildMSGIncoming
          CFI (cfiCond68) Conditional ??CrossCallReturnLabel_62, ??CrossCallReturnLabel_21
          CFI (cfiCond68) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond68) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond68) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond68) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond68) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond68) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond68) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond68) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond68) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond68) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond68) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond68) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond68) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond68) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond68) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond68) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond68) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond68) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond68) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond68) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond68) CFA_SP SP+-4
          CFI (cfiCond68) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond69 Using cfiCommon0
          CFI (cfiCond69) Function afIncomingData
          CFI (cfiCond69) Conditional ??CrossCallReturnLabel_61, ??CrossCallReturnLabel_16
          CFI (cfiCond69) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond69) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond69) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond69) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond69) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond69) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond69) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond69) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond69) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond69) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond69) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond69) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond69) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond69) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond69) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond69) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond69) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond69) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond69) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond69) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond69) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond69) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond69) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond69) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond69) CFA_SP SP+-4
          CFI (cfiCond69) CFA_XSP16 add(XSP16, 27)
          CFI Block cfiCond70 Using cfiCommon0
          CFI (cfiCond70) Function AF_DataRequest
          CFI (cfiCond70) Conditional ??CrossCallReturnLabel_61, ??CrossCallReturnLabel_15
          CFI (cfiCond70) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond70) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond70) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond70) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond70) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond70) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond70) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond70) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond70) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond70) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond70) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond70) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond70) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond70) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond70) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond70) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond70) CFA_SP SP+-4
          CFI (cfiCond70) CFA_XSP16 add(XSP16, 49)
          CFI Block cfiCond71 Using cfiCommon0
          CFI (cfiCond71) Function afDelete
          CFI (cfiCond71) Conditional ??CrossCallReturnLabel_60, ??CrossCallReturnLabel_13
          CFI (cfiCond71) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond71) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond71) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond71) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond71) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond71) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond71) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond71) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond71) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond71) CFA_SP SP+-4
          CFI (cfiCond71) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond72 Using cfiCommon0
          CFI (cfiCond72) Function AF_DataRequest
          CFI (cfiCond72) Conditional ??CrossCallReturnLabel_60, ??CrossCallReturnLabel_12
          CFI (cfiCond72) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond72) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond72) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond72) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond72) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond72) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond72) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond72) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond72) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond72) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond72) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond72) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond72) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond72) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond72) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond72) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond72) CFA_SP SP+-4
          CFI (cfiCond72) CFA_XSP16 add(XSP16, 49)
          CFI Block cfiCond73 Using cfiCommon0
          CFI (cfiCond73) Function AF_DataRequest
          CFI (cfiCond73) Conditional ??CrossCallReturnLabel_60, ??CrossCallReturnLabel_14
          CFI (cfiCond73) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond73) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond73) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond73) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond73) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond73) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond73) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond73) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond73) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond73) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond73) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond73) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond73) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond73) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond73) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond73) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond73) CFA_SP SP+-4
          CFI (cfiCond73) CFA_XSP16 add(XSP16, 49)
          CFI Block cfiPicker74 Using cfiCommon1
          CFI (cfiPicker74) NoFunction
          CFI (cfiPicker74) Picker
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        RET
          CFI EndBlock cfiCond58
          CFI EndBlock cfiCond59
          CFI EndBlock cfiCond60
          CFI EndBlock cfiCond61
          CFI EndBlock cfiCond62
          CFI EndBlock cfiCond63
          CFI EndBlock cfiCond64
          CFI EndBlock cfiCond65
          CFI EndBlock cfiCond66
          CFI EndBlock cfiCond67
          CFI EndBlock cfiCond68
          CFI EndBlock cfiCond69
          CFI EndBlock cfiCond70
          CFI EndBlock cfiCond71
          CFI EndBlock cfiCond72
          CFI EndBlock cfiCond73
          CFI EndBlock cfiPicker74

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine14:
          CFI Block cfiCond75 Using cfiCommon0
          CFI Function afIncomingData
          CFI Conditional ??CrossCallReturnLabel_65
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 27)
          CFI Block cfiCond76 Using cfiCommon0
          CFI (cfiCond76) Function afIncomingData
          CFI (cfiCond76) Conditional ??CrossCallReturnLabel_66
          CFI (cfiCond76) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond76) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond76) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond76) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond76) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond76) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond76) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond76) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond76) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond76) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond76) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond76) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond76) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond76) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond76) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond76) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond76) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond76) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond76) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond76) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond76) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond76) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond76) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond76) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond76) CFA_SP SP+-2
          CFI (cfiCond76) CFA_XSP16 add(XSP16, 27)
          CFI Block cfiPicker77 Using cfiCommon1
          CFI (cfiPicker77) NoFunction
          CFI (cfiPicker77) Picker
        MOV       DPL,?V2
        MOV       DPH,?V3
        INC       DPTR
        INC       DPTR
          CFI EndBlock cfiCond75
          CFI EndBlock cfiCond76
          CFI EndBlock cfiPicker77
        REQUIRE ??Subroutine36_0
        ; // Fall through to label ??Subroutine36_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine36_0:
          CFI Block cfiCond78 Using cfiCommon0
          CFI Function AF_DataRequest
          CFI Conditional ??CrossCallReturnLabel_64
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 49)
          CFI Block cfiCond79 Using cfiCommon0
          CFI (cfiCond79) Function afIncomingData
          CFI (cfiCond79) Conditional ??CrossCallReturnLabel_65
          CFI (cfiCond79) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond79) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond79) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond79) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond79) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond79) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond79) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond79) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond79) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond79) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond79) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond79) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond79) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond79) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond79) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond79) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond79) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond79) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond79) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond79) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond79) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond79) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond79) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond79) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond79) CFA_SP SP+-2
          CFI (cfiCond79) CFA_XSP16 add(XSP16, 27)
          CFI Block cfiCond80 Using cfiCommon0
          CFI (cfiCond80) Function afIncomingData
          CFI (cfiCond80) Conditional ??CrossCallReturnLabel_66
          CFI (cfiCond80) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond80) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond80) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond80) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond80) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond80) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond80) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond80) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond80) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond80) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond80) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond80) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond80) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond80) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond80) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond80) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond80) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond80) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond80) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond80) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond80) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond80) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond80) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond80) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond80) CFA_SP SP+-2
          CFI (cfiCond80) CFA_XSP16 add(XSP16, 27)
          CFI Block cfiPicker81 Using cfiCommon1
          CFI (cfiPicker81) NoFunction
          CFI (cfiPicker81) Picker
        MOVX      A,@DPTR
        MOV       ?V0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V1,A
        RET
          CFI EndBlock cfiCond78
          CFI EndBlock cfiCond79
          CFI EndBlock cfiCond80
          CFI EndBlock cfiPicker81
//  502 
//  503 /*********************************************************************
//  504  * @fn          afBuildMSGIncoming
//  505  *
//  506  * @brief       Build the message for the app
//  507  *
//  508  * @param
//  509  *
//  510  * @return      pointer to next in data buffer
//  511  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  512 static void afBuildMSGIncoming( aps_FrameFormat_t *aff, endPointDesc_t *epDesc,
afBuildMSGIncoming:
          CFI Block cfiBlock82 Using cfiCommon0
          CFI Function afBuildMSGIncoming
        CODE
//  513                  zAddrType_t *SrcAddress, uint16 SrcPanId, NLDE_Signal_t *sig,
//  514                  uint8 nwkSeqNum, uint8 SecurityUse, uint32 timestamp, uint8 radius )
//  515 {
        FUNCALL afBuildMSGIncoming, osal_msg_allocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afBuildMSGIncoming, afCopyAddress
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afBuildMSGIncoming, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afBuildMSGIncoming, osal_msg_send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V11
        MOV       A,#-0x14
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 20)
        ; Saved register size: 20
        ; Auto size: 0
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       ?V4,R4
        MOV       ?V5,R5
        MOV       ?V6,R1
//  516   afIncomingMSGPacket_t *MSGpkt;
//  517   const uint8 len = sizeof( afIncomingMSGPacket_t ) + aff->asduLength;
//  518   uint8 *asdu = aff->asdu;
        MOV       A,R2
        ADD       A,#0xe
        MOV       DPL,A
        CLR       A
        ADDC      A,?V1
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       ?V8,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V9,A
//  519   MSGpkt = (afIncomingMSGPacket_t *)osal_msg_allocate( len );
        MOV       A,R2
        ADD       A,#0x10
        MOV       ?V2,A
        CLR       A
        ADDC      A,?V1
        MOV       ?V3,A
        ; Setup parameters for call to function osal_msg_allocate
        MOV       DPL,?V2
        MOV       DPH,A
        MOVX      A,@DPTR
        ADD       A,#0x27
        MOV       R2,A
        MOV       R3,#0x0
        LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
        MOV       ?V10,R2
        MOV       ?V11,R3
        MOV       R6,?V10
        MOV       R7,?V11
//  520 
//  521   if ( MSGpkt == NULL )
        MOV       A,R6
        ORL       A,R7
        JNZ       $+5
        LJMP      ??afBuildMSGIncoming_0 & 0xFFFF
//  522   {
//  523     return;
//  524   }
//  525 
//  526   MSGpkt->hdr.event = AF_INCOMING_MSG_CMD;
        MOV       DPL,R6
        MOV       DPH,R7
        MOV       A,#0x1a
        LCALL     ?Subroutine25 & 0xFFFF
//  527   MSGpkt->groupId = aff->GroupID;
??CrossCallReturnLabel_35:
        LCALL     ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_59:
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine22 & 0xFFFF
//  528   MSGpkt->clusterId = aff->ClusterID;
??CrossCallReturnLabel_30:
        LCALL     ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_11:
        LCALL     ??Subroutine37_0 & 0xFFFF
//  529   afCopyAddress( &MSGpkt->srcAddr, SrcAddress );
??CrossCallReturnLabel_69:
        ; Setup parameters for call to function afCopyAddress
        MOV       A,#0x14
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_24:
        MOV       A,R6
        ADD       A,#0x6
        MOV       R2,A
        CLR       A
        ADDC      A,R7
        MOV       R3,A
        LCALL     `??afCopyAddress::?relay`; Banked call to: afCopyAddress
//  530   MSGpkt->srcAddr.endPoint = aff->SrcEndPoint;
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,R6
        ADD       A,#0xf
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
//  531   MSGpkt->endPoint = epDesc->endPoint;
        MOV       DPL,?V4
        MOV       DPH,?V5
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,R6
        ADD       A,#0x14
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
//  532   MSGpkt->wasBroadcast = aff->wasBroadcast;
        MOV       A,?V0
        ADD       A,#0xc
        MOV       DPL,A
        CLR       A
        ADDC      A,?V1
        MOV       DPH,A
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,R6
        ADD       A,#0x15
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       A,#0x18
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine15 & 0xFFFF
//  533   MSGpkt->LinkQuality = sig->LinkQuality;
??CrossCallReturnLabel_17:
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,R6
        ADD       A,#0x16
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
//  534   MSGpkt->correlation = sig->correlation;
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,R6
        ADD       A,#0x17
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
//  535   MSGpkt->rssi = sig->rssi;
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,R6
        ADD       A,#0x18
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
//  536   MSGpkt->SecurityUse = SecurityUse;
        MOV       A,#0x1a
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,R6
        ADD       A,#0x19
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
//  537   MSGpkt->timestamp = timestamp;
        MOV       A,#0x1b
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?XLOAD_R0123
        MOV       A,R6
        ADD       A,#0x1a
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        LCALL     ?XSTORE_R0123
//  538   MSGpkt->nwkSeqNum = nwkSeqNum;
        MOV       A,R6
        ADD       A,#0x1e
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        MOV       A,?V6
        MOVX      @DPTR,A
//  539   MSGpkt->macSrcAddr = aff->macSrcAddr;
        MOV       A,?V0
        ADD       A,#0x15
        MOV       DPL,A
        CLR       A
        ADDC      A,?V1
        MOV       DPH,A
        LCALL     ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_19:
        ADD       A,#0x24
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        LCALL     ?Subroutine22 & 0xFFFF
//  540   MSGpkt->macDestAddr = aff->macDestAddr;
??CrossCallReturnLabel_31:
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_20:
        ADD       A,#0x12
        LCALL     ?Subroutine24 & 0xFFFF
//  541   MSGpkt->srcAddr.panId = SrcPanId;
??CrossCallReturnLabel_74:
        MOV       A,#0x16
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_21:
        ADD       A,#0x10
        LCALL     ?Subroutine24 & 0xFFFF
//  542   MSGpkt->cmd.TransSeqNumber = 0;
??CrossCallReturnLabel_75:
        MOV       A,R6
        ADD       A,#0x1f
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        CLR       A
        MOVX      @DPTR,A
//  543   MSGpkt->cmd.DataLength = aff->asduLength;
        MOV       A,R6
        ADD       A,#0x20
        MOV       R4,A
        CLR       A
        ADDC      A,R7
        MOV       R5,A
        MOV       DPL,?V2
        MOV       DPH,?V3
        MOVX      A,@DPTR
        MOV       DPL,R4
        MOV       DPH,R5
        MOVX      @DPTR,A
        INC       DPTR
        CLR       A
        MOVX      @DPTR,A
//  544   MSGpkt->radius = radius;
        MOV       A,#0x1f
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,R6
        ADD       A,#0x26
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
//  545 
//  546   if ( MSGpkt->cmd.DataLength )
        MOV       A,R6
        ADD       A,#0x22
        MOV       R0,A
        CLR       A
        ADDC      A,R7
        MOV       R1,A
        MOV       DPL,R4
        MOV       DPH,R5
        LCALL     ??Subroutine39_0 & 0xFFFF
??CrossCallReturnLabel_82:
        MOV       A,R2
        ORL       A,R3
        JZ        ??afBuildMSGIncoming_1
//  547   {
//  548     MSGpkt->cmd.Data = (uint8 *)(MSGpkt + 1);
        MOV       A,R6
        ADD       A,#0x27
        MOV       R2,A
        CLR       A
        ADDC      A,R7
        MOV       R3,A
        MOV       DPL,R0
        MOV       DPH,R1
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
//  549     osal_memcpy( MSGpkt->cmd.Data, asdu, MSGpkt->cmd.DataLength );
        ; Setup parameters for call to function osal_memcpy
        MOV       ?V10,#0x0
        MOV       R0,#?V8
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 23)
        MOV       DPL,R4
        MOV       DPH,R5
        LCALL     ?Subroutine20 & 0xFFFF
//  550   }
??CrossCallReturnLabel_25:
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
        SJMP      ??afBuildMSGIncoming_2
//  551   else
//  552   {
//  553     MSGpkt->cmd.Data = NULL;
??afBuildMSGIncoming_1:
        MOV       DPL,R0
        MOV       DPH,R1
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
//  554   }
//  555 
//  556 #if defined ( MT_AF_CB_FUNC )
//  557   // If ZDO or SAPI have registered for this endpoint, dont intercept it here
//  558   if (AFCB_CHECK(CB_ID_AF_DATA_IND, *(epDesc->task_id)))
//  559   {
//  560     MT_AfIncomingMsg( (void *)MSGpkt );
//  561     // Release the memory.
//  562     osal_msg_deallocate( (void *)MSGpkt );
//  563   }
//  564   else
//  565 #endif
//  566   {
//  567     // Send message through task message.
//  568     osal_msg_send( *(epDesc->task_id), (uint8 *)MSGpkt );
??afBuildMSGIncoming_2:
        ; Setup parameters for call to function osal_msg_send
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        MOV       DPL,?V4
        MOV       DPH,?V5
        LCALL     ?Subroutine8 & 0xFFFF
//  569   }
??CrossCallReturnLabel_7:
        LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
//  570 }
??afBuildMSGIncoming_0:
        MOV       R7,#0xc
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock82

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine25:
          CFI Block cfiCond83 Using cfiCommon0
          CFI Function afReflectError
          CFI Conditional ??CrossCallReturnLabel_34
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond84 Using cfiCommon0
          CFI (cfiCond84) Function afBuildMSGIncoming
          CFI (cfiCond84) Conditional ??CrossCallReturnLabel_35
          CFI (cfiCond84) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond84) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond84) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond84) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond84) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond84) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond84) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond84) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond84) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond84) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond84) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond84) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond84) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond84) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond84) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond84) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond84) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond84) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond84) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond84) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond84) CFA_SP SP+-2
          CFI (cfiCond84) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond85 Using cfiCommon0
          CFI (cfiCond85) Function AF_DataRequest
          CFI (cfiCond85) Conditional ??CrossCallReturnLabel_36
          CFI (cfiCond85) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond85) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond85) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond85) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond85) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond85) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond85) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond85) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond85) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond85) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond85) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond85) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond85) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond85) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond85) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond85) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond85) CFA_SP SP+-2
          CFI (cfiCond85) CFA_XSP16 add(XSP16, 49)
          CFI Block cfiPicker86 Using cfiCommon1
          CFI (cfiPicker86) NoFunction
          CFI (cfiPicker86) Picker
        MOVX      @DPTR,A
        ; Setup parameters for call to function osal_msg_send
        MOV       DPL,?V0
        MOV       DPH,?V1
        RET
          CFI EndBlock cfiCond83
          CFI EndBlock cfiCond84
          CFI EndBlock cfiCond85
          CFI EndBlock cfiPicker86

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine24:
          CFI Block cfiCond87 Using cfiCommon0
          CFI Function afBuildMSGIncoming
          CFI Conditional ??CrossCallReturnLabel_74
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond88 Using cfiCommon0
          CFI (cfiCond88) Function afBuildMSGIncoming
          CFI (cfiCond88) Conditional ??CrossCallReturnLabel_75
          CFI (cfiCond88) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond88) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond88) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond88) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond88) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond88) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond88) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond88) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond88) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond88) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond88) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond88) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond88) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond88) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond88) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond88) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond88) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond88) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond88) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond88) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond88) CFA_SP SP+-2
          CFI (cfiCond88) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiPicker89 Using cfiCommon1
          CFI (cfiPicker89) NoFunction
          CFI (cfiPicker89) Picker
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
          CFI EndBlock cfiCond87
          CFI EndBlock cfiCond88
          CFI EndBlock cfiPicker89
        REQUIRE ??Subroutine37_0
        ; // Fall through to label ??Subroutine37_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine37_0:
          CFI Block cfiCond90 Using cfiCommon0
          CFI Function afRegisterExtended
          CFI Conditional ??CrossCallReturnLabel_67
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond91 Using cfiCommon0
          CFI (cfiCond91) Function afRegisterExtended
          CFI (cfiCond91) Conditional ??CrossCallReturnLabel_68
          CFI (cfiCond91) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond91) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond91) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond91) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond91) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond91) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond91) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond91) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond91) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond91) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond91) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond91) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond91) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond91) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond91) CFA_SP SP+-2
          CFI (cfiCond91) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond92 Using cfiCommon0
          CFI (cfiCond92) Function afBuildMSGIncoming
          CFI (cfiCond92) Conditional ??CrossCallReturnLabel_69
          CFI (cfiCond92) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond92) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond92) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond92) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond92) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond92) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond92) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond92) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond92) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond92) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond92) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond92) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond92) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond92) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond92) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond92) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond92) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond92) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond92) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond92) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond92) CFA_SP SP+-2
          CFI (cfiCond92) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond93 Using cfiCommon0
          CFI (cfiCond93) Function AF_DataRequest
          CFI (cfiCond93) Conditional ??CrossCallReturnLabel_70
          CFI (cfiCond93) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond93) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond93) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond93) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond93) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond93) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond93) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond93) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond93) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond93) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond93) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond93) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond93) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond93) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond93) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond93) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond93) CFA_SP SP+-2
          CFI (cfiCond93) CFA_XSP16 add(XSP16, 49)
          CFI Block cfiCond94 Using cfiCommon0
          CFI (cfiCond94) Function AF_DataRequest
          CFI (cfiCond94) Conditional ??CrossCallReturnLabel_71
          CFI (cfiCond94) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond94) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond94) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond94) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond94) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond94) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond94) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond94) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond94) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond94) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond94) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond94) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond94) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond94) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond94) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond94) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond94) CFA_SP SP+-2
          CFI (cfiCond94) CFA_XSP16 add(XSP16, 49)
          CFI Block cfiCond95 Using cfiCommon0
          CFI (cfiCond95) Function AF_DataRequest
          CFI (cfiCond95) Conditional ??CrossCallReturnLabel_72
          CFI (cfiCond95) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond95) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond95) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond95) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond95) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond95) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond95) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond95) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond95) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond95) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond95) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond95) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond95) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond95) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond95) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond95) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond95) CFA_SP SP+-2
          CFI (cfiCond95) CFA_XSP16 add(XSP16, 49)
          CFI Block cfiCond96 Using cfiCommon0
          CFI (cfiCond96) Function AF_DataRequest
          CFI (cfiCond96) Conditional ??CrossCallReturnLabel_73
          CFI (cfiCond96) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond96) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond96) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond96) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond96) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond96) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond96) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond96) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond96) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond96) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond96) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond96) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond96) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond96) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond96) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond96) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond96) CFA_SP SP+-2
          CFI (cfiCond96) CFA_XSP16 add(XSP16, 49)
          CFI Block cfiCond97 Using cfiCommon0
          CFI (cfiCond97) Function afBuildMSGIncoming
          CFI (cfiCond97) Conditional ??CrossCallReturnLabel_74
          CFI (cfiCond97) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond97) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond97) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond97) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond97) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond97) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond97) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond97) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond97) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond97) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond97) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond97) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond97) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond97) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond97) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond97) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond97) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond97) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond97) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond97) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond97) CFA_SP SP+-2
          CFI (cfiCond97) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond98 Using cfiCommon0
          CFI (cfiCond98) Function afBuildMSGIncoming
          CFI (cfiCond98) Conditional ??CrossCallReturnLabel_75
          CFI (cfiCond98) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond98) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond98) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond98) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond98) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond98) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond98) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond98) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond98) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond98) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond98) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond98) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond98) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond98) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond98) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond98) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond98) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond98) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond98) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond98) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond98) CFA_SP SP+-2
          CFI (cfiCond98) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiPicker99 Using cfiCommon1
          CFI (cfiPicker99) NoFunction
          CFI (cfiPicker99) Picker
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
        RET
          CFI EndBlock cfiCond90
          CFI EndBlock cfiCond91
          CFI EndBlock cfiCond92
          CFI EndBlock cfiCond93
          CFI EndBlock cfiCond94
          CFI EndBlock cfiCond95
          CFI EndBlock cfiCond96
          CFI EndBlock cfiCond97
          CFI EndBlock cfiCond98
          CFI EndBlock cfiPicker99

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine22:
          CFI Block cfiCond100 Using cfiCommon0
          CFI Function afBuildMSGIncoming
          CFI Conditional ??CrossCallReturnLabel_30
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond101 Using cfiCommon0
          CFI (cfiCond101) Function afBuildMSGIncoming
          CFI (cfiCond101) Conditional ??CrossCallReturnLabel_31
          CFI (cfiCond101) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond101) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond101) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond101) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond101) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond101) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond101) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond101) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond101) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond101) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond101) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond101) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond101) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond101) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond101) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond101) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond101) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond101) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond101) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond101) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond101) CFA_SP SP+-2
          CFI (cfiCond101) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiPicker102 Using cfiCommon1
          CFI (cfiPicker102) NoFunction
          CFI (cfiPicker102) Picker
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        RET
          CFI EndBlock cfiCond100
          CFI EndBlock cfiCond101
          CFI EndBlock cfiPicker102

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine16:
          CFI Block cfiCond103 Using cfiCommon0
          CFI Function afBuildMSGIncoming
          CFI Conditional ??CrossCallReturnLabel_19
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond104 Using cfiCommon0
          CFI (cfiCond104) Function afBuildMSGIncoming
          CFI (cfiCond104) Conditional ??CrossCallReturnLabel_20
          CFI (cfiCond104) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond104) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond104) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond104) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond104) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond104) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond104) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond104) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond104) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond104) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond104) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond104) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond104) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond104) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond104) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond104) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond104) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond104) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond104) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond104) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond104) CFA_SP SP+-2
          CFI (cfiCond104) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond105 Using cfiCommon0
          CFI (cfiCond105) Function afBuildMSGIncoming
          CFI (cfiCond105) Conditional ??CrossCallReturnLabel_21
          CFI (cfiCond105) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond105) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond105) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond105) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond105) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond105) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond105) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond105) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond105) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond105) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond105) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond105) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond105) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond105) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond105) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond105) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond105) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond105) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond105) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond105) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond105) CFA_SP SP+-2
          CFI (cfiCond105) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiPicker106 Using cfiCommon1
          CFI (cfiPicker106) NoFunction
          CFI (cfiPicker106) Picker
        LCALL     ?Subroutine32 & 0xFFFF
??CrossCallReturnLabel_62:
        MOV       A,R6
        RET
          CFI EndBlock cfiCond103
          CFI EndBlock cfiCond104
          CFI EndBlock cfiCond105
          CFI EndBlock cfiPicker106

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine10:
          CFI Block cfiCond107 Using cfiCommon0
          CFI Function afRegisterExtended
          CFI Conditional ??CrossCallReturnLabel_10
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond108 Using cfiCommon0
          CFI (cfiCond108) Function afBuildMSGIncoming
          CFI (cfiCond108) Conditional ??CrossCallReturnLabel_11
          CFI (cfiCond108) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond108) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond108) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond108) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond108) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond108) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond108) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond108) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond108) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond108) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond108) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond108) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond108) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond108) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond108) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond108) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond108) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond108) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond108) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond108) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond108) CFA_SP SP+-2
          CFI (cfiCond108) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiPicker109 Using cfiCommon1
          CFI (cfiPicker109) NoFunction
          CFI (cfiPicker109) Picker
        LCALL     ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_78:
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        RET
          CFI EndBlock cfiCond107
          CFI EndBlock cfiCond108
          CFI EndBlock cfiPicker109

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine30:
          CFI Block cfiCond110 Using cfiCommon0
          CFI Function afRegisterExtended
          CFI Conditional ??CrossCallReturnLabel_78, ??CrossCallReturnLabel_10
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond111 Using cfiCommon0
          CFI (cfiCond111) Function afBuildMSGIncoming
          CFI (cfiCond111) Conditional ??CrossCallReturnLabel_78, ??CrossCallReturnLabel_11
          CFI (cfiCond111) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond111) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond111) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond111) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond111) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond111) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond111) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond111) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond111) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond111) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond111) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond111) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond111) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond111) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond111) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond111) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond111) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond111) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond111) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond111) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond111) CFA_SP SP+-4
          CFI (cfiCond111) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond112 Using cfiCommon0
          CFI (cfiCond112) Function afRegisterExtended
          CFI (cfiCond112) Conditional ??CrossCallReturnLabel_77, ??CrossCallReturnLabel_8
          CFI (cfiCond112) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond112) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond112) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond112) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond112) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond112) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond112) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond112) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond112) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond112) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond112) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond112) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond112) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond112) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond112) CFA_SP SP+-4
          CFI (cfiCond112) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond113 Using cfiCommon0
          CFI (cfiCond113) Function afCopyAddress
          CFI (cfiCond113) Conditional ??CrossCallReturnLabel_77, ??CrossCallReturnLabel_9
          CFI (cfiCond113) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond113) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond113) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond113) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond113) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond113) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond113) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond113) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond113) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond113) CFA_SP SP+-4
          CFI (cfiCond113) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker114 Using cfiCommon1
          CFI (cfiPicker114) NoFunction
          CFI (cfiPicker114) Picker
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
          CFI EndBlock cfiCond110
          CFI EndBlock cfiCond111
          CFI EndBlock cfiCond112
          CFI EndBlock cfiCond113
          CFI EndBlock cfiPicker114
        REQUIRE ??Subroutine38_0
        ; // Fall through to label ??Subroutine38_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine38_0:
          CFI Block cfiCond115 Using cfiCommon0
          CFI Function AF_DataRequestSrcRtg
          CFI Conditional ??CrossCallReturnLabel_76
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond116 Using cfiCommon0
          CFI (cfiCond116) Function afRegisterExtended
          CFI (cfiCond116) Conditional ??CrossCallReturnLabel_78, ??CrossCallReturnLabel_10
          CFI (cfiCond116) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond116) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond116) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond116) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond116) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond116) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond116) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond116) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond116) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond116) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond116) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond116) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond116) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond116) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond116) CFA_SP SP+-4
          CFI (cfiCond116) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond117 Using cfiCommon0
          CFI (cfiCond117) Function afBuildMSGIncoming
          CFI (cfiCond117) Conditional ??CrossCallReturnLabel_78, ??CrossCallReturnLabel_11
          CFI (cfiCond117) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond117) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond117) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond117) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond117) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond117) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond117) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond117) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond117) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond117) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond117) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond117) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond117) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond117) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond117) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond117) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond117) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond117) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond117) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond117) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond117) CFA_SP SP+-4
          CFI (cfiCond117) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond118 Using cfiCommon0
          CFI (cfiCond118) Function afRegisterExtended
          CFI (cfiCond118) Conditional ??CrossCallReturnLabel_77, ??CrossCallReturnLabel_8
          CFI (cfiCond118) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond118) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond118) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond118) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond118) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond118) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond118) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond118) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond118) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond118) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond118) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond118) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond118) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond118) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond118) CFA_SP SP+-4
          CFI (cfiCond118) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond119 Using cfiCommon0
          CFI (cfiCond119) Function afCopyAddress
          CFI (cfiCond119) Conditional ??CrossCallReturnLabel_77, ??CrossCallReturnLabel_9
          CFI (cfiCond119) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond119) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond119) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond119) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond119) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond119) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond119) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond119) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond119) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond119) CFA_SP SP+-4
          CFI (cfiCond119) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker120 Using cfiCommon1
          CFI (cfiPicker120) NoFunction
          CFI (cfiPicker120) Picker
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       DPL,R6
        MOV       DPH,R7
        RET
          CFI EndBlock cfiCond115
          CFI EndBlock cfiCond116
          CFI EndBlock cfiCond117
          CFI EndBlock cfiCond118
          CFI EndBlock cfiCond119
          CFI EndBlock cfiPicker120
//  571 
//  572 /*********************************************************************
//  573  * @fn      AF_DataRequest
//  574  *
//  575  * @brief   Common functionality for invoking APSDE_DataReq() for both
//  576  *          SendMulti and MSG-Send.
//  577  *
//  578  * input parameters
//  579  *
//  580  * @param  *dstAddr - Full ZB destination address: Nwk Addr + End Point.
//  581  * @param  *srcEP - Origination (i.e. respond to or ack to) End Point Descr.
//  582  * @param   cID - A valid cluster ID as specified by the Profile.
//  583  * @param   len - Number of bytes of data pointed to by next param.
//  584  * @param  *buf - A pointer to the data bytes to send.
//  585  * @param  *transID - A pointer to a byte which can be modified and which will
//  586  *                    be used as the transaction sequence number of the msg.
//  587  * @param   options - Valid bit mask of Tx options.
//  588  * @param   radius - Normally set to AF_DEFAULT_RADIUS.
//  589  *
//  590  * output parameters
//  591  *
//  592  * @param  *transID - Incremented by one if the return value is success.
//  593  *
//  594  * @return  afStatus_t - See previous definition of afStatus_... types.
//  595  */

        RSEG XDATA_I:XDATA:NOROOT(0)
//  596 uint8 AF_DataRequestDiscoverRoute = DISC_ROUTE_NETWORK;
AF_DataRequestDiscoverRoute:
        DATA8
        DS 1
        REQUIRE `?<Initializer for AF_DataRequestDiscoverRoute>`
        REQUIRE __INIT_XDATA_I

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  597 afStatus_t AF_DataRequest( afAddrType_t *dstAddr, endPointDesc_t *srcEP,
AF_DataRequest:
          CFI Block cfiBlock121 Using cfiCommon0
          CFI Function AF_DataRequest
        CODE
//  598                            uint16 cID, uint16 len, uint8 *buf, uint8 *transID,
//  599                            uint8 options, uint8 radius )
//  600 {
        FUNCALL AF_DataRequest, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 49, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AF_DataRequest, RTG_CheckRtStatus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 49, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AF_DataRequest, NLME_IsAddressBroadcast
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 49, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AF_DataRequest, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 49, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AF_DataRequest, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 49, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AF_DataRequest, afFindEndPointDescList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 49, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AF_DataRequest, afDataReqMTU
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 49, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AF_DataRequest, APSDE_DataReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 49, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AF_DataRequest, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 49, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AF_DataRequest, afDataConfirm
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 49, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 49, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV       A,#-0x10
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 33
        MOV       A,#-0x21
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 49)
        MOV       ?V4,R2
        MOV       ?V5,R3
        MOV       A,R4
        MOV       R6,A
        MOV       A,R5
        MOV       R7,A
        MOV       ?V2,R1
//  601   pDescCB pfnDescCB;
//  602   ZStatus_t stat;
//  603   APSDE_DataReq_t req;
//  604   afDataReqMTU_t mtu;
//  605   epList_t *pList;
//  606 
//  607   // Verify source end point
//  608   if ( srcEP == NULL )
        MOV       A,R6
        ORL       A,R7
        JNZ       $+5
        LJMP      ??AF_DataRequest_0 & 0xFFFF
//  609   {
//  610     return afStatus_INVALID_PARAMETER;
//  611   }
//  612 
//  613 #if !defined( REFLECTOR )
//  614   if ( dstAddr->addrMode == afAddrNotPresent )
//  615   {
//  616     return afStatus_INVALID_PARAMETER;
//  617   }
//  618 #endif
//  619   
//  620   // copy the addressing mode, to get the length of the packet
//  621   mtu.aps.addressingMode = dstAddr->addrMode; 
        MOV       A,R2
        ADD       A,#0x8
        MOV       ?V0,A
        CLR       A
        ADDC      A,?V5
        MOV       ?V1,A
        MOV       DPL,?V0
        MOV       DPH,A
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
//  622 
//  623   // Check if route is available before sending data
//  624   if ( options & AF_LIMIT_CONCENTRATOR  )
        MOV       A,R1
        MOV       C,0xE0 /* A   */.3
        JNC       ??AF_DataRequest_1
//  625   {
//  626     if ( dstAddr->addrMode != afAddr16Bit )
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOVX      A,@DPTR
        XRL       A,#0x2
        JNZ       ??AF_DataRequest_0
//  627     {
//  628       return ( afStatus_INVALID_PARAMETER );
//  629     }
//  630 
//  631     // First, make sure the destination is not its self, then check for an existing route.
//  632     if ( (dstAddr->addr.shortAddr != NLME_GetShortAddr())
//  633         && (RTG_CheckRtStatus( dstAddr->addr.shortAddr, RT_ACTIVE, (MTO_ROUTE | NO_ROUTE_CACHE) ) != RTG_SUCCESS) )
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
        MOV       ?V6,R2
        MOV       ?V7,R3
        LCALL     ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_89:
        MOV       A,?V6
        XRL       A,R2
        JNZ       ??AF_DataRequest_2
        MOV       A,?V7
        XRL       A,R3
??AF_DataRequest_2:
        JZ        ??AF_DataRequest_1
        ; Setup parameters for call to function RTG_CheckRtStatus
        MOV       R4,#0x3
        MOV       R1,#0x1
        LCALL     `??RTG_CheckRtStatus::?relay`; Banked call to: RTG_CheckRtStatus
        MOV       A,R1
        JZ        ??AF_DataRequest_1
//  634     {
//  635       // A valid route to a concentrator wasn't found
//  636       return ( afStatus_NO_ROUTE );
        MOV       R1,#-0x33
        LJMP      ??AF_DataRequest_3 & 0xFFFF
//  637     }
//  638   }
//  639 
//  640   // Validate broadcasting
//  641   if ( ( dstAddr->addrMode == afAddr16Bit     ) ||
//  642        ( dstAddr->addrMode == afAddrBroadcast )    )
??AF_DataRequest_1:
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       A,#0x2
        XRL       A,R0
        JZ        ??AF_DataRequest_4
        MOV       A,#0xf
        XRL       A,R0
        JNZ       ??AF_DataRequest_5
//  643   {
//  644     // Check for valid broadcast values
//  645     if( ADDR_NOT_BCAST != NLME_IsAddressBroadcast( dstAddr->addr.shortAddr )  )
??AF_DataRequest_4:
        ; Setup parameters for call to function NLME_IsAddressBroadcast
        LCALL     ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_90:
        LCALL     `??NLME_IsAddressBroadcast::?relay`; Banked call to: NLME_IsAddressBroadcast
        MOV       A,R1
        MOV       DPL,?V0
        MOV       DPH,?V1
        JZ        ??AF_DataRequest_6
//  646     {
//  647       // Force mode to broadcast
//  648       dstAddr->addrMode = afAddrBroadcast;
        MOV       A,#0xf
        MOVX      @DPTR,A
//  649     }
//  650     else
//  651     {
//  652       // Address is not a valid broadcast type
//  653       if ( dstAddr->addrMode == afAddrBroadcast )
//  654       {
//  655         return afStatus_INVALID_PARAMETER;
//  656       }
//  657     }
//  658   }
//  659   else if ( dstAddr->addrMode != afAddr64Bit &&
//  660             dstAddr->addrMode != afAddrGroup &&
//  661             dstAddr->addrMode != afAddrNotPresent )
//  662   {
//  663     return afStatus_INVALID_PARAMETER;
//  664   }
//  665 
//  666   // Set destination address
//  667   req.dstAddr.addrMode = dstAddr->addrMode;
??AF_DataRequest_7:
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0xb
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        LCALL     ?Subroutine25 & 0xFFFF
//  668   if ( dstAddr->addrMode == afAddr64Bit )
??CrossCallReturnLabel_36:
        MOVX      A,@DPTR
        XRL       A,#0x3
        JNZ       ??AF_DataRequest_8
//  669   {
//  670     osal_cpyExtAddr( req.dstAddr.addr.extAddr, dstAddr->addr.extAddr );
        ; Setup parameters for call to function sAddrExtCpy
        MOV       R4,?V4
        MOV       R5,?V5
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
        SJMP      ??CrossCallReturnLabel_70
//  671   }
??AF_DataRequest_6:
        MOVX      A,@DPTR
        XRL       A,#0xf
        JNZ       ??AF_DataRequest_7
        SJMP      ??AF_DataRequest_0
??AF_DataRequest_5:
        MOV       A,#0x3
        XRL       A,R0
        JZ        ??AF_DataRequest_7
        MOV       A,#0x1
        XRL       A,R0
        JZ        ??AF_DataRequest_7
        MOV       A,R0
        JZ        ??AF_DataRequest_7
??AF_DataRequest_0:
        MOV       R1,#0x2
        LJMP      ??AF_DataRequest_3 & 0xFFFF
//  672   else
//  673   {
//  674     req.dstAddr.addr.shortAddr = dstAddr->addr.shortAddr;
??AF_DataRequest_8:
        MOV       DPL,?V4
        MOV       DPH,?V5
        LCALL     ??Subroutine35_0 & 0xFFFF
//  675   }
??CrossCallReturnLabel_53:
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine37_0 & 0xFFFF
//  676 
//  677   // This option is to use Wildcard ProfileID in outgoing packets
//  678   if ( options & AF_WILDCARD_PROFILEID )
??CrossCallReturnLabel_70:
        MOV       A,?V2
        MOV       C,0xE0 /* A   */.1
        MOV       A,#0x12
        JNC       ??AF_DataRequest_9
//  679   {
//  680     req.profileID = ZDO_WILDCARD_PROFILE_ID;
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#-0x1
        MOVX      @DPTR,A
        INC       DPTR
        SJMP      ??AF_DataRequest_10
//  681   }
//  682   else
//  683   {
//  684     req.profileID = ZDO_PROFILE_ID;
??AF_DataRequest_9:
        LCALL     ?XSTACK_DISP0_8
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
//  685 
//  686     if ( (pfnDescCB = afGetDescCB( srcEP )) )
        MOV       DPTR,#epList
??AF_DataRequest_11:
        LCALL     ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_12:
        JZ        ??AF_DataRequest_12
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        INC       DPTR
        LCALL     ??Subroutine39_0 & 0xFFFF
??CrossCallReturnLabel_83:
        MOV       A,R6
        XRL       A,R2
        JNZ       ??AF_DataRequest_13
        MOV       A,R7
        XRL       A,R3
??AF_DataRequest_13:
        MOV       DPL,R0
        MOV       DPH,R1
        JNZ       ??AF_DataRequest_11
        LCALL     ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_15:
        JZ        ??AF_DataRequest_12
//  687     {
//  688       uint16 *pID = (uint16 *)(pfnDescCB(
//  689                                    AF_DESCRIPTOR_PROFILE_ID, srcEP->endPoint ));
        ; Setup parameters for indirect call
        MOV       DPL,R6
        MOV       DPH,R7
        LCALL     ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_29:
        LCALL     ?CALL_IND
//  690       if ( pID )
        MOV       A,R2
        ORL       A,R3
        JZ        ??AF_DataRequest_14
//  691       {
//  692         req.profileID = *pID;
        MOV       DPL,R2
        MOV       DPH,R3
        LCALL     ??Subroutine35_0 & 0xFFFF
??CrossCallReturnLabel_54:
        MOV       A,#0x12
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine37_0 & 0xFFFF
//  693         osal_mem_free( pID );
??CrossCallReturnLabel_71:
        ; Setup parameters for call to function osal_mem_free
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
        SJMP      ??AF_DataRequest_14
//  694       }
//  695     }
//  696     else if ( srcEP->simpleDesc )
??AF_DataRequest_12:
        MOV       DPL,R6
        MOV       DPH,R7
        LCALL     ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_1:
        JZ        ??AF_DataRequest_14
//  697     {
//  698       req.profileID = srcEP->simpleDesc->AppProfId;
        LCALL     ??Subroutine34_0 & 0xFFFF
//  699     }
//  700   }
??CrossCallReturnLabel_57:
        MOV       A,#0x12
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
??AF_DataRequest_10:
        MOVX      @DPTR,A
//  701 
//  702   req.txOptions = 0;
??AF_DataRequest_14:
        MOV       A,#0x18
        LCALL     ?XSTACK_DISP0_8
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
//  703 
//  704   if ( ( options & AF_ACK_REQUEST              ) &&
//  705        ( req.dstAddr.addrMode != AddrBroadcast ) &&
//  706        ( req.dstAddr.addrMode != AddrGroup     )    )
        MOV       A,?V2
        MOV       C,0xE0 /* A   */.4
        JNC       ??AF_DataRequest_15
        MOV       A,#0xb
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       A,#0xf
        XRL       A,R0
        JZ        ??AF_DataRequest_15
        MOV       A,#0x1
        XRL       A,R0
        JZ        ??AF_DataRequest_15
//  707   {
//  708     req.txOptions |=  APS_TX_OPTIONS_ACK;
        MOV       A,#0x18
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x4
        MOVX      @DPTR,A
        INC       DPTR
        CLR       A
        MOVX      @DPTR,A
//  709   }
//  710 
//  711   if ( options & AF_SKIP_ROUTING )
??AF_DataRequest_15:
        MOV       A,?V2
        MOV       C,0xE0 /* A   */.7
        JNC       ??AF_DataRequest_16
//  712   {
//  713     req.txOptions |=  APS_TX_OPTIONS_SKIP_ROUTING;
        MOV       A,#0x18
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        ORL       A,#0x10
        MOVX      @DPTR,A
//  714   }
//  715 
//  716   if ( options & AF_EN_SECURITY )
??AF_DataRequest_16:
        MOV       A,?V2
        MOV       C,0xE0 /* A   */.6
        JNC       ??AF_DataRequest_17
//  717   {
//  718     req.txOptions |= APS_TX_OPTIONS_SECURITY_ENABLE;
        MOV       A,#0x18
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        ORL       A,#0x1
        MOVX      @DPTR,A
//  719     mtu.aps.secure = TRUE;
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x1
        SJMP      ??AF_DataRequest_18
//  720   }
//  721   else
//  722   {
//  723     mtu.aps.secure = FALSE;
??AF_DataRequest_17:
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        CLR       A
??AF_DataRequest_18:
        MOVX      @DPTR,A
//  724   }
//  725 
//  726   if ( options & AF_PREPROCESS )
        MOV       A,?V2
        MOV       C,0xE0 /* A   */.2
        JNC       ??AF_DataRequest_19
//  727   {
//  728     req.txOptions |=  APS_TX_OPTIONS_PREPROCESS;
        MOV       A,#0x18
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        ORL       A,#0x40
        MOVX      @DPTR,A
//  729   }
//  730 
//  731   mtu.kvp = FALSE;
??AF_DataRequest_19:
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        CLR       A
        MOVX      @DPTR,A
//  732 
//  733   if ( options & AF_SUPRESS_ROUTE_DISC_NETWORK )
        MOV       A,?V2
        MOV       C,0xE0 /* A   */.5
        JNC       ??AF_DataRequest_20
//  734   {
//  735     req.discoverRoute = DISC_ROUTE_INITIATE;
        MOV       A,#0x1b
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x4
        SJMP      ??AF_DataRequest_21
//  736   }
//  737   else
//  738   {
//  739     req.discoverRoute = AF_DataRequestDiscoverRoute;
??AF_DataRequest_20:
        MOV       DPTR,#AF_DataRequestDiscoverRoute
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x1b
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
??AF_DataRequest_21:
        MOVX      @DPTR,A
        MOV       A,#0x37
        LCALL     ?XSTACK_DISP0_8
//  740   }
        LCALL     ??Subroutine36_0 & 0xFFFF
//  741 
//  742   req.transID       = *transID;
??CrossCallReturnLabel_64:
        MOV       DPL,?V0
        MOV       DPH,A
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x1a
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        LCALL     ?Subroutine33 & 0xFFFF
//  743   req.srcEP         = srcEP->endPoint;
??CrossCallReturnLabel_50:
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0xc
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
//  744   req.dstEP         = dstAddr->endPoint;
        MOV       DPL,?V4
        MOV       DPH,?V5
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0xd
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
//  745   req.clusterID     = cID;
        MOV       A,#0x31
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine35_0 & 0xFFFF
??CrossCallReturnLabel_55:
        MOV       A,#0x10
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine37_0 & 0xFFFF
??CrossCallReturnLabel_72:
        MOV       A,#0x33
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V4,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V5,A
//  746   req.asduLen       = len;
        MOV       A,#0x14
        LCALL     ?XSTACK_DISP0_8
        MOV       A,?V4
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,?V5
        MOVX      @DPTR,A
//  747   req.asdu          = buf;
        MOV       A,#0x35
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine35_0 & 0xFFFF
??CrossCallReturnLabel_56:
        MOV       A,#0x16
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine37_0 & 0xFFFF
//  748   req.radiusCounter = radius;
??CrossCallReturnLabel_73:
        MOV       A,#0x39
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x1c
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        LCALL     ?Subroutine33 & 0xFFFF
//  749 #if defined ( INTER_PAN )
//  750   req.dstPanId      = dstAddr->panId;
//  751 #endif // INTER_PAN
//  752 
//  753   // Look if there is a Callback function registered for this endpoint
//  754   // The callback is used to control the AF Transaction ID used when sending messages
//  755   pList = afFindEndPointDescList( srcEP->endPoint );
??CrossCallReturnLabel_51:
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
        MOV       DPL,R2
        MOV       DPH,R3
//  756 
//  757   if ( ( pList != NULL ) && ( pList->pfnApplCB != NULL ) )
        MOV       A,DPL
        ORL       A,DPH
        JZ        ??AF_DataRequest_22
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_2:
        JZ        ??AF_DataRequest_22
//  758   {
//  759     pList->pfnApplCB( &req );
        ; Setup parameters for indirect call
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP101_8
        LCALL     ?CALL_IND
//  760   }
//  761 
//  762 #if defined ( INTER_PAN )
//  763   if ( StubAPS_InterPan( dstAddr->panId, dstAddr->endPoint ) )
//  764   {
//  765     if ( len > INTERP_DataReqMTU() )
//  766     {
//  767       stat = afStatus_INVALID_PARAMETER;
//  768     }
//  769     else
//  770     {
//  771       stat = INTERP_DataReq( &req );
//  772     }
//  773   }
//  774   else
//  775 #endif // INTER_PAN
//  776   {
//  777     if (len > afDataReqMTU( &mtu ) )
??AF_DataRequest_22:
        ; Setup parameters for call to function afDataReqMTU
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        LCALL     `??afDataReqMTU::?relay`; Banked call to: afDataReqMTU
        MOV       A,R1
        CLR       C
        SUBB      A,?V4
        CLR       A
        SUBB      A,?V5
        JNC       ??AF_DataRequest_23
//  778     {
//  779       if (apsfSendFragmented)
        MOV       DPTR,#apsfSendFragmented
        LCALL     ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_14:
        JZ        ??AF_DataRequest_24
//  780       {
//  781         stat = (*apsfSendFragmented)( &req );
        ; Setup parameters for indirect call
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP101_8
        LCALL     ??Subroutine42_0 & 0xFFFF
//  782       }
??CrossCallReturnLabel_91:
        LCALL     ?CALL_IND
        SJMP      ??AF_DataRequest_25
//  783       else
//  784       {
//  785         stat = afStatus_INVALID_PARAMETER;
??AF_DataRequest_24:
        MOV       ?V3,#0x2
        SJMP      ??AF_DataRequest_26
//  786       }
//  787     }
//  788     else
//  789     {
//  790       stat = APSDE_DataReq( &req );
??AF_DataRequest_23:
        ; Setup parameters for call to function APSDE_DataReq
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??APSDE_DataReq::?relay`; Banked call to: APSDE_DataReq
??AF_DataRequest_25:
        MOV       A,R1
        MOV       ?V3,A
//  791     }
//  792   }
//  793 
//  794   /*
//  795    * If this is an EndPoint-to-EndPoint message on the same device, it will not
//  796    * get added to the NWK databufs. So it will not go OTA and it will not get
//  797    * a MACCB_DATA_CONFIRM_CMD callback. Thus it is necessary to generate the
//  798    * AF_DATA_CONFIRM_CMD here. Note that APSDE_DataConfirm() only generates one
//  799    * message with the first in line TransSeqNumber, even on a multi message.
//  800    * Also note that a reflected msg will not have its confirmation generated
//  801    * here.
//  802    */
//  803   if ( (req.dstAddr.addrMode == Addr16Bit) &&
//  804        (req.dstAddr.addr.shortAddr == NLME_GetShortAddr()) )
??AF_DataRequest_26:
        MOV       A,#0xb
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        XRL       A,#0x2
        JNZ       ??AF_DataRequest_27
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
        MOV       ?V4,R2
        MOV       ?V5,R3
        MOV       R0,?V4
        MOV       R1,?V5
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        XRL       A,R0
        JNZ       ??AF_DataRequest_28
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,R1
??AF_DataRequest_28:
        JNZ       ??AF_DataRequest_27
//  805   {
//  806     afDataConfirm( srcEP->endPoint, *transID, stat );
        ; Setup parameters for call to function afDataConfirm
        MOV       R3,?V3
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOVX      A,@DPTR
        MOV       R2,A
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??afDataConfirm::?relay`; Banked call to: afDataConfirm
//  807   }
//  808 
//  809   if ( stat == afStatus_SUCCESS )
??AF_DataRequest_27:
        MOV       A,?V3
        JNZ       ??AF_DataRequest_29
//  810   {
//  811     (*transID)++;
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOVX      A,@DPTR
        INC       A
        MOVX      @DPTR,A
//  812   }
//  813 
//  814   return (afStatus_t)stat;
??AF_DataRequest_29:
        MOV       R1,?V3
??AF_DataRequest_3:
        MOV       A,#0x21
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
        LJMP      ?Subroutine3 & 0xFFFF
//  815 }
          CFI EndBlock cfiBlock121

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine21:
          CFI Block cfiCond122 Using cfiCommon0
          CFI Function afIncomingData
          CFI Conditional ??CrossCallReturnLabel_28
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 27)
          CFI Block cfiCond123 Using cfiCommon0
          CFI (cfiCond123) Function AF_DataRequest
          CFI (cfiCond123) Conditional ??CrossCallReturnLabel_29
          CFI (cfiCond123) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond123) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond123) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond123) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond123) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond123) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond123) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond123) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond123) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond123) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond123) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond123) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond123) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond123) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond123) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond123) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond123) CFA_SP SP+-2
          CFI (cfiCond123) CFA_XSP16 add(XSP16, 49)
          CFI Block cfiPicker124 Using cfiCommon1
          CFI (cfiPicker124) NoFunction
          CFI (cfiPicker124) Picker
        MOVX      A,@DPTR
        MOV       R2,A
        MOV       R1,#0x2
        MOV       DPL,R4
        MOV       DPH,R5
        RET
          CFI EndBlock cfiCond122
          CFI EndBlock cfiCond123
          CFI EndBlock cfiPicker124

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine12:
          CFI Block cfiCond125 Using cfiCommon0
          CFI Function afIncomingData
          CFI Conditional ??CrossCallReturnLabel_16
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 27)
          CFI Block cfiCond126 Using cfiCommon0
          CFI (cfiCond126) Function AF_DataRequest
          CFI (cfiCond126) Conditional ??CrossCallReturnLabel_15
          CFI (cfiCond126) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond126) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond126) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond126) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond126) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond126) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond126) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond126) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond126) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond126) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond126) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond126) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond126) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond126) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond126) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond126) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond126) CFA_SP SP+-2
          CFI (cfiCond126) CFA_XSP16 add(XSP16, 49)
          CFI Block cfiPicker127 Using cfiCommon1
          CFI (cfiPicker127) NoFunction
          CFI (cfiPicker127) Picker
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine32 & 0xFFFF
??CrossCallReturnLabel_61:
        MOV       A,R0
        MOV       R4,A
        MOV       A,R1
        MOV       R5,A
        MOV       A,R4
        ORL       A,R5
        RET
          CFI EndBlock cfiCond125
          CFI EndBlock cfiCond126
          CFI EndBlock cfiPicker127

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine11:
          CFI Block cfiCond128 Using cfiCommon0
          CFI Function afDelete
          CFI Conditional ??CrossCallReturnLabel_13
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond129 Using cfiCommon0
          CFI (cfiCond129) Function AF_DataRequest
          CFI (cfiCond129) Conditional ??CrossCallReturnLabel_12
          CFI (cfiCond129) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond129) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond129) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond129) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond129) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond129) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond129) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond129) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond129) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond129) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond129) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond129) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond129) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond129) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond129) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond129) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond129) CFA_SP SP+-2
          CFI (cfiCond129) CFA_XSP16 add(XSP16, 49)
          CFI Block cfiCond130 Using cfiCommon0
          CFI (cfiCond130) Function AF_DataRequest
          CFI (cfiCond130) Conditional ??CrossCallReturnLabel_14
          CFI (cfiCond130) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond130) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond130) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond130) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond130) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond130) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond130) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond130) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond130) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond130) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond130) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond130) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond130) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond130) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond130) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond130) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond130) CFA_SP SP+-2
          CFI (cfiCond130) CFA_XSP16 add(XSP16, 49)
          CFI Block cfiPicker131 Using cfiCommon1
          CFI (cfiPicker131) NoFunction
          CFI (cfiPicker131) Picker
        LCALL     ?Subroutine32 & 0xFFFF
??CrossCallReturnLabel_60:
        MOV       A,R0
        ORL       A,R1
        RET
          CFI EndBlock cfiCond128
          CFI EndBlock cfiCond129
          CFI EndBlock cfiCond130
          CFI EndBlock cfiPicker131

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine6:
          CFI Block cfiCond132 Using cfiCommon0
          CFI Function afIncomingData
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 27)
          CFI Block cfiCond133 Using cfiCommon0
          CFI (cfiCond133) Function AF_DataRequest
          CFI (cfiCond133) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond133) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond133) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond133) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond133) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond133) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond133) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond133) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond133) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond133) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond133) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond133) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond133) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond133) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond133) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond133) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond133) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond133) CFA_SP SP+-2
          CFI (cfiCond133) CFA_XSP16 add(XSP16, 49)
          CFI Block cfiCond134 Using cfiCommon0
          CFI (cfiCond134) Function AF_DataRequest
          CFI (cfiCond134) Conditional ??CrossCallReturnLabel_2
          CFI (cfiCond134) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond134) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond134) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond134) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond134) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond134) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond134) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond134) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond134) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond134) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond134) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond134) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond134) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond134) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond134) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond134) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond134) CFA_SP SP+-2
          CFI (cfiCond134) CFA_XSP16 add(XSP16, 49)
          CFI Block cfiPicker135 Using cfiCommon1
          CFI (cfiPicker135) NoFunction
          CFI (cfiPicker135) Picker
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine31 & 0xFFFF
??CrossCallReturnLabel_47:
        MOV       A,DPL
        ORL       A,DPH
        RET
          CFI EndBlock cfiCond132
          CFI EndBlock cfiCond133
          CFI EndBlock cfiCond134
          CFI EndBlock cfiPicker135
//  816 
//  817 #if defined ( ZIGBEEPRO )
//  818 /*********************************************************************
//  819  * @fn      AF_DataRequestSrcRtg
//  820  *
//  821  * @brief   Common functionality for invoking APSDE_DataReq() for both
//  822  *          SendMulti and MSG-Send.
//  823  *
//  824  * input parameters
//  825  *
//  826  * @param  *dstAddr - Full ZB destination address: Nwk Addr + End Point.
//  827  * @param  *srcEP - Origination (i.e. respond to or ack to) End Point Descr.
//  828  * @param   cID - A valid cluster ID as specified by the Profile.
//  829  * @param   len - Number of bytes of data pointed to by next param.
//  830  * @param  *buf - A pointer to the data bytes to send.
//  831  * @param  *transID - A pointer to a byte which can be modified and which will
//  832  *                    be used as the transaction sequence number of the msg.
//  833  * @param   options - Valid bit mask of Tx options.
//  834  * @param   radius - Normally set to AF_DEFAULT_RADIUS.
//  835  * @param   relayCnt - Number of devices in the relay list
//  836  * @param   pRelayList - Pointer to the relay list
//  837  *
//  838  * output parameters
//  839  *
//  840  * @param  *transID - Incremented by one if the return value is success.
//  841  *
//  842  * @return  afStatus_t - See previous definition of afStatus_... types.
//  843  */
//  844 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  845 afStatus_t AF_DataRequestSrcRtg( afAddrType_t *dstAddr, endPointDesc_t *srcEP,
AF_DataRequestSrcRtg:
          CFI Block cfiBlock136 Using cfiCommon0
          CFI Function AF_DataRequestSrcRtg
        CODE
//  846                            uint16 cID, uint16 len, uint8 *buf, uint8 *transID,
//  847                            uint8 options, uint8 radius, uint8 relayCnt, uint16* pRelayList )
//  848 {
        FUNCALL AF_DataRequestSrcRtg, RTG_AddSrcRtgEntry_Guaranteed
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AF_DataRequestSrcRtg, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
        MOV       ?V0,R4
        MOV       ?V1,R5
        MOV       ?V2,R1
//  849   uint8 status;
//  850 
//  851   /* Add the source route to the source routing table */
//  852   status = RTG_AddSrcRtgEntry_Guaranteed( dstAddr->addr.shortAddr, relayCnt,
//  853                                          pRelayList );
        ; Setup parameters for call to function RTG_AddSrcRtgEntry_Guaranteed
        MOV       A,#0x16
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_26:
        MOV       A,#0x15
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine38_0 & 0xFFFF
??CrossCallReturnLabel_76:
        LCALL     ??Subroutine39_0 & 0xFFFF
??CrossCallReturnLabel_84:
        LCALL     `??RTG_AddSrcRtgEntry_Guaranteed::?relay`; Banked call to: RTG_AddSrcRtgEntry_Guaranteed
        MOV       A,R1
        MOV       R1,A
//  854 
//  855   if( status == RTG_SUCCESS)
        JNZ       ??AF_DataRequestSrcRtg_0
//  856   {
//  857     /* Call AF_DataRequest to send the data */
//  858     status = AF_DataRequest( dstAddr, srcEP, cID, len, buf, transID, options, radius );
        ; Setup parameters for call to function AF_DataRequest
        MOV       A,#0x14
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V3,A
        MOV       R0,#?V3
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 13)
        MOV       A,#0x13
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 15)
        MOV       A,#0x13
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 17)
        MOV       A,#0x13
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 19)
        MOV       A,#0x13
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 21)
        MOV       R1,?V2
        MOV       R4,?V0
        MOV       R5,?V1
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
        MOV       A,#0x9
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
        MOV       A,R1
        MOV       R1,A
        SJMP      ??AF_DataRequestSrcRtg_1
//  859   }
//  860   else if( status == RTG_INVALID_PATH )
??AF_DataRequestSrcRtg_0:
        MOV       A,#0x5
        XRL       A,R1
        JNZ       ??AF_DataRequestSrcRtg_2
//  861   {
//  862     /* The source route relay count is exceeding the network limit */
//  863     status = afStatus_INVALID_PARAMETER;
        MOV       R1,#0x2
        SJMP      ??AF_DataRequestSrcRtg_1
//  864   }
//  865   else
//  866   {
//  867     /* The guaranteed adding entry fails due to memory failure */
//  868     status = afStatus_MEM_FAIL;
??AF_DataRequestSrcRtg_2:
        MOV       R1,#0x10
//  869   }
//  870   return status;
??AF_DataRequestSrcRtg_1:
        LJMP      ?Subroutine4 & 0xFFFF
//  871 }
          CFI EndBlock cfiBlock136

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine20:
          CFI Block cfiCond137 Using cfiCommon0
          CFI Function afBuildMSGIncoming
          CFI Conditional ??CrossCallReturnLabel_24
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond138 Using cfiCommon0
          CFI (cfiCond138) Function afBuildMSGIncoming
          CFI (cfiCond138) Conditional ??CrossCallReturnLabel_25
          CFI (cfiCond138) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond138) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond138) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond138) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond138) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond138) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond138) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond138) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond138) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond138) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond138) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond138) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond138) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond138) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond138) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond138) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond138) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond138) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond138) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond138) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond138) CFA_SP SP+-2
          CFI (cfiCond138) CFA_XSP16 add(XSP16, 23)
          CFI Block cfiCond139 Using cfiCommon0
          CFI (cfiCond139) Function AF_DataRequestSrcRtg
          CFI (cfiCond139) Conditional ??CrossCallReturnLabel_26
          CFI (cfiCond139) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond139) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond139) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond139) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond139) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond139) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond139) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond139) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond139) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond139) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond139) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond139) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond139) CFA_SP SP+-2
          CFI (cfiCond139) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond140 Using cfiCommon0
          CFI (cfiCond140) Function afEndPoints
          CFI (cfiCond140) Conditional ??CrossCallReturnLabel_27
          CFI (cfiCond140) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond140) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond140) CFA_SP SP+-7
          CFI Block cfiPicker141 Using cfiCommon1
          CFI (cfiPicker141) NoFunction
          CFI (cfiPicker141) Picker
        MOVX      A,@DPTR
        MOV       R4,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R5,A
        RET
          CFI EndBlock cfiCond137
          CFI EndBlock cfiCond138
          CFI EndBlock cfiCond139
          CFI EndBlock cfiCond140
          CFI EndBlock cfiPicker141

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine19:
          CFI Block cfiCond142 Using cfiCommon0
          CFI Function afRegisterExtended
          CFI Conditional ??CrossCallReturnLabel_88
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond143 Using cfiCommon0
          CFI (cfiCond143) Function AF_DataRequest
          CFI (cfiCond143) Conditional ??CrossCallReturnLabel_89
          CFI (cfiCond143) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond143) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond143) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond143) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond143) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond143) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond143) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond143) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond143) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond143) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond143) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond143) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond143) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond143) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond143) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond143) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond143) CFA_SP SP+-2
          CFI (cfiCond143) CFA_XSP16 add(XSP16, 49)
          CFI Block cfiCond144 Using cfiCommon0
          CFI (cfiCond144) Function AF_DataRequest
          CFI (cfiCond144) Conditional ??CrossCallReturnLabel_90
          CFI (cfiCond144) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond144) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond144) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond144) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond144) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond144) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond144) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond144) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond144) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond144) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond144) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond144) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond144) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond144) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond144) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond144) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond144) CFA_SP SP+-2
          CFI (cfiCond144) CFA_XSP16 add(XSP16, 49)
          CFI Block cfiPicker145 Using cfiCommon1
          CFI (cfiPicker145) NoFunction
          CFI (cfiPicker145) Picker
        MOV       DPL,?V4
        MOV       DPH,?V5
          CFI EndBlock cfiCond142
          CFI EndBlock cfiCond143
          CFI EndBlock cfiCond144
          CFI EndBlock cfiPicker145
        REQUIRE ??Subroutine39_0
        ; // Fall through to label ??Subroutine39_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine39_0:
          CFI Block cfiCond146 Using cfiCommon0
          CFI Function afDelete
          CFI Conditional ??CrossCallReturnLabel_79
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond147 Using cfiCommon0
          CFI (cfiCond147) Function afIncomingData
          CFI (cfiCond147) Conditional ??CrossCallReturnLabel_80
          CFI (cfiCond147) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond147) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond147) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond147) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond147) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond147) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond147) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond147) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond147) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond147) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond147) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond147) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond147) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond147) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond147) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond147) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond147) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond147) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond147) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond147) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond147) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond147) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond147) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond147) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond147) CFA_SP SP+-2
          CFI (cfiCond147) CFA_XSP16 add(XSP16, 27)
          CFI Block cfiCond148 Using cfiCommon0
          CFI (cfiCond148) Function afIncomingData
          CFI (cfiCond148) Conditional ??CrossCallReturnLabel_81
          CFI (cfiCond148) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond148) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond148) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond148) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond148) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond148) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond148) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond148) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond148) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond148) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond148) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond148) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond148) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond148) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond148) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond148) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond148) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond148) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond148) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond148) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond148) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond148) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond148) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond148) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond148) CFA_SP SP+-2
          CFI (cfiCond148) CFA_XSP16 add(XSP16, 27)
          CFI Block cfiCond149 Using cfiCommon0
          CFI (cfiCond149) Function afBuildMSGIncoming
          CFI (cfiCond149) Conditional ??CrossCallReturnLabel_82
          CFI (cfiCond149) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond149) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond149) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond149) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond149) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond149) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond149) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond149) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond149) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond149) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond149) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond149) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond149) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond149) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond149) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond149) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond149) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond149) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond149) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond149) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond149) CFA_SP SP+-2
          CFI (cfiCond149) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond150 Using cfiCommon0
          CFI (cfiCond150) Function AF_DataRequest
          CFI (cfiCond150) Conditional ??CrossCallReturnLabel_83
          CFI (cfiCond150) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond150) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond150) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond150) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond150) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond150) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond150) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond150) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond150) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond150) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond150) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond150) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond150) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond150) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond150) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond150) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond150) CFA_SP SP+-2
          CFI (cfiCond150) CFA_XSP16 add(XSP16, 49)
          CFI Block cfiCond151 Using cfiCommon0
          CFI (cfiCond151) Function AF_DataRequestSrcRtg
          CFI (cfiCond151) Conditional ??CrossCallReturnLabel_84
          CFI (cfiCond151) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond151) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond151) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond151) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond151) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond151) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond151) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond151) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond151) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond151) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond151) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond151) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond151) CFA_SP SP+-2
          CFI (cfiCond151) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond152 Using cfiCommon0
          CFI (cfiCond152) Function afFindEndPointDescList
          CFI (cfiCond152) Conditional ??CrossCallReturnLabel_85
          CFI (cfiCond152) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond152) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond152) CFA_SP SP+-7
          CFI Block cfiCond153 Using cfiCommon0
          CFI (cfiCond153) Function afFindEndPointDesc
          CFI (cfiCond153) Conditional ??CrossCallReturnLabel_86
          CFI (cfiCond153) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond153) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond153) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond153) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond153) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond153) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond153) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond153) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond153) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond153) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond153) CFA_SP SP+-2
          CFI (cfiCond153) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond154 Using cfiCommon0
          CFI (cfiCond154) Function afFindSimpleDesc
          CFI (cfiCond154) Conditional ??CrossCallReturnLabel_87
          CFI (cfiCond154) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond154) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond154) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond154) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond154) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond154) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond154) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond154) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond154) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond154) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond154) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond154) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond154) CFA_SP SP+-2
          CFI (cfiCond154) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond155 Using cfiCommon0
          CFI (cfiCond155) Function afRegisterExtended
          CFI (cfiCond155) Conditional ??CrossCallReturnLabel_88
          CFI (cfiCond155) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond155) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond155) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond155) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond155) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond155) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond155) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond155) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond155) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond155) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond155) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond155) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond155) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond155) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond155) CFA_SP SP+-2
          CFI (cfiCond155) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond156 Using cfiCommon0
          CFI (cfiCond156) Function AF_DataRequest
          CFI (cfiCond156) Conditional ??CrossCallReturnLabel_89
          CFI (cfiCond156) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond156) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond156) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond156) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond156) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond156) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond156) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond156) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond156) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond156) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond156) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond156) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond156) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond156) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond156) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond156) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond156) CFA_SP SP+-2
          CFI (cfiCond156) CFA_XSP16 add(XSP16, 49)
          CFI Block cfiCond157 Using cfiCommon0
          CFI (cfiCond157) Function AF_DataRequest
          CFI (cfiCond157) Conditional ??CrossCallReturnLabel_90
          CFI (cfiCond157) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond157) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond157) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond157) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond157) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond157) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond157) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond157) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond157) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond157) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond157) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond157) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond157) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond157) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond157) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond157) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond157) CFA_SP SP+-2
          CFI (cfiCond157) CFA_XSP16 add(XSP16, 49)
          CFI Block cfiPicker158 Using cfiCommon1
          CFI (cfiPicker158) NoFunction
          CFI (cfiPicker158) Picker
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        RET
          CFI EndBlock cfiCond146
          CFI EndBlock cfiCond147
          CFI EndBlock cfiCond148
          CFI EndBlock cfiCond149
          CFI EndBlock cfiCond150
          CFI EndBlock cfiCond151
          CFI EndBlock cfiCond152
          CFI EndBlock cfiCond153
          CFI EndBlock cfiCond154
          CFI EndBlock cfiCond155
          CFI EndBlock cfiCond156
          CFI EndBlock cfiCond157
          CFI EndBlock cfiPicker158
//  872 
//  873 #endif // ZIGBEEPRO
//  874 
//  875 /*********************************************************************
//  876  * @fn      afFindEndPointDescList
//  877  *
//  878  * @brief   Find the endpoint description entry from the endpoint
//  879  *          number.
//  880  *
//  881  * @param   EndPoint - Application Endpoint to look for
//  882  *
//  883  * @return  the address to the endpoint/interface description entry
//  884  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  885 static epList_t *afFindEndPointDescList( uint8 EndPoint )
afFindEndPointDescList:
          CFI Block cfiBlock159 Using cfiCommon0
          CFI Function afFindEndPointDescList
        CODE
//  886 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  887   epList_t *epSearch;
//  888 
//  889   for (epSearch = epList; epSearch != NULL; epSearch = epSearch->nextDesc)
        MOV       DPTR,#epList
        SJMP      ??afFindEndPointDescList_0
??afFindEndPointDescList_1:
        MOV       DPL,R2
        MOV       DPH,R3
??afFindEndPointDescList_0:
        LCALL     ??Subroutine39_0 & 0xFFFF
??CrossCallReturnLabel_85:
        MOV       A,R2
        ORL       A,R3
        JZ        ??afFindEndPointDescList_2
//  890   {
//  891     if (epSearch->epDesc->endPoint == EndPoint)
        MOV       DPL,R2
        MOV       DPH,R3
        LCALL     ??Subroutine40_0 & 0xFFFF
//  892     {
//  893       break;
//  894     }
//  895   }
??CrossCallReturnLabel_93:
        MOVX      A,@DPTR
        XRL       A,R1
        JNZ       ??afFindEndPointDescList_1
//  896 
//  897   return epSearch;
??afFindEndPointDescList_2:
          CFI EndBlock cfiBlock159
        REQUIRE ?Subroutine5
        ; // Fall through to label ?Subroutine5
//  898 }

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine5:
          CFI Block cfiBlock160 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        POP       DPH
          CFI CFA_SP SP+-4
          CFI DPH0 SameValue
        POP       DPL
          CFI CFA_SP SP+-3
          CFI DPL0 SameValue
        LJMP      ?BRET
          CFI EndBlock cfiBlock160

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine13:
          CFI Block cfiCond161 Using cfiCommon0
          CFI Function afFindSimpleDesc
          CFI Conditional ??CrossCallReturnLabel_94
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond162 Using cfiCommon0
          CFI (cfiCond162) Function afEndPoints
          CFI (cfiCond162) Conditional ??CrossCallReturnLabel_95
          CFI (cfiCond162) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond162) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond162) CFA_SP SP+-7
          CFI Block cfiPicker163 Using cfiCommon1
          CFI (cfiPicker163) NoFunction
          CFI (cfiPicker163) Picker
        MOV       DPL,R4
        MOV       DPH,R5
          CFI EndBlock cfiCond161
          CFI EndBlock cfiCond162
          CFI EndBlock cfiPicker163
        REQUIRE ??Subroutine40_0
        ; // Fall through to label ??Subroutine40_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine40_0:
          CFI Block cfiCond164 Using cfiCommon0
          CFI Function afFindEndPointDescList
          CFI Conditional ??CrossCallReturnLabel_93
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond165 Using cfiCommon0
          CFI (cfiCond165) Function afFindSimpleDesc
          CFI (cfiCond165) Conditional ??CrossCallReturnLabel_94
          CFI (cfiCond165) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond165) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond165) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond165) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond165) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond165) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond165) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond165) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond165) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond165) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond165) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond165) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond165) CFA_SP SP+-2
          CFI (cfiCond165) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond166 Using cfiCommon0
          CFI (cfiCond166) Function afEndPoints
          CFI (cfiCond166) Conditional ??CrossCallReturnLabel_95
          CFI (cfiCond166) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond166) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond166) CFA_SP SP+-7
          CFI Block cfiPicker167 Using cfiCommon1
          CFI (cfiPicker167) NoFunction
          CFI (cfiPicker167) Picker
        INC       DPTR
        INC       DPTR
          CFI EndBlock cfiCond164
          CFI EndBlock cfiCond165
          CFI EndBlock cfiCond166
          CFI EndBlock cfiPicker167
        REQUIRE ??Subroutine41_0
        ; // Fall through to label ??Subroutine41_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine41_0:
          CFI Block cfiCond168 Using cfiCommon0
          CFI Function afRegisterExtended
          CFI Conditional ??CrossCallReturnLabel_92
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond169 Using cfiCommon0
          CFI (cfiCond169) Function afFindEndPointDescList
          CFI (cfiCond169) Conditional ??CrossCallReturnLabel_93
          CFI (cfiCond169) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond169) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond169) CFA_SP SP+-7
          CFI Block cfiCond170 Using cfiCommon0
          CFI (cfiCond170) Function afFindSimpleDesc
          CFI (cfiCond170) Conditional ??CrossCallReturnLabel_94
          CFI (cfiCond170) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond170) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond170) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond170) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond170) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond170) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond170) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond170) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond170) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond170) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond170) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond170) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond170) CFA_SP SP+-2
          CFI (cfiCond170) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond171 Using cfiCommon0
          CFI (cfiCond171) Function afEndPoints
          CFI (cfiCond171) Conditional ??CrossCallReturnLabel_95
          CFI (cfiCond171) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond171) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond171) CFA_SP SP+-7
          CFI Block cfiPicker172 Using cfiCommon1
          CFI (cfiPicker172) NoFunction
          CFI (cfiPicker172) Picker
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
          CFI EndBlock cfiCond168
          CFI EndBlock cfiCond169
          CFI EndBlock cfiCond170
          CFI EndBlock cfiCond171
          CFI EndBlock cfiPicker172
        REQUIRE ??Subroutine42_0
        ; // Fall through to label ??Subroutine42_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine42_0:
          CFI Block cfiCond173 Using cfiCommon0
          CFI Function AF_DataRequest
          CFI Conditional ??CrossCallReturnLabel_91
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 49)
          CFI Block cfiCond174 Using cfiCommon0
          CFI (cfiCond174) Function afRegisterExtended
          CFI (cfiCond174) Conditional ??CrossCallReturnLabel_92
          CFI (cfiCond174) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond174) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond174) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond174) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond174) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond174) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond174) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond174) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond174) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond174) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond174) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond174) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond174) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond174) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond174) CFA_SP SP+-2
          CFI (cfiCond174) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond175 Using cfiCommon0
          CFI (cfiCond175) Function afFindEndPointDescList
          CFI (cfiCond175) Conditional ??CrossCallReturnLabel_93
          CFI (cfiCond175) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond175) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond175) CFA_SP SP+-7
          CFI Block cfiCond176 Using cfiCommon0
          CFI (cfiCond176) Function afFindSimpleDesc
          CFI (cfiCond176) Conditional ??CrossCallReturnLabel_94
          CFI (cfiCond176) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond176) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond176) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond176) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond176) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond176) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond176) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond176) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond176) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond176) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond176) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond176) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond176) CFA_SP SP+-2
          CFI (cfiCond176) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond177 Using cfiCommon0
          CFI (cfiCond177) Function afEndPoints
          CFI (cfiCond177) Conditional ??CrossCallReturnLabel_95
          CFI (cfiCond177) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond177) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond177) CFA_SP SP+-7
          CFI Block cfiPicker178 Using cfiCommon1
          CFI (cfiPicker178) NoFunction
          CFI (cfiPicker178) Picker
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        RET
          CFI EndBlock cfiCond173
          CFI EndBlock cfiCond174
          CFI EndBlock cfiCond175
          CFI EndBlock cfiCond176
          CFI EndBlock cfiCond177
          CFI EndBlock cfiPicker178
//  899 
//  900 /*********************************************************************
//  901  * @fn      afFindEndPointDesc
//  902  *
//  903  * @brief   Find the endpoint description entry from the endpoint
//  904  *          number.
//  905  *
//  906  * @param   EndPoint - Application Endpoint to look for
//  907  *
//  908  * @return  the address to the endpoint/interface description entry
//  909  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  910 endPointDesc_t *afFindEndPointDesc( uint8 EndPoint )
afFindEndPointDesc:
          CFI Block cfiBlock179 Using cfiCommon0
          CFI Function afFindEndPointDesc
        CODE
//  911 {
        FUNCALL afFindEndPointDesc, afFindEndPointDescList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  912   epList_t *epSearch;
//  913 
//  914   // Look for the endpoint
//  915   epSearch = afFindEndPointDescList( EndPoint );
        ; Setup parameters for call to function afFindEndPointDescList
        LCALL     `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
        MOV       DPL,R2
        MOV       DPH,R3
//  916 
//  917   if ( epSearch )
        MOV       A,DPL
        ORL       A,DPH
        JZ        ??afFindEndPointDesc_0
//  918     return ( epSearch->epDesc );
        INC       DPTR
        INC       DPTR
        LCALL     ??Subroutine39_0 & 0xFFFF
??CrossCallReturnLabel_86:
        SJMP      ??afFindEndPointDesc_1
//  919   else
//  920     return ( (endPointDesc_t *)NULL );
??afFindEndPointDesc_0:
        MOV       R2,#0x0
        MOV       R3,#0x0
??afFindEndPointDesc_1:
        LJMP      ?Subroutine1 & 0xFFFF
//  921 }
          CFI EndBlock cfiBlock179
//  922 
//  923 /*********************************************************************
//  924  * @fn      afFindSimpleDesc
//  925  *
//  926  * @brief   Find the Simple Descriptor from the endpoint number.
//  927  *
//  928  * @param   EP - Application Endpoint to look for.
//  929  *
//  930  * @return  Non-zero to indicate that the descriptor memory must be freed.
//  931  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  932 uint8 afFindSimpleDesc( SimpleDescriptionFormat_t **ppDesc, uint8 EP )
afFindSimpleDesc:
          CFI Block cfiBlock180 Using cfiCommon0
          CFI Function afFindSimpleDesc
        CODE
//  933 {
        FUNCALL afFindSimpleDesc, afFindEndPointDescList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
        MOV       ?V0,R1
//  934   epList_t *epItem = afFindEndPointDescList( EP );
        ; Setup parameters for call to function afFindEndPointDescList
        LCALL     `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
        MOV       ?V2,R2
        MOV       ?V3,R3
        MOV       R4,?V2
        MOV       R5,?V3
//  935   uint8 rtrn = FALSE;
        MOV       R1,#0x0
//  936 
//  937   if ( epItem )
        MOV       A,R4
        ORL       A,R5
        JZ        ??afFindSimpleDesc_0
//  938   {
//  939     if ( epItem->pfnDescCB )
        MOV       DPL,R4
        MOV       DPH,R5
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_22:
        MOV       A,DPL
        ORL       A,DPH
        JZ        ??afFindSimpleDesc_1
//  940     {
//  941       *ppDesc = epItem->pfnDescCB( AF_DESCRIPTOR_SIMPLE, EP );
        ; Setup parameters for indirect call
        MOV       R2,?V0
        INC       R1
        LCALL     ?CALL_IND
        MOV       DPL,R6
        MOV       DPH,R7
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
//  942       rtrn = TRUE;
        MOV       R1,#0x1
        SJMP      ??afFindSimpleDesc_2
//  943     }
//  944     else
//  945     {
//  946       *ppDesc = epItem->epDesc->simpleDesc;
??afFindSimpleDesc_1:
        LCALL     ?Subroutine13 & 0xFFFF
//  947     }
//  948   }
??CrossCallReturnLabel_94:
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ??Subroutine39_0 & 0xFFFF
??CrossCallReturnLabel_87:
        MOV       DPL,R6
        MOV       DPH,R7
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        SJMP      ??afFindSimpleDesc_3
//  949   else
//  950   {
//  951     *ppDesc = NULL;
??afFindSimpleDesc_0:
        MOV       DPL,R6
        MOV       DPH,R7
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
??afFindSimpleDesc_3:
        MOVX      @DPTR,A
//  952   }
//  953 
//  954   return rtrn;
??afFindSimpleDesc_2:
        LJMP      ?Subroutine4 & 0xFFFF
//  955 }
          CFI EndBlock cfiBlock180
//  956 
//  957 /*********************************************************************
//  958  * @fn      afGetDescCB
//  959  *
//  960  * @brief   Get the Descriptor callback function.
//  961  *
//  962  * @param   epDesc - pointer to the endpoint descriptor
//  963  *
//  964  * @return  function pointer or NULL
//  965  */
//  966 static pDescCB afGetDescCB( endPointDesc_t *epDesc )
//  967 {
//  968   epList_t *epSearch;
//  969 
//  970   // Start at the beginning
//  971   epSearch = epList;
//  972 
//  973   // Look through the list until the end
//  974   while ( epSearch )
//  975   {
//  976     // Is there a match?
//  977     if ( epSearch->epDesc == epDesc )
//  978     {
//  979       return ( epSearch->pfnDescCB );
//  980     }
//  981     else
//  982       epSearch = epSearch->nextDesc;  // Next entry
//  983   }
//  984 
//  985   return ( (pDescCB)NULL );
//  986 }
//  987 
//  988 /*********************************************************************
//  989  * @fn      afDataReqMTU
//  990  *
//  991  * @brief   Get the Data Request MTU(Max Transport Unit).
//  992  *
//  993  * @param   fields - afDataReqMTU_t
//  994  *
//  995  * @return  uint8(MTU)
//  996  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  997 uint8 afDataReqMTU( afDataReqMTU_t* fields )
afDataReqMTU:
          CFI Block cfiBlock181 Using cfiCommon0
          CFI Function afDataReqMTU
        CODE
//  998 {
        FUNCALL afDataReqMTU, APSDE_DataReqMTU
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  999   uint8 len;
// 1000   uint8 hdr;
// 1001 
// 1002   if ( fields->kvp == TRUE )
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        XRL       A,#0x1
        JNZ       ??afDataReqMTU_0
// 1003   {
// 1004     hdr = AF_HDR_KVP_MAX_LEN;
        MOV       R6,#0x8
        SJMP      ??afDataReqMTU_1
// 1005   }
// 1006   else
// 1007   {
// 1008     hdr = AF_HDR_V1_1_MAX_LEN;
??afDataReqMTU_0:
        MOV       R6,#0x0
// 1009   }
// 1010 
// 1011   len = (uint8)(APSDE_DataReqMTU(&fields->aps) - hdr);
// 1012 
// 1013   return len;
??afDataReqMTU_1:
        ; Setup parameters for call to function APSDE_DataReqMTU
        INC       DPTR
        MOV       R2,DPL
        MOV       R3,DPH
        LCALL     `??APSDE_DataReqMTU::?relay`; Banked call to: APSDE_DataReqMTU
        MOV       A,R1
        CLR       C
        SUBB      A,R6
        MOV       R1,A
        LJMP      ?Subroutine2 & 0xFFFF
// 1014 }
          CFI EndBlock cfiBlock181
// 1015 
// 1016 /*********************************************************************
// 1017  * @fn      afGetMatch
// 1018  *
// 1019  * @brief   Set the allow response flag.
// 1020  *
// 1021  * @param   ep - Application Endpoint to look for
// 1022  * @param   action - true - allow response, false - no response
// 1023  *
// 1024  * @return  TRUE allow responses, FALSE no response
// 1025  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1026 uint8 afGetMatch( uint8 ep )
afGetMatch:
          CFI Block cfiBlock182 Using cfiCommon0
          CFI Function afGetMatch
        CODE
// 1027 {
        FUNCALL afGetMatch, afFindEndPointDescList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
// 1028   epList_t *epSearch;
// 1029 
// 1030   // Look for the endpoint
// 1031   epSearch = afFindEndPointDescList( ep );
        ; Setup parameters for call to function afFindEndPointDescList
        LCALL     `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
        MOV       DPL,R2
        MOV       DPH,R3
// 1032 
// 1033   if ( epSearch )
        MOV       A,DPL
        ORL       A,DPH
        JZ        ??afGetMatch_0
// 1034   {
// 1035     if ( epSearch->flags & eEP_AllowMatch )
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.0
        JNC       ??afGetMatch_0
// 1036       return ( TRUE );
        MOV       R1,#0x1
        SJMP      ??afGetMatch_1
// 1037     else
// 1038       return ( FALSE );
// 1039   }
// 1040   else
// 1041     return ( FALSE );
??afGetMatch_0:
        MOV       R1,#0x0
??afGetMatch_1:
          CFI EndBlock cfiBlock182
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1
// 1042 }

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiBlock183 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R7,#0x2
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock183
// 1043 
// 1044 /*********************************************************************
// 1045  * @fn      afSetMatch
// 1046  *
// 1047  * @brief   Set the allow response flag.
// 1048  *
// 1049  * @param   ep - Application Endpoint to look for
// 1050  * @param   action - true - allow response, false - no response
// 1051  *
// 1052  * @return  TRUE if success, FALSE if endpoint not found
// 1053  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1054 uint8 afSetMatch( uint8 ep, uint8 action )
afSetMatch:
          CFI Block cfiBlock184 Using cfiCommon0
          CFI Function afSetMatch
        CODE
// 1055 {
        FUNCALL afSetMatch, afFindEndPointDescList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV       A,R2
        MOV       R7,A
// 1056   epList_t *epSearch;
// 1057 
// 1058   // Look for the endpoint
// 1059   epSearch = afFindEndPointDescList( ep );
        ; Setup parameters for call to function afFindEndPointDescList
        LCALL     `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       R0,?V0
        MOV       R1,?V1
// 1060 
// 1061   if ( epSearch )
        MOV       A,R0
        ORL       A,R1
        JZ        ??afSetMatch_0
// 1062   {
// 1063     if ( action )
        MOV       A,R0
        ADD       A,#0x8
        MOV       DPL,A
        CLR       A
        ADDC      A,R1
        MOV       DPH,A
        MOV       A,R7
        JZ        ??afSetMatch_1
// 1064     {
// 1065       epSearch->flags |= eEP_AllowMatch;
        MOVX      A,@DPTR
        SETB      0xE0 /* A   */.0
        SJMP      ??afSetMatch_2
// 1066     }
// 1067     else
// 1068     {
// 1069       epSearch->flags &= (eEP_AllowMatch ^ 0xFFFF);
??afSetMatch_1:
        MOVX      A,@DPTR
        CLR       0xE0 /* A   */.0
??afSetMatch_2:
        MOVX      @DPTR,A
// 1070     }
// 1071     return ( TRUE );
        MOV       R1,#0x1
        SJMP      ??afSetMatch_3
// 1072   }
// 1073   else
// 1074     return ( FALSE );
??afSetMatch_0:
        MOV       R1,#0x0
??afSetMatch_3:
        SJMP      ?Subroutine1
// 1075 }
          CFI EndBlock cfiBlock184
// 1076 
// 1077 /*********************************************************************
// 1078  * @fn      afNumEndPoints
// 1079  *
// 1080  * @brief   Returns the number of endpoints defined (including 0)
// 1081  *
// 1082  * @param   none
// 1083  *
// 1084  * @return  number of endpoints
// 1085  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1086 uint8 afNumEndPoints( void )
afNumEndPoints:
          CFI Block cfiBlock185 Using cfiCommon0
          CFI Function afNumEndPoints
        CODE
// 1087 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1088   epList_t *epSearch;
// 1089   uint8 endpoints;
// 1090 
// 1091   // Start at the beginning
// 1092   epSearch = epList;
        MOV       DPTR,#epList
        LCALL     ?Subroutine15 & 0xFFFF
// 1093   endpoints = 0;
??CrossCallReturnLabel_18:
        MOV       R1,#0x0
        SJMP      ??CrossCallReturnLabel_23
// 1094 
// 1095   while ( epSearch )
// 1096   {
// 1097     endpoints++;
??afNumEndPoints_0:
        INC       R1
// 1098     epSearch = epSearch->nextDesc;
        LCALL     ?Subroutine18 & 0xFFFF
// 1099   }
??CrossCallReturnLabel_23:
        MOV       A,DPL
        ORL       A,DPH
        JNZ       ??afNumEndPoints_0
// 1100 
// 1101   return ( endpoints );
        LJMP      ?Subroutine5 & 0xFFFF
// 1102 }
          CFI EndBlock cfiBlock185

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine18:
          CFI Block cfiCond186 Using cfiCommon0
          CFI Function afFindSimpleDesc
          CFI Conditional ??CrossCallReturnLabel_22
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond187 Using cfiCommon0
          CFI (cfiCond187) Function afNumEndPoints
          CFI (cfiCond187) Conditional ??CrossCallReturnLabel_23
          CFI (cfiCond187) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond187) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond187) CFA_SP SP+-7
          CFI Block cfiPicker188 Using cfiCommon1
          CFI (cfiPicker188) NoFunction
          CFI (cfiPicker188) Picker
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       DPL,R2
        MOV       DPH,R3
        RET
          CFI EndBlock cfiCond186
          CFI EndBlock cfiCond187
          CFI EndBlock cfiPicker188

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine15:
          CFI Block cfiCond189 Using cfiCommon0
          CFI Function afBuildMSGIncoming
          CFI Conditional ??CrossCallReturnLabel_17
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond190 Using cfiCommon0
          CFI (cfiCond190) Function afNumEndPoints
          CFI (cfiCond190) Conditional ??CrossCallReturnLabel_18
          CFI (cfiCond190) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond190) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond190) CFA_SP SP+-7
          CFI Block cfiPicker191 Using cfiCommon1
          CFI (cfiPicker191) NoFunction
          CFI (cfiPicker191) Picker
        LCALL     ?Subroutine31 & 0xFFFF
??CrossCallReturnLabel_46:
        RET
          CFI EndBlock cfiCond189
          CFI EndBlock cfiCond190
          CFI EndBlock cfiPicker191

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine31:
          CFI Block cfiCond192 Using cfiCommon0
          CFI Function afIncomingData
          CFI Conditional ??CrossCallReturnLabel_47, ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 27)
          CFI Block cfiCond193 Using cfiCommon0
          CFI (cfiCond193) Function AF_DataRequest
          CFI (cfiCond193) Conditional ??CrossCallReturnLabel_47, ??CrossCallReturnLabel_1
          CFI (cfiCond193) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond193) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond193) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond193) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond193) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond193) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond193) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond193) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond193) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond193) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond193) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond193) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond193) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond193) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond193) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond193) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond193) CFA_SP SP+-4
          CFI (cfiCond193) CFA_XSP16 add(XSP16, 49)
          CFI Block cfiCond194 Using cfiCommon0
          CFI (cfiCond194) Function AF_DataRequest
          CFI (cfiCond194) Conditional ??CrossCallReturnLabel_47, ??CrossCallReturnLabel_2
          CFI (cfiCond194) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond194) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond194) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond194) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond194) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond194) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond194) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond194) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond194) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond194) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond194) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond194) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond194) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond194) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond194) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond194) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond194) CFA_SP SP+-4
          CFI (cfiCond194) CFA_XSP16 add(XSP16, 49)
          CFI Block cfiCond195 Using cfiCommon0
          CFI (cfiCond195) Function afBuildMSGIncoming
          CFI (cfiCond195) Conditional ??CrossCallReturnLabel_46, ??CrossCallReturnLabel_17
          CFI (cfiCond195) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond195) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond195) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond195) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond195) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond195) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond195) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond195) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond195) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond195) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond195) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond195) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond195) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond195) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond195) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond195) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond195) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond195) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond195) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond195) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond195) CFA_SP SP+-4
          CFI (cfiCond195) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond196 Using cfiCommon0
          CFI (cfiCond196) Function afNumEndPoints
          CFI (cfiCond196) Conditional ??CrossCallReturnLabel_46, ??CrossCallReturnLabel_18
          CFI (cfiCond196) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond196) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond196) CFA_SP SP+-9
          CFI Block cfiPicker197 Using cfiCommon1
          CFI (cfiPicker197) NoFunction
          CFI (cfiPicker197) Picker
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       DPL,R0
        MOV       DPH,R1
        RET
          CFI EndBlock cfiCond192
          CFI EndBlock cfiCond193
          CFI EndBlock cfiCond194
          CFI EndBlock cfiCond195
          CFI EndBlock cfiCond196
          CFI EndBlock cfiPicker197
// 1103 
// 1104 /*********************************************************************
// 1105  * @fn      afEndPoints
// 1106  *
// 1107  * @brief   Fills in the passed in buffer with the endpoint (numbers).
// 1108  *          Use afNumEndPoints to find out how big a buffer to supply.
// 1109  *
// 1110  * @param   epBuf - pointer to mem used
// 1111  *
// 1112  * @return  void
// 1113  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1114 void afEndPoints( uint8 *epBuf, uint8 skipZDO )
afEndPoints:
          CFI Block cfiBlock198 Using cfiCommon0
          CFI Function afEndPoints
        CODE
// 1115 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1116   epList_t *epSearch;
// 1117   uint8 endPoint;
// 1118 
// 1119   // Start at the beginning
// 1120   epSearch = epList;
        MOV       DPTR,#epList
        SJMP      ??afEndPoints_0
// 1121 
// 1122   while ( epSearch )
// 1123   {
// 1124     endPoint = epSearch->epDesc->endPoint;
??afEndPoints_1:
        LCALL     ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_95:
        MOVX      A,@DPTR
        MOV       R0,A
// 1125 
// 1126     if ( !skipZDO || endPoint != 0 )
        MOV       A,R1
        JZ        ??afEndPoints_2
        MOV       A,R0
        JZ        ??afEndPoints_3
// 1127       *epBuf++ = endPoint;
??afEndPoints_2:
        MOV       A,R0
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      @DPTR,A
        INC       DPTR
        MOV       R2,DPL
        MOV       R3,DPH
// 1128 
// 1129     epSearch = epSearch->nextDesc;
??afEndPoints_3:
        MOV       DPL,R4
        MOV       DPH,R5
// 1130   }
??afEndPoints_0:
        LCALL     ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_27:
        MOV       A,R4
        ORL       A,R5
        JNZ       ??afEndPoints_1
// 1131 }
        LJMP      ?Subroutine5 & 0xFFFF
          CFI EndBlock cfiBlock198
// 1132 
// 1133 /*********************************************************************
// 1134  * @fn      afCopyAddress
// 1135  *
// 1136  * @brief   Fills in the passed in afAddrType_t parameter with the corresponding information
// 1137  *          from the zAddrType_t parameter.
// 1138  *
// 1139  * @param   epBuf - pointer to mem used
// 1140  *
// 1141  * @return  void
// 1142  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1143 void afCopyAddress( afAddrType_t *afAddr, zAddrType_t *zAddr )
afCopyAddress:
          CFI Block cfiBlock199 Using cfiCommon0
          CFI Function afCopyAddress
        CODE
// 1144 {
        FUNCALL afCopyAddress, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
// 1145   afAddr->addrMode = (afAddrMode_t)zAddr->addrMode;
        MOV       A,R4
        ADD       A,#0x8
        MOV       R0,A
        CLR       A
        ADDC      A,R5
        MOV       R1,A
        MOV       DPL,R0
        MOV       DPH,R1
        MOVX      A,@DPTR
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      @DPTR,A
// 1146   if ( zAddr->addrMode == Addr64Bit )
        MOV       DPL,R0
        MOV       DPH,R1
        MOVX      A,@DPTR
        XRL       A,#0x3
        JNZ       ??afCopyAddress_0
// 1147   {
// 1148     (void)osal_cpyExtAddr( afAddr->addr.extAddr, zAddr->addr.extAddr );
        ; Setup parameters for call to function sAddrExtCpy
        LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
        SJMP      ??CrossCallReturnLabel_9
// 1149   }
// 1150   else
// 1151   {
// 1152     afAddr->addr.shortAddr = zAddr->addr.shortAddr;
??afCopyAddress_0:
        MOV       DPL,R4
        MOV       DPH,R5
        LCALL     ?Subroutine9 & 0xFFFF
// 1153   }
// 1154 
// 1155   // Since zAddrType_t has no INTER-PAN information, set the panId member to zero.
// 1156   afAddr->panId = 0;
??CrossCallReturnLabel_9:
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
// 1157 }
        LJMP      ?Subroutine2 & 0xFFFF
          CFI EndBlock cfiBlock199

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine9:
          CFI Block cfiCond200 Using cfiCommon0
          CFI Function afRegisterExtended
          CFI Conditional ??CrossCallReturnLabel_8
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond201 Using cfiCommon0
          CFI (cfiCond201) Function afCopyAddress
          CFI (cfiCond201) Conditional ??CrossCallReturnLabel_9
          CFI (cfiCond201) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond201) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond201) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond201) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond201) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond201) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond201) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond201) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond201) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond201) CFA_SP SP+-2
          CFI (cfiCond201) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker202 Using cfiCommon1
          CFI (cfiPicker202) NoFunction
          CFI (cfiPicker202) Picker
        LCALL     ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_77:
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
        RET
          CFI EndBlock cfiCond200
          CFI EndBlock cfiCond201
          CFI EndBlock cfiPicker202
// 1158 
// 1159 /**************************************************************************************************
// 1160  * @fn          afAPSF_ConfigGet
// 1161  *
// 1162  * @brief       This function ascertains the fragmentation configuration that corresponds to
// 1163  *              the specified EndPoint.
// 1164  *
// 1165  * input parameters
// 1166  *
// 1167  * @param       endPoint - The source EP of a Tx or destination EP of a Rx fragmented message.
// 1168  *
// 1169  * output parameters
// 1170  *
// 1171  * @param       pCfg - A pointer to an APSF configuration structure to fill with values.
// 1172  *
// 1173  * @return      None.
// 1174  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1175 void afAPSF_ConfigGet(uint8 endPoint, afAPSF_Config_t *pCfg)
afAPSF_ConfigGet:
          CFI Block cfiBlock203 Using cfiCommon0
          CFI Function afAPSF_ConfigGet
        CODE
// 1176 {
        FUNCALL afAPSF_ConfigGet, afFindEndPointDescList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afAPSF_ConfigGet, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
// 1177   epList_t *pList = afFindEndPointDescList(endPoint);
        ; Setup parameters for call to function afFindEndPointDescList
        LCALL     `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       R0,?V0
        MOV       R1,?V1
// 1178 
// 1179   if (pList == NULL)
        MOV       A,R0
        ORL       A,R1
        JNZ       ??afAPSF_ConfigGet_0
// 1180   {
// 1181     pCfg->frameDelay = APSF_DEFAULT_INTERFRAME_DELAY;
        MOV       DPL,R6
        MOV       DPH,R7
        MOV       A,#0x32
        MOVX      @DPTR,A
// 1182     pCfg->windowSize = APSF_DEFAULT_WINDOW_SIZE;
        INC       DPTR
        MOV       A,#0x1
        MOVX      @DPTR,A
        SJMP      ??afAPSF_ConfigGet_1
// 1183   }
// 1184   else
// 1185   {
// 1186     (void)osal_memcpy(pCfg, &pList->apsfCfg, sizeof(afAPSF_Config_t));
??afAPSF_ConfigGet_0:
        ; Setup parameters for call to function osal_memcpy
        MOV       A,R0
        ADD       A,#0x6
        MOV       ?V0,A
        CLR       A
        ADDC      A,R1
        MOV       ?V1,A
        MOV       ?V2,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 15)
        MOV       R4,#0x2
        MOV       R5,#0x0
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
// 1187   }
// 1188 }
??afAPSF_ConfigGet_1:
          CFI EndBlock cfiBlock203
        REQUIRE ?Subroutine4
        ; // Fall through to label ?Subroutine4

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine4:
          CFI Block cfiBlock204 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R7,#0x4
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock204
// 1189 
// 1190 /**************************************************************************************************
// 1191  * @fn          afAPSF_ConfigSet
// 1192  *
// 1193  * @brief       This function attempts to set the fragmentation configuration that corresponds to
// 1194  *              the specified EndPoint.
// 1195  *
// 1196  * input parameters
// 1197  *
// 1198  * @param       endPoint - The specific EndPoint for which to set the fragmentation configuration.
// 1199  * @param       pCfg - A pointer to an APSF configuration structure to fill with values.
// 1200  *
// 1201  * output parameters
// 1202  *
// 1203  * None.
// 1204  *
// 1205  * @return      afStatus_SUCCESS for success.
// 1206  *              afStatus_INVALID_PARAMETER if the specified EndPoint is not registered.
// 1207  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1208 afStatus_t afAPSF_ConfigSet(uint8 endPoint, afAPSF_Config_t *pCfg)
afAPSF_ConfigSet:
          CFI Block cfiBlock205 Using cfiCommon0
          CFI Function afAPSF_ConfigSet
        CODE
// 1209 {
        FUNCALL afAPSF_ConfigSet, afFindEndPointDescList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afAPSF_ConfigSet, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
// 1210   epList_t *pList = afFindEndPointDescList(endPoint);
        ; Setup parameters for call to function afFindEndPointDescList
        LCALL     `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
// 1211 
// 1212   if (pList == NULL)
        MOV       A,R2
        ORL       A,R3
        JNZ       ??afAPSF_ConfigSet_0
// 1213   {
// 1214     return afStatus_INVALID_PARAMETER;
        MOV       R1,#0x2
        SJMP      ??afAPSF_ConfigSet_1
// 1215   }
// 1216 
// 1217   (void)osal_memcpy(&pList->apsfCfg, pCfg, sizeof(afAPSF_Config_t));
??afAPSF_ConfigSet_0:
        ; Setup parameters for call to function osal_memcpy
        MOV       ?V0,R6
        MOV       ?V1,R7
        MOV       ?V2,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 15)
        MOV       R4,#0x2
        MOV       R5,#0x0
        MOV       A,R2
        ADD       A,#0x6
        MOV       R2,A
        JNC       ??afAPSF_ConfigSet_2
        INC       R3
??afAPSF_ConfigSet_2:
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
// 1218   return afStatus_SUCCESS;
        MOV       R1,#0x0
??afAPSF_ConfigSet_1:
        SJMP      ?Subroutine4
// 1219 }
          CFI EndBlock cfiBlock205
// 1220 
// 1221 /**************************************************************************************************
// 1222  * @fn          afSetApplCB
// 1223  *
// 1224  * @brief       Sets the pointer to the Application Callback function for a
// 1225  *              specific EndPoint.
// 1226  *
// 1227  * input parameters
// 1228  *
// 1229  * @param       endPoint - The specific EndPoint for which to set Application Callback.
// 1230  * @param       pApplFn - A pointer to the Application Callback function.
// 1231  *
// 1232  * output parameters
// 1233  *
// 1234  * None.
// 1235  *
// 1236  * @return      TRUE if success, FALSE if endpoint not found
// 1237  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1238 uint8 afSetApplCB( uint8 endPoint, pApplCB pApplFn )
afSetApplCB:
          CFI Block cfiBlock206 Using cfiCommon0
          CFI Function afSetApplCB
        CODE
// 1239 {
        FUNCALL afSetApplCB, afFindEndPointDescList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
// 1240   if ( pApplFn != NULL )
        MOV       A,R6
        ORL       A,R7
        JZ        ??afSetApplCB_0
// 1241   {
// 1242     epList_t *epSearch;
// 1243 
// 1244     // Look for the endpoint
// 1245     epSearch = afFindEndPointDescList( endPoint );
        ; Setup parameters for call to function afFindEndPointDescList
        LCALL     `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
        MOV       DPL,R2
        MOV       DPH,R3
// 1246 
// 1247     if ( epSearch )
        MOV       A,DPL
        ORL       A,DPH
        JZ        ??afSetApplCB_0
// 1248     {
// 1249       epSearch->pfnApplCB = pApplFn;
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOV       A,R6
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R7
        MOVX      @DPTR,A
// 1250 
// 1251       return ( TRUE );
        MOV       R1,#0x1
        SJMP      ??afSetApplCB_1
// 1252     }
// 1253   }
// 1254 
// 1255   return ( FALSE );
??afSetApplCB_0:
        MOV       R1,#0x0
??afSetApplCB_1:
        SJMP      ?Subroutine4
// 1256 }
          CFI EndBlock cfiBlock206

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for AF_DataRequestDiscoverRoute>`:
        DATA8
        DB 1

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??afRegisterExtended::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afRegisterExtended

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??afRegister::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afRegister

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??afDelete::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afDelete

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??afDataConfirm::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afDataConfirm

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??afReflectError::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afReflectError

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??afIncomingData::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afIncomingData

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??afBuildMSGIncoming::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afBuildMSGIncoming

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??AF_DataRequest::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    AF_DataRequest

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??AF_DataRequestSrcRtg::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    AF_DataRequestSrcRtg

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??afFindEndPointDescList::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afFindEndPointDescList

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??afFindEndPointDesc::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afFindEndPointDesc

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??afFindSimpleDesc::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afFindSimpleDesc

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??afDataReqMTU::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afDataReqMTU

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??afGetMatch::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afGetMatch

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??afSetMatch::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afSetMatch

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??afNumEndPoints::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afNumEndPoints

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??afEndPoints::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afEndPoints

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??afCopyAddress::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afCopyAddress

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??afAPSF_ConfigGet::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afAPSF_ConfigGet

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??afAPSF_ConfigSet::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afAPSF_ConfigSet

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??afSetApplCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afSetApplCB

        END
// 1257 
// 1258 /**************************************************************************************************
// 1259 */
// 
// 3 245 bytes in segment BANKED_CODE
//   126 bytes in segment BANK_RELAYS
//     1 byte  in segment XDATA_I
//     1 byte  in segment XDATA_ID
//     2 bytes in segment XDATA_Z
// 
//   127 bytes of CODE     memory
// 3 245 bytes of HUGECODE memory
//     3 bytes of XDATA    memory
//
//Errors: none
//Warnings: none
