###############################################################################
#
# IAR C/C++ Compiler V10.10.1.4655 for 8051               21/Jul/2021  15:47:10
# Copyright 2004-2017 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Components\stack\zdo\ZDSecMgr.c
#    Command line       =  
#        -f C:\Users\WenHao\AppData\Local\Temp\EWDB9A.tmp
#        ("D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Components\stack\zdo\ZDSecMgr.c" -D CSTX_BOARD -D SECURE=1 -D
#        TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D xPOWER_SAVING -D
#        NWK_AUTO_POLL -D xZTOOL_P1 -D xMT_TASK -D xMT_APP_FUNC -D xMT_SYS_FUNC
#        -D xMT_ZDO_FUNC -D xMT_ZDO_MGMT -D xMT_APP_CNF_FUNC -D
#        LCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D ZCL_IDENTIFY -D
#        ZCL_READ -D ZCL_DISCOVER -D ZCL_WRITE -D ZCL_BASIC -D
#        ZCL_REPORTING_DEVICE -D HAL_LED=TRUE -D HAL_UART=TRUE -D HAL_KEY=TRUE
#        -D ISR_KEYINTERRUPT -lC "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\EndDeviceEB\List"
#        -lA "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\EndDeviceEB\List"
#        --diag_suppress Pe001,Pa010 -o
#        "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\EndDeviceEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f
#        "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f
#        "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00100000 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000 -DENABLE_LED4_DISABLE_S1)
#        -f "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\Source\"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\Source\"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\stack\gp\"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes)
#    Locale             =  Chinese (Simplified)_China.936
#    List file          =  
#        D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\EndDeviceEB\List\ZDSecMgr.lst
#    Object file        =  
#        D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\EndDeviceEB\Obj\ZDSecMgr.r51
#
###############################################################################

D:\work\zigbee\ti_cc2530_zstack\Z-Stack 3.0.2\Components\stack\zdo\ZDSecMgr.c
      1          /******************************************************************************
      2            Filename:       ZDSecMgr.c
      3            Revised:        $Date: 2014-06-05 11:25:00 -0700 (Thu, 05 Jun 2014) $
      4            Revision:       $Revision: 38833 $
      5          
      6            Description:    The ZigBee Device Security Manager.
      7          
      8          
      9            Copyright 2005-2014 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License"). You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product. Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          ******************************************************************************/
     39          
     40          #ifdef __cplusplus
     41          extern "C"
     42          {
     43          #endif
     44          
     45          /******************************************************************************
     46           * INCLUDES
     47           */
     48          #include "ZComDef.h"
     49          #include "OSAL.h"
     50          #include "OSAL_Nv.h"
     51          #include "ZGlobals.h"
     52          #include "ssp.h"
     53          #include "nwk_globals.h"
     54          #include "nwk.h"
     55          #include "NLMEDE.h"
     56          #include "AddrMgr.h"
     57          #include "AssocList.h"
     58          #include "APSMEDE.h"
     59          #include "ZDConfig.h"
     60          #include "ZDSecMgr.h"
     61            
     62          #include "bdb.h"
     63          #include "bdb_interface.h"
     64          
     65          /******************************************************************************
     66           * CONSTANTS
     67           */
     68          // maximum number of devices managed by this Security Manager
     69          #if !defined ( ZDSECMGR_DEVICE_MAX )
     70            #define ZDSECMGR_DEVICE_MAX 3
     71          #endif
     72          
     73          // maximum number of LINK keys this device may store
     74          #define ZDSECMGR_ENTRY_MAX ZDSECMGR_DEVICE_MAX
     75          
     76          // total number of stored devices
     77          #if !defined ( ZDSECMGR_STORED_DEVICES )
     78            #define ZDSECMGR_STORED_DEVICES 3
     79          #endif
     80          
     81          // Joining Device Policies: r21 spec 4.9.1
     82          // This boolean indicates whether the device will request a new Trust Center Link key after joining.
     83          // TC link key cannot be requested if join is performed on distributed nwk

   \                                 In  segment XDATA_I, align 1, keep-with-next
     84          bool  requestNewTrustCenterLinkKey = TRUE;  
   \                     requestNewTrustCenterLinkKey:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for requestNewTrustCenterLinkKey`
   \   000001                REQUIRE __INIT_XDATA_I
     85          //This integer indicates the maximum time in seconds that a device will wait for a response to a 
     86          //request for a Trust Center link key.

   \                                 In  segment XDATA_I, align 1, keep-with-next
     87          uint32  requestLinkKeyTimeout = BDBC_TC_LINK_KEY_EXANGE_TIMEOUT;
   \                     requestLinkKeyTimeout:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for requestLinkKeyTimeout>`
   \   000004                REQUIRE __INIT_XDATA_I
     88           //bool acceptNewUnsolicitedApplicationLinkKey;   
     89          
     90          // APSME Stub Implementations
     91          #define ZDSecMgrLinkKeySet       APSME_LinkKeySet
     92          #define ZDSecMgrLinkKeyNVIdGet   APSME_LinkKeyNVIdGet
     93          #define ZDSecMgrKeyFwdToChild    APSME_KeyFwdToChild
     94          #define ZDSecMgrIsLinkKeyValid   APSME_IsLinkKeyValid
     95          
     96          
     97          
     98          /******************************************************************************
     99           * TYPEDEFS
    100           */
    101          typedef struct
    102          {
    103            uint16            ami;
    104            uint16            keyNvId;   // index to the Link Key table in NV
    105            ZDSecMgr_Authentication_Option authenticateOption;
    106          } ZDSecMgrEntry_t;
    107          
    108          typedef struct
    109          {
    110            uint16          nwkAddr;
    111            uint8*          extAddr;
    112            uint16          parentAddr;
    113            uint8           secure;
    114            uint8           devStatus;
    115          } ZDSecMgrDevice_t;
    116          
    117          /******************************************************************************
    118           * EXTERNAL VARIABLES
    119           */
    120          extern CONST uint8 gMAX_NWK_SEC_MATERIAL_TABLE_ENTRIES;
    121          extern pfnZdoCb zdoCBFunc[MAX_ZDO_CB_FUNC];
    122          
    123          
    124          /******************************************************************************
    125           * EXTERNAL FUNCTIONS
    126           */
    127          extern void   ZDApp_ResetTimerCancel( void );
    128          /******************************************************************************
    129           * LOCAL VARIABLES
    130           */
    131          #if 0 // Taken out because the following functionality is only used for test
    132                // purpose. A more efficient (above) way is used. It can be put
    133                // back in if customers request for a white/black list feature.
    134          uint8 ZDSecMgrStoredDeviceList[ZDSECMGR_STORED_DEVICES][Z_EXTADDR_LEN] =
    135          {
    136            { 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    137            { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 },
    138            { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    139          };
    140          #endif
    141          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    142          uint8 ZDSecMgrTCExtAddr[Z_EXTADDR_LEN]=
   \                     ZDSecMgrTCExtAddr:
   \   000000                DS 8
   \   000008                REQUIRE __INIT_XDATA_Z
    143            { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
    144          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    145          uint8 ZDSecMgrTCAuthenticated = FALSE;
   \                     ZDSecMgrTCAuthenticated:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    146          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    147          ZDSecMgrEntry_t* ZDSecMgrEntries  = NULL;
   \                     ZDSecMgrEntries:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    148          
    149          void ZDSecMgrAddrMgrCB( uint8 update, AddrMgrEntry_t* newEntry, AddrMgrEntry_t* oldEntry );
    150          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    151          uint8 ZDSecMgrPermitJoiningEnabled;
   \                     ZDSecMgrPermitJoiningEnabled:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    152          uint8 ZDSecMgrPermitJoiningTimed;
   \                     ZDSecMgrPermitJoiningTimed:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    153          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    154          APSME_TCLKDevEntry_t TrustCenterLinkKey;
   \                     TrustCenterLinkKey:
   \   000000                DS 19
   \   000013                REQUIRE __INIT_XDATA_Z
    155          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    156          APSME_ApsLinkKeyFrmCntr_t ApsLinkKeyFrmCntr[ZDSECMGR_ENTRY_MAX];
   \                     ApsLinkKeyFrmCntr:
   \   000000                DS 27
   \   00001B                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    157          APSME_TCLinkKeyFrmCntr_t TCLinkKeyFrmCntr[ZDSECMGR_TC_DEVICE_MAX];
   \                     TCLinkKeyFrmCntr:
   \   000000                DS 27
   \   00001B                REQUIRE __INIT_XDATA_Z
    158          

   \                                 In  segment CODE_C, align 1
    159           CONST uint16 gZDSECMGR_TC_DEVICE_MAX = ZDSECMGR_TC_DEVICE_MAX;
   \                     gZDSECMGR_TC_DEVICE_MAX:
   \   000000   0300         DW 3

   \                                 In  segment CODE_C, align 1
    160           CONST uint16 gZDSECMGR_TC_DEVICE_IC_MAX = ZDSECMGR_TC_DEVICE_IC_MAX;
   \                     gZDSECMGR_TC_DEVICE_IC_MAX:
   \   000000   0100         DW 1

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    161           uint8  gZDSECMGR_TC_ATTEMPT_DEFAULT_KEY = ZDSECMGR_TC_ATTEMPT_DEFAULT_KEY;
   \                     gZDSECMGR_TC_ATTEMPT_DEFAULT_KEY:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    162          /******************************************************************************
    163           * PRIVATE FUNCTIONS
    164           *
    165           *   ZDSecMgrAddrStore
    166           *   ZDSecMgrExtAddrStore
    167           *   ZDSecMgrExtAddrLookup
    168           *   ZDSecMgrEntryInit
    169           *   ZDSecMgrEntryLookup
    170           *   ZDSecMgrEntryLookupAMI
    171           *   ZDSecMgrEntryLookupExt
    172           *   ZDSecMgrEntryLookupExtGetIndex
    173           *   ZDSecMgrEntryFree
    174           *   ZDSecMgrEntryNew
    175           *   ZDSecMgrAppKeyGet
    176           *   ZDSecMgrAppKeyReq
    177           *   ZDSecMgrTclkReq
    178           *   ZDSecMgrAppConfKeyReq 
    179           *   ZDSecMgrSendNwkKey
    180           *   ZDSecMgrDeviceRemove
    181           *   ZDSecMgrDeviceValidateRM
    182           *   ZDSecMgrDeviceValidate
    183           *   ZDSecMgrDeviceJoin
    184           *   ZDSecMgrDeviceJoinDirect
    185           *   ZDSecMgrDeviceJoinFwd
    186           *   ZDSecMgrDeviceNew
    187           *   ZDSecMgrAssocDeviceAuth
    188           *   ZDSecMgrAuthNwkKey
    189           *   APSME_TCLinkKeyInit
    190           *   APSME_IsDefaultTCLK
    191           */
    192          
    193          //-----------------------------------------------------------------------------
    194          // address management
    195          //-----------------------------------------------------------------------------
    196          ZStatus_t ZDSecMgrAddrStore( uint16 nwkAddr, uint8* extAddr, uint16* ami );
    197          ZStatus_t ZDSecMgrExtAddrStore( uint16 nwkAddr, uint8* extAddr, uint16* ami );
    198          ZStatus_t ZDSecMgrExtAddrLookup( uint8* extAddr, uint16* ami );
    199          
    200          //-----------------------------------------------------------------------------
    201          // Trust Center management
    202          //-----------------------------------------------------------------------------
    203          uint8 ZDSecMgrTCExtAddrCheck( uint8* extAddr );
    204          void ZDSecMgrTCDataLoad( uint8* extAddr );
    205          
    206          //-----------------------------------------------------------------------------
    207          // entry data
    208          //-----------------------------------------------------------------------------
    209          void ZDSecMgrEntryInit(uint8 state);
    210          ZStatus_t ZDSecMgrEntryLookup( uint16 nwkAddr, ZDSecMgrEntry_t** entry );
    211          ZStatus_t ZDSecMgrEntryLookupAMI( uint16 ami, ZDSecMgrEntry_t** entry );
    212          ZStatus_t ZDSecMgrEntryLookupExt( uint8* extAddr, ZDSecMgrEntry_t** entry );
    213          ZStatus_t ZDSecMgrEntryLookupExtGetIndex( uint8* extAddr, ZDSecMgrEntry_t** entry, uint16* entryIndex );
    214          ZStatus_t ZDSecMgrEntryLookupAMIGetIndex( uint16 ami, uint16* entryIndex );
    215          void ZDSecMgrEntryFree( ZDSecMgrEntry_t* entry );
    216          ZStatus_t ZDSecMgrEntryNew( ZDSecMgrEntry_t** entry );
    217          ZStatus_t ZDSecMgrAuthenticationSet( uint8* extAddr, ZDSecMgr_Authentication_Option option );
    218          void ZDSecMgrApsLinkKeyInit(uint8 setDefault);
    219          #if defined ( NV_RESTORE )
    220          static void ZDSecMgrWriteNV(void);
    221          static void ZDSecMgrRestoreFromNV(void);
    222          static void ZDSecMgrUpdateNV( uint16 index );
    223          #endif
    224          
    225          //-----------------------------------------------------------------------------
    226          // key support
    227          //-----------------------------------------------------------------------------
    228          ZStatus_t ZDSecMgrAppKeyGet( uint16  initNwkAddr,
    229                                       uint8*  initExtAddr,
    230                                       uint16  partNwkAddr,
    231                                       uint8*  partExtAddr,
    232                                       uint8** key,
    233                                       uint8*  keyType );
    234          void ZDSecMgrAppKeyReq( ZDO_RequestKeyInd_t* ind );
    235          void ZDSecMgrTclkReq( ZDO_RequestKeyInd_t* ind );
    236          void ZDSecMgrAppConfKeyReq( ZDO_VerifyKeyInd_t* ind );
    237          ZStatus_t ZDSecMgrSendNwkKey( ZDSecMgrDevice_t* device );
    238          void ZDSecMgrNwkKeyInit(uint8 setDefault);
    239          
    240          //-----------------------------------------------------------------------------
    241          // device management
    242          //-----------------------------------------------------------------------------
    243          void ZDSecMgrDeviceRemove( ZDSecMgrDevice_t* device );
    244          ZStatus_t ZDSecMgrDeviceValidateRM( ZDSecMgrDevice_t* device );
    245          ZStatus_t ZDSecMgrDeviceValidate( ZDSecMgrDevice_t* device );
    246          ZStatus_t ZDSecMgrDeviceJoin( ZDSecMgrDevice_t* device );
    247          ZStatus_t ZDSecMgrDeviceJoinDirect( ZDSecMgrDevice_t* device );
    248          ZStatus_t ZDSecMgrDeviceJoinFwd( ZDSecMgrDevice_t* device );
    249          ZStatus_t ZDSecMgrDeviceNew( ZDSecMgrDevice_t* device );
    250          
    251          //-----------------------------------------------------------------------------
    252          // association management
    253          //-----------------------------------------------------------------------------
    254          void ZDSecMgrAssocDeviceAuth( associated_devices_t* assoc );
    255          
    256          //-----------------------------------------------------------------------------
    257          // authentication management
    258          //-----------------------------------------------------------------------------
    259          void ZDSecMgrAuthNwkKey( void );
    260          
    261          //-----------------------------------------------------------------------------
    262          // APSME function
    263          //-----------------------------------------------------------------------------
    264          void APSME_TCLinkKeyInit( uint8 setDefault );
    265          uint8 APSME_IsDefaultTCLK( uint8 *extAddr );
    266          void ZDSecMgrGenerateSeed(uint8 setDefault );
    267          void ZDSecMgrGenerateKeyFromSeed(uint8 *extAddr, uint8 shift, uint8 *key);
    268          /******************************************************************************
    269           * @fn          ZDSecMgrAddrStore
    270           *
    271           * @brief       Store device addresses.
    272           *
    273           * @param       nwkAddr - [in] NWK address
    274           * @param       extAddr - [in] EXT address
    275           * @param       ami     - [out] Address Manager index
    276           *
    277           * @return      ZStatus_t
    278           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    279          ZStatus_t ZDSecMgrAddrStore( uint16 nwkAddr, uint8* extAddr, uint16* ami )
   \                     ZDSecMgrAddrStore:
    280          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV       A,#-0xd
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    281            ZStatus_t      status;
    282            AddrMgrEntry_t entry;
    283          
    284          
    285            // add entry
    286            entry.user    = ADDRMGR_USER_SECURITY;
   \   00000A   85..82       MOV       DPL,?XSP + 0
   \   00000D   85..83       MOV       DPH,?XSP + 1
   \   000010   7402         MOV       A,#0x2
   \   000012   F0           MOVX      @DPTR,A
    287            entry.nwkAddr = nwkAddr;
   \   000013   14           DEC       A
   \   000014   12....       LCALL     ?XSTACK_DISP0_8
   \   000017   12....       LCALL     ?Subroutine13 & 0xFFFF
    288            AddrMgrExtAddrSet( entry.extAddr, extAddr );
   \                     ??CrossCallReturnLabel_4:
   \   00001A   12....       LCALL     ?XSTACK_DISP0_8
   \   00001D   AA82         MOV       R2,DPL
   \   00001F   AB83         MOV       R3,DPH
   \   000021   12....       LCALL     `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
   \   000024   7416         MOV       A,#0x16
   \   000026   12....       LCALL     ?XSTACK_DISP0_8
   \   000029   12....       LCALL     ?Subroutine27 & 0xFFFF
    289          
    290            if ( AddrMgrEntryUpdate( &entry ) == TRUE )
   \                     ??CrossCallReturnLabel_27:
   \   00002C   12....       LCALL     `??AddrMgrEntryUpdate::?relay`; Banked call to: AddrMgrEntryUpdate
   \   00002F   E9           MOV       A,R1
   \   000030   6401         XRL       A,#0x1
   \   000032   700A         JNZ       ??ZDSecMgrAddrStore_0
    291            {
    292              // return successful results
    293              *ami   = entry.index;
   \   000034   740B         MOV       A,#0xb
   \   000036   12....       LCALL     ?XSTACK_DISP0_8
   \   000039   12....       LCALL     ?Subroutine10 & 0xFFFF
    294              status = ZSuccess;
    295            }
   \                     ??CrossCallReturnLabel_93:
   \   00003C   8008         SJMP      ??CrossCallReturnLabel_14
    296            else
    297            {
    298              // return failed results
    299              *ami   = entry.index;
   \                     ??ZDSecMgrAddrStore_0:
   \   00003E   740B         MOV       A,#0xb
   \   000040   12....       LCALL     ?XSTACK_DISP0_8
   \   000043   12....       LCALL     ?Subroutine18 & 0xFFFF
    300              status = ZNwkUnknownDevice;
    301            }
    302          
    303            return status;
   \                     ??CrossCallReturnLabel_14:
   \   000046   02....       LJMP      ?Subroutine0 & 0xFFFF
    304          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   12....       LCALL     ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_185:
   \   000003   FE           MOV       R6,A
   \   000004   E9           MOV       A,R1
   \   000005   FF           MOV       R7,A
   \   000006                ; Setup parameters for call to function AddrMgrEntryUpdate
   \   000006                ; Setup parameters for call to function AddrMgrEntryUpdate
   \   000006   AA..         MOV       R2,?XSP + 0
   \   000008   AB..         MOV       R3,?XSP + 1
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   12....       LCALL     ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_170:
   \   000003   8E82         MOV       DPL,R6
   \   000005   8F83         MOV       DPH,R7
   \   000007   E8           MOV       A,R0
   \   000008   F0           MOVX      @DPTR,A
   \   000009   A3           INC       DPTR
   \   00000A   E9           MOV       A,R1
   \   00000B   F0           MOVX      @DPTR,A
   \   00000C   79C8         MOV       R1,#-0x38
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004                REQUIRE ??Subroutine57_0
   \   000004                ; // Fall through to label ??Subroutine57_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine57_0:
   \   000000   F9           MOV       R1,A
   \   000001   8E82         MOV       DPL,R6
   \   000003   8F83         MOV       DPH,R7
   \   000005                REQUIRE ??Subroutine58_0
   \   000005                ; // Fall through to label ??Subroutine58_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine58_0:
   \   000000   E8           MOV       A,R0
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   E9           MOV       A,R1
   \   000004   F0           MOVX      @DPTR,A
   \   000005   7900         MOV       R1,#0x0
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine52:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   E8           MOV       A,R0
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   12....       LCALL     ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   000003                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   000003                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   000003                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   000003   7403         MOV       A,#0x3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine53:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine50:
   \   000000   EA           MOV       A,R2
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   EB           MOV       A,R3
   \   000004   F0           MOVX      @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   740D         MOV       A,#0xd
   \   000002                REQUIRE ??Subroutine68_0
   \   000002                ; // Fall through to label ??Subroutine68_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine68_0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine69_0
   \   000003                ; // Fall through to label ??Subroutine69_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine69_0:
   \   000000   7F01         MOV       R7,#0x1
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    305          
    306          /******************************************************************************
    307           * @fn          ZDSecMgrExtAddrStore
    308           *
    309           * @brief       Store EXT address.
    310           *
    311           * @param       extAddr - [in] EXT address
    312           * @param       ami     - [out] Address Manager index
    313           *
    314           * @return      ZStatus_t
    315           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    316          ZStatus_t ZDSecMgrExtAddrStore( uint16 nwkAddr, uint8* extAddr, uint16* ami )
   \                     ZDSecMgrExtAddrStore:
    317          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV       A,#-0xd
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    318            ZStatus_t      status;
    319            AddrMgrEntry_t entry;
    320          
    321          
    322            // add entry
    323            entry.user    = ADDRMGR_USER_SECURITY;
   \   00000A   85..82       MOV       DPL,?XSP + 0
   \   00000D   85..83       MOV       DPH,?XSP + 1
   \   000010   7402         MOV       A,#0x2
   \   000012   F0           MOVX      @DPTR,A
    324            entry.nwkAddr = nwkAddr;
   \   000013   14           DEC       A
   \   000014   12....       LCALL     ?XSTACK_DISP0_8
   \   000017   12....       LCALL     ?Subroutine13 & 0xFFFF
    325            AddrMgrExtAddrSet( entry.extAddr, extAddr );
   \                     ??CrossCallReturnLabel_5:
   \   00001A   12....       LCALL     ?XSTACK_DISP0_8
   \   00001D   AA82         MOV       R2,DPL
   \   00001F   AB83         MOV       R3,DPH
   \   000021   12....       LCALL     `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
   \   000024   7416         MOV       A,#0x16
   \   000026   12....       LCALL     ?XSTACK_DISP0_8
   \   000029   12....       LCALL     ?Subroutine27 & 0xFFFF
    326          
    327            if ( AddrMgrEntryUpdate( &entry ) == TRUE )
   \                     ??CrossCallReturnLabel_28:
   \   00002C   12....       LCALL     `??AddrMgrEntryUpdate::?relay`; Banked call to: AddrMgrEntryUpdate
   \   00002F   E9           MOV       A,R1
   \   000030   6401         XRL       A,#0x1
   \   000032   700A         JNZ       ??ZDSecMgrExtAddrStore_0
    328            {
    329              // return successful results
    330              *ami   = entry.index;
   \   000034   740B         MOV       A,#0xb
   \   000036   12....       LCALL     ?XSTACK_DISP0_8
   \   000039   12....       LCALL     ?Subroutine10 & 0xFFFF
    331              status = ZSuccess;
    332            }
   \                     ??CrossCallReturnLabel_94:
   \   00003C   8008         SJMP      ??CrossCallReturnLabel_15
    333            else
    334            {
    335              // return failed results
    336              *ami   = entry.index;
   \                     ??ZDSecMgrExtAddrStore_0:
   \   00003E   740B         MOV       A,#0xb
   \   000040   12....       LCALL     ?XSTACK_DISP0_8
   \   000043   12....       LCALL     ?Subroutine18 & 0xFFFF
    337              status = ZNwkUnknownDevice;
    338            }
    339          
    340            return status;
   \                     ??CrossCallReturnLabel_15:
   \   000046   02....       LJMP      ?Subroutine0 & 0xFFFF
    341          }
    342          
    343          /******************************************************************************
    344           * @fn          ZDSecMgrExtAddrLookup
    345           *
    346           * @brief       Lookup index for specified EXT address.
    347           *
    348           * @param       extAddr - [in] EXT address
    349           * @param       ami     - [out] Address Manager index
    350           *
    351           * @return      ZStatus_t
    352           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    353          ZStatus_t ZDSecMgrExtAddrLookup( uint8* extAddr, uint16* ami )
   \                     ZDSecMgrExtAddrLookup:
    354          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV       A,#-0xd
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EC           MOV       A,R4
   \   00000B   FE           MOV       R6,A
   \   00000C   ED           MOV       A,R5
   \   00000D   FF           MOV       R7,A
    355            ZStatus_t      status;
    356            AddrMgrEntry_t entry;
    357          
    358          
    359            // lookup entry
    360            entry.user = ADDRMGR_USER_SECURITY;
   \   00000E   85..82       MOV       DPL,?XSP + 0
   \   000011   85..83       MOV       DPH,?XSP + 1
   \   000014   7402         MOV       A,#0x2
   \   000016   F0           MOVX      @DPTR,A
    361            AddrMgrExtAddrSet( entry.extAddr, extAddr );
   \   000017                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   000017   EA           MOV       A,R2
   \   000018   FC           MOV       R4,A
   \   000019   EB           MOV       A,R3
   \   00001A   FD           MOV       R5,A
   \   00001B   7403         MOV       A,#0x3
   \   00001D   12....       LCALL     ?XSTACK_DISP0_8
   \   000020   AA82         MOV       R2,DPL
   \   000022   AB83         MOV       R3,DPH
   \   000024   12....       LCALL     `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
    362          
    363            if ( AddrMgrEntryLookupExt( &entry ) == TRUE )
   \   000027                ; Setup parameters for call to function AddrMgrEntryLookupExt
   \   000027   AA..         MOV       R2,?XSP + 0
   \   000029   AB..         MOV       R3,?XSP + 1
   \   00002B   12....       LCALL     `??AddrMgrEntryLookupExt::?relay`; Banked call to: AddrMgrEntryLookupExt
   \   00002E   E9           MOV       A,R1
   \   00002F   6401         XRL       A,#0x1
   \   000031   700A         JNZ       ??ZDSecMgrExtAddrLookup_0
    364            {
    365              // return successful results
    366              *ami   = entry.index;
   \   000033   740B         MOV       A,#0xb
   \   000035   12....       LCALL     ?XSTACK_DISP0_8
   \   000038   12....       LCALL     ?Subroutine10 & 0xFFFF
    367              status = ZSuccess;
    368            }
   \                     ??CrossCallReturnLabel_95:
   \   00003B   8008         SJMP      ??CrossCallReturnLabel_16
    369            else
    370            {
    371              // return failed results
    372              *ami   = entry.index;
   \                     ??ZDSecMgrExtAddrLookup_0:
   \   00003D   740B         MOV       A,#0xb
   \   00003F   12....       LCALL     ?XSTACK_DISP0_8
   \   000042   12....       LCALL     ?Subroutine18 & 0xFFFF
    373              status = ZNwkUnknownDevice;
    374            }
    375          
    376            return status;
   \                     ??CrossCallReturnLabel_16:
   \   000045   02....       LJMP      ?Subroutine0 & 0xFFFF
    377          }
    378          
    379          /******************************************************************************
    380           * @fn          ZDSecMgrAddrClear
    381           *
    382           * @brief       Clear security bit from Address Manager for specific device.
    383           *
    384           * @param       extAddr - [in] EXT address
    385           *
    386           * @return      ZStatus_t
    387           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    388          ZStatus_t ZDSecMgrAddrClear( uint8* extAddr )
   \                     ZDSecMgrAddrClear:
    389          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 15
   \   000005   74F1         MOV       A,#-0xf
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    390            ZStatus_t status;
    391            uint16 entryAmi;
    392          
    393            // get Address Manager Index
    394            status = ZDSecMgrExtAddrLookup( extAddr, &entryAmi );
   \   00000A                ; Setup parameters for call to function ZDSecMgrExtAddrLookup
   \   00000A   AC..         MOV       R4,?XSP + 0
   \   00000C   AD..         MOV       R5,?XSP + 1
   \   00000E   12....       LCALL     `??ZDSecMgrExtAddrLookup::?relay`; Banked call to: ZDSecMgrExtAddrLookup
   \   000011   E9           MOV       A,R1
   \   000012   FE           MOV       R6,A
    395          
    396            if ( status == ZSuccess )
   \   000013   7022         JNZ       ??ZDSecMgrAddrClear_0
    397            {
    398              AddrMgrEntry_t addrEntry;
    399          
    400              // Clear SECURITY User bit from the address manager
    401              addrEntry.user = ADDRMGR_USER_SECURITY;
   \   000015   7402         MOV       A,#0x2
   \   000017   12....       LCALL     ?XSTACK_DISP0_8
   \   00001A   7402         MOV       A,#0x2
   \   00001C   F0           MOVX      @DPTR,A
    402              addrEntry.index = entryAmi;
   \   00001D   12....       LCALL     ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_165:
   \   000020   740D         MOV       A,#0xd
   \   000022   12....       LCALL     ?XSTACK_DISP0_8
   \   000025   12....       LCALL     ??Subroutine65_0 & 0xFFFF
    403          
    404              if ( AddrMgrEntryRelease( &addrEntry ) != TRUE )
   \                     ??CrossCallReturnLabel_136:
   \   000028                ; Setup parameters for call to function AddrMgrEntryRelease
   \   000028   7402         MOV       A,#0x2
   \   00002A   12....       LCALL     ?XSTACK_DISP101_8
   \   00002D   12....       LCALL     `??AddrMgrEntryRelease::?relay`; Banked call to: AddrMgrEntryRelease
   \   000030   E9           MOV       A,R1
   \   000031   6401         XRL       A,#0x1
   \   000033   6002         JZ        ??ZDSecMgrAddrClear_0
    405              {
    406                // return failure results
    407                status = ZFailure;
   \   000035   7E01         MOV       R6,#0x1
    408              }
    409            }
    410          
    411            return status;
   \                     ??ZDSecMgrAddrClear_0:
   \   000037   EE           MOV       A,R6
   \   000038   F9           MOV       R1,A
   \   000039   740F         MOV       A,#0xf
   \   00003B   02....       LJMP      ??Subroutine68_0 & 0xFFFF
    412          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine65_0:
   \   000000   E8           MOV       A,R0
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   E9           MOV       A,R1
   \   000004   F0           MOVX      @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine66_0
   \   000006                ; // Fall through to label ??Subroutine66_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine66_0:
   \   000000   12....       LCALL     ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_172:
   \   000003   22           RET
    413          
    414          /******************************************************************************
    415           * @fn          ZDSecMgrEntryInit
    416           *
    417           * @brief       Initialize entry sub module
    418           *
    419           * @param       state - device initialization state
    420           *
    421           * @return      none
    422           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    423          void ZDSecMgrEntryInit(uint8 state)
   \                     ZDSecMgrEntryInit:
    424          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
    425            if (ZDSecMgrEntries == NULL)
   \   000007   90....       MOV       DPTR,#ZDSecMgrEntries
   \   00000A   12....       LCALL     ??Subroutine67_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_173:
   \   00000D   7032         JNZ       ??ZDSecMgrEntryInit_0
    426            {
    427              uint16 index;
    428          
    429              if ((ZDSecMgrEntries = osal_mem_alloc(sizeof(ZDSecMgrEntry_t) * ZDSECMGR_ENTRY_MAX)) == NULL)
   \   00000F                ; Setup parameters for call to function osal_mem_alloc
   \   00000F   7A0F         MOV       R2,#0xf
   \   000011   7B00         MOV       R3,#0x0
   \   000013   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000016   90....       MOV       DPTR,#ZDSecMgrEntries
   \   000019   EA           MOV       A,R2
   \   00001A   F0           MOVX      @DPTR,A
   \   00001B   A3           INC       DPTR
   \   00001C   EB           MOV       A,R3
   \   00001D   12....       LCALL     ??Subroutine60_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_110:
   \   000020   6025         JZ        ??ZDSecMgrEntryInit_1
    430              {
    431                return;
    432              }
    433          
    434              for (index = 0; index < ZDSECMGR_ENTRY_MAX; index++)
   \   000022   7800         MOV       R0,#0x0
   \   000024   7900         MOV       R1,#0x0
    435              {
    436                ZDSecMgrEntries[index].ami = INVALID_NODE_ADDR;
   \                     ??ZDSecMgrEntryInit_2:
   \   000026   12....       LCALL     ?Subroutine31 & 0xFFFF
    437          
    438                ZDSecMgrEntries[index].keyNvId = SEC_NO_KEY_NV_ID;
    439              }
   \                     ??CrossCallReturnLabel_35:
   \   000029   74FE         MOV       A,#-0x2
   \   00002B   F0           MOVX      @DPTR,A
   \   00002C   A3           INC       DPTR
   \   00002D   04           INC       A
   \   00002E   12....       LCALL     ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   000031   A3           INC       DPTR
   \   000032   A3           INC       DPTR
   \   000033   E4           CLR       A
   \   000034   F0           MOVX      @DPTR,A
   \   000035   A3           INC       DPTR
   \   000036   F0           MOVX      @DPTR,A
   \   000037   08           INC       R0
   \   000038   E8           MOV       A,R0
   \   000039   7001         JNZ       ??ZDSecMgrEntryInit_3
   \   00003B   09           INC       R1
   \                     ??ZDSecMgrEntryInit_3:
   \   00003C   12....       LCALL     ?Subroutine39 & 0xFFFF
    440            }
   \                     ??CrossCallReturnLabel_101:
   \   00003F   40E5         JC        ??ZDSecMgrEntryInit_2
    441          
    442          #if defined NV_RESTORE
    443            if (state == ZDO_INITDEV_RESTORED_NETWORK_STATE)
   \                     ??ZDSecMgrEntryInit_0:
   \   000041   EE           MOV       A,R6
   \   000042   7003         JNZ       ??ZDSecMgrEntryInit_1
    444            {
    445              ZDSecMgrRestoreFromNV();
   \   000044                ; Setup parameters for call to function ZDSecMgrRestoreFromNV
   \   000044   12....       LCALL     `??ZDSecMgrRestoreFromNV::?relay`; Banked call to: ZDSecMgrRestoreFromNV
    446            }
    447          #else
    448            (void)state;
    449          #endif
    450          }
   \                     ??ZDSecMgrEntryInit_1:
   \   000047   02....       LJMP      ??Subroutine69_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   C3           CLR       C
   \   000001                REQUIRE ??Subroutine59_0
   \   000001                ; // Fall through to label ??Subroutine59_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine59_0:
   \   000000   9403         SUBB      A,#0x3
   \   000002   E9           MOV       A,R1
   \   000003   9400         SUBB      A,#0x0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine60_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   90....       MOV       DPTR,#ZDSecMgrEntries
   \   000004   12....       LCALL     ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_186:
   \   000007   49           ORL       A,R1
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   12....       LCALL     ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_90:
   \   000003   8A82         MOV       DPL,R2
   \   000005   8B83         MOV       DPH,R3
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine55:
   \   000000   E8           MOV       A,R0
   \   000001   FA           MOV       R2,A
   \   000002   E9           MOV       A,R1
   \   000003   FB           MOV       R3,A
   \   000004   EA           MOV       A,R2
   \   000005   75F005       MOV       B,#0x5
   \   000008   A4           MUL       AB
   \   000009   FA           MOV       R2,A
   \   00000A   ACF0         MOV       R4,B
   \   00000C   75F005       MOV       B,#0x5
   \   00000F   EB           MOV       A,R3
   \   000010   A4           MUL       AB
   \   000011   2C           ADD       A,R4
   \   000012   FB           MOV       R3,A
   \   000013   90....       MOV       DPTR,#ZDSecMgrEntries
   \   000016   E0           MOVX      A,@DPTR
   \   000017   2A           ADD       A,R2
   \   000018   FA           MOV       R2,A
   \   000019   A3           INC       DPTR
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   3B           ADDC      A,R3
   \   00001C   FB           MOV       R3,A
   \   00001D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function AssocGetWithShort
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine67_0:
   \   000000   12....       LCALL     ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_187:
   \   000003   49           ORL       A,R1
   \   000004   22           RET
    451          
    452          /******************************************************************************
    453           * @fn          ZDSecMgrEntryLookup
    454           *
    455           * @brief       Lookup entry index using specified NWK address.
    456           *
    457           * @param       nwkAddr - [in] NWK address
    458           * @param       entry   - [out] valid entry
    459           *
    460           * @return      ZStatus_t
    461           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    462          ZStatus_t ZDSecMgrEntryLookup( uint16 nwkAddr, ZDSecMgrEntry_t** entry )
   \                     ZDSecMgrEntryLookup:
    463          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV       A,#-0xd
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EC           MOV       A,R4
   \   00000B   FE           MOV       R6,A
   \   00000C   ED           MOV       A,R5
   \   00000D   FF           MOV       R7,A
    464            uint16         index;
    465            AddrMgrEntry_t addrMgrEntry;
    466          
    467            // initialize results
    468            *entry = NULL;
   \   00000E   8E82         MOV       DPL,R6
   \   000010   8F83         MOV       DPH,R7
   \   000012   12....       LCALL     ?Subroutine9 & 0xFFFF
    469          
    470            // verify data is available
    471            if ( ZDSecMgrEntries != NULL )
   \                     ??CrossCallReturnLabel_106:
   \   000015   6046         JZ        ??ZDSecMgrEntryLookup_0
    472            {
    473              addrMgrEntry.user    = ADDRMGR_USER_SECURITY;
   \   000017   85..82       MOV       DPL,?XSP + 0
   \   00001A   85..83       MOV       DPH,?XSP + 1
   \   00001D   7402         MOV       A,#0x2
   \   00001F   F0           MOVX      @DPTR,A
    474              addrMgrEntry.nwkAddr = nwkAddr;
   \   000020   14           DEC       A
   \   000021   12....       LCALL     ?XSTACK_DISP0_8
   \   000024   12....       LCALL     ?Subroutine16 & 0xFFFF
    475          
    476              if ( AddrMgrEntryLookupNwk( &addrMgrEntry ) == TRUE )
   \                     ??CrossCallReturnLabel_188:
   \   000027   12....       LCALL     `??AddrMgrEntryLookupNwk::?relay`; Banked call to: AddrMgrEntryLookupNwk
   \   00002A   E9           MOV       A,R1
   \   00002B   6401         XRL       A,#0x1
   \   00002D   702E         JNZ       ??ZDSecMgrEntryLookup_0
    477              {
    478                for ( index = 0; index < ZDSECMGR_ENTRY_MAX ; index++ )
   \   00002F   7800         MOV       R0,#0x0
   \   000031   7900         MOV       R1,#0x0
    479                {
    480                  if ( addrMgrEntry.index == ZDSecMgrEntries[index].ami )
   \                     ??ZDSecMgrEntryLookup_1:
   \   000033   12....       LCALL     ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_89:
   \   000036   740B         MOV       A,#0xb
   \   000038   12....       LCALL     ?XSTACK_DISP0_8
   \   00003B   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   00003E   8A82         MOV       DPL,R2
   \   000040   8B83         MOV       DPH,R3
   \   000042   E0           MOVX      A,@DPTR
   \   000043   6C           XRL       A,R4
   \   000044   7003         JNZ       ??ZDSecMgrEntryLookup_2
   \   000046   A3           INC       DPTR
   \   000047   E0           MOVX      A,@DPTR
   \   000048   6D           XRL       A,R5
   \                     ??ZDSecMgrEntryLookup_2:
   \   000049   7008         JNZ       ??ZDSecMgrEntryLookup_3
    481                  {
    482                    // return successful results
    483                    *entry = &ZDSecMgrEntries[index];
   \   00004B   EA           MOV       A,R2
   \   00004C   F8           MOV       R0,A
   \   00004D   EB           MOV       A,R3
   \   00004E   12....       LCALL     ??Subroutine57_0 & 0xFFFF
    484          
    485                    // break from loop
    486                    return ZSuccess;
    487                  }
    488                }
   \                     ??CrossCallReturnLabel_96:
   \   000051   800C         SJMP      ??ZDSecMgrEntryLookup_4
   \                     ??ZDSecMgrEntryLookup_3:
   \   000053   08           INC       R0
   \   000054   E8           MOV       A,R0
   \   000055   7001         JNZ       ??ZDSecMgrEntryLookup_5
   \   000057   09           INC       R1
   \                     ??ZDSecMgrEntryLookup_5:
   \   000058   12....       LCALL     ?Subroutine39 & 0xFFFF
    489              }
    490            }
   \                     ??CrossCallReturnLabel_102:
   \   00005B   40D6         JC        ??ZDSecMgrEntryLookup_1
    491          
    492            return ZNwkUnknownDevice;
   \                     ??ZDSecMgrEntryLookup_0:
   \   00005D   79C8         MOV       R1,#-0x38
   \                     ??ZDSecMgrEntryLookup_4:
   \   00005F   02....       LJMP      ?Subroutine0 & 0xFFFF
    493          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   E4           CLR       A
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003                REQUIRE ??Subroutine60_0
   \   000003                ; // Fall through to label ??Subroutine60_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FC           MOV       R4,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FD           MOV       R5,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   EA           MOV       A,R2
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   EB           MOV       A,R3
   \   000004                REQUIRE ??Subroutine73_0
   \   000004                ; // Fall through to label ??Subroutine73_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine73_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function AddrMgrEntryLookupNwk
   \   000001                ; Setup parameters for call to function APSME_RequestKeyReq
   \   000001                ; Setup parameters for call to function ZDSecMgrDeviceNew
   \   000001                ; Setup parameters for call to function ZDSecMgrDeviceRemove
   \   000001                ; Setup parameters for call to function ZDSecMgrDeviceRemove
   \   000001   AA..         MOV       R2,?XSP + 0
   \   000003   AB..         MOV       R3,?XSP + 1
   \   000005   22           RET
    494          
    495          /******************************************************************************
    496           * @fn          ZDSecMgrEntryLookupAMI
    497           *
    498           * @brief       Lookup entry using specified address index
    499           *
    500           * @param       ami   - [in] Address Manager index
    501           * @param       entry - [out] valid entry
    502           *
    503           * @return      ZStatus_t
    504           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    505          ZStatus_t ZDSecMgrEntryLookupAMI( uint16 ami, ZDSecMgrEntry_t** entry )
   \                     ZDSecMgrEntryLookupAMI:
    506          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    507            uint16 index;
    508          
    509            // initialize results
    510            *entry = NULL;
   \   000005   8C82         MOV       DPL,R4
   \   000007   8D83         MOV       DPH,R5
   \   000009   12....       LCALL     ?Subroutine9 & 0xFFFF
    511          
    512            // verify data is available
    513            if ( ZDSecMgrEntries != NULL )
   \                     ??CrossCallReturnLabel_107:
   \   00000C   6030         JZ        ??ZDSecMgrEntryLookupAMI_0
    514            {
    515              for ( index = 0; index < ZDSECMGR_ENTRY_MAX ; index++ )
   \   00000E   7800         MOV       R0,#0x0
   \   000010   7900         MOV       R1,#0x0
    516              {
    517                if ( ZDSecMgrEntries[index].ami == ami )
   \                     ??ZDSecMgrEntryLookupAMI_1:
   \   000012   12....       LCALL     ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   000015   FE           MOV       R6,A
   \   000016   A3           INC       DPTR
   \   000017   E0           MOVX      A,@DPTR
   \   000018   3F           ADDC      A,R7
   \   000019   FF           MOV       R7,A
   \   00001A   8E82         MOV       DPL,R6
   \   00001C   8F83         MOV       DPH,R7
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   6A           XRL       A,R2
   \   000020   7003         JNZ       ??ZDSecMgrEntryLookupAMI_2
   \   000022   A3           INC       DPTR
   \   000023   E0           MOVX      A,@DPTR
   \   000024   6B           XRL       A,R3
   \                     ??ZDSecMgrEntryLookupAMI_2:
   \   000025   700D         JNZ       ??ZDSecMgrEntryLookupAMI_3
    518                {
    519                  // return successful results
    520                  *entry = &ZDSecMgrEntries[index];
   \   000027   EE           MOV       A,R6
   \   000028   F8           MOV       R0,A
   \   000029   EF           MOV       A,R7
   \   00002A   F9           MOV       R1,A
   \   00002B   8C82         MOV       DPL,R4
   \   00002D   8D83         MOV       DPH,R5
   \   00002F   12....       LCALL     ??Subroutine58_0 & 0xFFFF
    521          
    522                  // break from loop
    523                  return ZSuccess;
    524                }
    525              }
   \                     ??CrossCallReturnLabel_97:
   \   000032   800C         SJMP      ??ZDSecMgrEntryLookupAMI_4
   \                     ??ZDSecMgrEntryLookupAMI_3:
   \   000034   08           INC       R0
   \   000035   E8           MOV       A,R0
   \   000036   7001         JNZ       ??ZDSecMgrEntryLookupAMI_5
   \   000038   09           INC       R1
   \                     ??ZDSecMgrEntryLookupAMI_5:
   \   000039   12....       LCALL     ?Subroutine39 & 0xFFFF
    526            }
   \                     ??CrossCallReturnLabel_103:
   \   00003C   40D4         JC        ??ZDSecMgrEntryLookupAMI_1
    527          
    528            return ZNwkUnknownDevice;
   \                     ??ZDSecMgrEntryLookupAMI_0:
   \   00003E   79C8         MOV       R1,#-0x38
   \                     ??ZDSecMgrEntryLookupAMI_4:
   \   000040   02....       LJMP      ??Subroutine69_0 & 0xFFFF
    529          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   E8           MOV       A,R0
   \   000001   FE           MOV       R6,A
   \   000002   E9           MOV       A,R1
   \   000003   FF           MOV       R7,A
   \   000004   EE           MOV       A,R6
   \   000005   75F005       MOV       B,#0x5
   \   000008   A4           MUL       AB
   \   000009   FE           MOV       R6,A
   \   00000A   85F0..       MOV       ?V0,B
   \   00000D   75F005       MOV       B,#0x5
   \   000010   EF           MOV       A,R7
   \   000011   A4           MUL       AB
   \   000012   25..         ADD       A,?V0
   \   000014   FF           MOV       R7,A
   \   000015   90....       MOV       DPTR,#ZDSecMgrEntries
   \   000018   E0           MOVX      A,@DPTR
   \   000019   2E           ADD       A,R6
   \   00001A   22           RET
    530          
    531          /******************************************************************************
    532           * @fn          ZDSecMgrEntryLookupExt
    533           *
    534           * @brief       Lookup entry index using specified EXT address.
    535           *
    536           * @param       extAddr - [in] EXT address
    537           * @param       entry   - [out] valid entry
    538           *
    539           * @return      ZStatus_t
    540           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    541          ZStatus_t ZDSecMgrEntryLookupExt( uint8* extAddr, ZDSecMgrEntry_t** entry )
   \                     ZDSecMgrEntryLookupExt:
    542          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EC           MOV       A,R4
   \   00000B   FE           MOV       R6,A
   \   00000C   ED           MOV       A,R5
   \   00000D   FF           MOV       R7,A
    543            ZStatus_t status;
    544            uint16    ami;
    545          
    546            // initialize results
    547            *entry = NULL;
   \   00000E   8E82         MOV       DPL,R6
   \   000010   8F83         MOV       DPH,R7
   \   000012   E4           CLR       A
   \   000013   F0           MOVX      @DPTR,A
   \   000014   A3           INC       DPTR
   \   000015   F0           MOVX      @DPTR,A
    548            status = ZNwkUnknownDevice;
   \   000016   75..C8       MOV       ?V0,#-0x38
    549          
    550            // lookup address index
    551            if ( ZDSecMgrExtAddrLookup( extAddr, &ami ) == ZSuccess )
   \   000019                ; Setup parameters for call to function ZDSecMgrExtAddrLookup
   \   000019   AC..         MOV       R4,?XSP + 0
   \   00001B   AD..         MOV       R5,?XSP + 1
   \   00001D   12....       LCALL     `??ZDSecMgrExtAddrLookup::?relay`; Banked call to: ZDSecMgrExtAddrLookup
   \   000020   E9           MOV       A,R1
   \   000021   7013         JNZ       ??ZDSecMgrEntryLookupExt_0
    552            {
    553              status = ZDSecMgrEntryLookupAMI( ami, entry );
   \   000023                ; Setup parameters for call to function ZDSecMgrEntryLookupAMI
   \   000023   EE           MOV       A,R6
   \   000024   FC           MOV       R4,A
   \   000025   EF           MOV       A,R7
   \   000026   FD           MOV       R5,A
   \   000027   85..82       MOV       DPL,?XSP + 0
   \   00002A   85..83       MOV       DPH,?XSP + 1
   \   00002D   12....       LCALL     ??Subroutine62_0 & 0xFFFF
    554            }
   \                     ??CrossCallReturnLabel_111:
   \   000030   12....       LCALL     `??ZDSecMgrEntryLookupAMI::?relay`; Banked call to: ZDSecMgrEntryLookupAMI
   \   000033   E9           MOV       A,R1
   \   000034   F5..         MOV       ?V0,A
    555          
    556            return status;
   \                     ??ZDSecMgrEntryLookupExt_0:
   \   000036   A9..         MOV       R1,?V0
   \   000038   02....       LJMP      ?Subroutine7 & 0xFFFF
    557          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   7402         MOV       A,#0x2
   \   000002   02....       LJMP      ??Subroutine68_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine62_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FB           MOV       R3,A
   \   000005   22           RET
    558          
    559          /******************************************************************************
    560           * @fn          ZDSecMgrEntryLookupExtGetIndex
    561           *
    562           * @brief       Lookup entry index using specified EXT address.
    563           *
    564           * @param       extAddr - [in] EXT address
    565           * @param       entryIndex - [out] valid index to the entry table
    566           *
    567           * @return      ZStatus_t
    568           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    569          ZStatus_t ZDSecMgrEntryLookupExtGetIndex( uint8* extAddr, ZDSecMgrEntry_t** entry, uint16* entryIndex )
   \                     ZDSecMgrEntryLookupExtGetIndex:
    570          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EC           MOV       A,R4
   \   00000B   FE           MOV       R6,A
   \   00000C   ED           MOV       A,R5
   \   00000D   FF           MOV       R7,A
    571            uint16 ami;
    572            uint16 index;
    573          
    574            // lookup address index
    575            if ( ZDSecMgrExtAddrLookup( extAddr, &ami ) == ZSuccess )
   \   00000E                ; Setup parameters for call to function ZDSecMgrExtAddrLookup
   \   00000E   AC..         MOV       R4,?XSP + 0
   \   000010   AD..         MOV       R5,?XSP + 1
   \   000012   12....       LCALL     `??ZDSecMgrExtAddrLookup::?relay`; Banked call to: ZDSecMgrExtAddrLookup
   \   000015   E9           MOV       A,R1
   \   000016   703F         JNZ       ??ZDSecMgrEntryLookupExtGetIndex_0
    576            {
    577              // verify data is available
    578              if ( ZDSecMgrEntries != NULL )
   \   000018   90....       MOV       DPTR,#ZDSecMgrEntries
   \   00001B   12....       LCALL     ??Subroutine67_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_174:
   \   00001E   6037         JZ        ??ZDSecMgrEntryLookupExtGetIndex_0
    579              {
    580                for ( index = 0; index < ZDSECMGR_ENTRY_MAX ; index++ )
   \   000020   7800         MOV       R0,#0x0
   \   000022   7900         MOV       R1,#0x0
    581                {
    582                  if ( ZDSecMgrEntries[index].ami == ami )
   \                     ??ZDSecMgrEntryLookupExtGetIndex_1:
   \   000024   12....       LCALL     ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   000027   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   00002A   85..82       MOV       DPL,?XSP + 0
   \   00002D   85..83       MOV       DPH,?XSP + 1
   \   000030   E0           MOVX      A,@DPTR
   \   000031   6C           XRL       A,R4
   \   000032   7003         JNZ       ??ZDSecMgrEntryLookupExtGetIndex_2
   \   000034   A3           INC       DPTR
   \   000035   E0           MOVX      A,@DPTR
   \   000036   6D           XRL       A,R5
   \                     ??ZDSecMgrEntryLookupExtGetIndex_2:
   \   000037   7014         JNZ       ??ZDSecMgrEntryLookupExtGetIndex_3
    583                  {
    584                    // return successful results
    585                    *entry = &ZDSecMgrEntries[index];
   \   000039   8E82         MOV       DPL,R6
   \   00003B   8F83         MOV       DPH,R7
   \   00003D   12....       LCALL     ?Subroutine50 & 0xFFFF
    586                    *entryIndex = index;
   \                     ??CrossCallReturnLabel_78:
   \   000040   740B         MOV       A,#0xb
   \   000042   12....       LCALL     ?XSTACK_DISP0_8
   \   000045   12....       LCALL     ?Subroutine34 & 0xFFFF
    587          
    588                    // break from loop
    589                    return ZSuccess;
    590                  }
    591                }
   \                     ??CrossCallReturnLabel_44:
   \   000048   12....       LCALL     ??Subroutine58_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_98:
   \   00004B   800C         SJMP      ??ZDSecMgrEntryLookupExtGetIndex_4
   \                     ??ZDSecMgrEntryLookupExtGetIndex_3:
   \   00004D   08           INC       R0
   \   00004E   E8           MOV       A,R0
   \   00004F   7001         JNZ       ??ZDSecMgrEntryLookupExtGetIndex_5
   \   000051   09           INC       R1
   \                     ??ZDSecMgrEntryLookupExtGetIndex_5:
   \   000052   12....       LCALL     ?Subroutine39 & 0xFFFF
    592              }
    593            }
   \                     ??CrossCallReturnLabel_104:
   \   000055   40CD         JC        ??ZDSecMgrEntryLookupExtGetIndex_1
    594          
    595            return ZNwkUnknownDevice;
   \                     ??ZDSecMgrEntryLookupExtGetIndex_0:
   \   000057   79C8         MOV       R1,#-0x38
   \                     ??ZDSecMgrEntryLookupExtGetIndex_4:
   \   000059   02....       LJMP      ?Subroutine7 & 0xFFFF
    596          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   12....       LCALL     ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_88:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine54:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F583         MOV       DPH,A
   \   000006   8A82         MOV       DPL,R2
   \   000008   22           RET
    597          
    598          /******************************************************************************
    599           * @fn          ZDSecMgrEntryLookupAMIGetIndex
    600           *
    601           * @brief       Lookup entry using specified address index
    602           *
    603           * @param       ami   - [in] Address Manager index
    604           * @param       entryIndex - [out] valid index to the entry table
    605           *
    606           * @return      ZStatus_t
    607           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    608          ZStatus_t ZDSecMgrEntryLookupAMIGetIndex( uint16 ami, uint16* entryIndex )
   \                     ZDSecMgrEntryLookupAMIGetIndex:
    609          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    610            uint16 index;
    611          
    612            // verify data is available
    613            if ( ZDSecMgrEntries != NULL )
   \   000005   90....       MOV       DPTR,#ZDSecMgrEntries
   \   000008   12....       LCALL     ??Subroutine67_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_175:
   \   00000B   602D         JZ        ??ZDSecMgrEntryLookupAMIGetIndex_0
    614            {
    615              for ( index = 0; index < ZDSECMGR_ENTRY_MAX ; index++ )
   \   00000D   7800         MOV       R0,#0x0
   \   00000F   7900         MOV       R1,#0x0
    616              {
    617                if ( ZDSecMgrEntries[index].ami == ami )
   \                     ??ZDSecMgrEntryLookupAMIGetIndex_1:
   \   000011   12....       LCALL     ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   000014   F5..         MOV       ?V0,A
   \   000016   A3           INC       DPTR
   \   000017   E0           MOVX      A,@DPTR
   \   000018   3F           ADDC      A,R7
   \   000019   85..82       MOV       DPL,?V0
   \   00001C   F583         MOV       DPH,A
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   6A           XRL       A,R2
   \   000020   7003         JNZ       ??ZDSecMgrEntryLookupAMIGetIndex_2
   \   000022   A3           INC       DPTR
   \   000023   E0           MOVX      A,@DPTR
   \   000024   6B           XRL       A,R3
   \                     ??ZDSecMgrEntryLookupAMIGetIndex_2:
   \   000025   7009         JNZ       ??ZDSecMgrEntryLookupAMIGetIndex_3
    618                {
    619                  // return successful results
    620                  *entryIndex = index;
   \   000027   8C82         MOV       DPL,R4
   \   000029   8D83         MOV       DPH,R5
   \   00002B   12....       LCALL     ??Subroutine58_0 & 0xFFFF
    621          
    622                  // break from loop
    623                  return ZSuccess;
    624                }
    625              }
   \                     ??CrossCallReturnLabel_99:
   \   00002E   800C         SJMP      ??ZDSecMgrEntryLookupAMIGetIndex_4
   \                     ??ZDSecMgrEntryLookupAMIGetIndex_3:
   \   000030   08           INC       R0
   \   000031   E8           MOV       A,R0
   \   000032   7001         JNZ       ??ZDSecMgrEntryLookupAMIGetIndex_5
   \   000034   09           INC       R1
   \                     ??ZDSecMgrEntryLookupAMIGetIndex_5:
   \   000035   12....       LCALL     ?Subroutine39 & 0xFFFF
    626            }
   \                     ??CrossCallReturnLabel_105:
   \   000038   40D7         JC        ??ZDSecMgrEntryLookupAMIGetIndex_1
    627          
    628            return ZNwkUnknownDevice;
   \                     ??ZDSecMgrEntryLookupAMIGetIndex_0:
   \   00003A   79C8         MOV       R1,#-0x38
   \                     ??ZDSecMgrEntryLookupAMIGetIndex_4:
   \   00003C   02....       LJMP      ??Subroutine69_0 & 0xFFFF
    629          }
    630          
    631          /******************************************************************************
    632           * @fn          ZDSecMgrEntryFree
    633           *
    634           * @brief       Free entry.
    635           *
    636           * @param       entry - [in] valid entry
    637           *
    638           * @return      ZStatus_t
    639           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    640          void ZDSecMgrEntryFree( ZDSecMgrEntry_t* entry )
   \                     ZDSecMgrEntryFree:
    641          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
    642            APSME_LinkKeyData_t   *pApsLinkKey = NULL;
    643          
    644          #if defined ( NV_RESTORE )
    645            ZStatus_t status;
    646            uint16 entryIndex;
    647          
    648            status = ZDSecMgrEntryLookupAMIGetIndex( entry->ami, &entryIndex );
   \   00000E                ; Setup parameters for call to function ZDSecMgrEntryLookupAMIGetIndex
   \   00000E   7402         MOV       A,#0x2
   \   000010   12....       LCALL     ?XSTACK_DISP102_8
   \   000013   8E82         MOV       DPL,R6
   \   000015   8F83         MOV       DPH,R7
   \   000017   12....       LCALL     ??Subroutine62_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_112:
   \   00001A   12....       LCALL     `??ZDSecMgrEntryLookupAMIGetIndex::?relay`; Banked call to: ZDSecMgrEntryLookupAMIGetIndex
   \   00001D   E9           MOV       A,R1
   \   00001E   F5..         MOV       ?V2,A
    649          #endif
    650          
    651            pApsLinkKey = (APSME_LinkKeyData_t *)osal_mem_alloc(sizeof(APSME_LinkKeyData_t));
   \   000020                ; Setup parameters for call to function osal_mem_alloc
   \   000020   7A18         MOV       R2,#0x18
   \   000022   7B00         MOV       R3,#0x0
   \   000024   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000027   8A..         MOV       ?V4,R2
   \   000029   8B..         MOV       ?V5,R3
    652          
    653            if (pApsLinkKey != NULL)
   \   00002B   EA           MOV       A,R2
   \   00002C   45..         ORL       A,?V5
   \   00002E   6041         JZ        ??ZDSecMgrEntryFree_0
    654            {
    655              osal_memset( pApsLinkKey, 0x00, sizeof(APSME_LinkKeyData_t) );
   \   000030                ; Setup parameters for call to function osal_memset
   \   000030   7C18         MOV       R4,#0x18
   \   000032   7D00         MOV       R5,#0x0
   \   000034   7900         MOV       R1,#0x0
   \   000036   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    656          
    657              // Clear the APS Link key in NV
    658              osal_nv_write( entry->keyNvId, 0,
    659                                  sizeof(APSME_LinkKeyData_t), pApsLinkKey);
   \   000039   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   00003C                ; Setup parameters for call to function osal_nv_write
   \   00003C   78..         MOV       R0,#?V4
   \   00003E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000041   75..18       MOV       ?V6,#0x18
   \   000044   75..00       MOV       ?V7,#0x0
   \   000047   78..         MOV       R0,#?V6
   \   000049   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004C   7C00         MOV       R4,#0x0
   \   00004E   7D00         MOV       R5,#0x0
   \   000050   85..82       MOV       DPL,?V0
   \   000053   8983         MOV       DPH,R1
   \   000055   12....       LCALL     ??Subroutine62_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_113:
   \   000058   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   00005B   7404         MOV       A,#0x4
   \   00005D   12....       LCALL     ?DEALLOC_XSTACK8
    660          
    661              // set entry to invalid Key
    662              entry->keyNvId = SEC_NO_KEY_NV_ID;
   \   000060   85..82       MOV       DPL,?V0
   \   000063   85..83       MOV       DPH,?V1
   \   000066   E4           CLR       A
   \   000067   F0           MOVX      @DPTR,A
   \   000068   A3           INC       DPTR
   \   000069   F0           MOVX      @DPTR,A
    663          
    664              osal_mem_free(pApsLinkKey);
   \   00006A                ; Setup parameters for call to function osal_mem_free
   \   00006A   AA..         MOV       R2,?V4
   \   00006C   AB..         MOV       R3,?V5
   \   00006E   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    665            }
    666          
    667            // marking the entry as INVALID_NODE_ADDR
    668            entry->ami = INVALID_NODE_ADDR;
   \                     ??ZDSecMgrEntryFree_0:
   \   000071   8E82         MOV       DPL,R6
   \   000073   8F83         MOV       DPH,R7
   \   000075   74FE         MOV       A,#-0x2
   \   000077   F0           MOVX      @DPTR,A
   \   000078   A3           INC       DPTR
   \   000079   04           INC       A
   \   00007A   12....       LCALL     ?Subroutine49 & 0xFFFF
    669          
    670            // set to default value
    671            entry->authenticateOption = ZDSecMgr_Not_Authenticated;
   \                     ??CrossCallReturnLabel_74:
   \   00007D   A3           INC       DPTR
   \   00007E   A3           INC       DPTR
   \   00007F   A3           INC       DPTR
   \   000080   A3           INC       DPTR
   \   000081   E4           CLR       A
   \   000082   F0           MOVX      @DPTR,A
    672          
    673          #if defined ( NV_RESTORE )
    674            if ( status == ZSuccess )
   \   000083   E5..         MOV       A,?V2
   \   000085   6003         JZ        $+5
   \   000087   02....       LJMP      ??ZDSecMgrEntryFree_1 & 0xFFFF
    675            {
    676              ZDSecMgrUpdateNV(entryIndex);
   \   00008A   7402         MOV       A,#0x2
   \   00008C   12....       LCALL     ?XSTACK_DISP0_8
   \   00008F   12....       LCALL     ??Subroutine62_0 & 0xFFFF
    677            }
   \                     ??CrossCallReturnLabel_114:
   \   000092   EA           MOV       A,R2
   \   000093   FE           MOV       R6,A
   \   000094   EB           MOV       A,R3
   \   000095   FF           MOV       R7,A
   \   000096   EE           MOV       A,R6
   \   000097   75F005       MOV       B,#0x5
   \   00009A   A4           MUL       AB
   \   00009B   FE           MOV       R6,A
   \   00009C   A8F0         MOV       R0,B
   \   00009E   75F005       MOV       B,#0x5
   \   0000A1   EF           MOV       A,R7
   \   0000A2   A4           MUL       AB
   \   0000A3   28           ADD       A,R0
   \   0000A4   FF           MOV       R7,A
   \   0000A5   90....       MOV       DPTR,#ZDSecMgrEntries
   \   0000A8   12....       LCALL     ??Subroutine67_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_176:
   \   0000AB   603E         JZ        ??ZDSecMgrEntryFree_2
   \   0000AD                ; Setup parameters for call to function osal_nv_write
   \   0000AD   90....       MOV       DPTR,#ZDSecMgrEntries
   \   0000B0   E0           MOVX      A,@DPTR
   \   0000B1   2E           ADD       A,R6
   \   0000B2   F5..         MOV       ?V0,A
   \   0000B4   A3           INC       DPTR
   \   0000B5   E0           MOVX      A,@DPTR
   \   0000B6   3F           ADDC      A,R7
   \   0000B7   F5..         MOV       ?V1,A
   \   0000B9   78..         MOV       R0,#?V0
   \   0000BB   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000BE   75..05       MOV       ?V0,#0x5
   \   0000C1   75..00       MOV       ?V1,#0x0
   \   0000C4   78..         MOV       R0,#?V0
   \   0000C6   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000C9   EA           MOV       A,R2
   \   0000CA   75F005       MOV       B,#0x5
   \   0000CD   A4           MUL       AB
   \   0000CE   FA           MOV       R2,A
   \   0000CF   A8F0         MOV       R0,B
   \   0000D1   75F005       MOV       B,#0x5
   \   0000D4   EB           MOV       A,R3
   \   0000D5   A4           MUL       AB
   \   0000D6   28           ADD       A,R0
   \   0000D7   FB           MOV       R3,A
   \   0000D8   EA           MOV       A,R2
   \   0000D9   2402         ADD       A,#0x2
   \   0000DB   FC           MOV       R4,A
   \   0000DC   E4           CLR       A
   \   0000DD   3B           ADDC      A,R3
   \   0000DE   FD           MOV       R5,A
   \   0000DF   7A4C         MOV       R2,#0x4c
   \   0000E1   7B00         MOV       R3,#0x0
   \   0000E3   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   0000E6   7404         MOV       A,#0x4
   \   0000E8   12....       LCALL     ?DEALLOC_XSTACK8
   \                     ??ZDSecMgrEntryFree_2:
   \   0000EB                ; Setup parameters for call to function osal_nv_read
   \   0000EB   A8..         MOV       R0,?XSP + 0
   \   0000ED   A9..         MOV       R1,?XSP + 1
   \   0000EF   88..         MOV       ?V0,R0
   \   0000F1   89..         MOV       ?V1,R1
   \   0000F3   78..         MOV       R0,#?V0
   \   0000F5   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000F8   75..02       MOV       ?V0,#0x2
   \   0000FB   75..00       MOV       ?V1,#0x0
   \   0000FE   78..         MOV       R0,#?V0
   \   000100   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000103   7C00         MOV       R4,#0x0
   \   000105   7D00         MOV       R5,#0x0
   \   000107   7A4C         MOV       R2,#0x4c
   \   000109   7B00         MOV       R3,#0x0
   \   00010B   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   00010E   7404         MOV       A,#0x4
   \   000110   12....       LCALL     ?DEALLOC_XSTACK8
   \   000113   E9           MOV       A,R1
   \   000114   7054         JNZ       ??ZDSecMgrEntryFree_1
   \   000116   12....       LCALL     ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   000119   E0           MOVX      A,@DPTR
   \   00011A   64FE         XRL       A,#0xfe
   \   00011C   7003         JNZ       ??ZDSecMgrEntryFree_3
   \   00011E   A3           INC       DPTR
   \   00011F   E0           MOVX      A,@DPTR
   \   000120   F4           CPL       A
   \                     ??ZDSecMgrEntryFree_3:
   \   000121   85..82       MOV       DPL,?XSP + 0
   \   000124   85..83       MOV       DPH,?XSP + 1
   \   000127   7015         JNZ       ??ZDSecMgrEntryFree_4
   \   000129   12....       LCALL     ??Subroutine67_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_177:
   \   00012C   6014         JZ        ??ZDSecMgrEntryFree_5
   \   00012E   85..82       MOV       DPL,?XSP + 0
   \   000131   85..83       MOV       DPH,?XSP + 1
   \   000134   E0           MOVX      A,@DPTR
   \   000135   24FF         ADD       A,#-0x1
   \   000137   F0           MOVX      @DPTR,A
   \   000138   A3           INC       DPTR
   \   000139   E0           MOVX      A,@DPTR
   \   00013A   34FF         ADDC      A,#-0x1
   \   00013C   8003         SJMP      ??CrossCallReturnLabel_46
   \                     ??ZDSecMgrEntryFree_4:
   \   00013E   12....       LCALL     ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   000141   F0           MOVX      @DPTR,A
   \                     ??ZDSecMgrEntryFree_5:
   \   000142                ; Setup parameters for call to function osal_nv_write
   \   000142   A8..         MOV       R0,?XSP + 0
   \   000144   A9..         MOV       R1,?XSP + 1
   \   000146   88..         MOV       ?V0,R0
   \   000148   89..         MOV       ?V1,R1
   \   00014A   78..         MOV       R0,#?V0
   \   00014C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00014F   75..02       MOV       ?V0,#0x2
   \   000152   75..00       MOV       ?V1,#0x0
   \   000155   78..         MOV       R0,#?V0
   \   000157   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00015A   7C00         MOV       R4,#0x0
   \   00015C   7D00         MOV       R5,#0x0
   \   00015E   7A4C         MOV       R2,#0x4c
   \   000160   7B00         MOV       R3,#0x0
   \   000162   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000165   7404         MOV       A,#0x4
   \   000167   12....       LCALL     ?DEALLOC_XSTACK8
    678          #endif
    679          }
   \                     ??ZDSecMgrEntryFree_1:
   \   00016A   7404         MOV       A,#0x4
   \   00016C                REQUIRE ?Subroutine1
   \   00016C                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003   7F08         MOV       R7,#0x8
   \   000005   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine49:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8E82         MOV       DPL,R6
   \   000003   8F83         MOV       DPH,R7
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   EE           MOV       A,R6
   \   000001   2402         ADD       A,#0x2
   \   000003   F8           MOV       R0,A
   \   000004   E4           CLR       A
   \   000005   3F           ADDC      A,R7
   \   000006   F9           MOV       R1,A
   \   000007   88..         MOV       ?V0,R0
   \   000009   89..         MOV       ?V1,R1
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   2401         ADD       A,#0x1
   \   000003   F0           MOVX      @DPTR,A
   \   000004   A3           INC       DPTR
   \   000005   E0           MOVX      A,@DPTR
   \   000006   3400         ADDC      A,#0x0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   90....       MOV       DPTR,#ZDSecMgrEntries
   \   000003   E0           MOVX      A,@DPTR
   \   000004   2E           ADD       A,R6
   \   000005   F8           MOV       R0,A
   \   000006   A3           INC       DPTR
   \   000007   E0           MOVX      A,@DPTR
   \   000008   3F           ADDC      A,R7
   \   000009   8882         MOV       DPL,R0
   \   00000B   F583         MOV       DPH,A
   \   00000D   22           RET
    680          
    681          /******************************************************************************
    682           * @fn          ZDSecMgrEntryNew
    683           *
    684           * @brief       Get a new entry.
    685           *
    686           * @param       entry - [out] valid entry
    687           *
    688           * @return      ZStatus_t
    689           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    690          ZStatus_t ZDSecMgrEntryNew( ZDSecMgrEntry_t** entry )
   \                     ZDSecMgrEntryNew:
    691          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    692            uint16 index;
    693          
    694            // initialize results
    695            *entry = NULL;
   \   000005   8A82         MOV       DPL,R2
   \   000007   8B83         MOV       DPH,R3
   \   000009   12....       LCALL     ?Subroutine9 & 0xFFFF
    696          
    697            // verify data is available
    698            if ( ZDSecMgrEntries != NULL )
   \                     ??CrossCallReturnLabel_108:
   \   00000C   605F         JZ        ??ZDSecMgrEntryNew_0
    699            {
    700              // find available entry
    701              for ( index = 0; index < ZDSECMGR_ENTRY_MAX ; index++ )
   \   00000E   7C00         MOV       R4,#0x0
   \   000010   7D00         MOV       R5,#0x0
    702              {
    703                if ( ZDSecMgrEntries[index].ami == INVALID_NODE_ADDR )
   \                     ??ZDSecMgrEntryNew_1:
   \   000012   EC           MOV       A,R4
   \   000013   F8           MOV       R0,A
   \   000014   ED           MOV       A,R5
   \   000015   F9           MOV       R1,A
   \   000016   E8           MOV       A,R0
   \   000017   75F005       MOV       B,#0x5
   \   00001A   A4           MUL       AB
   \   00001B   F8           MOV       R0,A
   \   00001C   AEF0         MOV       R6,B
   \   00001E   75F005       MOV       B,#0x5
   \   000021   E9           MOV       A,R1
   \   000022   A4           MUL       AB
   \   000023   2E           ADD       A,R6
   \   000024   F9           MOV       R1,A
   \   000025   90....       MOV       DPTR,#ZDSecMgrEntries
   \   000028   E0           MOVX      A,@DPTR
   \   000029   28           ADD       A,R0
   \   00002A   FE           MOV       R6,A
   \   00002B   A3           INC       DPTR
   \   00002C   E0           MOVX      A,@DPTR
   \   00002D   39           ADDC      A,R1
   \   00002E   FF           MOV       R7,A
   \   00002F   8E82         MOV       DPL,R6
   \   000031   8F83         MOV       DPH,R7
   \   000033   E0           MOVX      A,@DPTR
   \   000034   64FE         XRL       A,#0xfe
   \   000036   7003         JNZ       ??ZDSecMgrEntryNew_2
   \   000038   A3           INC       DPTR
   \   000039   E0           MOVX      A,@DPTR
   \   00003A   F4           CPL       A
   \                     ??ZDSecMgrEntryNew_2:
   \   00003B   7023         JNZ       ??ZDSecMgrEntryNew_3
    704                {
    705                  // return successful result
    706                  *entry = &ZDSecMgrEntries[index];
   \   00003D   EE           MOV       A,R6
   \   00003E   FC           MOV       R4,A
   \   00003F   EF           MOV       A,R7
   \   000040   FD           MOV       R5,A
   \   000041   8A82         MOV       DPL,R2
   \   000043   8B83         MOV       DPH,R3
   \   000045   EC           MOV       A,R4
   \   000046   F0           MOVX      @DPTR,A
   \   000047   A3           INC       DPTR
   \   000048   ED           MOV       A,R5
   \   000049   F0           MOVX      @DPTR,A
    707          
    708                  // Set the authentication option to default
    709                  ZDSecMgrEntries[index].authenticateOption = ZDSecMgr_Not_Authenticated;
   \   00004A   90....       MOV       DPTR,#ZDSecMgrEntries
   \   00004D   E0           MOVX      A,@DPTR
   \   00004E   28           ADD       A,R0
   \   00004F   FA           MOV       R2,A
   \   000050   A3           INC       DPTR
   \   000051   E0           MOVX      A,@DPTR
   \   000052   39           ADDC      A,R1
   \   000053   8A82         MOV       DPL,R2
   \   000055   F583         MOV       DPH,A
   \   000057   A3           INC       DPTR
   \   000058   A3           INC       DPTR
   \   000059   A3           INC       DPTR
   \   00005A   A3           INC       DPTR
   \   00005B   E4           CLR       A
   \   00005C   F0           MOVX      @DPTR,A
    710          
    711                  // break from loop
    712                  return ZSuccess;
   \   00005D   F9           MOV       R1,A
   \   00005E   800F         SJMP      ??ZDSecMgrEntryNew_4
    713                }
    714              }
   \                     ??ZDSecMgrEntryNew_3:
   \   000060   0C           INC       R4
   \   000061   EC           MOV       A,R4
   \   000062   7001         JNZ       ??ZDSecMgrEntryNew_5
   \   000064   0D           INC       R5
   \                     ??ZDSecMgrEntryNew_5:
   \   000065   C3           CLR       C
   \   000066   9403         SUBB      A,#0x3
   \   000068   ED           MOV       A,R5
   \   000069   9400         SUBB      A,#0x0
   \   00006B   40A5         JC        ??ZDSecMgrEntryNew_1
    715            }
    716          
    717            return ZNwkUnknownDevice;
   \                     ??ZDSecMgrEntryNew_0:
   \   00006D   79C8         MOV       R1,#-0x38
   \                     ??ZDSecMgrEntryNew_4:
   \   00006F   02....       LJMP      ??Subroutine69_0 & 0xFFFF
    718          }
    719          
    720          /******************************************************************************
    721           * @fn          ZDSecMgrAppKeyGet
    722           *
    723           * @brief       get an APP key - option APP(MASTER or LINK) key
    724           *
    725           * @param       initNwkAddr - [in] NWK address of initiator device
    726           * @param       initExtAddr - [in] EXT address of initiator device
    727           * @param       partNwkAddr - [in] NWK address of partner device
    728           * @param       partExtAddr - [in] EXT address of partner device
    729           * @param       key         - [out] APP(MASTER or LINK) key
    730           * @param       keyType     - [out] APP(MASTER or LINK) key type
    731           *
    732           * @return      ZStatus_t
    733           */

   \                                 In  segment XDATA_I, align 1, keep-with-next
    734          uint8 ZDSecMgrAppKeyType = KEY_TYPE_APP_LINK;    // Set the default key type
   \                     ZDSecMgrAppKeyType:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for ZDSecMgrAppKeyType>`
   \   000001                REQUIRE __INIT_XDATA_I
    735                                                           // to KEY_TYPE_APP_LINK since
    736                                                           // only specific requirement
    737                                                           // right now comes from SE profile

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    738          ZStatus_t ZDSecMgrAppKeyGet( uint16  initNwkAddr,
   \                     ZDSecMgrAppKeyGet:
    739                                       uint8*  initExtAddr,
    740                                       uint16  partNwkAddr,
    741                                       uint8*  partExtAddr,
    742                                       uint8** key,
    743                                       uint8*  keyType )
    744          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    745            // Intentionally unreferenced parameters
    746            (void)initNwkAddr;
    747            (void)initExtAddr;
    748            (void)partNwkAddr;
    749            (void)partExtAddr;
    750          
    751            //---------------------------------------------------------------------------
    752            // note:
    753            // should use a robust mechanism to generate keys, for example
    754            // combine EXT addresses and call a hash function
    755            //---------------------------------------------------------------------------
    756            SSP_GetTrueRand( SEC_KEY_LEN, *key );
   \   000004                ; Setup parameters for call to function SSP_GetTrueRand
   \   000004   7404         MOV       A,#0x4
   \   000006   12....       LCALL     ?XSTACK_DISP0_8
   \   000009   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   00000C   12....       LCALL     ??Subroutine62_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_115:
   \   00000F   7910         MOV       R1,#0x10
   \   000011   12....       LCALL     `??SSP_GetTrueRand::?relay`; Banked call to: SSP_GetTrueRand
    757          
    758            *keyType = ZDSecMgrAppKeyType;
   \   000014   90....       MOV       DPTR,#ZDSecMgrAppKeyType
   \   000017   E0           MOVX      A,@DPTR
   \   000018   C0E0         PUSH      A
   \   00001A   7406         MOV       A,#0x6
   \   00001C   12....       LCALL     ?XSTACK_DISP0_8
   \   00001F   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   000022   D0E0         POP       A
   \   000024   F0           MOVX      @DPTR,A
    759          
    760            return ZSuccess;
   \   000025   7900         MOV       R1,#0x0
   \   000027   02....       LJMP      ??Subroutine64_0 & 0xFFFF
    761          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   12....       LCALL     ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_86:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine51:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F583         MOV       DPH,A
   \   000006   8882         MOV       DPL,R0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine64_0:
   \   000000   D083         POP       DPH
   \   000002   D082         POP       DPL
   \   000004   02....       LJMP      ?BRET
    762          
    763          
    764          
    765          
    766          /******************************************************************************
    767           * @fn          ZDSecMgrAppKeyReq
    768           *
    769           * @brief       Process request for APP key between two devices.
    770           *
    771           * @param       device - [in] ZDO_RequestKeyInd_t, request info
    772           *
    773           * @return      none
    774           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    775          void ZDSecMgrAppKeyReq( ZDO_RequestKeyInd_t* ind )
   \                     ZDSecMgrAppKeyReq:
    776          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 39
   \   000005   74D9         MOV       A,#-0x27
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
    777            APSME_TransportKeyReq_t req;
    778            uint8                   initExtAddr[Z_EXTADDR_LEN];
    779            uint16                  partNwkAddr;
    780            uint8                   key[SEC_KEY_LEN];
    781          
    782          
    783            // validate initiator and partner
    784            if ( ( APSME_LookupNwkAddr( ind->partExtAddr, &partNwkAddr ) == TRUE ) &&
    785                 ( APSME_LookupExtAddr( ind->srcAddr, initExtAddr ) == TRUE      )   )
   \   00000E   EE           MOV       A,R6
   \   00000F   2405         ADD       A,#0x5
   \   000011   F5..         MOV       ?V0,A
   \   000013   E4           CLR       A
   \   000014   3F           ADDC      A,R7
   \   000015   F5..         MOV       ?V1,A
   \   000017                ; Setup parameters for call to function APSME_LookupNwkAddr
   \   000017   AC..         MOV       R4,?XSP + 0
   \   000019   AD..         MOV       R5,?XSP + 1
   \   00001B   AA..         MOV       R2,?V0
   \   00001D   FB           MOV       R3,A
   \   00001E   12....       LCALL     `??APSME_LookupNwkAddr::?relay`; Banked call to: APSME_LookupNwkAddr
   \   000021   E9           MOV       A,R1
   \   000022   6401         XRL       A,#0x1
   \   000024   6003         JZ        $+5
   \   000026   02....       LJMP      ??ZDSecMgrAppKeyReq_0 & 0xFFFF
   \   000029   EE           MOV       A,R6
   \   00002A   2402         ADD       A,#0x2
   \   00002C   E4           CLR       A
   \   00002D   3F           ADDC      A,R7
   \   00002E   0E           INC       R6
   \   00002F   0E           INC       R6
   \   000030   FF           MOV       R7,A
   \   000031                ; Setup parameters for call to function APSME_LookupExtAddr
   \   000031   740F         MOV       A,#0xf
   \   000033   12....       LCALL     ?XSTACK_DISP102_8
   \   000036   8E82         MOV       DPL,R6
   \   000038   8F83         MOV       DPH,R7
   \   00003A   12....       LCALL     ??Subroutine62_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_116:
   \   00003D   12....       LCALL     `??APSME_LookupExtAddr::?relay`; Banked call to: APSME_LookupExtAddr
   \   000040   E9           MOV       A,R1
   \   000041   6401         XRL       A,#0x1
   \   000043   6003         JZ        $+5
   \   000045   02....       LJMP      ??ZDSecMgrAppKeyReq_0 & 0xFFFF
    786            {
    787              // point the key to some memory
    788              req.key = key;
   \   000048   7417         MOV       A,#0x17
   \   00004A   12....       LCALL     ?XSTACK_DISP100_8
   \   00004D   7406         MOV       A,#0x6
   \   00004F   12....       LCALL     ?XSTACK_DISP0_8
   \   000052   12....       LCALL     ??Subroutine65_0 & 0xFFFF
    789          
    790              // get an APP key - option APP (MASTER or LINK) key
    791              if ( ZDSecMgrAppKeyGet( ind->srcAddr,
    792                                      initExtAddr,
    793                                      partNwkAddr,
    794                                      ind->partExtAddr,
    795                                      &req.key,
    796                                      &req.keyType ) == ZSuccess )
   \                     ??CrossCallReturnLabel_137:
   \   000055                ; Setup parameters for call to function ZDSecMgrAppKeyGet
   \   000055   7404         MOV       A,#0x4
   \   000057   12....       LCALL     ?XSTACK_DISP0_8
   \   00005A   8582..       MOV       ?V2,DPL
   \   00005D   8583..       MOV       ?V3,DPH
   \   000060   78..         MOV       R0,#?V2
   \   000062   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000065   7408         MOV       A,#0x8
   \   000067   12....       LCALL     ?XSTACK_DISP0_8
   \   00006A   8582..       MOV       ?V2,DPL
   \   00006D   8583..       MOV       ?V3,DPH
   \   000070   78..         MOV       R0,#?V2
   \   000072   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000075   78..         MOV       R0,#?V0
   \   000077   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00007A   7406         MOV       A,#0x6
   \   00007C   12....       LCALL     ?XSTACK_DISP0_8
   \   00007F   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000082   7417         MOV       A,#0x17
   \   000084   12....       LCALL     ?XSTACK_DISP102_8
   \   000087   8E82         MOV       DPL,R6
   \   000089   8F83         MOV       DPH,R7
   \   00008B   12....       LCALL     ??Subroutine62_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_117:
   \   00008E   12....       LCALL     `??ZDSecMgrAppKeyGet::?relay`; Banked call to: ZDSecMgrAppKeyGet
   \   000091   7408         MOV       A,#0x8
   \   000093   12....       LCALL     ?DEALLOC_XSTACK8
   \   000096   E9           MOV       A,R1
   \   000097   7070         JNZ       ??ZDSecMgrAppKeyReq_0
    797              {
    798                // always secure
    799                req.nwkSecure = TRUE;
   \   000099   740C         MOV       A,#0xc
   \   00009B   12....       LCALL     ?XSTACK_DISP0_8
   \   00009E   7401         MOV       A,#0x1
   \   0000A0   F0           MOVX      @DPTR,A
    800                req.apsSecure = TRUE;
   \   0000A1   740B         MOV       A,#0xb
   \   0000A3   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A6   7401         MOV       A,#0x1
   \   0000A8   F0           MOVX      @DPTR,A
    801                req.tunnel    = NULL;
   \   0000A9   740D         MOV       A,#0xd
   \   0000AB   12....       LCALL     ?XSTACK_DISP0_8
   \   0000AE   12....       LCALL     ?Subroutine14 & 0xFFFF
    802          
    803                // send key to initiator device
    804                req.dstAddr   = ind->srcAddr;
   \                     ??CrossCallReturnLabel_8:
   \   0000B1   7402         MOV       A,#0x2
   \   0000B3   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B6   12....       LCALL     ??Subroutine65_0 & 0xFFFF
    805                req.extAddr   = ind->partExtAddr;
   \                     ??CrossCallReturnLabel_138:
   \   0000B9   7408         MOV       A,#0x8
   \   0000BB   12....       LCALL     ?XSTACK_DISP0_8
   \   0000BE   E5..         MOV       A,?V0
   \   0000C0   F0           MOVX      @DPTR,A
   \   0000C1   A3           INC       DPTR
   \   0000C2   E5..         MOV       A,?V1
   \   0000C4   F0           MOVX      @DPTR,A
    806                req.initiator = TRUE;
   \   0000C5   740A         MOV       A,#0xa
   \   0000C7   12....       LCALL     ?XSTACK_DISP0_8
   \   0000CA   7401         MOV       A,#0x1
   \   0000CC   F0           MOVX      @DPTR,A
    807                APSME_TransportKeyReq( &req );
   \   0000CD                ; Setup parameters for call to function APSME_TransportKeyReq
   \   0000CD   04           INC       A
   \   0000CE   12....       LCALL     ?XSTACK_DISP101_8
   \   0000D1   12....       LCALL     `??APSME_TransportKeyReq::?relay`; Banked call to: APSME_TransportKeyReq
    808          
    809                // send key to partner device
    810                req.dstAddr   = partNwkAddr;
   \   0000D4   12....       LCALL     ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_166:
   \   0000D7   7402         MOV       A,#0x2
   \   0000D9   12....       LCALL     ?XSTACK_DISP0_8
   \   0000DC   12....       LCALL     ??Subroutine65_0 & 0xFFFF
    811                req.extAddr   = initExtAddr;
   \                     ??CrossCallReturnLabel_139:
   \   0000DF   740F         MOV       A,#0xf
   \   0000E1   12....       LCALL     ?XSTACK_DISP100_8
   \   0000E4   7408         MOV       A,#0x8
   \   0000E6   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E9   12....       LCALL     ??Subroutine65_0 & 0xFFFF
    812                req.initiator = FALSE;
   \                     ??CrossCallReturnLabel_140:
   \   0000EC   740A         MOV       A,#0xa
   \   0000EE   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F1   E4           CLR       A
   \   0000F2   F0           MOVX      @DPTR,A
    813          
    814                APSME_TransportKeyReq( &req );
   \   0000F3                ; Setup parameters for call to function APSME_TransportKeyReq
   \   0000F3   7402         MOV       A,#0x2
   \   0000F5   12....       LCALL     ?XSTACK_DISP101_8
   \   0000F8   12....       LCALL     `??APSME_TransportKeyReq::?relay`; Banked call to: APSME_TransportKeyReq
    815          
    816                // clear copy of key in RAM
    817                osal_memset( key, 0x00, SEC_KEY_LEN);
   \   0000FB                ; Setup parameters for call to function osal_memset
   \   0000FB   7C10         MOV       R4,#0x10
   \   0000FD   7D00         MOV       R5,#0x0
   \   0000FF   7900         MOV       R1,#0x0
   \   000101   7417         MOV       A,#0x17
   \   000103   12....       LCALL     ?XSTACK_DISP101_8
   \   000106   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    818          
    819              }
    820            }
    821          }
   \                     ??ZDSecMgrAppKeyReq_0:
   \   000109   7427         MOV       A,#0x27
   \   00010B   02....       LJMP      ?Subroutine3 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   E4           CLR       A
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   12....       LCALL     ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   000006   12....       LCALL     ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_168:
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine72_0
   \   000003                ; // Fall through to label ??Subroutine72_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine72_0:
   \   000000   7F04         MOV       R7,#0x4
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    822          
    823          /******************************************************************************
    824           * @fn          ZDSecMgrTclkReq
    825           *
    826           * @brief       Process request for TCLK.
    827           *
    828           * @param       device - [in] ZDO_RequestKeyInd_t, request info
    829           *
    830           * @return      none
    831           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    832          void ZDSecMgrTclkReq( ZDO_RequestKeyInd_t* ind )
   \                     ZDSecMgrTclkReq:
    833          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 59
   \   000005   74C5         MOV       A,#-0x3b
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
    834            APSME_TransportKeyReq_t req;
    835            uint8                   initExtAddr[Z_EXTADDR_LEN];
    836            uint16                  partNwkAddr;
    837            uint8                   key[SEC_KEY_LEN];
    838            APSME_TCLKDevEntry_t    TCLKDevEntry;
    839            uint8                   found;
    840              
    841            // validate initiator and partner
    842            if ( ( ( APSME_LookupNwkAddr( ind->partExtAddr, &partNwkAddr ) == TRUE ) || ( ind->keyType != KEY_TYPE_APP_MASTER ) ) &&
    843                 (   APSME_LookupExtAddr( ind->srcAddr, initExtAddr )      == TRUE ) )
   \   00000E                ; Setup parameters for call to function APSME_LookupNwkAddr
   \   00000E   7401         MOV       A,#0x1
   \   000010   12....       LCALL     ?XSTACK_DISP102_8
   \   000013   EE           MOV       A,R6
   \   000014   2405         ADD       A,#0x5
   \   000016   FA           MOV       R2,A
   \   000017   E4           CLR       A
   \   000018   3F           ADDC      A,R7
   \   000019   FB           MOV       R3,A
   \   00001A   12....       LCALL     `??APSME_LookupNwkAddr::?relay`; Banked call to: APSME_LookupNwkAddr
   \   00001D   E9           MOV       A,R1
   \   00001E   6401         XRL       A,#0x1
   \   000020   6010         JZ        ??ZDSecMgrTclkReq_0
   \   000022   8E82         MOV       DPL,R6
   \   000024   8F83         MOV       DPH,R7
   \   000026   A3           INC       DPTR
   \   000027   A3           INC       DPTR
   \   000028   A3           INC       DPTR
   \   000029   A3           INC       DPTR
   \   00002A   E0           MOVX      A,@DPTR
   \   00002B   6402         XRL       A,#0x2
   \   00002D   7003         JNZ       $+5
   \   00002F   02....       LJMP      ??ZDSecMgrTclkReq_1 & 0xFFFF
   \                     ??ZDSecMgrTclkReq_0:
   \   000032   EE           MOV       A,R6
   \   000033   2402         ADD       A,#0x2
   \   000035   E4           CLR       A
   \   000036   3F           ADDC      A,R7
   \   000037   0E           INC       R6
   \   000038   0E           INC       R6
   \   000039   FF           MOV       R7,A
   \   00003A                ; Setup parameters for call to function APSME_LookupExtAddr
   \   00003A   7410         MOV       A,#0x10
   \   00003C   12....       LCALL     ?XSTACK_DISP102_8
   \   00003F   8E82         MOV       DPL,R6
   \   000041   8F83         MOV       DPH,R7
   \   000043   12....       LCALL     ??Subroutine62_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_118:
   \   000046   12....       LCALL     `??APSME_LookupExtAddr::?relay`; Banked call to: APSME_LookupExtAddr
   \   000049   E9           MOV       A,R1
   \   00004A   6401         XRL       A,#0x1
   \   00004C   6003         JZ        $+5
   \   00004E   02....       LJMP      ??ZDSecMgrTclkReq_1 & 0xFFFF
    844            {
    845              // point the key to some memory
    846              req.key = key;
   \   000051   742B         MOV       A,#0x2b
   \   000053   12....       LCALL     ?XSTACK_DISP100_8
   \   000056   7407         MOV       A,#0x7
   \   000058   12....       LCALL     ?XSTACK_DISP0_8
   \   00005B   12....       LCALL     ??Subroutine65_0 & 0xFFFF
    847          
    848              //Search for the entry
    849              APSME_SearchTCLinkKeyEntry(initExtAddr,&found, &TCLKDevEntry);
   \                     ??CrossCallReturnLabel_141:
   \   00005E                ; Setup parameters for call to function APSME_SearchTCLinkKeyEntry
   \   00005E   7418         MOV       A,#0x18
   \   000060   12....       LCALL     ?XSTACK_DISP100_8
   \   000063   88..         MOV       ?V0,R0
   \   000065   89..         MOV       ?V1,R1
   \   000067   78..         MOV       R0,#?V0
   \   000069   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00006C   7402         MOV       A,#0x2
   \   00006E   12....       LCALL     ?XSTACK_DISP102_8
   \   000071   7412         MOV       A,#0x12
   \   000073   12....       LCALL     ?XSTACK_DISP101_8
   \   000076   12....       LCALL     `??APSME_SearchTCLinkKeyEntry::?relay`; Banked call to: APSME_SearchTCLinkKeyEntry
   \   000079   7402         MOV       A,#0x2
   \   00007B   12....       LCALL     ?DEALLOC_XSTACK8
    850          
    851              //If found, generate the key accordingly to the key attribute
    852              if(found)
   \   00007E   85..82       MOV       DPL,?XSP + 0
   \   000081   85..83       MOV       DPH,?XSP + 1
   \   000084   E0           MOVX      A,@DPTR
   \   000085   606B         JZ        ??ZDSecMgrTclkReq_1
    853              {
    854                //Generate key from the seed, which would be the unique key
    855                ZDSecMgrGenerateKeyFromSeed(TCLKDevEntry.extAddr,TCLKDevEntry.SeedShift_IcIndex,req.key);
   \   000087                ; Setup parameters for call to function ZDSecMgrGenerateKeyFromSeed
   \   000087   7407         MOV       A,#0x7
   \   000089   12....       LCALL     ?XSTACK_DISP0_8
   \   00008C   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   00008F   742A         MOV       A,#0x2a
   \   000091   12....       LCALL     ?XSTACK_DISP0_8
   \   000094   E0           MOVX      A,@DPTR
   \   000095   F9           MOV       R1,A
   \   000096   7420         MOV       A,#0x20
   \   000098   12....       LCALL     ?XSTACK_DISP0_8
   \   00009B   AA82         MOV       R2,DPL
   \   00009D   AB83         MOV       R3,DPH
   \   00009F   12....       LCALL     `??ZDSecMgrGenerateKeyFromSeed::?relay`; Banked call to: ZDSecMgrGenerateKeyFromSeed
    856              
    857                // always secure
    858                req.nwkSecure = TRUE;
   \   0000A2   740D         MOV       A,#0xd
   \   0000A4   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A7   7401         MOV       A,#0x1
   \   0000A9   F0           MOVX      @DPTR,A
    859                req.apsSecure = TRUE;
   \   0000AA   740C         MOV       A,#0xc
   \   0000AC   12....       LCALL     ?XSTACK_DISP0_8
   \   0000AF   7401         MOV       A,#0x1
   \   0000B1   F0           MOVX      @DPTR,A
    860                req.tunnel    = NULL;
   \   0000B2   740E         MOV       A,#0xe
   \   0000B4   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B7   12....       LCALL     ?Subroutine14 & 0xFFFF
    861          
    862                // send key to initiator device
    863                req.dstAddr   = ind->srcAddr;
   \                     ??CrossCallReturnLabel_9:
   \   0000BA   7403         MOV       A,#0x3
   \   0000BC   12....       LCALL     ?XSTACK_DISP0_8
   \   0000BF   12....       LCALL     ??Subroutine65_0 & 0xFFFF
    864                req.extAddr   = initExtAddr;
   \                     ??CrossCallReturnLabel_142:
   \   0000C2   7410         MOV       A,#0x10
   \   0000C4   12....       LCALL     ?XSTACK_DISP100_8
   \   0000C7   7409         MOV       A,#0x9
   \   0000C9   12....       LCALL     ?XSTACK_DISP0_8
   \   0000CC   12....       LCALL     ?Subroutine19 & 0xFFFF
    865                req.initiator = TRUE;
   \                     ??CrossCallReturnLabel_17:
   \   0000CF   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D2   7401         MOV       A,#0x1
   \   0000D4   F0           MOVX      @DPTR,A
    866                req.keyType   = KEY_TYPE_TC_LINK;
   \   0000D5   7405         MOV       A,#0x5
   \   0000D7   12....       LCALL     ?XSTACK_DISP0_8
   \   0000DA   7404         MOV       A,#0x4
   \   0000DC   F0           MOVX      @DPTR,A
    867                  
    868                APSME_TransportKeyReq( &req );
   \   0000DD                ; Setup parameters for call to function APSME_TransportKeyReq
   \   0000DD   14           DEC       A
   \   0000DE   12....       LCALL     ?XSTACK_DISP101_8
   \   0000E1   12....       LCALL     `??APSME_TransportKeyReq::?relay`; Banked call to: APSME_TransportKeyReq
    869                  
    870                // clear copy of key in RAM
    871                osal_memset( key, 0x00, SEC_KEY_LEN);
   \   0000E4                ; Setup parameters for call to function osal_memset
   \   0000E4   7C10         MOV       R4,#0x10
   \   0000E6   7D00         MOV       R5,#0x0
   \   0000E8   7900         MOV       R1,#0x0
   \   0000EA   742B         MOV       A,#0x2b
   \   0000EC   12....       LCALL     ?XSTACK_DISP101_8
   \   0000EF   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    872              
    873              }
    874            }
    875          }
   \                     ??ZDSecMgrTclkReq_1:
   \   0000F2   743B         MOV       A,#0x3b
   \   0000F4   02....       LJMP      ?Subroutine4 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   E8           MOV       A,R0
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   E9           MOV       A,R1
   \   000004   F0           MOVX      @DPTR,A
   \   000005                ; Setup parameters for call to function APSME_GetRequest
   \   000005   740B         MOV       A,#0xb
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine70_0
   \   000003                ; // Fall through to label ??Subroutine70_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine70_0:
   \   000000   7F02         MOV       R7,#0x2
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    876          
    877          /******************************************************************************
    878           * @fn          ZDSecMgrAppConfKeyReq
    879           *
    880           * @brief       Process request for APP key between two devices.
    881           *
    882           * @param       device - [in] ZDO_VerifyKeyInd_t, request info
    883           *
    884           * @return      none
    885           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    886          void ZDSecMgrAppConfKeyReq( ZDO_VerifyKeyInd_t* ind )
   \                     ZDSecMgrAppConfKeyReq:
    887          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    888            APSME_ConfirmKeyReq_t   req;
    889          
    890            // send key to initiator device
    891            req.dstAddr      = ind->srcAddr;
    892            req.status       = ind->verifyKeyStatus;
    893            req.dstExtAddr   = ind->extAddr;
    894            req.keyType      = ind->keyType;
    895          
    896            if ( ( ZSTACK_DEVICE_BUILD & DEVICE_BUILD_COORDINATOR ) != 0 )
    897            {
    898              APSME_ConfirmKeyReq( &req );
    899            }
    900            
    901          }
   \   000000   02....       LJMP      ?BRET
    902          
    903          
    904          /******************************************************************************
    905           * @fn          ZDSecMgrSendNwkKey
    906           *
    907           * @brief       Send NWK key to device joining network.
    908           *
    909           * @param       device - [in] ZDSecMgrDevice_t, device info
    910           *
    911           * @return      ZStatus_t
    912           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    913          ZStatus_t ZDSecMgrSendNwkKey( ZDSecMgrDevice_t* device )
   \                     ZDSecMgrSendNwkKey:
    914          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 34
   \   000005   74DE         MOV       A,#-0x22
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
    915            ZStatus_t status;
    916            APSME_TransportKeyReq_t req;
    917            APSDE_FrameTunnel_t tunnel;
    918            nwkKeyDesc tmpKey;
    919          
    920            req.dstAddr   = device->nwkAddr;
   \   00000E   8E82         MOV       DPL,R6
   \   000010   8F83         MOV       DPH,R7
   \   000012   12....       LCALL     ??Subroutine66_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_156:
   \   000015   7404         MOV       A,#0x4
   \   000017   12....       LCALL     ?XSTACK_DISP0_8
   \   00001A   12....       LCALL     ??Subroutine65_0 & 0xFFFF
    921            req.extAddr   = device->extAddr;
   \                     ??CrossCallReturnLabel_143:
   \   00001D   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   000020   8882         MOV       DPL,R0
   \   000022   F583         MOV       DPH,A
   \   000024   12....       LCALL     ??Subroutine66_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_157:
   \   000027   740A         MOV       A,#0xa
   \   000029   12....       LCALL     ?XSTACK_DISP0_8
   \   00002C   12....       LCALL     ??Subroutine65_0 & 0xFFFF
    922          
    923            req.keyType   = KEY_TYPE_NWK;
   \                     ??CrossCallReturnLabel_144:
   \   00002F   7406         MOV       A,#0x6
   \   000031   12....       LCALL     ?XSTACK_DISP0_8
   \   000034   7401         MOV       A,#0x1
   \   000036   F0           MOVX      @DPTR,A
    924          
    925            // get the Active Key into a local variable
    926            if ( NLME_ReadNwkKeyInfo( 0, sizeof(tmpKey), &tmpKey,
    927                                     ZCD_NV_NWK_ACTIVE_KEY_INFO ) != SUCCESS )
   \   000037                ; Setup parameters for call to function NLME_ReadNwkKeyInfo
   \   000037   75..3A       MOV       ?V2,#0x3a
   \   00003A   75..00       MOV       ?V3,#0x0
   \   00003D   78..         MOV       R0,#?V2
   \   00003F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000042   7413         MOV       A,#0x13
   \   000044   12....       LCALL     ?XSTACK_DISP100_8
   \   000047   88..         MOV       ?V2,R0
   \   000049   89..         MOV       ?V3,R1
   \   00004B   78..         MOV       R0,#?V2
   \   00004D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000050   7C11         MOV       R4,#0x11
   \   000052   7D00         MOV       R5,#0x0
   \   000054   7A00         MOV       R2,#0x0
   \   000056   7B00         MOV       R3,#0x0
   \   000058   12....       LCALL     `??NLME_ReadNwkKeyInfo::?relay`; Banked call to: NLME_ReadNwkKeyInfo
   \   00005B   7404         MOV       A,#0x4
   \   00005D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000060   E9           MOV       A,R1
   \   000061   600D         JZ        ??ZDSecMgrSendNwkKey_0
    928            {
    929              // set key data to all 0s if NV read fails
    930              osal_memset(&tmpKey, 0x00, sizeof(tmpKey));
   \   000063                ; Setup parameters for call to function osal_memset
   \   000063   7C11         MOV       R4,#0x11
   \   000065   7D00         MOV       R5,#0x0
   \   000067   7900         MOV       R1,#0x0
   \   000069   EC           MOV       A,R4
   \   00006A   12....       LCALL     ?XSTACK_DISP101_8
   \   00006D   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    931            }
    932          
    933            if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD )
    934            {
    935              // set values
    936              req.keySeqNum = tmpKey.keySeqNum;
   \                     ??ZDSecMgrSendNwkKey_0:
   \   000070   7411         MOV       A,#0x11
   \   000072   12....       LCALL     ?XSTACK_DISP0_8
   \   000075   E0           MOVX      A,@DPTR
   \   000076   C0E0         PUSH      A
   \   000078   7407         MOV       A,#0x7
   \   00007A   12....       LCALL     ?XSTACK_DISP0_8
   \   00007D   D0E0         POP       A
   \   00007F   F0           MOVX      @DPTR,A
    937              req.key       = tmpKey.key;
   \   000080   7412         MOV       A,#0x12
   \   000082   12....       LCALL     ?XSTACK_DISP0_8
   \   000085   A882         MOV       R0,DPL
   \   000087   A983         MOV       R1,DPH
   \   000089   7408         MOV       A,#0x8
   \   00008B   12....       LCALL     ?XSTACK_DISP0_8
   \   00008E   12....       LCALL     ??Subroutine65_0 & 0xFFFF
    938          
    939              //devtag.pro.security.todo - make sure that if there is no link key the NWK
    940              //key isn't used to secure the frame at the APS layer -- since the receiving
    941              //device may not have a NWK key yet
    942              req.apsSecure = TRUE;
   \                     ??CrossCallReturnLabel_145:
   \   000091   740D         MOV       A,#0xd
   \   000093   12....       LCALL     ?XSTACK_DISP0_8
   \   000096   7401         MOV       A,#0x1
   \   000098   F0           MOVX      @DPTR,A
    943          
    944              // check if using secure hop to parent
    945              if ( device->parentAddr == NLME_GetShortAddr() )
   \   000099                ; Setup parameters for call to function NLME_GetShortAddr
   \   000099   12....       LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   00009C   EE           MOV       A,R6
   \   00009D   2404         ADD       A,#0x4
   \   00009F   F8           MOV       R0,A
   \   0000A0   E4           CLR       A
   \   0000A1   3F           ADDC      A,R7
   \   0000A2   F9           MOV       R1,A
   \   0000A3   8882         MOV       DPL,R0
   \   0000A5   8983         MOV       DPH,R1
   \   0000A7   E0           MOVX      A,@DPTR
   \   0000A8   6A           XRL       A,R2
   \   0000A9   7003         JNZ       ??ZDSecMgrSendNwkKey_1
   \   0000AB   A3           INC       DPTR
   \   0000AC   E0           MOVX      A,@DPTR
   \   0000AD   6B           XRL       A,R3
   \                     ??ZDSecMgrSendNwkKey_1:
   \   0000AE   7011         JNZ       ??ZDSecMgrSendNwkKey_2
    946              {
    947                req.nwkSecure = FALSE;
   \   0000B0   740E         MOV       A,#0xe
   \   0000B2   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B5   E4           CLR       A
   \   0000B6   F0           MOVX      @DPTR,A
    948                req.tunnel    = NULL;
   \   0000B7   740F         MOV       A,#0xf
   \   0000B9   12....       LCALL     ?XSTACK_DISP0_8
   \   0000BC   E4           CLR       A
   \   0000BD   F0           MOVX      @DPTR,A
   \   0000BE   A3           INC       DPTR
   \   0000BF   802C         SJMP      ??ZDSecMgrSendNwkKey_3
    949              }
    950              else
    951              {
    952                req.nwkSecure   = TRUE;
   \                     ??ZDSecMgrSendNwkKey_2:
   \   0000C1   740E         MOV       A,#0xe
   \   0000C3   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C6   7401         MOV       A,#0x1
   \   0000C8   F0           MOVX      @DPTR,A
    953                req.tunnel      = &tunnel;
   \   0000C9   740F         MOV       A,#0xf
   \   0000CB   12....       LCALL     ?XSTACK_DISP0_8
   \   0000CE   E5..         MOV       A,?XSP + 0
   \   0000D0   F0           MOVX      @DPTR,A
   \   0000D1   A3           INC       DPTR
   \   0000D2   E5..         MOV       A,?XSP + 1
   \   0000D4   12....       LCALL     ?Subroutine17 & 0xFFFF
    954                req.tunnel->tna = device->parentAddr;
    955                req.tunnel->dea = device->extAddr;
    956              }
    957            }
   \                     ??CrossCallReturnLabel_12:
   \   0000D7   85..82       MOV       DPL,?XSP + 0
   \   0000DA   85..83       MOV       DPH,?XSP + 1
   \   0000DD   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   0000E0   F8           MOV       R0,A
   \   0000E1   A3           INC       DPTR
   \   0000E2   E0           MOVX      A,@DPTR
   \   0000E3   F9           MOV       R1,A
   \   0000E4   7402         MOV       A,#0x2
   \   0000E6   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E9   E8           MOV       A,R0
   \   0000EA   F0           MOVX      @DPTR,A
   \   0000EB   A3           INC       DPTR
   \   0000EC   E9           MOV       A,R1
   \                     ??ZDSecMgrSendNwkKey_3:
   \   0000ED   F0           MOVX      @DPTR,A
    958            else
    959            {
    960              // default values
    961              //devtag.0604.verify
    962              req.nwkSecure = TRUE;
    963              req.apsSecure = FALSE;
    964              req.tunnel    = NULL;
    965          
    966              if ( device->parentAddr != NLME_GetShortAddr() )
    967              {
    968                req.dstAddr = device->parentAddr;
    969              }
    970          
    971              // send the real key
    972              if ( zgPreConfigKeys == FALSE )
    973              {
    974                req.keySeqNum = tmpKey.keySeqNum;
    975                req.key       = tmpKey.key;
    976          
    977                // check if using secure hop to to parent
    978                if ( device->parentAddr == NLME_GetShortAddr() )
    979                {
    980                  req.nwkSecure = FALSE;
    981                }
    982              }
    983              else
    984              {
    985                // this is to send the all zero key when the NWK key has been preconfigured
    986                req.key       = NULL;
    987                req.keySeqNum = 0;
    988              }
    989            }
    990          
    991            status = APSME_TransportKeyReq( &req );
   \   0000EE                ; Setup parameters for call to function APSME_TransportKeyReq
   \   0000EE   7404         MOV       A,#0x4
   \   0000F0   12....       LCALL     ?XSTACK_DISP101_8
   \   0000F3   12....       LCALL     `??APSME_TransportKeyReq::?relay`; Banked call to: APSME_TransportKeyReq
   \   0000F6   E9           MOV       A,R1
   \   0000F7   FE           MOV       R6,A
    992          
    993            // clear copy of key in RAM before return
    994            osal_memset( &tmpKey, 0x00, sizeof(nwkKeyDesc) );
   \   0000F8                ; Setup parameters for call to function osal_memset
   \   0000F8   7C11         MOV       R4,#0x11
   \   0000FA   7D00         MOV       R5,#0x0
   \   0000FC   7900         MOV       R1,#0x0
   \   0000FE   EC           MOV       A,R4
   \   0000FF   12....       LCALL     ?XSTACK_DISP101_8
   \   000102   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    995          
    996            return status;
   \   000105   EE           MOV       A,R6
   \   000106   F9           MOV       R1,A
   \   000107   7422         MOV       A,#0x22
   \   000109   02....       LJMP      ?Subroutine3 & 0xFFFF
    997          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8882         MOV       DPL,R0
   \   000003   8983         MOV       DPH,R1
   \   000005   12....       LCALL     ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_169:
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   E8           MOV       A,R0
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   E9           MOV       A,R1
   \   000004   F0           MOVX      @DPTR,A
   \   000005                ; Setup parameters for call to function osal_memcpy
   \   000005   85..82       MOV       DPL,?V0
   \   000008   85..83       MOV       DPH,?V1
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   22           RET
    998          
    999          /******************************************************************************
   1000           * @fn          ZDSecMgrDeviceRemoveByExtAddr
   1001           *
   1002           * @brief       Remove device entry by its ext address.
   1003           *
   1004           * @param       pAddr - pointer to the extended address
   1005           *
   1006           * @return      ZStatus_t
   1007           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1008          ZStatus_t ZDSecMgrDeviceRemoveByExtAddr( uint8 *pAddr )
   \                     ZDSecMgrDeviceRemoveByExtAddr:
   1009          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1010            ZDSecMgrEntry_t *pEntry;
   1011            uint8           retValue;
   1012          
   1013            retValue = (uint8)ZDSecMgrEntryLookupExt( pAddr, &pEntry );
   \   00000A                ; Setup parameters for call to function ZDSecMgrEntryLookupExt
   \   00000A   AC..         MOV       R4,?XSP + 0
   \   00000C   AD..         MOV       R5,?XSP + 1
   \   00000E   12....       LCALL     `??ZDSecMgrEntryLookupExt::?relay`; Banked call to: ZDSecMgrEntryLookupExt
   \   000011   E9           MOV       A,R1
   \   000012   FE           MOV       R6,A
   1014          
   1015            if( retValue == ZSuccess )
   \   000013   700C         JNZ       ??ZDSecMgrDeviceRemoveByExtAddr_0
   1016            {
   1017              // remove device from entry data
   1018              ZDSecMgrEntryFree( pEntry );
   \   000015                ; Setup parameters for call to function ZDSecMgrEntryFree
   \   000015   85..82       MOV       DPL,?XSP + 0
   \   000018   85..83       MOV       DPH,?XSP + 1
   \   00001B   12....       LCALL     ??Subroutine62_0 & 0xFFFF
   1019            }
   \                     ??CrossCallReturnLabel_119:
   \   00001E   12....       LCALL     `??ZDSecMgrEntryFree::?relay`; Banked call to: ZDSecMgrEntryFree
   1020          
   1021            return retValue;
   \                     ??ZDSecMgrDeviceRemoveByExtAddr_0:
   \   000021   EE           MOV       A,R6
   \   000022   F9           MOV       R1,A
   \   000023                REQUIRE ?Subroutine7
   \   000023                ; // Fall through to label ?Subroutine7
   1022          }
   1023          
   1024          /******************************************************************************
   1025           * @fn          ZDSecMgrDeviceRemove
   1026           *
   1027           * @brief       Remove device from network.
   1028           *
   1029           * @param       device - [in] ZDSecMgrDevice_t, device info
   1030           *
   1031           * @return      none
   1032           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1033          void ZDSecMgrDeviceRemove( ZDSecMgrDevice_t* device )
   \                     ZDSecMgrDeviceRemove:
   1034          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 19
   \   000005   74ED         MOV       A,#-0x13
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   1035            APSME_RemoveDeviceReq_t remDevReq;
   1036            NLME_LeaveReq_t         leaveReq;
   1037            associated_devices_t*   assoc;
   1038            uint8 TC_ExtAddr[Z_EXTADDR_LEN];
   1039          
   1040            // check if parent, remove the device
   1041            if ( device->parentAddr == NLME_GetShortAddr() )
   \   00000E                ; Setup parameters for call to function NLME_GetShortAddr
   \   00000E   12....       LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000011   8A..         MOV       ?V0,R2
   \   000013   8B..         MOV       ?V1,R3
   \   000015   8E82         MOV       DPL,R6
   \   000017   8F83         MOV       DPH,R7
   \   000019   A3           INC       DPTR
   \   00001A   A3           INC       DPTR
   \   00001B   12....       LCALL     ??Subroutine61_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_129:
   \   00001E   EE           MOV       A,R6
   \   00001F   2402         ADD       A,#0x2
   \   000021   F8           MOV       R0,A
   \   000022   E4           CLR       A
   \   000023   3F           ADDC      A,R7
   \   000024   F9           MOV       R1,A
   \   000025   E5..         MOV       A,?V0
   \   000027   6A           XRL       A,R2
   \   000028   7003         JNZ       ??ZDSecMgrDeviceRemove_0
   \   00002A   E5..         MOV       A,?V1
   \   00002C   6B           XRL       A,R3
   \                     ??ZDSecMgrDeviceRemove_0:
   \   00002D   6003         JZ        $+5
   \   00002F   02....       LJMP      ??ZDSecMgrDeviceRemove_1 & 0xFFFF
   1042            {
   1043              // this is the parent of the device
   1044              leaveReq.extAddr        = device->extAddr;
   \   000032   8882         MOV       DPL,R0
   \   000034   8983         MOV       DPH,R1
   \   000036   12....       LCALL     ??Subroutine62_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_120:
   \   000039   7401         MOV       A,#0x1
   \   00003B   12....       LCALL     ?XSTACK_DISP0_8
   \   00003E   12....       LCALL     ?Subroutine13 & 0xFFFF
   1045              leaveReq.removeChildren = FALSE;
   \                     ??CrossCallReturnLabel_6:
   \   000041   12....       LCALL     ?XSTACK_DISP0_8
   \   000044   E4           CLR       A
   \   000045   F0           MOVX      @DPTR,A
   1046              leaveReq.rejoin         = FALSE;
   \   000046   7404         MOV       A,#0x4
   \   000048   12....       LCALL     ?XSTACK_DISP0_8
   \   00004B   E4           CLR       A
   \   00004C   F0           MOVX      @DPTR,A
   1047          
   1048              // find child association
   1049              assoc = AssocGetWithExt( device->extAddr );
   \   00004D                ; Setup parameters for call to function AssocGetWithExt
   \   00004D   8882         MOV       DPL,R0
   \   00004F   8983         MOV       DPH,R1
   \   000051   12....       LCALL     ??Subroutine62_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_121:
   \   000054   12....       LCALL     `??AssocGetWithExt::?relay`; Banked call to: AssocGetWithExt
   \   000057   8A..         MOV       ?V0,R2
   \   000059   8B..         MOV       ?V1,R3
   \   00005B   A8..         MOV       R0,?V0
   \   00005D   A9..         MOV       R1,?V1
   1050          
   1051              if ( ( assoc != NULL                            ) &&
   1052                   ( assoc->nodeRelation >= CHILD_RFD         ) &&
   1053                   ( assoc->nodeRelation <= CHILD_FFD_RX_IDLE )    )
   \   00005F   E8           MOV       A,R0
   \   000060   49           ORL       A,R1
   \   000061   6030         JZ        ??ZDSecMgrDeviceRemove_2
   \   000063   8882         MOV       DPL,R0
   \   000065   8983         MOV       DPH,R1
   \   000067   A3           INC       DPTR
   \   000068   A3           INC       DPTR
   \   000069   A3           INC       DPTR
   \   00006A   A3           INC       DPTR
   \   00006B   E0           MOVX      A,@DPTR
   \   00006C   6025         JZ        ??ZDSecMgrDeviceRemove_2
   \   00006E   C3           CLR       C
   \   00006F   9405         SUBB      A,#0x5
   \   000071   5020         JNC       ??ZDSecMgrDeviceRemove_2
   1054              {
   1055                // check if associated device is authenticated
   1056                if ( assoc->devStatus & DEV_SEC_AUTH_STATUS )
   \   000073   8882         MOV       DPL,R0
   \   000075   8983         MOV       DPH,R1
   \   000077   A3           INC       DPTR
   \   000078   A3           INC       DPTR
   \   000079   A3           INC       DPTR
   \   00007A   A3           INC       DPTR
   \   00007B   A3           INC       DPTR
   \   00007C   E0           MOVX      A,@DPTR
   \   00007D   A2E3         MOV       C,0xE0 /* A   */.3
   \   00007F   7405         MOV       A,#0x5
   \   000081   5006         JNC       ??ZDSecMgrDeviceRemove_3
   1057                {
   1058                  leaveReq.silent = FALSE;
   \   000083   12....       LCALL     ?XSTACK_DISP0_8
   \   000086   E4           CLR       A
   \   000087   8005         SJMP      ??ZDSecMgrDeviceRemove_4
   1059                }
   1060                else
   1061                {
   1062                  leaveReq.silent = TRUE;
   \                     ??ZDSecMgrDeviceRemove_3:
   \   000089   12....       LCALL     ?XSTACK_DISP0_8
   \   00008C   7401         MOV       A,#0x1
   \                     ??ZDSecMgrDeviceRemove_4:
   \   00008E   F0           MOVX      @DPTR,A
   1063                }
   1064          
   1065                NLME_LeaveReq( &leaveReq );
   \   00008F                ; Setup parameters for call to function NLME_LeaveReq
   \   00008F   7401         MOV       A,#0x1
   \   000091   802C         SJMP      ??ZDSecMgrDeviceRemove_5
   1066              }
   1067              else if ( device->nwkAddr == NLME_GetShortAddr() )
   \                     ??ZDSecMgrDeviceRemove_2:
   \   000093                ; Setup parameters for call to function NLME_GetShortAddr
   \   000093   12....       LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000096   8A..         MOV       ?V0,R2
   \   000098   8B..         MOV       ?V1,R3
   \   00009A   A8..         MOV       R0,?V0
   \   00009C   A9..         MOV       R1,?V1
   \   00009E   8E82         MOV       DPL,R6
   \   0000A0   8F83         MOV       DPH,R7
   \   0000A2   E0           MOVX      A,@DPTR
   \   0000A3   68           XRL       A,R0
   \   0000A4   7003         JNZ       ??ZDSecMgrDeviceRemove_6
   \   0000A6   A3           INC       DPTR
   \   0000A7   E0           MOVX      A,@DPTR
   \   0000A8   69           XRL       A,R1
   \                     ??ZDSecMgrDeviceRemove_6:
   \   0000A9   6003         JZ        $+5
   \   0000AB   02....       LJMP      ??ZDSecMgrDeviceRemove_7 & 0xFFFF
   1068              {
   1069                // this is when ZC wants that ZR removes itself from the network
   1070                leaveReq.extAddr = NULL;
   \   0000AE   7401         MOV       A,#0x1
   \   0000B0   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B3   E4           CLR       A
   \   0000B4   F0           MOVX      @DPTR,A
   \   0000B5   A3           INC       DPTR
   \   0000B6   F0           MOVX      @DPTR,A
   1071                leaveReq.silent = FALSE;
   \   0000B7   7405         MOV       A,#0x5
   \   0000B9   12....       LCALL     ?XSTACK_DISP0_8
   \   0000BC   E4           CLR       A
   \   0000BD   F0           MOVX      @DPTR,A
   1072          
   1073                NLME_LeaveReq( &leaveReq );
   \   0000BE                ; Setup parameters for call to function NLME_LeaveReq
   \   0000BE   04           INC       A
   \                     ??ZDSecMgrDeviceRemove_5:
   \   0000BF   12....       LCALL     ?XSTACK_DISP101_8
   \   0000C2   12....       LCALL     `??NLME_LeaveReq::?relay`; Banked call to: NLME_LeaveReq
   \   0000C5   806C         SJMP      ??ZDSecMgrDeviceRemove_7
   1074              }
   1075            }
   1076            else
   1077            {
   1078              // this is not the parent of the device
   1079              remDevReq.parentAddr   = device->parentAddr;
   \                     ??ZDSecMgrDeviceRemove_1:
   \   0000C7   7406         MOV       A,#0x6
   \   0000C9   12....       LCALL     ?XSTACK_DISP0_8
   \   0000CC   EA           MOV       A,R2
   \   0000CD   F0           MOVX      @DPTR,A
   \   0000CE   A3           INC       DPTR
   \   0000CF   EB           MOV       A,R3
   \   0000D0   12....       LCALL     ?Subroutine17 & 0xFFFF
   1080              remDevReq.childExtAddr = device->extAddr;
   \                     ??CrossCallReturnLabel_13:
   \   0000D3   7408         MOV       A,#0x8
   \   0000D5   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D8   12....       LCALL     ?Subroutine19 & 0xFFFF
   1081          
   1082              if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD )
   1083              {
   1084                uint8 found;
   1085                APSME_GetRequest( apsTrustCenterAddress,0, TC_ExtAddr );
   \                     ??CrossCallReturnLabel_18:
   \   0000DB   12....       LCALL     ?XSTACK_DISP102_8
   \   0000DE   7A00         MOV       R2,#0x0
   \   0000E0   7B00         MOV       R3,#0x0
   \   0000E2   79AB         MOV       R1,#-0x55
   \   0000E4   12....       LCALL     `??APSME_GetRequest::?relay`; Banked call to: APSME_GetRequest
   1086                
   1087                APSME_SearchTCLinkKeyEntry(TC_ExtAddr,&found,NULL);
   \   0000E7                ; Setup parameters for call to function APSME_SearchTCLinkKeyEntry
   \   0000E7   E4           CLR       A
   \   0000E8   F5..         MOV       ?V0,A
   \   0000EA   F5..         MOV       ?V1,A
   \   0000EC   78..         MOV       R0,#?V0
   \   0000EE   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000F1   7402         MOV       A,#0x2
   \   0000F3   12....       LCALL     ?XSTACK_DISP102_8
   \   0000F6   740D         MOV       A,#0xd
   \   0000F8   12....       LCALL     ?XSTACK_DISP101_8
   \   0000FB   12....       LCALL     `??APSME_SearchTCLinkKeyEntry::?relay`; Banked call to: APSME_SearchTCLinkKeyEntry
   \   0000FE   7402         MOV       A,#0x2
   \   000100   12....       LCALL     ?DEALLOC_XSTACK8
   1088                
   1089                // For ZG_GLOBAL_LINK_KEY the message has to be sent twice, one
   1090                // APS un-encrypted and one APS encrypted, to make sure that it can interoperate
   1091                // with legacy Coordinator devices which can only handle one or the other.
   1092          #if defined ( APP_TP2_TEST_MODE )
   1093                if ( ( zgApsLinkKeyType == ZG_GLOBAL_LINK_KEY ) && ( guTxApsSecON != TRUE ) )
   1094          #else
   1095                if ( ( zgApsLinkKeyType == ZG_GLOBAL_LINK_KEY ) && ( found == FALSE ) )
   \   000103   90....       MOV       DPTR,#zgApsLinkKeyType
   \   000106   E0           MOVX      A,@DPTR
   \   000107   6401         XRL       A,#0x1
   \   000109   7018         JNZ       ??ZDSecMgrDeviceRemove_8
   \   00010B   85..82       MOV       DPL,?XSP + 0
   \   00010E   85..83       MOV       DPH,?XSP + 1
   \   000111   E0           MOVX      A,@DPTR
   \   000112   700F         JNZ       ??ZDSecMgrDeviceRemove_8
   1096          #endif
   1097                {
   1098                  remDevReq.apsSecure = FALSE;
   \   000114   740A         MOV       A,#0xa
   \   000116   12....       LCALL     ?XSTACK_DISP0_8
   \   000119   E4           CLR       A
   \   00011A   F0           MOVX      @DPTR,A
   1099          
   1100                  APSME_RemoveDeviceReq( &remDevReq );
   \   00011B                ; Setup parameters for call to function APSME_RemoveDeviceReq
   \   00011B   7406         MOV       A,#0x6
   \   00011D   12....       LCALL     ?XSTACK_DISP101_8
   \   000120   12....       LCALL     `??APSME_RemoveDeviceReq::?relay`; Banked call to: APSME_RemoveDeviceReq
   1101                }
   1102          
   1103          #if defined ( APP_TP2_TEST_MODE )
   1104                if ( guTxApsSecON != FALSE )
   1105                {
   1106                  remDevReq.apsSecure = TRUE;
   1107          
   1108                  APSME_RemoveDeviceReq( &remDevReq );
   1109                }
   1110          #else
   1111                remDevReq.apsSecure = TRUE;
   \                     ??ZDSecMgrDeviceRemove_8:
   \   000123   740A         MOV       A,#0xa
   \   000125   12....       LCALL     ?XSTACK_DISP0_8
   \   000128   7401         MOV       A,#0x1
   \   00012A   F0           MOVX      @DPTR,A
   1112          
   1113                APSME_RemoveDeviceReq( &remDevReq );
   \   00012B                ; Setup parameters for call to function APSME_RemoveDeviceReq
   \   00012B   7406         MOV       A,#0x6
   \   00012D   12....       LCALL     ?XSTACK_DISP101_8
   \   000130   12....       LCALL     `??APSME_RemoveDeviceReq::?relay`; Banked call to: APSME_RemoveDeviceReq
   1114          #endif
   1115              }
   1116              else
   1117              {
   1118                remDevReq.apsSecure = FALSE;
   1119          
   1120                APSME_RemoveDeviceReq( &remDevReq );
   1121              }
   1122            }
   1123          }
   \                     ??ZDSecMgrDeviceRemove_7:
   \   000133   7413         MOV       A,#0x13
   \   000135   02....       LJMP      ?Subroutine4 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine61_0:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002                REQUIRE ??Subroutine62_0
   \   000002                ; // Fall through to label ??Subroutine62_0
   1124          
   1125          /******************************************************************************
   1126           * @fn          ZDSecMgrDeviceValidateRM (RESIDENTIAL MODE)
   1127           *
   1128           * @brief       Decide whether device is allowed.
   1129           *
   1130           * @param       device - [in] ZDSecMgrDevice_t, device info
   1131           *
   1132           * @return      ZStatus_t
   1133           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1134          ZStatus_t ZDSecMgrDeviceValidateRM( ZDSecMgrDevice_t* device )
   \                     ZDSecMgrDeviceValidateRM:
   1135          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1136            ZStatus_t status;
   1137          
   1138            status = ZSuccess;
   \   000004   7900         MOV       R1,#0x0
   1139          
   1140            (void)device;  // Intentionally unreferenced parameter
   1141          
   1142            // For test purpose, turning off the zgSecurePermitJoin flag will force
   1143            // the trust center to reject any newly joining devices by sending
   1144            // Remove-device to the parents.
   1145            if ( zgSecurePermitJoin == FALSE )
   \   000006   90....       MOV       DPTR,#zgSecurePermitJoin
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   7002         JNZ       ??ZDSecMgrDeviceValidateRM_0
   1146            {
   1147              status = ZNwkUnknownDevice;
   \   00000C   79C8         MOV       R1,#-0x38
   1148            }
   1149          
   1150          
   1151          
   1152          #if 0  // Taken out because the following functionality is only used for test
   1153                 // purpose. A more efficient (above) way is used. It can be put
   1154                 // back in if customers request for a white/black list feature.
   1155                 // ZDSecMgrStoredDeviceList[] is defined in ZDSecMgr.c
   1156          
   1157            // The following code processes the device black list (stored device list)
   1158            // If the joining device is not part of the forbidden device list
   1159            // Return ZSuccess. Otherwise, return ZNwkUnknownDevice. The trust center
   1160            // will send Remove-device and ban the device from joining.
   1161          
   1162            uint8     index;
   1163            uint8*    restricted;
   1164          
   1165            // Look through the stored device list - used for restricted devices
   1166            for ( index = 0; index < ZDSECMGR_STORED_DEVICES; index++ )
   1167            {
   1168              restricted = ZDSecMgrStoredDeviceList[index];
   1169          
   1170              if ( AddrMgrExtAddrEqual( restricted, device->extAddr )  == TRUE )
   1171              {
   1172                // return as unknown device in regards to validation
   1173                status = ZNwkUnknownDevice;
   1174          
   1175                // break from loop
   1176                index = ZDSECMGR_STORED_DEVICES;
   1177              }
   1178            }
   1179          
   1180          #endif
   1181          
   1182            return status;
   \                     ??ZDSecMgrDeviceValidateRM_0:
   \   00000E   02....       LJMP      ??Subroutine64_0 & 0xFFFF
   1183          }
   1184          
   1185          /******************************************************************************
   1186           * @fn          ZDSecMgrDeviceValidate
   1187           *
   1188           * @brief       Decide whether device is allowed.
   1189           *
   1190           * @param       device - [in] ZDSecMgrDevice_t, device info
   1191           *
   1192           * @return      ZStatus_t
   1193           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1194          ZStatus_t ZDSecMgrDeviceValidate( ZDSecMgrDevice_t* device )
   \                     ZDSecMgrDeviceValidate:
   1195          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1196            ZStatus_t status;
   1197          
   1198            if ( ZDSecMgrPermitJoiningEnabled == TRUE )
   \   000004   90....       MOV       DPTR,#ZDSecMgrPermitJoiningEnabled
   \   000007   E0           MOVX      A,@DPTR
   \   000008   6401         XRL       A,#0x1
   \   00000A   7007         JNZ       ??ZDSecMgrDeviceValidate_0
   1199            {
   1200              status = ZDSecMgrDeviceValidateRM( device );
   \   00000C                ; Setup parameters for call to function ZDSecMgrDeviceValidateRM
   \   00000C   12....       LCALL     `??ZDSecMgrDeviceValidateRM::?relay`; Banked call to: ZDSecMgrDeviceValidateRM
   \   00000F   E9           MOV       A,R1
   \   000010   F9           MOV       R1,A
   \   000011   8002         SJMP      ??ZDSecMgrDeviceValidate_1
   1201            }
   1202            else
   1203            {
   1204              status = ZNwkUnknownDevice;
   \                     ??ZDSecMgrDeviceValidate_0:
   \   000013   79C8         MOV       R1,#-0x38
   1205            }
   1206          
   1207            return status;
   \                     ??ZDSecMgrDeviceValidate_1:
   \   000015   02....       LJMP      ??Subroutine64_0 & 0xFFFF
   1208          }
   1209          
   1210          /******************************************************************************
   1211           * @fn          ZDSecMgrDeviceJoin
   1212           *
   1213           * @brief       Try to join this device.
   1214           *
   1215           * @param       device - [in] ZDSecMgrDevice_t, device info
   1216           *
   1217           * @return      ZStatus_t
   1218           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1219          ZStatus_t ZDSecMgrDeviceJoin( ZDSecMgrDevice_t* device )
   \                     ZDSecMgrDeviceJoin:
   1220          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 14
   \   000005   74F2         MOV       A,#-0xe
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   1221            ZStatus_t status = ZSuccess;
   \   00000E   75..00       MOV       ?V4,#0x0
   1222            uint16    ami;
   1223          
   1224            // attempt to validate device that joined/rejoined without security
   1225            if ( device->secure == FALSE )
   \   000011   EE           MOV       A,R6
   \   000012   2402         ADD       A,#0x2
   \   000014   F5..         MOV       ?V0,A
   \   000016   E4           CLR       A
   \   000017   3F           ADDC      A,R7
   \   000018   F5..         MOV       ?V1,A
   \   00001A   EE           MOV       A,R6
   \   00001B   2406         ADD       A,#0x6
   \   00001D   F8           MOV       R0,A
   \   00001E   E4           CLR       A
   \   00001F   3F           ADDC      A,R7
   \   000020   F9           MOV       R1,A
   \   000021   88..         MOV       ?V2,R0
   \   000023   89..         MOV       ?V3,R1
   \   000025   8882         MOV       DPL,R0
   \   000027   F583         MOV       DPH,A
   \   000029   E0           MOVX      A,@DPTR
   \   00002A   7008         JNZ       ??ZDSecMgrDeviceJoin_0
   1226            {
   1227              status = ZDSecMgrDeviceValidate( device );
   \   00002C                ; Setup parameters for call to function ZDSecMgrDeviceValidate
   \   00002C   12....       LCALL     `??ZDSecMgrDeviceValidate::?relay`; Banked call to: ZDSecMgrDeviceValidate
   \   00002F   E9           MOV       A,R1
   \   000030   F5..         MOV       ?V4,A
   1228            }
   1229          
   1230            if ( status == ZSuccess )
   \   000032   7058         JNZ       ??ZDSecMgrDeviceJoin_1
   1231            {
   1232              // Add the device to the address manager
   1233              ZDSecMgrAddrStore( device->nwkAddr, device->extAddr, &ami );
   \                     ??ZDSecMgrDeviceJoin_0:
   \   000034                ; Setup parameters for call to function ZDSecMgrAddrStore
   \   000034   A8..         MOV       R0,?XSP + 0
   \   000036   A9..         MOV       R1,?XSP + 1
   \   000038   88..         MOV       ?V6,R0
   \   00003A   89..         MOV       ?V7,R1
   \   00003C   78..         MOV       R0,#?V6
   \   00003E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000041   85..82       MOV       DPL,?V0
   \   000044   85..83       MOV       DPH,?V1
   \   000047   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   00004A   8E82         MOV       DPL,R6
   \   00004C   8F83         MOV       DPH,R7
   \   00004E   12....       LCALL     ??Subroutine62_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_122:
   \   000051   12....       LCALL     `??ZDSecMgrAddrStore::?relay`; Banked call to: ZDSecMgrAddrStore
   \   000054   7402         MOV       A,#0x2
   \   000056   12....       LCALL     ?DEALLOC_XSTACK8
   1234          
   1235              // Only send the key to devices that have not been authenticated
   1236              if ( ( device->devStatus & DEV_SEC_INIT_STATUS ) &&
   1237                   ( device->secure == FALSE ) )
   \   000059   8E82         MOV       DPL,R6
   \   00005B   8F83         MOV       DPH,R7
   \   00005D   A3           INC       DPTR
   \   00005E   A3           INC       DPTR
   \   00005F   A3           INC       DPTR
   \   000060   A3           INC       DPTR
   \   000061   A3           INC       DPTR
   \   000062   A3           INC       DPTR
   \   000063   A3           INC       DPTR
   \   000064   E0           MOVX      A,@DPTR
   \   000065   A2E2         MOV       C,0xE0 /* A   */.2
   \   000067   5023         JNC       ??ZDSecMgrDeviceJoin_1
   \   000069   85..82       MOV       DPL,?V2
   \   00006C   85..83       MOV       DPH,?V3
   \   00006F   E0           MOVX      A,@DPTR
   \   000070   701A         JNZ       ??ZDSecMgrDeviceJoin_1
   1238              {
   1239                //send the nwk key data to the joining device
   1240                status = ZDSecMgrSendNwkKey( device );
   \   000072                ; Setup parameters for call to function ZDSecMgrSendNwkKey
   \   000072   EE           MOV       A,R6
   \   000073   FA           MOV       R2,A
   \   000074   EF           MOV       A,R7
   \   000075   FB           MOV       R3,A
   \   000076   12....       LCALL     `??ZDSecMgrSendNwkKey::?relay`; Banked call to: ZDSecMgrSendNwkKey
   \   000079   E9           MOV       A,R1
   \   00007A   F5..         MOV       ?V4,A
   1241              }
   1242          
   1243              if ( status != ZSuccess )
   \   00007C   601B         JZ        ??ZDSecMgrDeviceJoin_2
   1244              {
   1245                ZDSecMgrAddrClear( device->extAddr );
   \   00007E                ; Setup parameters for call to function ZDSecMgrAddrClear
   \   00007E   85..82       MOV       DPL,?V0
   \   000081   85..83       MOV       DPH,?V1
   \   000084   12....       LCALL     ??Subroutine62_0 & 0xFFFF
   1246              }
   1247            }
   \                     ??CrossCallReturnLabel_123:
   \   000087   12....       LCALL     `??ZDSecMgrAddrClear::?relay`; Banked call to: ZDSecMgrAddrClear
   \   00008A   8004         SJMP      ??ZDSecMgrDeviceJoin_3
   1248          
   1249            if ( status != ZSuccess )
   \                     ??ZDSecMgrDeviceJoin_1:
   \   00008C   E5..         MOV       A,?V4
   \   00008E   6009         JZ        ??ZDSecMgrDeviceJoin_2
   1250            {
   1251              // not allowed or transport key failed, remove the device
   1252              ZDSecMgrDeviceRemove( device );
   \                     ??ZDSecMgrDeviceJoin_3:
   \   000090                ; Setup parameters for call to function ZDSecMgrDeviceRemove
   \   000090   EE           MOV       A,R6
   \   000091   FA           MOV       R2,A
   \   000092   EF           MOV       A,R7
   \   000093   FB           MOV       R3,A
   \   000094   12....       LCALL     `??ZDSecMgrDeviceRemove::?relay`; Banked call to: ZDSecMgrDeviceRemove
   \   000097   805B         SJMP      ??ZDSecMgrDeviceJoin_4
   1253            }
   1254            else
   1255            {
   1256              // Pass the Trust Center Device Indication to higher layer if callback registered
   1257              if (zdoCBFunc[ZDO_TC_DEVICE_CBID] != NULL )
   \                     ??ZDSecMgrDeviceJoin_2:
   \   000099   90....       MOV       DPTR,#zdoCBFunc + 16
   \   00009C   12....       LCALL     ??Subroutine67_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_178:
   \   00009F   6053         JZ        ??ZDSecMgrDeviceJoin_4
   1258              {
   1259                ZDO_TC_Device_t dev;
   1260          
   1261                dev.nwkAddr = device->nwkAddr;
   \   0000A1   8E82         MOV       DPL,R6
   \   0000A3   8F83         MOV       DPH,R7
   \   0000A5   12....       LCALL     ??Subroutine66_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_158:
   \   0000A8   7402         MOV       A,#0x2
   \   0000AA   12....       LCALL     ?XSTACK_DISP0_8
   \   0000AD   12....       LCALL     ?Subroutine15 & 0xFFFF
   1262                osal_memcpy( dev.extAddr, device->extAddr, Z_EXTADDR_LEN );
   \                     ??CrossCallReturnLabel_11:
   \   0000B0   F5..         MOV       ?V0,A
   \   0000B2   A3           INC       DPTR
   \   0000B3   E0           MOVX      A,@DPTR
   \   0000B4   F5..         MOV       ?V1,A
   \   0000B6   75..00       MOV       ?V2,#0x0
   \   0000B9   78..         MOV       R0,#?V0
   \   0000BB   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000BE   7C08         MOV       R4,#0x8
   \   0000C0   7D00         MOV       R5,#0x0
   \   0000C2   7407         MOV       A,#0x7
   \   0000C4   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C7   AA82         MOV       R2,DPL
   \   0000C9   AB83         MOV       R3,DPH
   \   0000CB   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000CE   7403         MOV       A,#0x3
   \   0000D0   12....       LCALL     ?DEALLOC_XSTACK8
   1263                dev.parentAddr = device->parentAddr;
   \   0000D3   8E82         MOV       DPL,R6
   \   0000D5   8F83         MOV       DPH,R7
   \   0000D7   A3           INC       DPTR
   \   0000D8   A3           INC       DPTR
   \   0000D9   A3           INC       DPTR
   \   0000DA   A3           INC       DPTR
   \   0000DB   12....       LCALL     ??Subroutine66_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_159:
   \   0000DE   740C         MOV       A,#0xc
   \   0000E0   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E3   12....       LCALL     ??Subroutine65_0 & 0xFFFF
   1264          
   1265                zdoCBFunc[ZDO_TC_DEVICE_CBID]( (void*)&dev );
   \                     ??CrossCallReturnLabel_146:
   \   0000E6                ; Setup parameters for indirect call
   \   0000E6   7402         MOV       A,#0x2
   \   0000E8   12....       LCALL     ?XSTACK_DISP101_8
   \   0000EB   90....       MOV       DPTR,#zdoCBFunc + 16
   \   0000EE   12....       LCALL     ?Subroutine30 & 0xFFFF
   1266              }
   1267            }
   \                     ??CrossCallReturnLabel_33:
   \   0000F1   12....       LCALL     ?CALL_IND
   1268                
   1269                
   1270          
   1271            return status;
   \                     ??ZDSecMgrDeviceJoin_4:
   \   0000F4   A9..         MOV       R1,?V4
   \   0000F6   740E         MOV       A,#0xe
   \   0000F8   02....       LJMP      ?Subroutine1 & 0xFFFF
   1272          }
   1273          
   1274          /******************************************************************************
   1275           * @fn          ZDSecMgrDeviceJoinDirect
   1276           *
   1277           * @brief       Try to join this device as a direct child.
   1278           *
   1279           * @param       device - [in] ZDSecMgrDevice_t, device info
   1280           *
   1281           * @return      ZStatus_t
   1282           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1283          ZStatus_t ZDSecMgrDeviceJoinDirect( ZDSecMgrDevice_t* device )
   \                     ZDSecMgrDeviceJoinDirect:
   1284          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 20
   \   000005   74EC         MOV       A,#-0x14
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   1285            ZStatus_t status;
   1286            
   1287            if(device->secure == FALSE)
   \   00000E   8E82         MOV       DPL,R6
   \   000010   8F83         MOV       DPH,R7
   \   000012   A3           INC       DPTR
   \   000013   A3           INC       DPTR
   \   000014   A3           INC       DPTR
   \   000015   A3           INC       DPTR
   \   000016   A3           INC       DPTR
   \   000017   A3           INC       DPTR
   \   000018   E0           MOVX      A,@DPTR
   \   000019   6003         JZ        $+5
   \   00001B   02....       LJMP      ??ZDSecMgrDeviceJoinDirect_0 & 0xFFFF
   1288            {  
   1289              uint8  found;
   1290              uint16 keyNvIndex;
   1291              APSME_TCLKDevEntry_t TCLKDevEntry;
   1292              
   1293              keyNvIndex = APSME_SearchTCLinkKeyEntry(device->extAddr,&found, &TCLKDevEntry);
   \   00001E                ; Setup parameters for call to function APSME_SearchTCLinkKeyEntry
   \   00001E   7401         MOV       A,#0x1
   \   000020   12....       LCALL     ?XSTACK_DISP100_8
   \   000023   88..         MOV       ?V0,R0
   \   000025   89..         MOV       ?V1,R1
   \   000027   78..         MOV       R0,#?V0
   \   000029   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002C   7402         MOV       A,#0x2
   \   00002E   12....       LCALL     ?XSTACK_DISP102_8
   \   000031   8E82         MOV       DPL,R6
   \   000033   8F83         MOV       DPH,R7
   \   000035   12....       LCALL     ??Subroutine61_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_130:
   \   000038   12....       LCALL     `??APSME_SearchTCLinkKeyEntry::?relay`; Banked call to: APSME_SearchTCLinkKeyEntry
   \   00003B   7402         MOV       A,#0x2
   \   00003D   12....       LCALL     ?DEALLOC_XSTACK8
   1294              
   1295              //If found and it was verified, then allow it to join in a fresh state by erasing the key entry
   1296              if((found == TRUE) && (TCLKDevEntry.keyAttributes == ZG_VERIFIED_KEY))
   \   000040   85..82       MOV       DPL,?XSP + 0
   \   000043   85..83       MOV       DPH,?XSP + 1
   \   000046   E0           MOVX      A,@DPTR
   \   000047   6401         XRL       A,#0x1
   \   000049   7067         JNZ       ??ZDSecMgrDeviceJoinDirect_0
   \   00004B   7411         MOV       A,#0x11
   \   00004D   12....       LCALL     ?XSTACK_DISP0_8
   \   000050   E0           MOVX      A,@DPTR
   \   000051   6402         XRL       A,#0x2
   \   000053   705D         JNZ       ??ZDSecMgrDeviceJoinDirect_0
   1297              {
   1298                uint16 index;
   1299                TCLKDevEntry.keyAttributes = ZG_DEFAULT_KEY;
   \   000055   74FF         MOV       A,#-0x1
   \   000057   F0           MOVX      @DPTR,A
   1300                //Increase the shift by one. Validate the maximum shift of the seed which is 15
   1301                TCLKDevEntry.SeedShift_IcIndex++;
   1302                TCLKDevEntry.SeedShift_IcIndex &= 0x0F;
   \   000058   7413         MOV       A,#0x13
   \   00005A   12....       LCALL     ?XSTACK_DISP0_8
   \   00005D   E0           MOVX      A,@DPTR
   \   00005E   04           INC       A
   \   00005F   540F         ANL       A,#0xf
   \   000061   F0           MOVX      @DPTR,A
   1303                
   1304                TCLKDevEntry.rxFrmCntr = 0;
   \   000062   7405         MOV       A,#0x5
   \   000064   12....       LCALL     ?XSTACK_DISP0_8
   \   000067   12....       LCALL     ?Subroutine22 & 0xFFFF
   1305                TCLKDevEntry.txFrmCntr = 0;
   \                     ??CrossCallReturnLabel_22:
   \   00006A   12....       LCALL     ?XSTACK_DISP0_8
   \   00006D   12....       LCALL     ??Subroutine75_0 & 0xFFFF
   1306                
   1307                index = keyNvIndex - ZCD_NV_TCLK_TABLE_START;
   \                     ??CrossCallReturnLabel_194:
   \   000070   12....       LCALL     ?Subroutine44 & 0xFFFF
   1308                
   1309                TCLinkKeyFrmCntr[index].rxFrmCntr = 0;
   \                     ??CrossCallReturnLabel_64:
   \   000073   ACF0         MOV       R4,B
   \   000075   75F009       MOV       B,#0x9
   \   000078   E9           MOV       A,R1
   \   000079   A4           MUL       AB
   \   00007A   2C           ADD       A,R4
   \   00007B   F9           MOV       R1,A
   \   00007C   74..         MOV       A,#TCLinkKeyFrmCntr & 0xff
   \   00007E   28           ADD       A,R0
   \   00007F   F8           MOV       R0,A
   \   000080   74..         MOV       A,#(TCLinkKeyFrmCntr >> 8) & 0xff
   \   000082   39           ADDC      A,R1
   \   000083   F9           MOV       R1,A
   \   000084   8882         MOV       DPL,R0
   \   000086   8983         MOV       DPH,R1
   \   000088   A3           INC       DPTR
   \   000089   A3           INC       DPTR
   \   00008A   A3           INC       DPTR
   \   00008B   A3           INC       DPTR
   \   00008C   12....       LCALL     ??Subroutine75_0 & 0xFFFF
   1310                TCLinkKeyFrmCntr[index].txFrmCntr = 0;
   \                     ??CrossCallReturnLabel_195:
   \   00008F   8882         MOV       DPL,R0
   \   000091   8983         MOV       DPH,R1
   \   000093   12....       LCALL     ??Subroutine76_0 & 0xFFFF
   1311                
   1312                //Update the entry
   1313                osal_nv_write(keyNvIndex,0,sizeof(APSME_TCLKDevEntry_t), &TCLKDevEntry );
   \                     ??CrossCallReturnLabel_193:
   \   000096                ; Setup parameters for call to function osal_nv_write
   \   000096   78..         MOV       R0,#?V0
   \   000098   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00009B   75..13       MOV       ?V0,#0x13
   \   00009E   75..00       MOV       ?V1,#0x0
   \   0000A1   78..         MOV       R0,#?V0
   \   0000A3   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000A6   7C00         MOV       R4,#0x0
   \   0000A8   7D00         MOV       R5,#0x0
   \   0000AA   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   0000AD   7404         MOV       A,#0x4
   \   0000AF   12....       LCALL     ?DEALLOC_XSTACK8
   1314              }
   1315              
   1316            }
   1317          
   1318            status = ZDSecMgrDeviceJoin( device );
   \                     ??ZDSecMgrDeviceJoinDirect_0:
   \   0000B2                ; Setup parameters for call to function ZDSecMgrDeviceJoin
   \   0000B2   EE           MOV       A,R6
   \   0000B3   FA           MOV       R2,A
   \   0000B4   EF           MOV       A,R7
   \   0000B5   FB           MOV       R3,A
   \   0000B6   12....       LCALL     `??ZDSecMgrDeviceJoin::?relay`; Banked call to: ZDSecMgrDeviceJoin
   \   0000B9   E9           MOV       A,R1
   \   0000BA   F5..         MOV       ?V0,A
   1319          
   1320            if ( status == ZSuccess )
   \   0000BC   700D         JNZ       ??ZDSecMgrDeviceJoinDirect_1
   1321            {
   1322              // set association status to authenticated
   1323              ZDSecMgrAssocDeviceAuth( AssocGetWithShort( device->nwkAddr ) );
   \   0000BE                ; Setup parameters for call to function AssocGetWithShort
   \   0000BE   8E82         MOV       DPL,R6
   \   0000C0   8F83         MOV       DPH,R7
   \   0000C2   12....       LCALL     ??Subroutine62_0 & 0xFFFF
   1324              
   1325            #if (ZG_BUILD_COORDINATOR_TYPE)    
   1326              //Add the device as joining device, if it did join unsecured
   1327              if(device->secure == FALSE)
   1328              {
   1329                bdb_TCAddJoiningDevice(NLME_GetShortAddr(),device->extAddr);
   1330              }
   1331            #endif
   1332            }
   \                     ??CrossCallReturnLabel_124:
   \   0000C5   12....       LCALL     `??AssocGetWithShort::?relay`; Banked call to: AssocGetWithShort
   \   0000C8                ; Setup parameters for call to function ZDSecMgrAssocDeviceAuth
   \   0000C8   12....       LCALL     `??ZDSecMgrAssocDeviceAuth::?relay`; Banked call to: ZDSecMgrAssocDeviceAuth
   1333          
   1334            return status;
   \                     ??ZDSecMgrDeviceJoinDirect_1:
   \   0000CB   A9..         MOV       R1,?V0
   \   0000CD   7414         MOV       A,#0x14
   \   0000CF   02....       LJMP      ?Subroutine3 & 0xFFFF
   1335          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine75_0:
   \   000000   E4           CLR       A
   \   000001                REQUIRE ??Subroutine76_0
   \   000001                ; // Fall through to label ??Subroutine76_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine76_0:
   \   000000   12....       LCALL     ??Subroutine78_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_204:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000   EA           MOV       A,R2
   \   000001   24EF         ADD       A,#-0x11
   \   000003   F8           MOV       R0,A
   \   000004   EB           MOV       A,R3
   \   000005   34FE         ADDC      A,#-0x2
   \   000007   F9           MOV       R1,A
   \   000008   E8           MOV       A,R0
   \   000009   75F009       MOV       B,#0x9
   \   00000C   A4           MUL       AB
   \   00000D   F8           MOV       R0,A
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   12....       LCALL     ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_203:
   \   000003                ; Setup parameters for call to function osal_nv_write
   \   000003   04           INC       A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000   E4           CLR       A
   \   000001                REQUIRE ??Subroutine78_0
   \   000001                ; // Fall through to label ??Subroutine78_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine78_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   A3           INC       DPTR
   \   000002   F0           MOVX      @DPTR,A
   \   000003   A3           INC       DPTR
   \   000004   F0           MOVX      @DPTR,A
   \   000005   A3           INC       DPTR
   \   000006   F0           MOVX      @DPTR,A
   \   000007   22           RET
   1336          
   1337          /******************************************************************************
   1338           * @fn          ZDSecMgrDeviceJoinFwd
   1339           *
   1340           * @brief       Forward join to Trust Center.
   1341           *
   1342           * @param       device - [in] ZDSecMgrDevice_t, device info
   1343           *
   1344           * @return      ZStatus_t
   1345           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1346          ZStatus_t ZDSecMgrDeviceJoinFwd( ZDSecMgrDevice_t* device )
   \                     ZDSecMgrDeviceJoinFwd:
   1347          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 17
   \   000005   74EF         MOV       A,#-0x11
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1348            ZStatus_t               status;
   1349            APSME_UpdateDeviceReq_t req;
   1350            uint8 TC_ExtAddr[Z_EXTADDR_LEN];
   1351          
   1352            // forward any joining device to the Trust Center -- the Trust Center will
   1353            // decide if the device is allowed to join
   1354            status = ZSuccess;
   1355          
   1356            // forward authorization to the Trust Center
   1357            req.dstAddr    = APSME_TRUSTCENTER_NWKADDR;
   \   00000A   7401         MOV       A,#0x1
   \   00000C   12....       LCALL     ?XSTACK_DISP0_8
   \   00000F   E4           CLR       A
   \   000010   F0           MOVX      @DPTR,A
   \   000011   A3           INC       DPTR
   \   000012   12....       LCALL     ?Subroutine48 & 0xFFFF
   1358            req.devAddr    = device->nwkAddr;
   \                     ??CrossCallReturnLabel_71:
   \   000015   12....       LCALL     ??Subroutine66_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_160:
   \   000018   7403         MOV       A,#0x3
   \   00001A   12....       LCALL     ?XSTACK_DISP0_8
   \   00001D   12....       LCALL     ?Subroutine11 & 0xFFFF
   1359            req.devExtAddr = device->extAddr;
   \                     ??CrossCallReturnLabel_0:
   \   000020   7405         MOV       A,#0x5
   \   000022   12....       LCALL     ?XSTACK_DISP0_8
   \   000025   12....       LCALL     ??Subroutine65_0 & 0xFFFF
   1360          
   1361            // set security status, option for router to reject if policy set
   1362            if ( (device->devStatus & DEV_HIGH_SEC_STATUS) )
   \                     ??CrossCallReturnLabel_147:
   \   000028   EA           MOV       A,R2
   \   000029   2407         ADD       A,#0x7
   \   00002B   F582         MOV       DPL,A
   \   00002D   E4           CLR       A
   \   00002E   3B           ADDC      A,R3
   \   00002F   F583         MOV       DPH,A
   \   000031   E0           MOVX      A,@DPTR
   \   000032   A2E7         MOV       C,0xE0 /* A   */.7
   \   000034   502E         JNC       ??ZDSecMgrDeviceJoinFwd_0
   1363            {
   1364              if ( device->devStatus & DEV_REJOIN_STATUS )
   \   000036   A2E6         MOV       C,0xE0 /* A   */.6
   \   000038   5021         JNC       ??ZDSecMgrDeviceJoinFwd_1
   1365              {
   1366                if ( device->secure == TRUE )
   \   00003A   8A82         MOV       DPL,R2
   \   00003C   8B83         MOV       DPH,R3
   \   00003E   A3           INC       DPTR
   \   00003F   A3           INC       DPTR
   \   000040   A3           INC       DPTR
   \   000041   A3           INC       DPTR
   \   000042   A3           INC       DPTR
   \   000043   A3           INC       DPTR
   \   000044   E0           MOVX      A,@DPTR
   \   000045   6401         XRL       A,#0x1
   \   000047   7009         JNZ       ??ZDSecMgrDeviceJoinFwd_2
   1367                {
   1368                  req.status = APSME_UD_HIGH_SECURED_REJOIN;
   \   000049   7407         MOV       A,#0x7
   \   00004B   12....       LCALL     ?XSTACK_DISP0_8
   \   00004E   7404         MOV       A,#0x4
   \   000050   803D         SJMP      ??ZDSecMgrDeviceJoinFwd_3
   1369                }
   1370                else
   1371                {
   1372                  req.status = APSME_UD_HIGH_UNSECURED_REJOIN;
   \                     ??ZDSecMgrDeviceJoinFwd_2:
   \   000052   7407         MOV       A,#0x7
   \   000054   12....       LCALL     ?XSTACK_DISP0_8
   \   000057   7407         MOV       A,#0x7
   \   000059   8034         SJMP      ??ZDSecMgrDeviceJoinFwd_3
   1373                }
   1374              }
   1375              else
   1376              {
   1377                req.status = APSME_UD_HIGH_UNSECURED_JOIN;
   \                     ??ZDSecMgrDeviceJoinFwd_1:
   \   00005B   7407         MOV       A,#0x7
   \   00005D   12....       LCALL     ?XSTACK_DISP0_8
   \   000060   7405         MOV       A,#0x5
   \   000062   802B         SJMP      ??ZDSecMgrDeviceJoinFwd_3
   1378              }
   1379            }
   1380            else
   1381            {
   1382              if ( device->devStatus & DEV_REJOIN_STATUS )
   \                     ??ZDSecMgrDeviceJoinFwd_0:
   \   000064   A2E6         MOV       C,0xE0 /* A   */.6
   \   000066   5020         JNC       ??ZDSecMgrDeviceJoinFwd_4
   1383              {
   1384                if ( device->secure == TRUE )
   \   000068   8A82         MOV       DPL,R2
   \   00006A   8B83         MOV       DPH,R3
   \   00006C   A3           INC       DPTR
   \   00006D   A3           INC       DPTR
   \   00006E   A3           INC       DPTR
   \   00006F   A3           INC       DPTR
   \   000070   A3           INC       DPTR
   \   000071   A3           INC       DPTR
   \   000072   E0           MOVX      A,@DPTR
   \   000073   6401         XRL       A,#0x1
   \   000075   7008         JNZ       ??ZDSecMgrDeviceJoinFwd_5
   1385                {
   1386                  req.status = APSME_UD_STANDARD_SECURED_REJOIN;
   \   000077   7407         MOV       A,#0x7
   \   000079   12....       LCALL     ?XSTACK_DISP0_8
   \   00007C   E4           CLR       A
   \   00007D   8010         SJMP      ??ZDSecMgrDeviceJoinFwd_3
   1387                }
   1388                else
   1389                {
   1390                  req.status = APSME_UD_STANDARD_TRUST_CENTER_REJOIN;
   \                     ??ZDSecMgrDeviceJoinFwd_5:
   \   00007F   7407         MOV       A,#0x7
   \   000081   12....       LCALL     ?XSTACK_DISP0_8
   \   000084   7403         MOV       A,#0x3
   \   000086   8007         SJMP      ??ZDSecMgrDeviceJoinFwd_3
   1391                }
   1392              }
   1393              else
   1394              {
   1395                req.status = APSME_UD_STANDARD_UNSECURED_JOIN;
   \                     ??ZDSecMgrDeviceJoinFwd_4:
   \   000088   7407         MOV       A,#0x7
   \   00008A   12....       LCALL     ?XSTACK_DISP0_8
   \   00008D   7401         MOV       A,#0x1
   1396              }
   1397            }
   \                     ??ZDSecMgrDeviceJoinFwd_3:
   \   00008F   12....       LCALL     ?Subroutine48 & 0xFFFF
   1398          
   1399            // set association status to authenticated
   1400            ZDSecMgrAssocDeviceAuth( AssocGetWithShort( device->nwkAddr ) );
   \                     ??CrossCallReturnLabel_72:
   \   000092   12....       LCALL     ??Subroutine62_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_125:
   \   000095   12....       LCALL     `??AssocGetWithShort::?relay`; Banked call to: AssocGetWithShort
   \   000098                ; Setup parameters for call to function ZDSecMgrAssocDeviceAuth
   \   000098   12....       LCALL     `??ZDSecMgrAssocDeviceAuth::?relay`; Banked call to: ZDSecMgrAssocDeviceAuth
   1401          
   1402            if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD )
   1403            {
   1404              uint8 found;
   1405              APSME_GetRequest( apsTrustCenterAddress,0, TC_ExtAddr );
   \   00009B                ; Setup parameters for call to function APSME_GetRequest
   \   00009B   7409         MOV       A,#0x9
   \   00009D   12....       LCALL     ?XSTACK_DISP102_8
   \   0000A0   7A00         MOV       R2,#0x0
   \   0000A2   7B00         MOV       R3,#0x0
   \   0000A4   79AB         MOV       R1,#-0x55
   \   0000A6   12....       LCALL     `??APSME_GetRequest::?relay`; Banked call to: APSME_GetRequest
   1406              
   1407              APSME_SearchTCLinkKeyEntry(TC_ExtAddr,&found,NULL);
   \   0000A9                ; Setup parameters for call to function APSME_SearchTCLinkKeyEntry
   \   0000A9   E4           CLR       A
   \   0000AA   F5..         MOV       ?V0,A
   \   0000AC   F5..         MOV       ?V1,A
   \   0000AE   78..         MOV       R0,#?V0
   \   0000B0   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000B3   7402         MOV       A,#0x2
   \   0000B5   12....       LCALL     ?XSTACK_DISP102_8
   \   0000B8   740B         MOV       A,#0xb
   \   0000BA   12....       LCALL     ?XSTACK_DISP101_8
   \   0000BD   12....       LCALL     `??APSME_SearchTCLinkKeyEntry::?relay`; Banked call to: APSME_SearchTCLinkKeyEntry
   \   0000C0   7402         MOV       A,#0x2
   \   0000C2   12....       LCALL     ?DEALLOC_XSTACK8
   1408              
   1409              // For ZG_GLOBAL_LINK_KEY the message has to be sent twice one
   1410              // un-encrypted and one APS encrypted, to make sure that it can interoperate
   1411              // with legacy Coordinator devices which can only handle one or the other.
   1412          #if defined ( APP_TP2_TEST_MODE )
   1413              if ( ( zgApsLinkKeyType == ZG_GLOBAL_LINK_KEY ) && ( guTxApsSecON != TRUE ) )
   1414          #else
   1415              if ( ( zgApsLinkKeyType == ZG_GLOBAL_LINK_KEY ) && ( found == FALSE ) )
   \   0000C5   90....       MOV       DPTR,#zgApsLinkKeyType
   \   0000C8   E0           MOVX      A,@DPTR
   \   0000C9   6401         XRL       A,#0x1
   \   0000CB   7017         JNZ       ??ZDSecMgrDeviceJoinFwd_6
   \   0000CD   85..82       MOV       DPL,?XSP + 0
   \   0000D0   85..83       MOV       DPH,?XSP + 1
   \   0000D3   E0           MOVX      A,@DPTR
   \   0000D4   700E         JNZ       ??ZDSecMgrDeviceJoinFwd_6
   1416          #endif
   1417              {
   1418                req.apsSecure = FALSE;
   \   0000D6   7408         MOV       A,#0x8
   \   0000D8   12....       LCALL     ?XSTACK_DISP0_8
   \   0000DB   E4           CLR       A
   \   0000DC   F0           MOVX      @DPTR,A
   1419          
   1420                // send and APSME_UPDATE_DEVICE request to the trust center
   1421                status = APSME_UpdateDeviceReq( &req );
   \   0000DD                ; Setup parameters for call to function APSME_UpdateDeviceReq
   \   0000DD   04           INC       A
   \   0000DE   12....       LCALL     ?XSTACK_DISP101_8
   \   0000E1   12....       LCALL     `??APSME_UpdateDeviceReq::?relay`; Banked call to: APSME_UpdateDeviceReq
   1422              }
   1423          
   1424          #if defined ( APP_TP2_TEST_MODE )
   1425              if ( guTxApsSecON != FALSE )
   1426              {
   1427                // send the message APS encrypted
   1428                req.apsSecure = TRUE;
   1429          
   1430                // send and APSME_UPDATE_DEVICE request to the trust center
   1431                status = APSME_UpdateDeviceReq( &req );
   1432              }
   1433          #else
   1434              // send the message APS encrypted
   1435              req.apsSecure = TRUE;
   \                     ??ZDSecMgrDeviceJoinFwd_6:
   \   0000E4   7408         MOV       A,#0x8
   \   0000E6   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E9   7401         MOV       A,#0x1
   \   0000EB   F0           MOVX      @DPTR,A
   1436          
   1437              // send and APSME_UPDATE_DEVICE request to the trust center
   1438              status = APSME_UpdateDeviceReq( &req );
   1439          #endif
   1440            }
   1441            else
   1442            {
   1443              req.apsSecure = FALSE;
   1444          
   1445              // send and APSME_UPDATE_DEVICE request to the trust center
   1446              status = APSME_UpdateDeviceReq( &req );
   1447            }
   1448          
   1449            return status;
   \   0000EC                ; Setup parameters for call to function APSME_UpdateDeviceReq
   \   0000EC   12....       LCALL     ?XSTACK_DISP101_8
   \   0000EF   12....       LCALL     `??APSME_UpdateDeviceReq::?relay`; Banked call to: APSME_UpdateDeviceReq
   \   0000F2   7411         MOV       A,#0x11
   \   0000F4   02....       LJMP      ?Subroutine4 & 0xFFFF
   1450          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   E8           MOV       A,R0
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   E9           MOV       A,R1
   \   000004   12....       LCALL     ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   12....       LCALL     ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_167:
   \   00000C   22           RET
   1451          
   1452          /******************************************************************************
   1453           * @fn          ZDSecMgrDeviceNew
   1454           *
   1455           * @brief       Process a new device.
   1456           *
   1457           * @param       device - [in] ZDSecMgrDevice_t, device info
   1458           *
   1459           * @return      ZStatus_t
   1460           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1461          ZStatus_t ZDSecMgrDeviceNew( ZDSecMgrDevice_t* joiner )
   \                     ZDSecMgrDeviceNew:
   1462          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1463            ZStatus_t status;
   1464          
   1465            if ( ( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ) )
   1466                || ( ( ZG_BUILD_RTR_TYPE ) && APSME_IsDistributedSecurity() ) )
   1467            {
   1468              // try to join this device
   1469              status = ZDSecMgrDeviceJoinDirect( joiner );
   1470            }
   1471            else
   1472            {
   1473              status = ZDSecMgrDeviceJoinFwd( joiner );
   1474            }
   1475          
   1476            return status;
   \   000004                ; Setup parameters for call to function ZDSecMgrDeviceJoinFwd
   \   000004   12....       LCALL     `??ZDSecMgrDeviceJoinFwd::?relay`; Banked call to: ZDSecMgrDeviceJoinFwd
   \   000007   80..         SJMP      ??Subroutine64_0
   1477          }
   1478          
   1479          /******************************************************************************
   1480           * @fn          ZDSecMgrAssocDeviceAuth
   1481           *
   1482           * @brief       Set associated device status to authenticated
   1483           *
   1484           * @param       assoc - [in, out] associated_devices_t
   1485           *
   1486           * @return      none
   1487           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1488          void ZDSecMgrAssocDeviceAuth( associated_devices_t* assoc )
   \                     ZDSecMgrAssocDeviceAuth:
   1489          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1490            if ( assoc != NULL )
   \   000004   EA           MOV       A,R2
   \   000005   4B           ORL       A,R3
   \   000006   600D         JZ        ??ZDSecMgrAssocDeviceAuth_0
   1491            {
   1492              assoc->devStatus |= DEV_SEC_AUTH_STATUS;
   \   000008   8A82         MOV       DPL,R2
   \   00000A   8B83         MOV       DPH,R3
   \   00000C   A3           INC       DPTR
   \   00000D   A3           INC       DPTR
   \   00000E   A3           INC       DPTR
   \   00000F   A3           INC       DPTR
   \   000010   A3           INC       DPTR
   \   000011   E0           MOVX      A,@DPTR
   \   000012   D2E3         SETB      0xE0 /* A   */.3
   \   000014   F0           MOVX      @DPTR,A
   1493            }
   1494          }
   \                     ??ZDSecMgrAssocDeviceAuth_0:
   \   000015   80..         SJMP      ??Subroutine64_0
   1495          
   1496          /******************************************************************************
   1497           * @fn          ZDSecMgrAuthNwkKey
   1498           *
   1499           * @brief       Handle next step in authentication process
   1500           *
   1501           * @param       none
   1502           *
   1503           * @return      none
   1504           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1505          void ZDSecMgrAuthNwkKey()
   \                     ZDSecMgrAuthNwkKey:
   1506          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1507            if ( devState == DEV_END_DEVICE_UNAUTH )
   \   000004   90....       MOV       DPTR,#devState
   \   000007   E0           MOVX      A,@DPTR
   \   000008   6405         XRL       A,#0x5
   \   00000A   700C         JNZ       ??ZDSecMgrAuthNwkKey_0
   1508            {
   1509              // inform ZDO that device has been authenticated
   1510              osal_set_event ( ZDAppTaskID, ZDO_DEVICE_AUTH );
   \   00000C                ; Setup parameters for call to function osal_set_event
   \   00000C   7A80         MOV       R2,#-0x80
   \   00000E   7B00         MOV       R3,#0x0
   \   000010   90....       MOV       DPTR,#ZDAppTaskID
   \   000013   E0           MOVX      A,@DPTR
   \   000014   F9           MOV       R1,A
   \   000015   12....       LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
   1511            }
   1512          }
   \                     ??ZDSecMgrAuthNwkKey_0:
   \   000018   80..         SJMP      ??Subroutine64_0
   1513          
   1514          /******************************************************************************
   1515           * PUBLIC FUNCTIONS
   1516           */
   1517          /******************************************************************************
   1518           * @fn          ZDSecMgrInit
   1519           *
   1520           * @brief       Initialize ZigBee Device Security Manager.
   1521           *
   1522           * @param       state - device initialization state
   1523           *
   1524           * @return      none
   1525           */
   1526          #if ( ADDRMGR_CALLBACK_ENABLED == 1 )
   1527          void ZDSecMgrAddrMgrCB( uint8 update, AddrMgrEntry_t* newEntry, AddrMgrEntry_t* oldEntry );
   1528          void ZDSecMgrAddrMgrCB( uint8           update,
   1529                                  AddrMgrEntry_t* newEntry,
   1530                                  AddrMgrEntry_t* oldEntry )
   1531          {
   1532            (void)update;
   1533            (void)newEntry;
   1534            (void)oldEntry;
   1535          }
   1536          #endif // ( ADDRMGR_CALLBACK_ENABLED == 1 )
   1537          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1538          void ZDSecMgrInit(uint8 state)
   \                     ZDSecMgrInit:
   1539          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   1540            if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD )
   1541            {
   1542              // initialize sub modules
   1543              ZDSecMgrEntryInit(state);
   \   000005                ; Setup parameters for call to function ZDSecMgrEntryInit
   \   000005   12....       LCALL     `??ZDSecMgrEntryInit::?relay`; Banked call to: ZDSecMgrEntryInit
   1544          
   1545              if ( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ) )
   1546              {
   1547                APSME_SetRequest( apsTrustCenterAddress, 0, NLME_GetExtAddr() );
   1548              }
   1549          
   1550              // register with Address Manager
   1551          #if ( ADDRMGR_CALLBACK_ENABLED == 1 )
   1552              AddrMgrRegister( ADDRMGR_REG_SECURITY, ZDSecMgrAddrMgrCB );
   1553          #endif
   1554            }
   1555          
   1556            if ( ZG_SECURE_ENABLED )
   1557            {
   1558              if ( ( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ) )
   1559                   || ( ( ZG_BUILD_RTR_TYPE ) && APSME_IsDistributedSecurity() ) )
   1560              {
   1561                // setup joining permissions
   1562                ZDSecMgrPermitJoiningEnabled = TRUE;  
   1563                ZDSecMgrPermitJoiningTimed   = FALSE;
   1564              }
   1565            }
   1566          
   1567            // configure security based on security mode and type of device
   1568            ZDSecMgrConfig();
   \   000008                ; Setup parameters for call to function SSP_Init
   \   000008   12....       LCALL     `??SSP_Init::?relay`; Banked call to: SSP_Init
   \   00000B                ; Setup parameters for call to function APSME_SecurityCM_ED
   \   00000B   12....       LCALL     `??APSME_SecurityCM_ED::?relay`; Banked call to: APSME_SecurityCM_ED
   1569          }
   \   00000E   02....       LJMP      ??Subroutine69_0 & 0xFFFF
   1570          
   1571          /******************************************************************************
   1572           * @fn          ZDSecMgrConfig
   1573           *
   1574           * @brief       Configure ZigBee Device Security Manager.
   1575           *
   1576           * @param       none
   1577           *
   1578           * @return      none
   1579           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1580          void ZDSecMgrConfig( void )
   \                     ZDSecMgrConfig:
   1581          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1582            if ( ZG_SECURE_ENABLED )
   1583            {
   1584              SSP_Init();
   \   000004                ; Setup parameters for call to function SSP_Init
   \   000004   12....       LCALL     `??SSP_Init::?relay`; Banked call to: SSP_Init
   1585          
   1586              if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD )
   1587              {
   1588                if ( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ) )
   1589                {
   1590                  // COMMERCIAL MODE - COORDINATOR DEVICE
   1591                  APSME_SecurityCM_CD();
   1592                }
   1593                else if ( ZSTACK_ROUTER_BUILD )
   1594                {
   1595                  // COMMERCIAL MODE - ROUTER DEVICE
   1596                  APSME_SecurityCM_RD();
   1597                }
   1598                else
   1599                {
   1600                  // COMMERCIAL MODE - END DEVICE
   1601                  APSME_SecurityCM_ED();
   \   000007                ; Setup parameters for call to function APSME_SecurityCM_ED
   \   000007   12....       LCALL     `??APSME_SecurityCM_ED::?relay`; Banked call to: APSME_SecurityCM_ED
   1602                }
   1603              }
   1604              else // ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_RESIDENTIAL )
   1605              {
   1606                if ( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ) )
   1607                {
   1608                  // RESIDENTIAL MODE - COORDINATOR DEVICE
   1609                  APSME_SecurityRM_CD();
   1610                }
   1611                else if ( ZSTACK_ROUTER_BUILD )
   1612                {
   1613                  // RESIDENTIAL MODE - ROUTER DEVICE
   1614                  APSME_SecurityRM_RD();
   1615                }
   1616                else
   1617                {
   1618                  // RESIDENTIAL MODE - END DEVICE
   1619                  APSME_SecurityRM_ED();
   1620                }
   1621              }
   1622            }
   1623            else
   1624            {
   1625              // NO SECURITY
   1626              APSME_SecurityNM();
   1627            }
   1628          }
   \   00000A   80..         SJMP      ??Subroutine64_0
   1629          
   1630          /******************************************************************************
   1631           * @fn          ZDSecMgrPermitJoining
   1632           *
   1633           * @brief       Process request to change joining permissions.
   1634           *
   1635           * @param       duration - [in] timed duration for join in seconds
   1636           *                         - 0x00 not allowed
   1637           *                         - 0xFF allowed without timeout
   1638           *
   1639           * @return      uint8 - success(TRUE:FALSE)
   1640           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1641          uint8 ZDSecMgrPermitJoining( uint8 duration )
   \                     ZDSecMgrPermitJoining:
   1642          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV       A,R1
   \   000005   F8           MOV       R0,A
   1643            uint8 accept;
   1644          
   1645            ZDSecMgrPermitJoiningTimed = FALSE;
   \   000006   90....       MOV       DPTR,#ZDSecMgrPermitJoiningTimed
   \   000009   E4           CLR       A
   \   00000A   F0           MOVX      @DPTR,A
   1646          
   1647            if ( duration > 0 )
   \   00000B   E8           MOV       A,R0
   \   00000C   90....       MOV       DPTR,#ZDSecMgrPermitJoiningEnabled
   \   00000F   6008         JZ        ??ZDSecMgrPermitJoining_0
   1648            {
   1649              ZDSecMgrPermitJoiningEnabled = TRUE;
   \   000011   7401         MOV       A,#0x1
   \   000013   F0           MOVX      @DPTR,A
   1650          
   1651              ZDSecMgrPermitJoiningTimed = TRUE;
   \   000014   90....       MOV       DPTR,#ZDSecMgrPermitJoiningTimed
   \   000017   8001         SJMP      ??ZDSecMgrPermitJoining_1
   1652            }
   1653            else
   1654            {
   1655              ZDSecMgrPermitJoiningEnabled = FALSE;
   \                     ??ZDSecMgrPermitJoining_0:
   \   000019   E4           CLR       A
   \                     ??ZDSecMgrPermitJoining_1:
   \   00001A   F0           MOVX      @DPTR,A
   1656            }
   1657          
   1658            accept = TRUE;
   1659          
   1660            return accept;
   \   00001B   7901         MOV       R1,#0x1
   \   00001D   80..         SJMP      ??Subroutine64_0
   1661          }
   1662          
   1663          /******************************************************************************
   1664           * @fn          ZDSecMgrPermitJoiningTimeout
   1665           *
   1666           * @brief       Process permit joining timeout
   1667           *
   1668           * @param       none
   1669           *
   1670           * @return      none
   1671           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1672          void ZDSecMgrPermitJoiningTimeout( void )
   \                     ZDSecMgrPermitJoiningTimeout:
   1673          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1674            if ( ZDSecMgrPermitJoiningTimed == TRUE )
   \   000004   90....       MOV       DPTR,#ZDSecMgrPermitJoiningTimed
   \   000007   E0           MOVX      A,@DPTR
   \   000008   6401         XRL       A,#0x1
   \   00000A   7009         JNZ       ??ZDSecMgrPermitJoiningTimeout_0
   1675            {
   1676              ZDSecMgrPermitJoiningEnabled = FALSE;
   \   00000C   90....       MOV       DPTR,#ZDSecMgrPermitJoiningEnabled
   \   00000F   E4           CLR       A
   \   000010   F0           MOVX      @DPTR,A
   1677              ZDSecMgrPermitJoiningTimed   = FALSE;
   \   000011   90....       MOV       DPTR,#ZDSecMgrPermitJoiningTimed
   \   000014   F0           MOVX      @DPTR,A
   1678            }
   1679          }
   \                     ??ZDSecMgrPermitJoiningTimeout_0:
   \   000015   80..         SJMP      ??Subroutine64_0
   1680          
   1681          /******************************************************************************
   1682           * @fn          ZDSecMgrNewDeviceEvent
   1683           *
   1684           * @brief       Process a the new device event, if found reset new device
   1685           *              event/timer.
   1686           *
   1687           * @param       ShortAddr - of New Device to process
   1688           *
   1689           * @return      uint8 - found(TRUE:FALSE)
   1690           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1691          uint8 ZDSecMgrNewDeviceEvent( uint16 ShortAddr )
   \                     ZDSecMgrNewDeviceEvent:
   1692          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV       A,#-0x15
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1693            uint8                 found;
   1694            ZDSecMgrDevice_t      device;
   1695            AddrMgrEntry_t        addrEntry;
   1696            associated_devices_t* assoc;
   1697            ZStatus_t             status;
   1698          
   1699            // initialize return results
   1700            found = FALSE;
   \   00000A   75..00       MOV       ?V0,#0x0
   1701          
   1702            assoc = AssocGetWithShort( ShortAddr );
   \   00000D                ; Setup parameters for call to function AssocGetWithShort
   \   00000D   12....       LCALL     `??AssocGetWithShort::?relay`; Banked call to: AssocGetWithShort
   \   000010   8A..         MOV       ?V2,R2
   \   000012   8B..         MOV       ?V3,R3
   \   000014   AE..         MOV       R6,?V2
   \   000016   AF..         MOV       R7,?V3
   1703          
   1704            if ( assoc != NULL )
   \   000018   EE           MOV       A,R6
   \   000019   4F           ORL       A,R7
   \   00001A   7003         JNZ       $+5
   \   00001C   02....       LJMP      ??ZDSecMgrNewDeviceEvent_0 & 0xFFFF
   1705            {
   1706              // device found
   1707              found = TRUE;
   \   00001F   75..01       MOV       ?V0,#0x1
   1708          
   1709              // check for preconfigured security
   1710              if ( zgPreConfigKeys == TRUE )
   \   000022   90....       MOV       DPTR,#zgPreConfigKeys
   \   000025   E0           MOVX      A,@DPTR
   \   000026   6401         XRL       A,#0x1
   \   000028   7003         JNZ       ??ZDSecMgrNewDeviceEvent_1
   1711              {
   1712                // set association status to authenticated
   1713                ZDSecMgrAssocDeviceAuth( assoc );
   \   00002A                ; Setup parameters for call to function ZDSecMgrAssocDeviceAuth
   \   00002A   12....       LCALL     `??ZDSecMgrAssocDeviceAuth::?relay`; Banked call to: ZDSecMgrAssocDeviceAuth
   1714              }
   1715          
   1716              // set up device info
   1717              addrEntry.user  = ADDRMGR_USER_DEFAULT;
   \                     ??ZDSecMgrNewDeviceEvent_1:
   \   00002D   7408         MOV       A,#0x8
   \   00002F   12....       LCALL     ?XSTACK_DISP0_8
   \   000032   E4           CLR       A
   \   000033   12....       LCALL     ?Subroutine49 & 0xFFFF
   1718              addrEntry.index = assoc->addrIdx;
   \                     ??CrossCallReturnLabel_76:
   \   000036   A3           INC       DPTR
   \   000037   A3           INC       DPTR
   \   000038   12....       LCALL     ??Subroutine66_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_161:
   \   00003B   7413         MOV       A,#0x13
   \   00003D   12....       LCALL     ?XSTACK_DISP0_8
   \   000040   12....       LCALL     ??Subroutine65_0 & 0xFFFF
   1719              AddrMgrEntryGet( &addrEntry );
   \                     ??CrossCallReturnLabel_148:
   \   000043                ; Setup parameters for call to function AddrMgrEntryGet
   \   000043   7408         MOV       A,#0x8
   \   000045   12....       LCALL     ?XSTACK_DISP101_8
   \   000048   12....       LCALL     `??AddrMgrEntryGet::?relay`; Banked call to: AddrMgrEntryGet
   1720          
   1721              device.nwkAddr    = assoc->shortAddr;
   \   00004B   8E82         MOV       DPL,R6
   \   00004D   8F83         MOV       DPH,R7
   \   00004F   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   000052   12....       LCALL     ?Subroutine19 & 0xFFFF
   1722              device.extAddr    = addrEntry.extAddr;
   \                     ??CrossCallReturnLabel_19:
   \   000055   12....       LCALL     ?XSTACK_DISP0_8
   \   000058   A882         MOV       R0,DPL
   \   00005A   A983         MOV       R1,DPH
   \   00005C   7402         MOV       A,#0x2
   \   00005E   12....       LCALL     ?XSTACK_DISP0_8
   \   000061   12....       LCALL     ??Subroutine65_0 & 0xFFFF
   1723              device.parentAddr = NLME_GetShortAddr();
   \                     ??CrossCallReturnLabel_149:
   \   000064                ; Setup parameters for call to function NLME_GetShortAddr
   \   000064   12....       LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000067   7404         MOV       A,#0x4
   \   000069   12....       LCALL     ?XSTACK_DISP0_8
   \   00006C   12....       LCALL     ?Subroutine50 & 0xFFFF
   1724          
   1725              // the new device performed Secured Rejoin
   1726              if ( ( assoc->devStatus & DEV_SECURED_JOIN ) &&
   1727                   ( assoc->devStatus & DEV_REJOIN_STATUS ) )
   \                     ??CrossCallReturnLabel_79:
   \   00006F   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   000072   5460         ANL       A,#0x60
   \   000074   6460         XRL       A,#0x60
   \   000076   7009         JNZ       ??ZDSecMgrNewDeviceEvent_2
   1728              {
   1729                device.secure     = TRUE;
   \   000078   7406         MOV       A,#0x6
   \   00007A   12....       LCALL     ?XSTACK_DISP0_8
   \   00007D   7401         MOV       A,#0x1
   \   00007F   8006         SJMP      ??ZDSecMgrNewDeviceEvent_3
   1730              }
   1731              else
   1732              {
   1733                device.secure     = FALSE;
   \                     ??ZDSecMgrNewDeviceEvent_2:
   \   000081   7406         MOV       A,#0x6
   \   000083   12....       LCALL     ?XSTACK_DISP0_8
   \   000086   E4           CLR       A
   1734              }
   \                     ??ZDSecMgrNewDeviceEvent_3:
   \   000087   12....       LCALL     ?Subroutine49 & 0xFFFF
   1735              device.devStatus  = assoc->devStatus;
   \                     ??CrossCallReturnLabel_77:
   \   00008A   E0           MOVX      A,@DPTR
   \   00008B   C0E0         PUSH      A
   \   00008D   7407         MOV       A,#0x7
   \   00008F   12....       LCALL     ?XSTACK_DISP0_8
   \   000092   D0E0         POP       A
   \   000094   12....       LCALL     ??Subroutine73_0 & 0xFFFF
   1736          
   1737              // process new device
   1738              status = ZDSecMgrDeviceNew( &device );
   1739          
   1740              if ( status == ZSuccess )
   \                     ??CrossCallReturnLabel_190:
   \   000097   12....       LCALL     `??ZDSecMgrDeviceNew::?relay`; Banked call to: ZDSecMgrDeviceNew
   \   00009A   E9           MOV       A,R1
   \   00009B   700A         JNZ       ??ZDSecMgrNewDeviceEvent_4
   1741              {
   1742                assoc->devStatus &= ~DEV_SEC_INIT_STATUS;
   \   00009D   8E82         MOV       DPL,R6
   \   00009F   8F83         MOV       DPH,R7
   \   0000A1   E0           MOVX      A,@DPTR
   \   0000A2   C2E2         CLR       0xE0 /* A   */.2
   \   0000A4   F0           MOVX      @DPTR,A
   \   0000A5   8018         SJMP      ??ZDSecMgrNewDeviceEvent_0
   1743              }
   1744              else
   1745              {
   1746                // Clear SECURITY bit from Address Manager
   1747                ZDSecMgrAddrClear( addrEntry.extAddr );
   \                     ??ZDSecMgrNewDeviceEvent_4:
   \   0000A7                ; Setup parameters for call to function ZDSecMgrAddrClear
   \   0000A7   740B         MOV       A,#0xb
   \   0000A9   12....       LCALL     ?XSTACK_DISP0_8
   \   0000AC   AA82         MOV       R2,DPL
   \   0000AE   AB83         MOV       R3,DPH
   \   0000B0   12....       LCALL     `??ZDSecMgrAddrClear::?relay`; Banked call to: ZDSecMgrAddrClear
   1748          
   1749                // Remove the Association completely
   1750                AssocRemove( addrEntry.extAddr );
   \   0000B3                ; Setup parameters for call to function AssocRemove
   \   0000B3   740B         MOV       A,#0xb
   \   0000B5   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B8   AA82         MOV       R2,DPL
   \   0000BA   AB83         MOV       R3,DPH
   \   0000BC   12....       LCALL     `??AssocRemove::?relay`; Banked call to: AssocRemove
   1751              }
   1752            }
   1753          
   1754            return found;
   \                     ??ZDSecMgrNewDeviceEvent_0:
   \   0000BF   A9..         MOV       R1,?V0
   \   0000C1   7415         MOV       A,#0x15
   \   0000C3   02....       LJMP      ?Subroutine3 & 0xFFFF
   1755          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   EE           MOV       A,R6
   \   000001   2405         ADD       A,#0x5
   \   000003   F8           MOV       R0,A
   \   000004   E4           CLR       A
   \   000005   3F           ADDC      A,R7
   \   000006   F9           MOV       R1,A
   \   000007   E8           MOV       A,R0
   \   000008   FE           MOV       R6,A
   \   000009   E9           MOV       A,R1
   \   00000A   FF           MOV       R7,A
   \   00000B                ; Setup parameters for call to function SSP_UpdateNwkKey
   \   00000B   8E82         MOV       DPL,R6
   \   00000D   8F83         MOV       DPH,R7
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   12....       LCALL     ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_171:
   \   000003   85..82       MOV       DPL,?XSP + 0
   \   000006   85..83       MOV       DPH,?XSP + 1
   \   000009   22           RET
   1756          
   1757          /******************************************************************************
   1758           * @fn          ZDSecMgrTCExtAddrCheck
   1759           *
   1760           * @brief       Verifies if received ext. address matches TC ext. address.
   1761           *
   1762           * @param       extAddr - Extended address to be verified.
   1763           *
   1764           * @return      TRUE - extended address matches
   1765           *              FALSE - otherwise
   1766           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1767          uint8 ZDSecMgrTCExtAddrCheck( uint8* extAddr )
   \                     ZDSecMgrTCExtAddrCheck:
   1768          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV       A,#-0x8
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   1769            uint8  lookup[Z_EXTADDR_LEN];
   1770            APSME_GetRequest( apsTrustCenterAddress, 0, lookup );
   \   00000E                ; Setup parameters for call to function APSME_GetRequest
   \   00000E   AC..         MOV       R4,?XSP + 0
   \   000010   AD..         MOV       R5,?XSP + 1
   \   000012   7A00         MOV       R2,#0x0
   \   000014   7B00         MOV       R3,#0x0
   \   000016   79AB         MOV       R1,#-0x55
   \   000018   12....       LCALL     `??APSME_GetRequest::?relay`; Banked call to: APSME_GetRequest
   1771            return osal_ExtAddrEqual( extAddr, lookup );
   \   00001B                ; Setup parameters for call to function sAddrExtCmp
   \   00001B   AC..         MOV       R4,?XSP + 0
   \   00001D   AD..         MOV       R5,?XSP + 1
   \   00001F   EE           MOV       A,R6
   \   000020   FA           MOV       R2,A
   \   000021   EF           MOV       A,R7
   \   000022   FB           MOV       R3,A
   \   000023   12....       LCALL     `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   000026                REQUIRE ?Subroutine8
   \   000026                ; // Fall through to label ?Subroutine8
   1772          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   7408         MOV       A,#0x8
   \   000002   02....       LJMP      ??Subroutine68_0 & 0xFFFF
   1773          
   1774          /******************************************************************************
   1775           * @fn          ZDSecMgrTCDataLoad
   1776           *
   1777           * @brief       Stores the address of TC into address manager.
   1778           *
   1779           * @param       extAddr - Extended address to be verified.
   1780           *
   1781           * @return      none
   1782           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1783          void ZDSecMgrTCDataLoad( uint8* extAddr )
   \                     ZDSecMgrTCDataLoad:
   1784          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 15
   \   000005   74F1         MOV       A,#-0xf
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   1785            uint16 ami;
   1786            AddrMgrEntry_t entry;
   1787          
   1788            // lookup using TC short address
   1789            entry.user    = ADDRMGR_USER_DEFAULT;
   \   00000E   7402         MOV       A,#0x2
   \   000010   12....       LCALL     ?XSTACK_DISP0_8
   \   000013   E4           CLR       A
   \   000014   F0           MOVX      @DPTR,A
   1790            osal_cpyExtAddr( entry.extAddr, extAddr );
   \   000015                ; Setup parameters for call to function sAddrExtCpy
   \   000015   EE           MOV       A,R6
   \   000016   FC           MOV       R4,A
   \   000017   EF           MOV       A,R7
   \   000018   FD           MOV       R5,A
   \   000019   7405         MOV       A,#0x5
   \   00001B   12....       LCALL     ?XSTACK_DISP0_8
   \   00001E   AA82         MOV       R2,DPL
   \   000020   AB83         MOV       R3,DPH
   \   000022   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   1791          
   1792            // Verify if TC address has been added to Address Manager
   1793            if ( !APSME_IsDistributedSecurity() && ( AddrMgrEntryLookupExt( &entry ) != TRUE ) )
   \   000025                ; Setup parameters for call to function APSME_IsDistributedSecurity
   \   000025   12....       LCALL     `??APSME_IsDistributedSecurity::?relay`; Banked call to: APSME_IsDistributedSecurity
   \   000028   E9           MOV       A,R1
   \   000029   702A         JNZ       ??ZDSecMgrTCDataLoad_0
   \   00002B                ; Setup parameters for call to function AddrMgrEntryLookupExt
   \   00002B   7402         MOV       A,#0x2
   \   00002D   12....       LCALL     ?XSTACK_DISP101_8
   \   000030   12....       LCALL     `??AddrMgrEntryLookupExt::?relay`; Banked call to: AddrMgrEntryLookupExt
   \   000033   E9           MOV       A,R1
   \   000034   6401         XRL       A,#0x1
   \   000036   601D         JZ        ??ZDSecMgrTCDataLoad_0
   1794            {
   1795              ZDSecMgrAddrStore( APSME_TRUSTCENTER_NWKADDR, extAddr, &ami );
   \   000038                ; Setup parameters for call to function ZDSecMgrAddrStore
   \   000038   A8..         MOV       R0,?XSP + 0
   \   00003A   A9..         MOV       R1,?XSP + 1
   \   00003C   88..         MOV       ?V0,R0
   \   00003E   89..         MOV       ?V1,R1
   \   000040   78..         MOV       R0,#?V0
   \   000042   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000045   EE           MOV       A,R6
   \   000046   FC           MOV       R4,A
   \   000047   EF           MOV       A,R7
   \   000048   FD           MOV       R5,A
   \   000049   7A00         MOV       R2,#0x0
   \   00004B   7B00         MOV       R3,#0x0
   \   00004D   12....       LCALL     `??ZDSecMgrAddrStore::?relay`; Banked call to: ZDSecMgrAddrStore
   \   000050   7402         MOV       A,#0x2
   \   000052   12....       LCALL     ?DEALLOC_XSTACK8
   1796            }
   1797          }
   \                     ??ZDSecMgrTCDataLoad_0:
   \   000055   740F         MOV       A,#0xf
   \   000057   02....       LJMP      ?Subroutine4 & 0xFFFF
   1798          
   1799          /******************************************************************************
   1800           * @fn          ZDSecMgrTransportKeyInd
   1801           *
   1802           * @brief       Process the ZDO_TransportKeyInd_t message.
   1803           *
   1804           * @param       ind - [in] ZDO_TransportKeyInd_t indication
   1805           *
   1806           * @return      none
   1807           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   12....       LCALL     ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_87:
   \   000003                REQUIRE ??Subroutine65_0
   \   000003                ; // Fall through to label ??Subroutine65_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1808          void ZDSecMgrTransportKeyInd( ZDO_TransportKeyInd_t* ind )
   \                     ZDSecMgrTransportKeyInd:
   1809          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 40
   \   000005   74D8         MOV       A,#-0x28
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   1810            uint8 index;
   1811            uint8 zgPreConfigKey[SEC_KEY_LEN];
   1812          
   1813            ZDSecMgrUpdateTCAddress( ind->srcExtAddr );
   \   00000E   EE           MOV       A,R6
   \   00000F   2416         ADD       A,#0x16
   \   000011   F5..         MOV       ?V2,A
   \   000013   E4           CLR       A
   \   000014   3F           ADDC      A,R7
   \   000015   F5..         MOV       ?V3,A
   \   000017                ; Setup parameters for call to function ZDSecMgrUpdateTCAddress
   \   000017   AA..         MOV       R2,?V2
   \   000019   FB           MOV       R3,A
   \   00001A   12....       LCALL     `??ZDSecMgrUpdateTCAddress::?relay`; Banked call to: ZDSecMgrUpdateTCAddress
   1814            
   1815          #if ZG_BUILD_JOINING_TYPE
   1816            if(ZG_DEVICE_JOINING_TYPE)
   \   00001D   90....       MOV       DPTR,#zgDeviceLogicalType
   \   000020   E0           MOVX      A,@DPTR
   \   000021   6401         XRL       A,#0x1
   \   000023   6005         JZ        ??ZDSecMgrTransportKeyInd_0
   \   000025   E0           MOVX      A,@DPTR
   \   000026   6402         XRL       A,#0x2
   \   000028   7020         JNZ       ??ZDSecMgrTransportKeyInd_1
   1817            {
   1818              //Update the TC address in the entry
   1819              osal_nv_write(ZCD_NV_TCLK_TABLE_START, osal_offsetof(APSME_TCLKDevEntry_t,extAddr), Z_EXTADDR_LEN, ind->srcExtAddr);
   \                     ??ZDSecMgrTransportKeyInd_0:
   \   00002A                ; Setup parameters for call to function osal_nv_write
   \   00002A   78..         MOV       R0,#?V2
   \   00002C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002F   75..08       MOV       ?V0,#0x8
   \   000032   75..00       MOV       ?V1,#0x0
   \   000035   78..         MOV       R0,#?V0
   \   000037   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003A   7C08         MOV       R4,#0x8
   \   00003C   7D00         MOV       R5,#0x0
   \   00003E   7A11         MOV       R2,#0x11
   \   000040   7B01         MOV       R3,#0x1
   \   000042   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000045   7404         MOV       A,#0x4
   \   000047   12....       LCALL     ?DEALLOC_XSTACK8
   1820            }
   1821          #endif
   1822            
   1823            // check for distributed security
   1824            if ( ( ZG_BUILD_RTR_TYPE ) && osal_isbufset( ind->srcExtAddr, 0xFF, Z_EXTADDR_LEN ) )
   1825            {
   1826              ZDSecMgrPermitJoiningEnabled = TRUE;  
   1827            }
   1828            
   1829            // load Trust Center data if needed
   1830            ZDSecMgrTCDataLoad( ind->srcExtAddr );
   \                     ??ZDSecMgrTransportKeyInd_1:
   \   00004A                ; Setup parameters for call to function ZDSecMgrTCDataLoad
   \   00004A   AA..         MOV       R2,?V2
   \   00004C   AB..         MOV       R3,?V3
   \   00004E   12....       LCALL     `??ZDSecMgrTCDataLoad::?relay`; Banked call to: ZDSecMgrTCDataLoad
   1831            
   1832            if ( ( ind->keyType == KEY_TYPE_NWK ) ||
   1833                 ( ind->keyType == 6            ) )
   \   000051   8E82         MOV       DPL,R6
   \   000053   8F83         MOV       DPH,R7
   \   000055   A3           INC       DPTR
   \   000056   A3           INC       DPTR
   \   000057   A3           INC       DPTR
   \   000058   A3           INC       DPTR
   \   000059   E0           MOVX      A,@DPTR
   \   00005A   F8           MOV       R0,A
   \   00005B   EE           MOV       A,R6
   \   00005C   2406         ADD       A,#0x6
   \   00005E   F5..         MOV       ?V0,A
   \   000060   E4           CLR       A
   \   000061   3F           ADDC      A,R7
   \   000062   F5..         MOV       ?V1,A
   \   000064   7401         MOV       A,#0x1
   \   000066   68           XRL       A,R0
   \   000067   6005         JZ        ??ZDSecMgrTransportKeyInd_2
   \   000069   7406         MOV       A,#0x6
   \   00006B   68           XRL       A,R0
   \   00006C   7072         JNZ       ??ZDSecMgrTransportKeyInd_3
   1834            {
   1835              // check for dummy NWK key (all zeros)
   1836              for ( index = 0;
   \                     ??ZDSecMgrTransportKeyInd_2:
   \   00006E   7800         MOV       R0,#0x0
   \                     ??ZDSecMgrTransportKeyInd_4:
   \   000070   E8           MOV       A,R0
   \   000071   FA           MOV       R2,A
   \   000072   EE           MOV       A,R6
   \   000073   2A           ADD       A,R2
   \   000074   F582         MOV       DPL,A
   \   000076   E4           CLR       A
   \   000077   3F           ADDC      A,R7
   \   000078   F583         MOV       DPH,A
   \   00007A   A3           INC       DPTR
   \   00007B   A3           INC       DPTR
   \   00007C   A3           INC       DPTR
   \   00007D   A3           INC       DPTR
   \   00007E   A3           INC       DPTR
   \   00007F   A3           INC       DPTR
   \   000080   E0           MOVX      A,@DPTR
   \   000081   7007         JNZ       ??ZDSecMgrTransportKeyInd_5
   1837                    ( (index < SEC_KEY_LEN) && (ind->key[index] == 0) );
   1838                    index++ );
   \   000083   08           INC       R0
   \   000084   E8           MOV       A,R0
   \   000085   C3           CLR       C
   \   000086   9410         SUBB      A,#0x10
   \   000088   40E6         JC        ??ZDSecMgrTransportKeyInd_4
   1839          
   1840              if ( index == SEC_KEY_LEN )
   \                     ??ZDSecMgrTransportKeyInd_5:
   \   00008A   7410         MOV       A,#0x10
   \   00008C   68           XRL       A,R0
   \   00008D   7031         JNZ       ??ZDSecMgrTransportKeyInd_6
   1841              {
   1842                // load preconfigured key - once!!
   1843                if ( !_NIB.nwkKeyLoaded )
   \   00008F   90....       MOV       DPTR,#_NIB + 61
   \   000092   E0           MOVX      A,@DPTR
   \   000093   7045         JNZ       ??ZDSecMgrTransportKeyInd_7
   1844                {
   1845                  ZDSecMgrReadKeyFromNv(ZCD_NV_PRECFGKEY, zgPreConfigKey);
   \   000095                ; Setup parameters for call to function ZDSecMgrReadKeyFromNv
   \   000095   7418         MOV       A,#0x18
   \   000097   12....       LCALL     ?XSTACK_DISP102_8
   \   00009A   7A62         MOV       R2,#0x62
   \   00009C   7B00         MOV       R3,#0x0
   \   00009E   12....       LCALL     `??ZDSecMgrReadKeyFromNv::?relay`; Banked call to: ZDSecMgrReadKeyFromNv
   1846                  SSP_UpdateNwkKey( zgPreConfigKey, 0 );
   \   0000A1                ; Setup parameters for call to function SSP_UpdateNwkKey
   \   0000A1   7900         MOV       R1,#0x0
   \   0000A3   7418         MOV       A,#0x18
   \   0000A5   12....       LCALL     ?XSTACK_DISP101_8
   \   0000A8   12....       LCALL     `??SSP_UpdateNwkKey::?relay`; Banked call to: SSP_UpdateNwkKey
   1847                  SSP_SwitchNwkKey( 0 );
   \   0000AB                ; Setup parameters for call to function SSP_SwitchNwkKey
   \   0000AB   7900         MOV       R1,#0x0
   \   0000AD   12....       LCALL     `??SSP_SwitchNwkKey::?relay`; Banked call to: SSP_SwitchNwkKey
   1848          
   1849                  // clear local copy of key
   1850                  osal_memset(zgPreConfigKey, 0x00, SEC_KEY_LEN);
   \   0000B0                ; Setup parameters for call to function osal_memset
   \   0000B0   7C10         MOV       R4,#0x10
   \   0000B2   7D00         MOV       R5,#0x0
   \   0000B4   7900         MOV       R1,#0x0
   \   0000B6   7418         MOV       A,#0x18
   \   0000B8   12....       LCALL     ?XSTACK_DISP101_8
   \   0000BB   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   \   0000BE   801A         SJMP      ??ZDSecMgrTransportKeyInd_7
   1851                }
   1852              }
   1853              else
   1854              {
   1855                SSP_UpdateNwkKey( ind->key, ind->keySeqNum );
   \                     ??ZDSecMgrTransportKeyInd_6:
   \   0000C0   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   0000C3   F9           MOV       R1,A
   \   0000C4   AA..         MOV       R2,?V0
   \   0000C6   AB..         MOV       R3,?V1
   \   0000C8   12....       LCALL     `??SSP_UpdateNwkKey::?relay`; Banked call to: SSP_UpdateNwkKey
   1856                if ( !_NIB.nwkKeyLoaded )
   \   0000CB   90....       MOV       DPTR,#_NIB + 61
   \   0000CE   E0           MOVX      A,@DPTR
   \   0000CF   7009         JNZ       ??ZDSecMgrTransportKeyInd_7
   1857                {
   1858                  SSP_SwitchNwkKey( ind->keySeqNum );
   \   0000D1                ; Setup parameters for call to function SSP_SwitchNwkKey
   \   0000D1   8E82         MOV       DPL,R6
   \   0000D3   8F83         MOV       DPH,R7
   \   0000D5   E0           MOVX      A,@DPTR
   \   0000D6   F9           MOV       R1,A
   \   0000D7   12....       LCALL     `??SSP_SwitchNwkKey::?relay`; Banked call to: SSP_SwitchNwkKey
   1859                }
   1860              }
   1861          
   1862              // handle next step in authentication process
   1863              ZDSecMgrAuthNwkKey();
   \                     ??ZDSecMgrTransportKeyInd_7:
   \   0000DA                ; Setup parameters for call to function ZDSecMgrAuthNwkKey
   \   0000DA   12....       LCALL     `??ZDSecMgrAuthNwkKey::?relay`; Banked call to: ZDSecMgrAuthNwkKey
   \   0000DD   02....       LJMP      ??ZDSecMgrTransportKeyInd_8 & 0xFFFF
   1864            }
   1865            else if ( ind->keyType == KEY_TYPE_TC_LINK )
   \                     ??ZDSecMgrTransportKeyInd_3:
   \   0000E0   7404         MOV       A,#0x4
   \   0000E2   68           XRL       A,R0
   \   0000E3   6003         JZ        $+5
   \   0000E5   02....       LJMP      ??ZDSecMgrTransportKeyInd_9 & 0xFFFF
   1866            {
   1867              uint16 entryIndex;
   1868              uint8 found;
   1869              APSME_TCLKDevEntry_t TCLKDevEntry;
   1870              
   1871              //Search the entry, which should exist at this point
   1872              entryIndex = APSME_SearchTCLinkKeyEntry(ind->srcExtAddr, &found, &TCLKDevEntry);
   \   0000E8                ; Setup parameters for call to function APSME_SearchTCLinkKeyEntry
   \   0000E8   7405         MOV       A,#0x5
   \   0000EA   12....       LCALL     ?XSTACK_DISP100_8
   \   0000ED   88..         MOV       ?V4,R0
   \   0000EF   89..         MOV       ?V5,R1
   \   0000F1   78..         MOV       R0,#?V4
   \   0000F3   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000F6   7402         MOV       A,#0x2
   \   0000F8   12....       LCALL     ?XSTACK_DISP102_8
   \   0000FB   AA..         MOV       R2,?V2
   \   0000FD   AB..         MOV       R3,?V3
   \   0000FF   12....       LCALL     `??APSME_SearchTCLinkKeyEntry::?relay`; Banked call to: APSME_SearchTCLinkKeyEntry
   \   000102   7402         MOV       A,#0x2
   \   000104   12....       LCALL     ?DEALLOC_XSTACK8
   \   000107   8A..         MOV       ?V2,R2
   \   000109   8B..         MOV       ?V3,R3
   \   00010B   AE..         MOV       R6,?V2
   \   00010D   AF..         MOV       R7,?V3
   1873              
   1874              if(found)
   \   00010F   85..82       MOV       DPL,?XSP + 0
   \   000112   85..83       MOV       DPH,?XSP + 1
   \   000115   E0           MOVX      A,@DPTR
   \   000116   7003         JNZ       $+5
   \   000118   02....       LJMP      ??ZDSecMgrTransportKeyInd_8 & 0xFFFF
   1875              {
   1876                //If the key was an IC, then erase the entry since that will not longer be used.
   1877                if(TCLKDevEntry.keyAttributes == ZG_PROVISIONAL_KEY)
   \   00011B   7415         MOV       A,#0x15
   \   00011D   12....       LCALL     ?XSTACK_DISP0_8
   \   000120   E0           MOVX      A,@DPTR
   \   000121   700C         JNZ       ??ZDSecMgrTransportKeyInd_10
   1878                {
   1879                  APSME_EraseICEntry(&TCLKDevEntry.SeedShift_IcIndex);
   \   000123                ; Setup parameters for call to function APSME_EraseICEntry
   \   000123   7417         MOV       A,#0x17
   \   000125   12....       LCALL     ?XSTACK_DISP0_8
   \   000128   AA82         MOV       R2,DPL
   \   00012A   AB83         MOV       R3,DPH
   \   00012C   12....       LCALL     `??APSME_EraseICEntry::?relay`; Banked call to: APSME_EraseICEntry
   1880                }
   1881                
   1882                TCLKDevEntry.keyAttributes = ZG_UNVERIFIED_KEY;
   \                     ??ZDSecMgrTransportKeyInd_10:
   \   00012F   7415         MOV       A,#0x15
   \   000131   12....       LCALL     ?XSTACK_DISP0_8
   \   000134   7401         MOV       A,#0x1
   \   000136   F0           MOVX      @DPTR,A
   1883                TCLKDevEntry.keyType = ZG_UNIQUE_LINK_KEY;
   \   000137   7416         MOV       A,#0x16
   \   000139   12....       LCALL     ?XSTACK_DISP0_8
   \   00013C   E4           CLR       A
   \   00013D   F0           MOVX      @DPTR,A
   1884                TCLKDevEntry.rxFrmCntr = 0;
   \   00013E   7409         MOV       A,#0x9
   \   000140   12....       LCALL     ?XSTACK_DISP0_8
   \   000143   12....       LCALL     ?Subroutine21 & 0xFFFF
   1885                TCLKDevEntry.txFrmCntr = 0;
   \                     ??CrossCallReturnLabel_20:
   \   000146   12....       LCALL     ?XSTACK_DISP0_8
   \   000149   12....       LCALL     ??Subroutine75_0 & 0xFFFF
   1886                TCLKDevEntry.SeedShift_IcIndex = 0;
   \                     ??CrossCallReturnLabel_196:
   \   00014C   7417         MOV       A,#0x17
   \   00014E   12....       LCALL     ?XSTACK_DISP0_8
   \   000151   E4           CLR       A
   \   000152   F0           MOVX      @DPTR,A
   1887                
   1888                //Update the entry
   1889                osal_nv_write(entryIndex,0,sizeof(APSME_TCLKDevEntry_t),&TCLKDevEntry);
   \   000153                ; Setup parameters for call to function osal_nv_write
   \   000153   7405         MOV       A,#0x5
   \   000155   12....       LCALL     ?XSTACK_DISP100_8
   \   000158   88..         MOV       ?V2,R0
   \   00015A   89..         MOV       ?V3,R1
   \   00015C   78..         MOV       R0,#?V2
   \   00015E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000161   75..13       MOV       ?V2,#0x13
   \   000164   75..00       MOV       ?V3,#0x0
   \   000167   78..         MOV       R0,#?V2
   \   000169   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00016C   7C00         MOV       R4,#0x0
   \   00016E   7D00         MOV       R5,#0x0
   \   000170   EE           MOV       A,R6
   \   000171   FA           MOV       R2,A
   \   000172   EF           MOV       A,R7
   \   000173   FB           MOV       R3,A
   \   000174   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000177   7404         MOV       A,#0x4
   \   000179   12....       LCALL     ?DEALLOC_XSTACK8
   1890          
   1891                //Create the entry for the key
   1892                if(ZSUCCESS == osal_nv_item_init(ZCD_NV_TCLK_JOIN_DEV,SEC_KEY_LEN,ind->key) )
   \   00017C                ; Setup parameters for call to function osal_nv_item_init
   \   00017C   78..         MOV       R0,#?V0
   \   00017E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000181   7C10         MOV       R4,#0x10
   \   000183   7D00         MOV       R5,#0x0
   \   000185   7A02         MOV       R2,#0x2
   \   000187   7B01         MOV       R3,#0x1
   \   000189   12....       LCALL     `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   00018C   7402         MOV       A,#0x2
   \   00018E   12....       LCALL     ?DEALLOC_XSTACK8
   \   000191   E9           MOV       A,R1
   \   000192   7020         JNZ       ??ZDSecMgrTransportKeyInd_11
   1893                {
   1894                  //Or replace it if already existed
   1895                  osal_nv_write(ZCD_NV_TCLK_JOIN_DEV,0,SEC_KEY_LEN,ind->key);
   \   000194                ; Setup parameters for call to function osal_nv_write
   \   000194   78..         MOV       R0,#?V0
   \   000196   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000199   75..10       MOV       ?V0,#0x10
   \   00019C   75..00       MOV       ?V1,#0x0
   \   00019F   78..         MOV       R0,#?V0
   \   0001A1   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001A4   7C00         MOV       R4,#0x0
   \   0001A6   7D00         MOV       R5,#0x0
   \   0001A8   7A02         MOV       R2,#0x2
   \   0001AA   7B01         MOV       R3,#0x1
   \   0001AC   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   0001AF   7404         MOV       A,#0x4
   \   0001B1   12....       LCALL     ?DEALLOC_XSTACK8
   1896                }
   1897                
   1898                bdb_tcLinkKeyExchangeAttempt(TRUE,BDB_REQ_VERIFY_TC_LINK_KEY);
   \                     ??ZDSecMgrTransportKeyInd_11:
   \   0001B4                ; Setup parameters for call to function bdb_tcLinkKeyExchangeAttempt
   \   0001B4   7A03         MOV       R2,#0x3
   \   0001B6   7901         MOV       R1,#0x1
   \   0001B8   12....       LCALL     `??bdb_tcLinkKeyExchangeAttempt::?relay`; Banked call to: bdb_tcLinkKeyExchangeAttempt
   \   0001BB   02....       LJMP      ??ZDSecMgrTransportKeyInd_8 & 0xFFFF
   1899              }
   1900            }
   1901            else if ( ind->keyType == KEY_TYPE_APP_LINK )
   \                     ??ZDSecMgrTransportKeyInd_9:
   \   0001BE   7403         MOV       A,#0x3
   \   0001C0   68           XRL       A,R0
   \   0001C1   707D         JNZ       ??ZDSecMgrTransportKeyInd_8
   1902            {
   1903              if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD )
   1904              {
   1905                uint16           ami;
   1906                ZDSecMgrEntry_t* entry;
   1907          
   1908                // get the address index
   1909                if ( ZDSecMgrExtAddrLookup( ind->srcExtAddr, &ami ) != ZSuccess )
   \   0001C3                ; Setup parameters for call to function ZDSecMgrExtAddrLookup
   \   0001C3   7403         MOV       A,#0x3
   \   0001C5   12....       LCALL     ?XSTACK_DISP102_8
   \   0001C8   AA..         MOV       R2,?V2
   \   0001CA   AB..         MOV       R3,?V3
   \   0001CC   12....       LCALL     `??ZDSecMgrExtAddrLookup::?relay`; Banked call to: ZDSecMgrExtAddrLookup
   \   0001CF   E9           MOV       A,R1
   \   0001D0   602B         JZ        ??ZDSecMgrTransportKeyInd_12
   1910                {
   1911                  // store new EXT address
   1912                  ZDSecMgrAddrStore( INVALID_NODE_ADDR, ind->srcExtAddr, &ami );
   \   0001D2                ; Setup parameters for call to function ZDSecMgrAddrStore
   \   0001D2   7403         MOV       A,#0x3
   \   0001D4   12....       LCALL     ?XSTACK_DISP100_8
   \   0001D7   88..         MOV       ?V4,R0
   \   0001D9   89..         MOV       ?V5,R1
   \   0001DB   78..         MOV       R0,#?V4
   \   0001DD   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001E0   AC..         MOV       R4,?V2
   \   0001E2   AD..         MOV       R5,?V3
   \   0001E4   7AFE         MOV       R2,#-0x2
   \   0001E6   7BFF         MOV       R3,#-0x1
   \   0001E8   12....       LCALL     `??ZDSecMgrAddrStore::?relay`; Banked call to: ZDSecMgrAddrStore
   \   0001EB   7402         MOV       A,#0x2
   \   0001ED   12....       LCALL     ?DEALLOC_XSTACK8
   1913                  ZDP_NwkAddrReq( ind->srcExtAddr, ZDP_ADDR_REQTYPE_SINGLE, 0, 0 );
   \   0001F0                ; Setup parameters for call to function ZDP_NwkAddrReq
   \   0001F0   7D00         MOV       R5,#0x0
   \   0001F2   7C00         MOV       R4,#0x0
   \   0001F4   7900         MOV       R1,#0x0
   \   0001F6   AA..         MOV       R2,?V2
   \   0001F8   AB..         MOV       R3,?V3
   \   0001FA   12....       LCALL     `??ZDP_NwkAddrReq::?relay`; Banked call to: ZDP_NwkAddrReq
   1914                }
   1915          
   1916                ZDSecMgrEntryLookupAMI( ami, &entry );
   \                     ??ZDSecMgrTransportKeyInd_12:
   \   0001FD                ; Setup parameters for call to function ZDSecMgrEntryLookupAMI
   \   0001FD   7401         MOV       A,#0x1
   \   0001FF   12....       LCALL     ?XSTACK_DISP102_8
   \   000202   7403         MOV       A,#0x3
   \   000204   12....       LCALL     ?XSTACK_DISP0_8
   \   000207   12....       LCALL     ??Subroutine62_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_126:
   \   00020A   12....       LCALL     `??ZDSecMgrEntryLookupAMI::?relay`; Banked call to: ZDSecMgrEntryLookupAMI
   1917          
   1918                if ( entry == NULL )
   \   00020D   7401         MOV       A,#0x1
   \   00020F   12....       LCALL     ?XSTACK_DISP0_8
   \   000212   12....       LCALL     ??Subroutine67_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_179:
   \   000215   701B         JNZ       ??CrossCallReturnLabel_154
   1919                {
   1920                  // get new entry
   1921                  if ( ZDSecMgrEntryNew( &entry ) == ZSuccess )
   \   000217                ; Setup parameters for call to function ZDSecMgrEntryNew
   \   000217   7401         MOV       A,#0x1
   \   000219   12....       LCALL     ?XSTACK_DISP101_8
   \   00021C   12....       LCALL     `??ZDSecMgrEntryNew::?relay`; Banked call to: ZDSecMgrEntryNew
   \   00021F   E9           MOV       A,R1
   \   000220   7010         JNZ       ??CrossCallReturnLabel_154
   1922                  {
   1923                    // finish setting up entry
   1924                    entry->ami = ami;
   \   000222   7403         MOV       A,#0x3
   \   000224   12....       LCALL     ?XSTACK_DISP0_8
   \   000227   12....       LCALL     ??Subroutine66_0 & 0xFFFF
   1925                  }
   1926                }
   \                     ??CrossCallReturnLabel_162:
   \   00022A   7401         MOV       A,#0x1
   \   00022C   12....       LCALL     ?XSTACK_DISP0_8
   \   00022F   12....       LCALL     ?Subroutine20 & 0xFFFF
   1927          
   1928                ZDSecMgrLinkKeySet( ind->srcExtAddr, ind->key );
   \                     ??CrossCallReturnLabel_154:
   \   000232                ; Setup parameters for call to function APSME_LinkKeySet
   \   000232   AC..         MOV       R4,?V0
   \   000234   AD..         MOV       R5,?V1
   \   000236   AA..         MOV       R2,?V2
   \   000238   AB..         MOV       R3,?V3
   \   00023A   12....       LCALL     `??APSME_LinkKeySet::?relay`; Banked call to: APSME_LinkKeySet
   1929          
   1930          #if defined NV_RESTORE
   1931                ZDSecMgrWriteNV();  // Write the control record for the new established link key to NV.
   \   00023D                ; Setup parameters for call to function ZDSecMgrWriteNV
   \   00023D   12....       LCALL     `??ZDSecMgrWriteNV::?relay`; Banked call to: ZDSecMgrWriteNV
   1932          #endif
   1933              }
   1934            }
   1935          }
   \                     ??ZDSecMgrTransportKeyInd_8:
   \   000240   7428         MOV       A,#0x28
   \   000242   12....       LCALL     ?DEALLOC_XSTACK8
   \   000245   7F06         MOV       R7,#0x6
   \   000247   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   12....       LCALL     ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_202:
   \   000003   7405         MOV       A,#0x5
   \   000005   22           RET
   1936          
   1937          /******************************************************************************
   1938           * @fn          ZDSecMgrUpdateDeviceInd
   1939           *
   1940           * @brief       Process the ZDO_UpdateDeviceInd_t message.
   1941           *
   1942           * @param       ind - [in] ZDO_UpdateDeviceInd_t indication
   1943           *
   1944           * @return      none
   1945           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7408         MOV       A,#0x8
   \   000002                REQUIRE ??Subroutine63_0
   \   000002                ; // Fall through to label ??Subroutine63_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine63_0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine64_0
   \   000003                ; // Fall through to label ??Subroutine64_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1946          void ZDSecMgrUpdateDeviceInd( ZDO_UpdateDeviceInd_t* ind )
   \                     ZDSecMgrUpdateDeviceInd:
   1947          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 8
   \   000004   74F8         MOV       A,#-0x8
   \   000006   12....       LCALL     ?ALLOC_XSTACK8
   1948            ZDSecMgrDevice_t device;
   1949          
   1950            device.nwkAddr    = ind->devAddr;
   \   000009   EA           MOV       A,R2
   \   00000A   240C         ADD       A,#0xc
   \   00000C   F582         MOV       DPL,A
   \   00000E   E4           CLR       A
   \   00000F   3B           ADDC      A,R3
   \   000010   F583         MOV       DPH,A
   \   000012   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   000015   12....       LCALL     ??Subroutine65_0 & 0xFFFF
   1951            device.extAddr    = ind->devExtAddr;
   \                     ??CrossCallReturnLabel_150:
   \   000018   EA           MOV       A,R2
   \   000019   2404         ADD       A,#0x4
   \   00001B   F8           MOV       R0,A
   \   00001C   E4           CLR       A
   \   00001D   3B           ADDC      A,R3
   \   00001E   F9           MOV       R1,A
   \   00001F   7402         MOV       A,#0x2
   \   000021   12....       LCALL     ?XSTACK_DISP0_8
   \   000024   12....       LCALL     ?Subroutine11 & 0xFFFF
   1952            device.parentAddr = ind->srcAddr;
   \                     ??CrossCallReturnLabel_1:
   \   000027   7404         MOV       A,#0x4
   \   000029   12....       LCALL     ?XSTACK_DISP0_8
   \   00002C   12....       LCALL     ??Subroutine65_0 & 0xFFFF
   1953            device.devStatus  = DEV_SEC_INIT_STATUS;
   \                     ??CrossCallReturnLabel_151:
   \   00002F   7407         MOV       A,#0x7
   \   000031   12....       LCALL     ?XSTACK_DISP0_8
   \   000034   7404         MOV       A,#0x4
   \   000036   F0           MOVX      @DPTR,A
   1954            device.secure     = FALSE;
   \   000037   7406         MOV       A,#0x6
   \   000039   12....       LCALL     ?XSTACK_DISP0_8
   \   00003C   E4           CLR       A
   \   00003D   F0           MOVX      @DPTR,A
   1955          
   1956            // Trust Center should identify the type of JOIN/REJOIN and
   1957            // Transport the NWK key accordingly, it will only be transported for:
   1958            //              APSME_UD_STANDARD_UNSECURED_JOIN
   1959            //   OR         APSME_UD_STANDARD_TRUST_CENTER_REJOIN
   1960            if ( ind->status != APSME_UD_DEVICE_LEFT )
   \   00003E   EA           MOV       A,R2
   \   00003F   240E         ADD       A,#0xe
   \   000041   F582         MOV       DPL,A
   \   000043   E4           CLR       A
   \   000044   3B           ADDC      A,R3
   \   000045   F583         MOV       DPH,A
   \   000047   E0           MOVX      A,@DPTR
   \   000048   F8           MOV       R0,A
   \   000049   7402         MOV       A,#0x2
   \   00004B   68           XRL       A,R0
   \   00004C   601A         JZ        ??ZDSecMgrUpdateDeviceInd_0
   1961            {
   1962              if ( ind->status == APSME_UD_STANDARD_SECURED_REJOIN )
   \   00004E   E8           MOV       A,R0
   \   00004F   7010         JNZ       ??ZDSecMgrUpdateDeviceInd_1
   1963              {
   1964                device.devStatus &= ~DEV_SEC_INIT_STATUS;
   1965                device.devStatus |=  DEV_SEC_AUTH_STATUS;
   \   000051   7407         MOV       A,#0x7
   \   000053   12....       LCALL     ?XSTACK_DISP0_8
   \   000056   7408         MOV       A,#0x8
   \   000058   F0           MOVX      @DPTR,A
   1966                device.secure = TRUE;
   \   000059   7406         MOV       A,#0x6
   \   00005B   12....       LCALL     ?XSTACK_DISP0_8
   \   00005E   7401         MOV       A,#0x1
   \   000060   F0           MOVX      @DPTR,A
   1967              }
   1968              else
   1969              {
   1970          #if (ZG_BUILD_COORDINATOR_TYPE)
   1971                uint8  found;
   1972                uint16 keyNvIndex;
   1973                APSME_TCLKDevEntry_t TCLKDevEntry;
   1974                
   1975                keyNvIndex = APSME_SearchTCLinkKeyEntry(device.extAddr,&found, &TCLKDevEntry);
   1976                
   1977                //If found and it was verified, then allow it to join in a fresh state by erasing the key entry
   1978                if((found == TRUE) && (TCLKDevEntry.keyAttributes == ZG_VERIFIED_KEY))
   1979                {
   1980                  TCLKDevEntry.keyAttributes = ZG_DEFAULT_KEY;
   1981                  //Increase the shift by one. Validate the maximum shift of the seed which is 15
   1982                  TCLKDevEntry.SeedShift_IcIndex++;
   1983                  TCLKDevEntry.SeedShift_IcIndex &= 0x0F;
   1984                  
   1985                  TCLKDevEntry.rxFrmCntr = 0;
   1986                  TCLKDevEntry.txFrmCntr = 0;  
   1987                  
   1988                  //Update the entry
   1989                  osal_nv_write(keyNvIndex,0,sizeof(APSME_TCLKDevEntry_t), &TCLKDevEntry );
   1990                }
   1991                
   1992                bdb_TCAddJoiningDevice(device.parentAddr,device.extAddr);
   1993          #endif
   1994              
   1995              }
   1996          
   1997              ZDSecMgrDeviceJoin( &device );
   \                     ??ZDSecMgrUpdateDeviceInd_1:
   \   000061                ; Setup parameters for call to function ZDSecMgrDeviceJoin
   \   000061   AA..         MOV       R2,?XSP + 0
   \   000063   AB..         MOV       R3,?XSP + 1
   \   000065   12....       LCALL     `??ZDSecMgrDeviceJoin::?relay`; Banked call to: ZDSecMgrDeviceJoin
   1998            }
   1999          }
   \                     ??ZDSecMgrUpdateDeviceInd_0:
   \   000068   02....       LJMP      ?Subroutine2 & 0xFFFF
   2000          
   2001          /******************************************************************************
   2002           * @fn          ZDSecMgrRemoveDeviceInd
   2003           *
   2004           * @brief       Process the ZDO_RemoveDeviceInd_t message.
   2005           *
   2006           * @param       ind - [in] ZDO_RemoveDeviceInd_t indication
   2007           *
   2008           * @return      none
   2009           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2010          void ZDSecMgrRemoveDeviceInd( ZDO_RemoveDeviceInd_t* ind )
   \                     ZDSecMgrRemoveDeviceInd:
   2011          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV       A,#-0x8
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   2012            ZDSecMgrDevice_t device;
   2013          
   2014            // only accept from Trust Center
   2015            if ( ind->srcAddr == APSME_TRUSTCENTER_NWKADDR )
   \   00000A   8A82         MOV       DPL,R2
   \   00000C   8B83         MOV       DPH,R3
   \   00000E   A3           INC       DPTR
   \   00000F   A3           INC       DPTR
   \   000010   12....       LCALL     ??Subroutine67_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_180:
   \   000013   7031         JNZ       ??ZDSecMgrRemoveDeviceInd_0
   2016            {
   2017              // look up NWK address
   2018              if ( APSME_LookupNwkAddr( ind->childExtAddr, &device.nwkAddr ) == TRUE )
   \   000015   EA           MOV       A,R2
   \   000016   2404         ADD       A,#0x4
   \   000018   FE           MOV       R6,A
   \   000019   E4           CLR       A
   \   00001A   3B           ADDC      A,R3
   \   00001B   FF           MOV       R7,A
   \   00001C                ; Setup parameters for call to function APSME_LookupNwkAddr
   \   00001C   AC..         MOV       R4,?XSP + 0
   \   00001E   AD..         MOV       R5,?XSP + 1
   \   000020   EE           MOV       A,R6
   \   000021   FA           MOV       R2,A
   \   000022   EF           MOV       A,R7
   \   000023   FB           MOV       R3,A
   \   000024   12....       LCALL     `??APSME_LookupNwkAddr::?relay`; Banked call to: APSME_LookupNwkAddr
   \   000027   E9           MOV       A,R1
   \   000028   6401         XRL       A,#0x1
   \   00002A   701A         JNZ       ??ZDSecMgrRemoveDeviceInd_0
   2019              {
   2020                device.parentAddr = NLME_GetShortAddr();
   \   00002C                ; Setup parameters for call to function NLME_GetShortAddr
   \   00002C   12....       LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   00002F   7404         MOV       A,#0x4
   \   000031   12....       LCALL     ?XSTACK_DISP0_8
   \   000034   12....       LCALL     ?Subroutine50 & 0xFFFF
   2021                device.extAddr    = ind->childExtAddr;
   \                     ??CrossCallReturnLabel_80:
   \   000037   7402         MOV       A,#0x2
   \   000039   12....       LCALL     ?XSTACK_DISP0_8
   \   00003C   EE           MOV       A,R6
   \   00003D   F0           MOVX      @DPTR,A
   \   00003E   A3           INC       DPTR
   \   00003F   EF           MOV       A,R7
   \   000040   12....       LCALL     ??Subroutine73_0 & 0xFFFF
   2022          
   2023                // remove device
   2024                ZDSecMgrDeviceRemove( &device );
   2025              }
   2026            }
   \                     ??CrossCallReturnLabel_191:
   \   000043   12....       LCALL     `??ZDSecMgrDeviceRemove::?relay`; Banked call to: ZDSecMgrDeviceRemove
   2027          }
   \                     ??ZDSecMgrRemoveDeviceInd_0:
   \   000046   02....       LJMP      ?Subroutine8 & 0xFFFF
   2028          
   2029          /******************************************************************************
   2030           * @fn          ZDSecMgrRequestKeyInd
   2031           *
   2032           * @brief       Process the ZDO_RequestKeyInd_t message.
   2033           *
   2034           * @param       ind - [in] ZDO_RequestKeyInd_t indication
   2035           *
   2036           * @return      none
   2037           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2038          void ZDSecMgrRequestKeyInd( ZDO_RequestKeyInd_t* ind )
   \                     ZDSecMgrRequestKeyInd:
   2039          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2040            if ( ind->keyType == KEY_TYPE_NWK )
   \   000004   8A82         MOV       DPL,R2
   \   000006   8B83         MOV       DPH,R3
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   A3           INC       DPTR
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   F8           MOV       R0,A
   \   00000E   7401         MOV       A,#0x1
   \   000010   68           XRL       A,R0
   \   000011   6012         JZ        ??ZDSecMgrRequestKeyInd_0
   2041            {
   2042            }
   2043            else if ( ind->keyType == KEY_TYPE_APP_MASTER )
   \   000013   7402         MOV       A,#0x2
   \   000015   68           XRL       A,R0
   \   000016   7005         JNZ       ??ZDSecMgrRequestKeyInd_1
   2044            {
   2045              ZDSecMgrAppKeyReq( ind );
   \   000018                ; Setup parameters for call to function ZDSecMgrAppKeyReq
   \   000018   12....       LCALL     `??ZDSecMgrAppKeyReq::?relay`; Banked call to: ZDSecMgrAppKeyReq
   \   00001B   8008         SJMP      ??ZDSecMgrRequestKeyInd_0
   2046            }
   2047            else if ( ind->keyType == KEY_TYPE_TC_LINK )
   \                     ??ZDSecMgrRequestKeyInd_1:
   \   00001D   7404         MOV       A,#0x4
   \   00001F   68           XRL       A,R0
   \   000020   7003         JNZ       ??ZDSecMgrRequestKeyInd_0
   2048            {
   2049              ZDSecMgrTclkReq( ind );
   \   000022                ; Setup parameters for call to function ZDSecMgrTclkReq
   \   000022   12....       LCALL     `??ZDSecMgrTclkReq::?relay`; Banked call to: ZDSecMgrTclkReq
   2050            }
   2051            //else ignore
   2052          }
   \                     ??ZDSecMgrRequestKeyInd_0:
   \   000025   02....       LJMP      ??Subroutine64_0 & 0xFFFF
   2053          
   2054          
   2055          /******************************************************************************
   2056           * @fn          ZDSecMgrVerifyKeyInd
   2057           *
   2058           * @brief       Process the ZDO_VerifyKeyInd_t message.
   2059           *
   2060           * @param       ind - [in] ZDO_VerifyKeyInd_t indication
   2061           *
   2062           * @return      none
   2063           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2064          void ZDSecMgrVerifyKeyInd( ZDO_VerifyKeyInd_t* ind )
   \                     ZDSecMgrVerifyKeyInd:
   2065          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   2066            ZDSecMgrAppConfKeyReq( ind );
   2067          }
   \   000000   02....       LJMP      ?BRET
   2068          
   2069          
   2070          /******************************************************************************
   2071           * @fn          ZDSecMgrSwitchKeyInd
   2072           *
   2073           * @brief       Process the ZDO_SwitchKeyInd_t message.
   2074           *
   2075           * @param       ind - [in] ZDO_SwitchKeyInd_t indication
   2076           *
   2077           * @return      none
   2078           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2079          void ZDSecMgrSwitchKeyInd( ZDO_SwitchKeyInd_t* ind )
   \                     ZDSecMgrSwitchKeyInd:
   2080          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2081            SSP_SwitchNwkKey( ind->keySeqNum );
   \   000004                ; Setup parameters for call to function SSP_SwitchNwkKey
   \   000004   8A82         MOV       DPL,R2
   \   000006   8B83         MOV       DPH,R3
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   A3           INC       DPTR
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   F9           MOV       R1,A
   \   00000E   12....       LCALL     `??SSP_SwitchNwkKey::?relay`; Banked call to: SSP_SwitchNwkKey
   2082          
   2083            // Save if nv
   2084            ZDApp_NVUpdate();
   \   000011                ; Setup parameters for call to function ZDApp_NVUpdate
   \   000011   12....       LCALL     `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
   2085          }
   \   000014   02....       LJMP      ??Subroutine64_0 & 0xFFFF
   2086            
   2087          /******************************************************************************
   2088           * @fn          ZDSecMgrGenerateSeed
   2089           *
   2090           * @brief       Generate the seed for TC link keys and store it in Nv
   2091           *
   2092           * @param       SetDefault, force to use new seed
   2093           *
   2094           * @return      none
   2095           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2096          void ZDSecMgrGenerateSeed(uint8 SetDefault)
   \                     ZDSecMgrGenerateSeed:
   2097          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 16
   \   000005   74F0         MOV       A,#-0x10
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
   2098            uint8 SeedKey[SEC_KEY_LEN];  
   2099            
   2100            ZDSecMgrGenerateRndKey(SeedKey);
   \   00000C                ; Setup parameters for call to function ZDSecMgrGenerateRndKey
   \   00000C   AA..         MOV       R2,?XSP + 0
   \   00000E   AB..         MOV       R3,?XSP + 1
   \   000010   12....       LCALL     `??ZDSecMgrGenerateRndKey::?relay`; Banked call to: ZDSecMgrGenerateRndKey
   2101            
   2102            if((SUCCESS == osal_nv_item_init(ZCD_NV_TCLK_SEED,SEC_KEY_LEN,SeedKey)) && SetDefault)
   \   000013                ; Setup parameters for call to function osal_nv_item_init
   \   000013   A8..         MOV       R0,?XSP + 0
   \   000015   A9..         MOV       R1,?XSP + 1
   \   000017   88..         MOV       ?V0,R0
   \   000019   89..         MOV       ?V1,R1
   \   00001B   78..         MOV       R0,#?V0
   \   00001D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000020   7C10         MOV       R4,#0x10
   \   000022   7D00         MOV       R5,#0x0
   \   000024   7A01         MOV       R2,#0x1
   \   000026   7B01         MOV       R3,#0x1
   \   000028   12....       LCALL     `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   00002B   7402         MOV       A,#0x2
   \   00002D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000030   E9           MOV       A,R1
   \   000031   7023         JNZ       ??ZDSecMgrGenerateSeed_0
   \   000033   EE           MOV       A,R6
   \   000034   6020         JZ        ??ZDSecMgrGenerateSeed_0
   2103            {
   2104              //Force to use a new seed
   2105              osal_nv_write(ZCD_NV_TCLK_SEED,0,SEC_KEY_LEN,SeedKey);
   \   000036                ; Setup parameters for call to function osal_nv_write
   \   000036   78..         MOV       R0,#?V0
   \   000038   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003B   75..10       MOV       ?V0,#0x10
   \   00003E   75..00       MOV       ?V1,#0x0
   \   000041   78..         MOV       R0,#?V0
   \   000043   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000046   7C00         MOV       R4,#0x0
   \   000048   7D00         MOV       R5,#0x0
   \   00004A   7A01         MOV       R2,#0x1
   \   00004C   7B01         MOV       R3,#0x1
   \   00004E   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000051   7404         MOV       A,#0x4
   \   000053   12....       LCALL     ?DEALLOC_XSTACK8
   2106            }
   2107          
   2108            osal_memset(SeedKey,0,SEC_KEY_LEN);
   \                     ??ZDSecMgrGenerateSeed_0:
   \   000056                ; Setup parameters for call to function osal_memset
   \   000056   7C10         MOV       R4,#0x10
   \   000058   7D00         MOV       R5,#0x0
   \   00005A   7900         MOV       R1,#0x0
   \   00005C   AA..         MOV       R2,?XSP + 0
   \   00005E   AB..         MOV       R3,?XSP + 1
   \   000060   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   2109          }
   \   000063   7410         MOV       A,#0x10
   \   000065                REQUIRE ?Subroutine4
   \   000065                ; // Fall through to label ?Subroutine4
   2110          
   2111          
   2112          /******************************************************************************
   2113           * @fn          ZDSecMgrGenerateKeyFromSeed
   2114           *
   2115           * @brief       Generate the TC link key for an specific device usign seed and ExtAddr
   2116           *
   2117           * @param       [in]  extAddr  
   2118           * @param       [in]  shift    number of byte shifts that the seed will do to 
   2119           *                             generate a new key for the same device. 
   2120           *                             This value must be less than SEC_KEY_LEN
   2121           * @param       [out] key      buffer in which the key will be copied
   2122           *
   2123           * @return      none
   2124           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2125          void ZDSecMgrGenerateKeyFromSeed(uint8 *extAddr, uint8 shift, uint8 *key)
   \                     ZDSecMgrGenerateKeyFromSeed:
   2126          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 16
   \   000005   74F0         MOV       A,#-0x10
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V8,R2
   \   00000C   8B..         MOV       ?V9,R3
   \   00000E   89..         MOV       ?V2,R1
   \   000010   EC           MOV       A,R4
   \   000011   FE           MOV       R6,A
   \   000012   ED           MOV       A,R5
   \   000013   FF           MOV       R7,A
   2127            uint8 i;
   2128            uint8 tempKey[SEC_KEY_LEN];
   2129            
   2130            if((key != NULL) && (extAddr != NULL))
   \   000014   EE           MOV       A,R6
   \   000015   4F           ORL       A,R7
   \   000016   7003         JNZ       $+5
   \   000018   02....       LJMP      ??ZDSecMgrGenerateKeyFromSeed_0 & 0xFFFF
   \   00001B   EA           MOV       A,R2
   \   00001C   45..         ORL       A,?V9
   \   00001E   7003         JNZ       $+5
   \   000020   02....       LJMP      ??ZDSecMgrGenerateKeyFromSeed_0 & 0xFFFF
   2131            {
   2132              //Read the key
   2133              osal_nv_read(ZCD_NV_TCLK_SEED,0,SEC_KEY_LEN,tempKey);
   \   000023                ; Setup parameters for call to function osal_nv_read
   \   000023   A8..         MOV       R0,?XSP + 0
   \   000025   A9..         MOV       R1,?XSP + 1
   \   000027   88..         MOV       ?V0,R0
   \   000029   89..         MOV       ?V1,R1
   \   00002B   78..         MOV       R0,#?V0
   \   00002D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000030   75..10       MOV       ?V0,#0x10
   \   000033   75..00       MOV       ?V1,#0x0
   \   000036   78..         MOV       R0,#?V0
   \   000038   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003B   7C00         MOV       R4,#0x0
   \   00003D   7D00         MOV       R5,#0x0
   \   00003F   7A01         MOV       R2,#0x1
   \   000041   7B01         MOV       R3,#0x1
   \   000043   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000046   7404         MOV       A,#0x4
   \   000048   12....       LCALL     ?DEALLOC_XSTACK8
   2134          
   2135              //shift the seed
   2136              osal_memcpy(key, &tempKey[shift], SEC_KEY_LEN - shift);
   \   00004B   E5..         MOV       A,?V2
   \   00004D   F5..         MOV       ?V0,A
   \   00004F                ; Setup parameters for call to function osal_memcpy
   \   00004F   85..82       MOV       DPL,?XSP + 0
   \   000052   85..83       MOV       DPH,?XSP + 1
   \   000055   E582         MOV       A,DPL
   \   000057   25..         ADD       A,?V0
   \   000059   F5..         MOV       ?V4,A
   \   00005B   E4           CLR       A
   \   00005C   3583         ADDC      A,DPH
   \   00005E   F5..         MOV       ?V5,A
   \   000060   75..00       MOV       ?V6,#0x0
   \   000063   78..         MOV       R0,#?V4
   \   000065   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000068   7410         MOV       A,#0x10
   \   00006A   C3           CLR       C
   \   00006B   95..         SUBB      A,?V0
   \   00006D   FC           MOV       R4,A
   \   00006E   95E0         SUBB      A,0xE0 /* A   */
   \   000070   FD           MOV       R5,A
   \   000071   EE           MOV       A,R6
   \   000072   FA           MOV       R2,A
   \   000073   EF           MOV       A,R7
   \   000074   FB           MOV       R3,A
   \   000075   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000078   7403         MOV       A,#0x3
   \   00007A   12....       LCALL     ?DEALLOC_XSTACK8
   2137              osal_memcpy(&key[SEC_KEY_LEN - shift], tempKey, shift);
   \   00007D                ; Setup parameters for call to function osal_memcpy
   \   00007D   A8..         MOV       R0,?XSP + 0
   \   00007F   A9..         MOV       R1,?XSP + 1
   \   000081   88..         MOV       ?V4,R0
   \   000083   89..         MOV       ?V5,R1
   \   000085   78..         MOV       R0,#?V4
   \   000087   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00008A   AC..         MOV       R4,?V2
   \   00008C   7D00         MOV       R5,#0x0
   \   00008E   C3           CLR       C
   \   00008F   E4           CLR       A
   \   000090   95..         SUBB      A,?V0
   \   000092   F8           MOV       R0,A
   \   000093   95E0         SUBB      A,0xE0 /* A   */
   \   000095   F9           MOV       R1,A
   \   000096   EE           MOV       A,R6
   \   000097   28           ADD       A,R0
   \   000098   F8           MOV       R0,A
   \   000099   EF           MOV       A,R7
   \   00009A   39           ADDC      A,R1
   \   00009B   F9           MOV       R1,A
   \   00009C   E8           MOV       A,R0
   \   00009D   2410         ADD       A,#0x10
   \   00009F   FA           MOV       R2,A
   \   0000A0   E4           CLR       A
   \   0000A1   39           ADDC      A,R1
   \   0000A2   FB           MOV       R3,A
   \   0000A3   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000A6   7403         MOV       A,#0x3
   \   0000A8   12....       LCALL     ?DEALLOC_XSTACK8
   2138             
   2139              //Create the key from the seed
   2140              for(i = 0; i < Z_EXTADDR_LEN; i++)
   \   0000AB   7C00         MOV       R4,#0x0
   2141              {
   2142                key[i] ^= extAddr[i];
   \                     ??ZDSecMgrGenerateKeyFromSeed_1:
   \   0000AD   EC           MOV       A,R4
   \   0000AE   FA           MOV       R2,A
   \   0000AF   E5..         MOV       A,?V8
   \   0000B1   2A           ADD       A,R2
   \   0000B2   F8           MOV       R0,A
   \   0000B3   E4           CLR       A
   \   0000B4   35..         ADDC      A,?V9
   \   0000B6   F9           MOV       R1,A
   \   0000B7   EE           MOV       A,R6
   \   0000B8   2A           ADD       A,R2
   \   0000B9   FA           MOV       R2,A
   \   0000BA   E4           CLR       A
   \   0000BB   3F           ADDC      A,R7
   \   0000BC   FB           MOV       R3,A
   \   0000BD   8882         MOV       DPL,R0
   \   0000BF   8983         MOV       DPH,R1
   \   0000C1   E0           MOVX      A,@DPTR
   \   0000C2   FD           MOV       R5,A
   \   0000C3   8A82         MOV       DPL,R2
   \   0000C5   8B83         MOV       DPH,R3
   \   0000C7   E0           MOVX      A,@DPTR
   \   0000C8   6D           XRL       A,R5
   \   0000C9   F0           MOVX      @DPTR,A
   2143                key[i+Z_EXTADDR_LEN] ^= extAddr[i];
   \   0000CA   8882         MOV       DPL,R0
   \   0000CC   8983         MOV       DPH,R1
   \   0000CE   E0           MOVX      A,@DPTR
   \   0000CF   F8           MOV       R0,A
   \   0000D0   8A82         MOV       DPL,R2
   \   0000D2   8B83         MOV       DPH,R3
   \   0000D4   A3           INC       DPTR
   \   0000D5   A3           INC       DPTR
   \   0000D6   A3           INC       DPTR
   \   0000D7   A3           INC       DPTR
   \   0000D8   A3           INC       DPTR
   \   0000D9   A3           INC       DPTR
   \   0000DA   A3           INC       DPTR
   \   0000DB   A3           INC       DPTR
   \   0000DC   E0           MOVX      A,@DPTR
   \   0000DD   68           XRL       A,R0
   \   0000DE   F0           MOVX      @DPTR,A
   2144              }
   \   0000DF   0C           INC       R4
   \   0000E0   EC           MOV       A,R4
   \   0000E1   C3           CLR       C
   \   0000E2   9408         SUBB      A,#0x8
   \   0000E4   40C7         JC        ??ZDSecMgrGenerateKeyFromSeed_1
   2145            }
   2146          }
   \                     ??ZDSecMgrGenerateKeyFromSeed_0:
   \   0000E6   7410         MOV       A,#0x10
   \   0000E8   02....       LJMP      ?Subroutine5 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine77_0
   \   000003                ; // Fall through to label ??Subroutine77_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine77_0:
   \   000000   7F0A         MOV       R7,#0xa
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
   2147          
   2148          
   2149          /******************************************************************************
   2150           * @fn          ZDSecMgrGenerateRndKey
   2151           *
   2152          * @brief       Generate a random key. NOTE: Random key is generated by osal_rand, refer to osal_rand to see the random properties of the key generated by this mean.
   2153           *
   2154           * @param       pKey - [out] Buffer pointer in which the key will be passed.
   2155           *
   2156           * @return      none
   2157           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2158          void ZDSecMgrGenerateRndKey(uint8* pKey)
   \                     ZDSecMgrGenerateRndKey:
   2159          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   2160            uint16  temp;
   2161            uint8   index = 0;
   \   000009   75..00       MOV       ?V0,#0x0
   2162            
   2163            while(index < (SEC_KEY_LEN/2))
   2164            {
   2165              temp = osal_rand();
   \                     ??ZDSecMgrGenerateRndKey_0:
   \   00000C                ; Setup parameters for call to function osal_rand
   \   00000C   12....       LCALL     `??osal_rand::?relay`; Banked call to: osal_rand
   \   00000F   8A..         MOV       ?V2,R2
   \   000011   8B..         MOV       ?V3,R3
   2166              pKey[index*2]   = (uint8) (temp & 0x00FF);
   \   000013   AA..         MOV       R2,?V0
   \   000015   EA           MOV       A,R2
   \   000016   2A           ADD       A,R2
   \   000017   FA           MOV       R2,A
   \   000018   E4           CLR       A
   \   000019   33           RLC       A
   \   00001A   FB           MOV       R3,A
   \   00001B   EE           MOV       A,R6
   \   00001C   2A           ADD       A,R2
   \   00001D   F582         MOV       DPL,A
   \   00001F   EF           MOV       A,R7
   \   000020   3B           ADDC      A,R3
   \   000021   F583         MOV       DPH,A
   \   000023   E5..         MOV       A,?V2
   \   000025   F0           MOVX      @DPTR,A
   2167              pKey[index*2+1] = (uint8) ((temp >> 8) & 0x00FF);
   \   000026   A3           INC       DPTR
   \   000027   E5..         MOV       A,?V3
   \   000029   F0           MOVX      @DPTR,A
   2168              index++;
   \   00002A   05..         INC       ?V0
   2169            }
   \   00002C   E5..         MOV       A,?V0
   \   00002E   C3           CLR       C
   \   00002F   9408         SUBB      A,#0x8
   \   000031   40D9         JC        ??ZDSecMgrGenerateRndKey_0
   2170          }
   \   000033   02....       LJMP      ??Subroutine72_0 & 0xFFFF
   2171          
   2172          
   2173          #if ( ZG_BUILD_COORDINATOR_TYPE )
   2174          /******************************************************************************
   2175           * @fn          ZDSecMgrUpdateNwkKey
   2176           *
   2177           * @brief       Load a new NWK key and trigger a network update to the dstAddr.
   2178           *
   2179           * @param       key       - [in] new NWK key
   2180           * @param       keySeqNum - [in] new NWK key sequence number
   2181           *
   2182           * @return      ZStatus_t
   2183           */
   2184          ZStatus_t ZDSecMgrUpdateNwkKey( uint8* key, uint8 keySeqNum, uint16 dstAddr )
   2185          {
   2186            ZStatus_t               status;
   2187            APSME_TransportKeyReq_t req;
   2188          
   2189            // initialize common elements of local variables
   2190            req.keyType   = KEY_TYPE_NWK;
   2191          
   2192            req.dstAddr   = dstAddr;
   2193            req.keySeqNum = keySeqNum;
   2194            req.key       = key;
   2195            req.extAddr   = NULL;
   2196            req.nwkSecure = TRUE;
   2197            req.tunnel    = NULL;
   2198          
   2199            if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD )
   2200            {
   2201              // Broadcast transport NWK key
   2202              if (( dstAddr == NWK_BROADCAST_SHORTADDR_DEVALL ) ||
   2203                  ( dstAddr == NWK_BROADCAST_SHORTADDR_DEVZCZR) ||
   2204                  ( dstAddr == NWK_BROADCAST_SHORTADDR_DEVRXON))
   2205              {
   2206                req.apsSecure = FALSE;
   2207                status = APSME_TransportKeyReq( &req );
   2208              }
   2209              else
   2210              {
   2211                AddrMgrEntry_t          addrEntry;
   2212          
   2213                addrEntry.user = ADDRMGR_USER_SECURITY;
   2214                addrEntry.nwkAddr = dstAddr;
   2215          
   2216                status = ZFailure;
   2217          
   2218                if ( AddrMgrEntryLookupNwk( &addrEntry ) == TRUE )
   2219                {
   2220                  req.extAddr = addrEntry.extAddr;
   2221                  req.apsSecure = TRUE;
   2222                  status = APSME_TransportKeyReq( &req );
   2223                }
   2224              }
   2225            }
   2226            else // ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_RESIDENTIAL )
   2227            {
   2228              req.apsSecure = FALSE;
   2229              status = APSME_TransportKeyReq( &req );
   2230            }
   2231          
   2232            SSP_UpdateNwkKey( key, keySeqNum );
   2233          
   2234            // Save if nv
   2235            ZDApp_NVUpdate();
   2236          
   2237            return status;
   2238          }
   2239          #endif // ( ZG_BUILD_COORDINATOR_TYPE )
   2240          
   2241          #if ( ZG_BUILD_COORDINATOR_TYPE )
   2242          /******************************************************************************
   2243           * @fn          ZDSecMgrSwitchNwkKey
   2244           *
   2245           * @brief       Causes the NWK key to switch via a network command to the dstAddr.
   2246           *
   2247           * @param       keySeqNum - [in] new NWK key sequence number
   2248           *
   2249           * @return      ZStatus_t
   2250           */
   2251          ZStatus_t ZDSecMgrSwitchNwkKey( uint8 keySeqNum, uint16 dstAddr )
   2252          {
   2253            ZStatus_t            status;
   2254            APSME_SwitchKeyReq_t req;
   2255          
   2256            // initialize common elements of local variables
   2257            req.dstAddr = dstAddr;
   2258            req.keySeqNum = keySeqNum;
   2259          
   2260            if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD )
   2261            {
   2262              // Broadcast switch NWK key
   2263              if (( dstAddr == NWK_BROADCAST_SHORTADDR_DEVALL ) ||
   2264                  ( dstAddr == NWK_BROADCAST_SHORTADDR_DEVZCZR) ||
   2265                  ( dstAddr == NWK_BROADCAST_SHORTADDR_DEVRXON))
   2266              {
   2267                req.apsSecure = FALSE;
   2268                status = APSME_SwitchKeyReq( &req );
   2269              }
   2270              else
   2271              {
   2272                AddrMgrEntry_t          addrEntry;
   2273          
   2274                addrEntry.user = ADDRMGR_USER_SECURITY;
   2275                addrEntry.nwkAddr = dstAddr;
   2276          
   2277                status = ZFailure;
   2278          
   2279                if ( AddrMgrEntryLookupNwk( &addrEntry ) == TRUE )
   2280                {
   2281                  req.dstAddr = addrEntry.nwkAddr;
   2282                  req.apsSecure = TRUE;
   2283                  status = APSME_SwitchKeyReq( &req );
   2284                }
   2285              }
   2286            }
   2287            else // ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_RESIDENTIAL )
   2288            {
   2289              req.apsSecure = FALSE;
   2290              status = APSME_SwitchKeyReq( &req );
   2291            }
   2292          
   2293            if ( dstAddr >= NWK_BROADCAST_SHORTADDR_DEVZCZR)
   2294            {
   2295              zgSwitchCoordKey = TRUE;
   2296              zgSwitchCoordKeyIndex = keySeqNum;
   2297            }
   2298            // Save if nv
   2299            ZDApp_NVUpdate();
   2300          
   2301            return status;
   2302          }
   2303          #endif // ( ZG_BUILD_COORDINATOR_TYPE )
   2304          
   2305          /******************************************************************************
   2306           * @fn          ZDSecMgrRequestAppKey
   2307           *
   2308           * @brief       Request an application key with partner.
   2309           *
   2310           * @param       partExtAddr - [in] partner extended address
   2311           *
   2312           * @return      ZStatus_t
   2313           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2314          ZStatus_t ZDSecMgrRequestAppKey( uint8 *partExtAddr )
   \                     ZDSecMgrRequestAppKey:
   2315          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 4
   \   000004   74FC         MOV       A,#-0x4
   \   000006   12....       LCALL     ?ALLOC_XSTACK8
   2316            ZStatus_t status;
   2317            APSME_RequestKeyReq_t req;
   2318          
   2319            req.dstAddr = 0;
   \   000009   85..82       MOV       DPL,?XSP + 0
   \   00000C   85..83       MOV       DPH,?XSP + 1
   \   00000F   E4           CLR       A
   \   000010   F0           MOVX      @DPTR,A
   2320            req.keyType = KEY_TYPE_APP_MASTER;
   \   000011   04           INC       A
   \   000012   12....       LCALL     ?XSTACK_DISP0_8
   \   000015   7402         MOV       A,#0x2
   \   000017   F0           MOVX      @DPTR,A
   2321          
   2322            req.partExtAddr = partExtAddr;
   \   000018   12....       LCALL     ?XSTACK_DISP0_8
   \   00001B   12....       LCALL     ?Subroutine16 & 0xFFFF
   2323            status = APSME_RequestKeyReq( &req );
   2324          
   2325            return status;
   \                     ??CrossCallReturnLabel_189:
   \   00001E   12....       LCALL     `??APSME_RequestKeyReq::?relay`; Banked call to: APSME_RequestKeyReq
   \   000021   7404         MOV       A,#0x4
   \   000023   02....       LJMP      ??Subroutine63_0 & 0xFFFF
   2326          }
   2327          
   2328          #if ( ZG_BUILD_JOINING_TYPE )
   2329          /******************************************************************************
   2330           * @fn          ZDSecMgrSetupPartner
   2331           *
   2332           * @brief       Setup for application key partner.
   2333           *
   2334           * @param       partNwkAddr - [in] partner network address
   2335           *
   2336           * @return      ZStatus_t
   2337           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2338          ZStatus_t ZDSecMgrSetupPartner( uint16 partNwkAddr, uint8* partExtAddr )
   \                     ZDSecMgrSetupPartner:
   2339          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV       A,#-0xd
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V2,R2
   \   00000C   8B..         MOV       ?V3,R3
   \   00000E   EC           MOV       A,R4
   \   00000F   FE           MOV       R6,A
   \   000010   ED           MOV       A,R5
   \   000011   FF           MOV       R7,A
   2340            AddrMgrEntry_t entry;
   2341            ZStatus_t      status;
   2342          
   2343            status = ZFailure;
   \   000012   75..01       MOV       ?V0,#0x1
   2344          
   2345            // update the address manager
   2346            entry.user    = ADDRMGR_USER_SECURITY;
   \   000015   85..82       MOV       DPL,?XSP + 0
   \   000018   85..83       MOV       DPH,?XSP + 1
   \   00001B   7402         MOV       A,#0x2
   \   00001D   F0           MOVX      @DPTR,A
   2347            entry.nwkAddr = partNwkAddr;
   \   00001E   14           DEC       A
   \   00001F   12....       LCALL     ?XSTACK_DISP0_8
   \   000022   12....       LCALL     ?Subroutine13 & 0xFFFF
   2348            AddrMgrExtAddrSet( entry.extAddr, partExtAddr );
   \                     ??CrossCallReturnLabel_7:
   \   000025   12....       LCALL     ?XSTACK_DISP0_8
   \   000028   AA82         MOV       R2,DPL
   \   00002A   AB83         MOV       R3,DPH
   \   00002C   12....       LCALL     `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
   2349          
   2350            if ( AddrMgrEntryUpdate( &entry ) == TRUE )
   \   00002F                ; Setup parameters for call to function AddrMgrEntryUpdate
   \   00002F   AA..         MOV       R2,?XSP + 0
   \   000031   AB..         MOV       R3,?XSP + 1
   \   000033   12....       LCALL     `??AddrMgrEntryUpdate::?relay`; Banked call to: AddrMgrEntryUpdate
   \   000036   E9           MOV       A,R1
   \   000037   6401         XRL       A,#0x1
   \   000039   7038         JNZ       ??ZDSecMgrSetupPartner_0
   2351            {
   2352              status = ZSuccess;
   \   00003B   75..00       MOV       ?V0,#0x0
   2353          
   2354              // check for address discovery
   2355              if ( partNwkAddr == INVALID_NODE_ADDR )
   \   00003E   74FE         MOV       A,#-0x2
   \   000040   65..         XRL       A,?V2
   \   000042   7004         JNZ       ??ZDSecMgrSetupPartner_1
   \   000044   74FF         MOV       A,#-0x1
   \   000046   65..         XRL       A,?V3
   \                     ??ZDSecMgrSetupPartner_1:
   \   000048   700F         JNZ       ??ZDSecMgrSetupPartner_2
   2356              {
   2357                status = ZDP_NwkAddrReq( partExtAddr, ZDP_ADDR_REQTYPE_SINGLE, 0, 0 );
   \   00004A                ; Setup parameters for call to function ZDP_NwkAddrReq
   \   00004A   7D00         MOV       R5,#0x0
   \   00004C   7C00         MOV       R4,#0x0
   \   00004E   7900         MOV       R1,#0x0
   \   000050   EE           MOV       A,R6
   \   000051   FA           MOV       R2,A
   \   000052   EF           MOV       A,R7
   \   000053   FB           MOV       R3,A
   \   000054   12....       LCALL     `??ZDP_NwkAddrReq::?relay`; Banked call to: ZDP_NwkAddrReq
   \   000057   8017         SJMP      ??ZDSecMgrSetupPartner_3
   2358              }
   2359              else if ( !AddrMgrExtAddrValid( partExtAddr ) )
   \                     ??ZDSecMgrSetupPartner_2:
   \   000059                ; Setup parameters for call to function AddrMgrExtAddrValid
   \   000059   EE           MOV       A,R6
   \   00005A   FA           MOV       R2,A
   \   00005B   EF           MOV       A,R7
   \   00005C   FB           MOV       R3,A
   \   00005D   12....       LCALL     `??AddrMgrExtAddrValid::?relay`; Banked call to: AddrMgrExtAddrValid
   \   000060   E9           MOV       A,R1
   \   000061   7010         JNZ       ??ZDSecMgrSetupPartner_0
   2360              {
   2361                status = ZDP_IEEEAddrReq( partNwkAddr, ZDP_ADDR_REQTYPE_SINGLE, 0, 0 );
   \   000063                ; Setup parameters for call to function ZDP_IEEEAddrReq
   \   000063   7D00         MOV       R5,#0x0
   \   000065   7C00         MOV       R4,#0x0
   \   000067   7900         MOV       R1,#0x0
   \   000069   AA..         MOV       R2,?V2
   \   00006B   AB..         MOV       R3,?V3
   \   00006D   12....       LCALL     `??ZDP_IEEEAddrReq::?relay`; Banked call to: ZDP_IEEEAddrReq
   \                     ??ZDSecMgrSetupPartner_3:
   \   000070   E9           MOV       A,R1
   \   000071   F5..         MOV       ?V0,A
   2362              }
   2363            }
   2364          
   2365            return status;
   \                     ??ZDSecMgrSetupPartner_0:
   \   000073   A9..         MOV       R1,?V0
   \   000075   740D         MOV       A,#0xd
   \   000077   02....       LJMP      ?Subroutine3 & 0xFFFF
   2366          }
   2367          #endif // ( ZG_BUILD_JOINING_TYPE )
   2368          
   2369          #if ( ZG_BUILD_COORDINATOR_TYPE )
   2370          /******************************************************************************
   2371           * @fn          ZDSecMgrAppKeyTypeSet
   2372           *
   2373           * @brief       Set application key type.
   2374           *
   2375           * @param       keyType - [in] application key type (KEY_TYPE_APP_MASTER@2 or
   2376           *                                                   KEY_TYPE_APP_LINK@3
   2377           *
   2378           * @return      ZStatus_t
   2379           */
   2380          ZStatus_t ZDSecMgrAppKeyTypeSet( uint8 keyType )
   2381          {
   2382            if ( keyType == KEY_TYPE_APP_LINK )
   2383            {
   2384              ZDSecMgrAppKeyType = KEY_TYPE_APP_LINK;
   2385            }
   2386            else
   2387            {
   2388              ZDSecMgrAppKeyType = KEY_TYPE_APP_MASTER;
   2389            }
   2390          
   2391            return ZSuccess;
   2392          }
   2393          #endif
   2394          
   2395          /******************************************************************************
   2396           * ZigBee Device Security Manager - Stub Implementations
   2397           */
   2398          
   2399          
   2400          /******************************************************************************
   2401           * @fn          ZDSecMgrLinkKeySet (stubs APSME_LinkKeySet)
   2402           *
   2403           * @brief       Set <APSME_LinkKeyData_t> for specified NWK address.
   2404           *
   2405           * @param       extAddr - [in] EXT address
   2406           * @param       data    - [in] APSME_LinkKeyData_t
   2407           *
   2408           * @return      ZStatus_t
   2409           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   12....       LCALL     ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_84:
   \   000003                REQUIRE ??Subroutine61_0
   \   000003                ; // Fall through to label ??Subroutine61_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2410          ZStatus_t ZDSecMgrLinkKeySet( uint8* extAddr, uint8* key )
   \                     APSME_LinkKeySet:
   2411          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EC           MOV       A,R4
   \   00000B   FE           MOV       R6,A
   \   00000C   ED           MOV       A,R5
   \   00000D   FF           MOV       R7,A
   2412            ZStatus_t status;
   2413            ZDSecMgrEntry_t* entry;
   2414            APSME_LinkKeyData_t *pApsLinkKey = NULL;
   2415            uint16 Index;
   2416          
   2417            // lookup entry index for specified EXT address
   2418            status = ZDSecMgrEntryLookupExtGetIndex( extAddr, &entry, &Index );
   \   00000E                ; Setup parameters for call to function ZDSecMgrEntryLookupExtGetIndex
   \   00000E   7402         MOV       A,#0x2
   \   000010   12....       LCALL     ?XSTACK_DISP100_8
   \   000013   88..         MOV       ?V0,R0
   \   000015   89..         MOV       ?V1,R1
   \   000017   78..         MOV       R0,#?V0
   \   000019   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001C   7402         MOV       A,#0x2
   \   00001E   12....       LCALL     ?XSTACK_DISP102_8
   \   000021   12....       LCALL     `??ZDSecMgrEntryLookupExtGetIndex::?relay`; Banked call to: ZDSecMgrEntryLookupExtGetIndex
   \   000024   7402         MOV       A,#0x2
   \   000026   12....       LCALL     ?DEALLOC_XSTACK8
   \   000029   E9           MOV       A,R1
   \   00002A   F5..         MOV       ?V0,A
   2419          
   2420            if ( status == ZSuccess )
   \   00002C   6003         JZ        $+5
   \   00002E   02....       LJMP      ??CrossCallReturnLabel_199 & 0xFFFF
   2421            {
   2422              // point to NV item
   2423              entry->keyNvId = ZCD_NV_APS_LINK_KEY_DATA_START + Index;
   \   000031   7402         MOV       A,#0x2
   \   000033   12....       LCALL     ?XSTACK_DISP0_8
   \   000036   E0           MOVX      A,@DPTR
   \   000037   2401         ADD       A,#0x1
   \   000039   F8           MOV       R0,A
   \   00003A   A3           INC       DPTR
   \   00003B   E0           MOVX      A,@DPTR
   \   00003C   3402         ADDC      A,#0x2
   \   00003E   F9           MOV       R1,A
   \   00003F   85..82       MOV       DPL,?XSP + 0
   \   000042   85..83       MOV       DPH,?XSP + 1
   \   000045   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   000048   A3           INC       DPTR
   \   000049   A3           INC       DPTR
   \   00004A   12....       LCALL     ??Subroutine65_0 & 0xFFFF
   2424          
   2425              pApsLinkKey = (APSME_LinkKeyData_t *)osal_mem_alloc(sizeof(APSME_LinkKeyData_t));
   \                     ??CrossCallReturnLabel_152:
   \   00004D                ; Setup parameters for call to function osal_mem_alloc
   \   00004D   7A18         MOV       R2,#0x18
   \   00004F   7B00         MOV       R3,#0x0
   \   000051   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000054   8A..         MOV       ?V2,R2
   \   000056   8B..         MOV       ?V3,R3
   2426          
   2427              if (pApsLinkKey != NULL)
   \   000058   EA           MOV       A,R2
   \   000059   45..         ORL       A,?V3
   \   00005B   7003         JNZ       $+5
   \   00005D   02....       LJMP      ??CrossCallReturnLabel_199 & 0xFFFF
   2428              {
   2429                // read the key form NV, keyNvId must be ZCD_NV_APS_LINK_KEY_DATA_START based
   2430                osal_nv_read( entry->keyNvId, 0,
   2431                             sizeof(APSME_LinkKeyData_t), pApsLinkKey );
   \   000060                ; Setup parameters for call to function osal_nv_read
   \   000060   78..         MOV       R0,#?V2
   \   000062   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000065   75..18       MOV       ?V4,#0x18
   \   000068   75..00       MOV       ?V5,#0x0
   \   00006B   78..         MOV       R0,#?V4
   \   00006D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000070   7C00         MOV       R4,#0x0
   \   000072   7D00         MOV       R5,#0x0
   \   000074   7404         MOV       A,#0x4
   \   000076   12....       LCALL     ?XSTACK_DISP0_8
   \   000079   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_133:
   \   00007C   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   00007F   7404         MOV       A,#0x4
   \   000081   12....       LCALL     ?DEALLOC_XSTACK8
   2432          
   2433                // set new values of the key
   2434                osal_memcpy( pApsLinkKey->key, key, SEC_KEY_LEN );
   \   000084                ; Setup parameters for call to function osal_memcpy
   \   000084   8E..         MOV       ?V4,R6
   \   000086   8F..         MOV       ?V5,R7
   \   000088   75..00       MOV       ?V6,#0x0
   \   00008B   78..         MOV       R0,#?V4
   \   00008D   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000090   7C10         MOV       R4,#0x10
   \   000092   7D00         MOV       R5,#0x0
   \   000094   AA..         MOV       R2,?V2
   \   000096   AB..         MOV       R3,?V3
   \   000098   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00009B   7403         MOV       A,#0x3
   \   00009D   12....       LCALL     ?DEALLOC_XSTACK8
   2435                pApsLinkKey->rxFrmCntr = 0;
   \   0000A0   E5..         MOV       A,?V2
   \   0000A2   2414         ADD       A,#0x14
   \   0000A4   12....       LCALL     ?Subroutine23 & 0xFFFF
   2436                pApsLinkKey->txFrmCntr = 0;
   \                     ??CrossCallReturnLabel_200:
   \   0000A7   E5..         MOV       A,?V2
   \   0000A9   2410         ADD       A,#0x10
   \   0000AB   12....       LCALL     ?Subroutine23 & 0xFFFF
   2437          
   2438                osal_nv_write( entry->keyNvId, 0,
   2439                              sizeof(APSME_LinkKeyData_t), pApsLinkKey );
   \                     ??CrossCallReturnLabel_201:
   \   0000AE                ; Setup parameters for call to function osal_nv_write
   \   0000AE   78..         MOV       R0,#?V2
   \   0000B0   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000B3   75..18       MOV       ?V4,#0x18
   \   0000B6   75..00       MOV       ?V5,#0x0
   \   0000B9   78..         MOV       R0,#?V4
   \   0000BB   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000BE   7C00         MOV       R4,#0x0
   \   0000C0   7D00         MOV       R5,#0x0
   \   0000C2   7404         MOV       A,#0x4
   \   0000C4   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C7   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_134:
   \   0000CA   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   0000CD   7404         MOV       A,#0x4
   \   0000CF   12....       LCALL     ?DEALLOC_XSTACK8
   2440          
   2441                // clear copy of key in RAM
   2442                osal_memset(pApsLinkKey, 0x00, sizeof(APSME_LinkKeyData_t));
   \   0000D2                ; Setup parameters for call to function osal_memset
   \   0000D2   7C18         MOV       R4,#0x18
   \   0000D4   7D00         MOV       R5,#0x0
   \   0000D6   7900         MOV       R1,#0x0
   \   0000D8   AA..         MOV       R2,?V2
   \   0000DA   AB..         MOV       R3,?V3
   \   0000DC   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   2443          
   2444                osal_mem_free(pApsLinkKey);
   \   0000DF                ; Setup parameters for call to function osal_mem_free
   \   0000DF   AA..         MOV       R2,?V2
   \   0000E1   AB..         MOV       R3,?V3
   \   0000E3   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0000E6   85..82       MOV       DPL,?XSP + 0
   \   0000E9   85..83       MOV       DPH,?XSP + 1
   \   0000EC   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   0000EF   A3           INC       DPTR
   \   0000F0   A3           INC       DPTR
   \   0000F1   12....       LCALL     ??Subroutine66_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_163:
   \   0000F4   E8           MOV       A,R0
   \   0000F5   75F009       MOV       B,#0x9
   \   0000F8   A4           MUL       AB
   \   0000F9   F8           MOV       R0,A
   \   0000FA   AAF0         MOV       R2,B
   \   0000FC   75F009       MOV       B,#0x9
   \   0000FF   E9           MOV       A,R1
   \   000100   A4           MUL       AB
   \   000101   2A           ADD       A,R2
   \   000102   F9           MOV       R1,A
   \   000103   74..         MOV       A,#ApsLinkKeyFrmCntr & 0xff
   \   000105   28           ADD       A,R0
   \   000106   F8           MOV       R0,A
   \   000107   74..         MOV       A,#(ApsLinkKeyFrmCntr >> 8) & 0xff
   \   000109   39           ADDC      A,R1
   \   00010A   F9           MOV       R1,A
   \   00010B   E8           MOV       A,R0
   \   00010C   24F7         ADD       A,#-0x9
   \   00010E   F582         MOV       DPL,A
   \   000110   E9           MOV       A,R1
   \   000111   34ED         ADDC      A,#-0x13
   \   000113   12....       LCALL     ??Subroutine74_0 & 0xFFFF
   2445          
   2446                // set initial values for counters in RAM
   2447                ApsLinkKeyFrmCntr[entry->keyNvId - ZCD_NV_APS_LINK_KEY_DATA_START].txFrmCntr = 0;
   2448                ApsLinkKeyFrmCntr[entry->keyNvId - ZCD_NV_APS_LINK_KEY_DATA_START].rxFrmCntr = 0;
   \                     ??CrossCallReturnLabel_198:
   \   000116   E8           MOV       A,R0
   \   000117   24FB         ADD       A,#-0x5
   \   000119   F582         MOV       DPL,A
   \   00011B   E9           MOV       A,R1
   \   00011C   34ED         ADDC      A,#-0x13
   \   00011E   12....       LCALL     ??Subroutine74_0 & 0xFFFF
   2449              }
   2450            }
   2451          
   2452            return status;
   \                     ??CrossCallReturnLabel_199:
   \   000121   A9..         MOV       R1,?V0
   \   000123   7404         MOV       A,#0x4
   \   000125                REQUIRE ?Subroutine6
   \   000125                ; // Fall through to label ?Subroutine6
   2453          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine71_0
   \   000003                ; // Fall through to label ??Subroutine71_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine71_0:
   \   000000   7F07         MOV       R7,#0x7
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   35..         ADDC      A,?V3
   \   000005                REQUIRE ??Subroutine74_0
   \   000005                ; // Fall through to label ??Subroutine74_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine74_0:
   \   000000   F583         MOV       DPH,A
   \   000002                REQUIRE ??Subroutine75_0
   \   000002                ; // Fall through to label ??Subroutine75_0
   2454          
   2455          /******************************************************************************
   2456           * @fn          ZDSecMgrAuthenticationSet
   2457           *
   2458           * @brief       Mark the specific device as authenticated or not
   2459           *
   2460           * @param       extAddr - [in] EXT address
   2461           * @param       option  - [in] authenticated or not
   2462           *
   2463           * @return      ZStatus_t
   2464           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2465          ZStatus_t ZDSecMgrAuthenticationSet( uint8* extAddr, ZDSecMgr_Authentication_Option option )
   \                     ZDSecMgrAuthenticationSet:
   2466          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
   2467            ZStatus_t        status;
   2468            ZDSecMgrEntry_t* entry;
   2469          
   2470          
   2471            // lookup entry index for specified EXT address
   2472            status = ZDSecMgrEntryLookupExt( extAddr, &entry );
   \   00000C                ; Setup parameters for call to function ZDSecMgrEntryLookupExt
   \   00000C   AC..         MOV       R4,?XSP + 0
   \   00000E   AD..         MOV       R5,?XSP + 1
   \   000010   12....       LCALL     `??ZDSecMgrEntryLookupExt::?relay`; Banked call to: ZDSecMgrEntryLookupExt
   \   000013   E9           MOV       A,R1
   \   000014   F9           MOV       R1,A
   2473          
   2474            if ( status == ZSuccess )
   \   000015   7005         JNZ       ??ZDSecMgrAuthenticationSet_0
   2475            {
   2476              entry->authenticateOption = option;
   \   000017   12....       LCALL     ?Subroutine29 & 0xFFFF
   2477            }
   \                     ??CrossCallReturnLabel_29:
   \   00001A   EE           MOV       A,R6
   \   00001B   F0           MOVX      @DPTR,A
   2478          
   2479            return status;
   \                     ??ZDSecMgrAuthenticationSet_0:
   \   00001C   02....       LJMP      ?Subroutine7 & 0xFFFF
   2480          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006   12....       LCALL     ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   A3           INC       DPTR
   \   00000C   A3           INC       DPTR
   \   00000D   22           RET
   2481          
   2482          /******************************************************************************
   2483           * @fn          ZDSecMgrAuthenticationCheck
   2484           *
   2485           * @brief       Check if the specific device has been authenticated or not
   2486           *              For non-trust center device, always return TRUE
   2487           *
   2488           * @param       shortAddr - [in] short address
   2489           *
   2490           * @return      TRUE @ authenticated with CBKE
   2491           *              FALSE @ not authenticated
   2492           */
   2493          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2494          uint8 ZDSecMgrAuthenticationCheck( uint16 shortAddr )
   \                     ZDSecMgrAuthenticationCheck:
   2495          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV       A,#-0xc
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   2496          #if defined (TC_LINKKEY_JOIN)
   2497          
   2498            ZDSecMgrEntry_t* entry;
   2499            uint8 extAddr[Z_EXTADDR_LEN];
   2500          
   2501            // If the local device is not the trust center, always return TRUE
   2502            APSME_GetRequest( apsTrustCenterAddress, 0, extAddr );
   \   00000E                ; Setup parameters for call to function APSME_GetRequest
   \   00000E   7404         MOV       A,#0x4
   \   000010   12....       LCALL     ?XSTACK_DISP102_8
   \   000013   7A00         MOV       R2,#0x0
   \   000015   7B00         MOV       R3,#0x0
   \   000017   79AB         MOV       R1,#-0x55
   \   000019   12....       LCALL     `??APSME_GetRequest::?relay`; Banked call to: APSME_GetRequest
   2503            if ( ! osal_ExtAddrEqual( extAddr , NLME_GetExtAddr() ) )
   \   00001C                ; Setup parameters for call to function NLME_GetExtAddr
   \   00001C   12....       LCALL     `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   00001F   8A..         MOV       ?V0,R2
   \   000021   8B..         MOV       ?V1,R3
   \   000023   AC..         MOV       R4,?V0
   \   000025   AD..         MOV       R5,?V1
   \   000027                ; Setup parameters for call to function sAddrExtCmp
   \   000027   7404         MOV       A,#0x4
   \   000029   12....       LCALL     ?XSTACK_DISP101_8
   \   00002C   12....       LCALL     `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   00002F   E9           MOV       A,R1
   \   000030   603B         JZ        ??ZDSecMgrAuthenticationCheck_0
   2504            {
   2505              return TRUE;
   2506            }
   2507            // Otherwise, check the authentication option
   2508            else if ( AddrMgrExtAddrLookup( shortAddr, extAddr ) )
   \   000032                ; Setup parameters for call to function AddrMgrExtAddrLookup
   \   000032   7404         MOV       A,#0x4
   \   000034   12....       LCALL     ?XSTACK_DISP102_8
   \   000037   EE           MOV       A,R6
   \   000038   FA           MOV       R2,A
   \   000039   EF           MOV       A,R7
   \   00003A   FB           MOV       R3,A
   \   00003B   12....       LCALL     `??AddrMgrExtAddrLookup::?relay`; Banked call to: AddrMgrExtAddrLookup
   \   00003E   E9           MOV       A,R1
   \   00003F   6015         JZ        ??ZDSecMgrAuthenticationCheck_1
   2509            {
   2510              // lookup entry index for specified EXT address
   2511              if ( ZDSecMgrEntryLookupExt( extAddr, &entry ) == ZSuccess )
   \   000041                ; Setup parameters for call to function ZDSecMgrEntryLookupExt
   \   000041   AC..         MOV       R4,?XSP + 0
   \   000043   AD..         MOV       R5,?XSP + 1
   \   000045   7404         MOV       A,#0x4
   \   000047   12....       LCALL     ?XSTACK_DISP101_8
   \   00004A   12....       LCALL     `??ZDSecMgrEntryLookupExt::?relay`; Banked call to: ZDSecMgrEntryLookupExt
   \   00004D   E9           MOV       A,R1
   \   00004E   700D         JNZ       ??ZDSecMgrAuthenticationCheck_2
   2512              {
   2513                if ( entry->authenticateOption != ZDSecMgr_Not_Authenticated )
   \   000050   12....       LCALL     ?Subroutine29 & 0xFFFF
   2514                {
   2515                  return TRUE;
   2516                }
   2517                else
   2518                {
   2519                  return FALSE;
   2520                }
   2521              }
   \                     ??CrossCallReturnLabel_30:
   \   000053   E0           MOVX      A,@DPTR
   \   000054   7017         JNZ       ??ZDSecMgrAuthenticationCheck_0
   2522              else
   2523              {
   2524                // it may have been secured with TCLK only
   2525                uint16    ami;
   2526          
   2527                // lookup address index in address manager
   2528                if ( ZDSecMgrExtAddrLookup( extAddr, &ami ) == ZSuccess )
   2529                {
   2530                  return TRUE;
   2531                }
   2532              }
   2533            }
   2534            return FALSE;
   \                     ??ZDSecMgrAuthenticationCheck_1:
   \   000056   7900         MOV       R1,#0x0
   \                     ??ZDSecMgrAuthenticationCheck_3:
   \   000058   740C         MOV       A,#0xc
   \   00005A   02....       LJMP      ?Subroutine4 & 0xFFFF
   \                     ??ZDSecMgrAuthenticationCheck_2:
   \   00005D                ; Setup parameters for call to function ZDSecMgrExtAddrLookup
   \   00005D   7402         MOV       A,#0x2
   \   00005F   12....       LCALL     ?XSTACK_DISP102_8
   \   000062   7404         MOV       A,#0x4
   \   000064   12....       LCALL     ?XSTACK_DISP101_8
   \   000067   12....       LCALL     `??ZDSecMgrExtAddrLookup::?relay`; Banked call to: ZDSecMgrExtAddrLookup
   \   00006A   E9           MOV       A,R1
   \   00006B   70E9         JNZ       ??ZDSecMgrAuthenticationCheck_1
   \                     ??ZDSecMgrAuthenticationCheck_0:
   \   00006D   7901         MOV       R1,#0x1
   \   00006F   80E7         SJMP      ??ZDSecMgrAuthenticationCheck_3
   2535          
   2536          #else
   2537            (void)shortAddr;  // Intentionally unreferenced parameter
   2538          
   2539            // For non AMI/SE Profile, perform no check and always return TRUE.
   2540            return TRUE;
   2541          
   2542          #endif // TC_LINKKEY_JOIN
   2543          }
   2544          
   2545          
   2546          /******************************************************************************
   2547           * @fn          ZDSecMgrLinkKeyNVIdGet (stubs APSME_LinkKeyNVIdGet)
   2548           *
   2549           * @brief       Get Key NV ID for specified NWK address.
   2550           *
   2551           * @param       extAddr - [in] EXT address
   2552           * @param       keyNvId - [out] NV ID
   2553           *
   2554           * @return      ZStatus_t
   2555           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2556          ZStatus_t ZDSecMgrLinkKeyNVIdGet(uint8* extAddr, uint16 *pKeyNvId)
   \                     APSME_LinkKeyNVIdGet:
   2557          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EC           MOV       A,R4
   \   00000B   FE           MOV       R6,A
   \   00000C   ED           MOV       A,R5
   \   00000D   FF           MOV       R7,A
   2558            ZStatus_t status;
   2559            ZDSecMgrEntry_t* entry;
   2560          
   2561            // lookup entry index for specified NWK address
   2562            status = ZDSecMgrEntryLookupExt( extAddr, &entry );
   \   00000E                ; Setup parameters for call to function ZDSecMgrEntryLookupExt
   \   00000E   AC..         MOV       R4,?XSP + 0
   \   000010   AD..         MOV       R5,?XSP + 1
   \   000012   12....       LCALL     `??ZDSecMgrEntryLookupExt::?relay`; Banked call to: ZDSecMgrEntryLookupExt
   \   000015   E9           MOV       A,R1
   \   000016   F9           MOV       R1,A
   2563          
   2564            if ( status == ZSuccess )
   \   000017   7013         JNZ       ??APSME_LinkKeyNVIdGet_0
   2565            {
   2566              // return the index to the NV table
   2567              *pKeyNvId = entry->keyNvId;
   \   000019   85..82       MOV       DPL,?XSP + 0
   \   00001C   85..83       MOV       DPH,?XSP + 1
   \   00001F   12....       LCALL     ?Subroutine24 & 0xFFFF
   2568            }
   \                     ??CrossCallReturnLabel_135:
   \   000022   8E82         MOV       DPL,R6
   \   000024   8F83         MOV       DPH,R7
   \   000026   EA           MOV       A,R2
   \   000027   F0           MOVX      @DPTR,A
   \   000028   A3           INC       DPTR
   \   000029   EB           MOV       A,R3
   \   00002A   8007         SJMP      ??APSME_LinkKeyNVIdGet_1
   2569            else
   2570            {
   2571              *pKeyNvId = SEC_NO_KEY_NV_ID;
   \                     ??APSME_LinkKeyNVIdGet_0:
   \   00002C   8E82         MOV       DPL,R6
   \   00002E   8F83         MOV       DPH,R7
   \   000030   E4           CLR       A
   \   000031   F0           MOVX      @DPTR,A
   \   000032   A3           INC       DPTR
   \                     ??APSME_LinkKeyNVIdGet_1:
   \   000033   F0           MOVX      @DPTR,A
   2572            }
   2573          
   2574            return status;
   \   000034   02....       LJMP      ?Subroutine7 & 0xFFFF
   2575          }
   2576          
   2577          /******************************************************************************
   2578           * @fn          ZDSecMgrIsLinkKeyValid (stubs APSME_IsLinkKeyValid)
   2579           *
   2580           * @brief       Verifies if Link Key in NV has been set.
   2581           *
   2582           * @param       extAddr - [in] EXT address
   2583           *
   2584           * @return      TRUE - Link Key has been established
   2585           *              FALSE - Link Key in NV has default value.
   2586           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine67_0
   \   000006                ; // Fall through to label ??Subroutine67_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2587          uint8 ZDSecMgrIsLinkKeyValid(uint8* extAddr)
   \                     APSME_IsLinkKeyValid:
   2588          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 18
   \   000005   74EE         MOV       A,#-0x12
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   2589            APSME_LinkKeyData_t *pKeyData;
   2590            uint16 apsLinkKeyNvId;
   2591            uint8 nullKey[SEC_KEY_LEN];
   2592            uint8 status = FALSE;
   \   00000E   75..00       MOV       ?V0,#0x0
   2593          
   2594            // initialize default vealue to compare to
   2595            osal_memset(nullKey, 0x00, SEC_KEY_LEN);
   \   000011                ; Setup parameters for call to function osal_memset
   \   000011   7C10         MOV       R4,#0x10
   \   000013   7D00         MOV       R5,#0x0
   \   000015   7900         MOV       R1,#0x0
   \   000017   7402         MOV       A,#0x2
   \   000019   12....       LCALL     ?XSTACK_DISP101_8
   \   00001C   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   2596          
   2597            // check for APS link NV ID
   2598            APSME_LinkKeyNVIdGet( extAddr, &apsLinkKeyNvId );
   \   00001F                ; Setup parameters for call to function APSME_LinkKeyNVIdGet
   \   00001F   AC..         MOV       R4,?XSP + 0
   \   000021   AD..         MOV       R5,?XSP + 1
   \   000023   EE           MOV       A,R6
   \   000024   FA           MOV       R2,A
   \   000025   EF           MOV       A,R7
   \   000026   FB           MOV       R3,A
   \   000027   12....       LCALL     `??APSME_LinkKeyNVIdGet::?relay`; Banked call to: APSME_LinkKeyNVIdGet
   2599          
   2600            if (apsLinkKeyNvId != SEC_NO_KEY_NV_ID )
   \   00002A   12....       LCALL     ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_182:
   \   00002D   607A         JZ        ??APSME_IsLinkKeyValid_0
   2601            {
   2602              pKeyData = (APSME_LinkKeyData_t *)osal_mem_alloc(sizeof(APSME_LinkKeyData_t));
   \   00002F                ; Setup parameters for call to function osal_mem_alloc
   \   00002F   7A18         MOV       R2,#0x18
   \   000031   7B00         MOV       R3,#0x0
   \   000033   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000036   8A..         MOV       ?V2,R2
   \   000038   8B..         MOV       ?V3,R3
   2603          
   2604              if (pKeyData != NULL)
   \   00003A   EA           MOV       A,R2
   \   00003B   45..         ORL       A,?V3
   \   00003D   606A         JZ        ??APSME_IsLinkKeyValid_0
   2605              {
   2606                // retrieve key from NV
   2607                if ( osal_nv_read( apsLinkKeyNvId, 0,
   2608                                  sizeof(APSME_LinkKeyData_t), pKeyData) == ZSUCCESS)
   \   00003F                ; Setup parameters for call to function osal_nv_read
   \   00003F   78..         MOV       R0,#?V2
   \   000041   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000044   75..18       MOV       ?V4,#0x18
   \   000047   75..00       MOV       ?V5,#0x0
   \   00004A   78..         MOV       R0,#?V4
   \   00004C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004F   7C00         MOV       R4,#0x0
   \   000051   7D00         MOV       R5,#0x0
   \   000053   7404         MOV       A,#0x4
   \   000055   12....       LCALL     ?XSTACK_DISP0_8
   \   000058   12....       LCALL     ??Subroutine62_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_127:
   \   00005B   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   00005E   7404         MOV       A,#0x4
   \   000060   12....       LCALL     ?DEALLOC_XSTACK8
   \   000063   E9           MOV       A,R1
   \   000064   702F         JNZ       ??APSME_IsLinkKeyValid_1
   2609                {
   2610                  // if stored key is different than default value, then a key has been established
   2611                  if (!osal_memcmp(pKeyData, nullKey, SEC_KEY_LEN))
   \   000066                ; Setup parameters for call to function osal_memcmp
   \   000066   7402         MOV       A,#0x2
   \   000068   12....       LCALL     ?XSTACK_DISP100_8
   \   00006B   88..         MOV       ?V4,R0
   \   00006D   89..         MOV       ?V5,R1
   \   00006F   75..00       MOV       ?V6,#0x0
   \   000072   78..         MOV       R0,#?V4
   \   000074   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000077   7C10         MOV       R4,#0x10
   \   000079   7D00         MOV       R5,#0x0
   \   00007B   85..82       MOV       DPL,?V2
   \   00007E   85..83       MOV       DPH,?V3
   \   000081   A982         MOV       R1,DPL
   \   000083   AA83         MOV       R2,DPH
   \   000085   7B00         MOV       R3,#0x0
   \   000087   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   00008A   7403         MOV       A,#0x3
   \   00008C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00008F   E9           MOV       A,R1
   \   000090   7003         JNZ       ??APSME_IsLinkKeyValid_1
   2612                  {
   2613                    status = TRUE;
   \   000092   75..01       MOV       ?V0,#0x1
   2614                  }
   2615                }
   2616          
   2617                // clear copy of key in RAM
   2618                osal_memset(pKeyData, 0x00, sizeof(APSME_LinkKeyData_t));
   \                     ??APSME_IsLinkKeyValid_1:
   \   000095                ; Setup parameters for call to function osal_memset
   \   000095   7C18         MOV       R4,#0x18
   \   000097   7D00         MOV       R5,#0x0
   \   000099   7900         MOV       R1,#0x0
   \   00009B   AA..         MOV       R2,?V2
   \   00009D   AB..         MOV       R3,?V3
   \   00009F   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   2619          
   2620                osal_mem_free(pKeyData);
   \   0000A2                ; Setup parameters for call to function osal_mem_free
   \   0000A2   AA..         MOV       R2,?V2
   \   0000A4   AB..         MOV       R3,?V3
   \   0000A6   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2621              }
   2622            }
   2623          
   2624            return status;
   \                     ??APSME_IsLinkKeyValid_0:
   \   0000A9   A9..         MOV       R1,?V0
   \   0000AB   7412         MOV       A,#0x12
   \   0000AD   02....       LJMP      ?Subroutine6 & 0xFFFF
   2625          }
   2626          
   2627          /******************************************************************************
   2628           * @fn          ZDSecMgrKeyFwdToChild (stubs APSME_KeyFwdToChild)
   2629           *
   2630           * @brief       Verify and process key transportation to child.
   2631           *
   2632           * @param       ind - [in] APSME_TransportKeyInd_t
   2633           *
   2634           * @return      uint8 - success(TRUE:FALSE)
   2635           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2636          uint8 ZDSecMgrKeyFwdToChild( APSME_TransportKeyInd_t* ind )
   \                     APSME_KeyFwdToChild:
   2637          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   2638            // verify from Trust Center
   2639            if ( ind->srcAddr == APSME_TRUSTCENTER_NWKADDR )
   \   000005   8A82         MOV       DPL,R2
   \   000007   8B83         MOV       DPH,R3
   \   000009   12....       LCALL     ??Subroutine67_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_181:
   \   00000C   7027         JNZ       ??APSME_KeyFwdToChild_0
   2640            {
   2641              // check for initial NWK key
   2642              if ( ( ind->keyType == KEY_TYPE_NWK ) ||
   2643                   ( ind->keyType == 6            ) )
   \   00000E   8A82         MOV       DPL,R2
   \   000010   8B83         MOV       DPH,R3
   \   000012   A3           INC       DPTR
   \   000013   A3           INC       DPTR
   \   000014   E0           MOVX      A,@DPTR
   \   000015   F8           MOV       R0,A
   \   000016   7401         MOV       A,#0x1
   \   000018   68           XRL       A,R0
   \   000019   6005         JZ        ??APSME_KeyFwdToChild_1
   \   00001B   7406         MOV       A,#0x6
   \   00001D   68           XRL       A,R0
   \   00001E   7011         JNZ       ??APSME_KeyFwdToChild_2
   2644              {
   2645                // set association status to authenticated
   2646                ZDSecMgrAssocDeviceAuth( AssocGetWithExt( ind->dstExtAddr ) );
   \                     ??APSME_KeyFwdToChild_1:
   \   000020                ; Setup parameters for call to function AssocGetWithExt
   \   000020   8A82         MOV       DPL,R2
   \   000022   8B83         MOV       DPH,R3
   \   000024   A3           INC       DPTR
   \   000025   A3           INC       DPTR
   \   000026   A3           INC       DPTR
   \   000027   A3           INC       DPTR
   \   000028   12....       LCALL     ??Subroutine61_0 & 0xFFFF
   2647              }
   \                     ??CrossCallReturnLabel_131:
   \   00002B   12....       LCALL     `??AssocGetWithExt::?relay`; Banked call to: AssocGetWithExt
   \   00002E                ; Setup parameters for call to function ZDSecMgrAssocDeviceAuth
   \   00002E   12....       LCALL     `??ZDSecMgrAssocDeviceAuth::?relay`; Banked call to: ZDSecMgrAssocDeviceAuth
   2648          
   2649              return TRUE;
   \                     ??APSME_KeyFwdToChild_2:
   \   000031   7901         MOV       R1,#0x1
   \   000033   8002         SJMP      ??APSME_KeyFwdToChild_3
   2650            }
   2651          
   2652            return FALSE;
   \                     ??APSME_KeyFwdToChild_0:
   \   000035   7900         MOV       R1,#0x0
   \                     ??APSME_KeyFwdToChild_3:
   \   000037   02....       LJMP      ??Subroutine70_0 & 0xFFFF
   2653          }
   2654          
   2655          /******************************************************************************
   2656           * @fn          ZDSecMgrAddLinkKey
   2657           *
   2658           * @brief       Add the application link key to ZDSecMgr. Also mark the device
   2659           *              as authenticated in the authenticateOption. Note that this function
   2660           *              is hardwared to CBKE right now.
   2661           *
   2662           * @param       shortAddr - short address of the partner device
   2663           * @param       extAddr - extended address of the partner device
   2664           * @param       key - link key
   2665           *
   2666           * @return      ZStatus_t
   2667           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2668          ZStatus_t ZDSecMgrAddLinkKey( uint16 shortAddr, uint8 *extAddr, uint8 *key)
   \                     ZDSecMgrAddLinkKey:
   2669          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EC           MOV       A,R4
   \   00000B   FE           MOV       R6,A
   \   00000C   ED           MOV       A,R5
   \   00000D   FF           MOV       R7,A
   2670            uint16           ami;
   2671            ZDSecMgrEntry_t* entry;
   2672          
   2673            /* Store the device address in the addr manager */
   2674            if( ZDSecMgrAddrStore( shortAddr, extAddr, &ami ) != ZSuccess )
   \   00000E                ; Setup parameters for call to function ZDSecMgrAddrStore
   \   00000E   7402         MOV       A,#0x2
   \   000010   12....       LCALL     ?XSTACK_DISP100_8
   \   000013   88..         MOV       ?V0,R0
   \   000015   89..         MOV       ?V1,R1
   \   000017   78..         MOV       R0,#?V0
   \   000019   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001C   12....       LCALL     `??ZDSecMgrAddrStore::?relay`; Banked call to: ZDSecMgrAddrStore
   \   00001F   7402         MOV       A,#0x2
   \   000021   12....       LCALL     ?DEALLOC_XSTACK8
   \   000024   E9           MOV       A,R1
   \   000025   6004         JZ        ??ZDSecMgrAddLinkKey_0
   2675            {
   2676              /* Adding to Addr Manager fails */
   2677              return ZFailure;
   \   000027   7901         MOV       R1,#0x1
   \   000029   8046         SJMP      ??ZDSecMgrAddLinkKey_1
   2678            }
   2679          
   2680            /* Lookup entry using specified address index */
   2681            ZDSecMgrEntryLookupAMI( ami, &entry );
   \                     ??ZDSecMgrAddLinkKey_0:
   \   00002B                ; Setup parameters for call to function ZDSecMgrEntryLookupAMI
   \   00002B   AC..         MOV       R4,?XSP + 0
   \   00002D   AD..         MOV       R5,?XSP + 1
   \   00002F   7402         MOV       A,#0x2
   \   000031   12....       LCALL     ?XSTACK_DISP0_8
   \   000034   12....       LCALL     ??Subroutine62_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_128:
   \   000037   12....       LCALL     `??ZDSecMgrEntryLookupAMI::?relay`; Banked call to: ZDSecMgrEntryLookupAMI
   2682          
   2683            // If no existing entry, create one
   2684            if ( entry == NULL )
   \   00003A   12....       LCALL     ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_183:
   \   00003D   7015         JNZ       ??CrossCallReturnLabel_155
   2685            {
   2686              if ( ZDSecMgrEntryNew( &entry ) == ZSuccess )
   \   00003F                ; Setup parameters for call to function ZDSecMgrEntryNew
   \   00003F   AA..         MOV       R2,?XSP + 0
   \   000041   AB..         MOV       R3,?XSP + 1
   \   000043   12....       LCALL     `??ZDSecMgrEntryNew::?relay`; Banked call to: ZDSecMgrEntryNew
   \   000046   E9           MOV       A,R1
   \   000047   702D         JNZ       ??ZDSecMgrAddLinkKey_2
   2687              {
   2688                entry->ami = ami;
   \   000049   7402         MOV       A,#0x2
   \   00004B   12....       LCALL     ?XSTACK_DISP0_8
   \   00004E   12....       LCALL     ?Subroutine26 & 0xFFFF
   2689              }
   \                     ??CrossCallReturnLabel_26:
   \   000051   12....       LCALL     ?Subroutine20 & 0xFFFF
   2690              else
   2691              {
   2692                /* Security Manager full */
   2693                return ZBufferFull;
   2694              }
   2695            }
   2696            // Write the link key
   2697            APSME_LinkKeySet( extAddr, key );
   \                     ??CrossCallReturnLabel_155:
   \   000054                ; Setup parameters for call to function APSME_LinkKeySet
   \   000054   740E         MOV       A,#0xe
   \   000056   12....       LCALL     ?XSTACK_DISP0_8
   \   000059   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   00005C   EE           MOV       A,R6
   \   00005D   FA           MOV       R2,A
   \   00005E   EF           MOV       A,R7
   \   00005F   FB           MOV       R3,A
   \   000060   12....       LCALL     `??APSME_LinkKeySet::?relay`; Banked call to: APSME_LinkKeySet
   2698          
   2699          #if defined (TC_LINKKEY_JOIN)
   2700            // Mark the device as authenticated.
   2701            ZDSecMgrAuthenticationSet( extAddr, ZDSecMgr_Authenticated_CBCK );
   \   000063                ; Setup parameters for call to function ZDSecMgrAuthenticationSet
   \   000063   7901         MOV       R1,#0x1
   \   000065   EE           MOV       A,R6
   \   000066   FA           MOV       R2,A
   \   000067   EF           MOV       A,R7
   \   000068   FB           MOV       R3,A
   \   000069   12....       LCALL     `??ZDSecMgrAuthenticationSet::?relay`; Banked call to: ZDSecMgrAuthenticationSet
   2702          #endif
   2703          
   2704          #if defined NV_RESTORE
   2705            ZDSecMgrWriteNV();  // Write the new established link key to NV.
   \   00006C                ; Setup parameters for call to function ZDSecMgrWriteNV
   \   00006C   12....       LCALL     `??ZDSecMgrWriteNV::?relay`; Banked call to: ZDSecMgrWriteNV
   2706          #endif
   2707          
   2708            return ZSuccess;
   \   00006F   7900         MOV       R1,#0x0
   \                     ??ZDSecMgrAddLinkKey_1:
   \   000071   7404         MOV       A,#0x4
   \   000073   02....       LJMP      ?Subroutine4 & 0xFFFF
   \                     ??ZDSecMgrAddLinkKey_2:
   \   000076   7911         MOV       R1,#0x11
   \   000078   80F7         SJMP      ??ZDSecMgrAddLinkKey_1
   2709          }
   2710          
   2711          /******************************************************************************
   2712           * @fn          ZDSecMgrInitNV
   2713           *
   2714           * @brief       Initialize the SecMgr entry data in NV with all values set to 0
   2715           *
   2716           * @param       none
   2717           *
   2718           * @return      uint8 - <osal_nv_item_init> return codes
   2719           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2720          uint8 ZDSecMgrInitNV(void)
   \                     ZDSecMgrInitNV:
   2721          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   2722          
   2723            uint8 rtrn = osal_nv_item_init(ZCD_NV_APS_LINK_KEY_TABLE,
   2724                          (sizeof(nvDeviceListHdr_t) + (sizeof(ZDSecMgrEntry_t) * ZDSECMGR_ENTRY_MAX)), NULL);
   \   00000A                ; Setup parameters for call to function osal_nv_item_init
   \   00000A   E4           CLR       A
   \   00000B   F5..         MOV       ?V0,A
   \   00000D   F5..         MOV       ?V1,A
   \   00000F   78..         MOV       R0,#?V0
   \   000011   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000014   7C11         MOV       R4,#0x11
   \   000016   7D00         MOV       R5,#0x0
   \   000018   7A4C         MOV       R2,#0x4c
   \   00001A   7B00         MOV       R3,#0x0
   \   00001C   12....       LCALL     `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   00001F   7402         MOV       A,#0x2
   \   000021   12....       LCALL     ?DEALLOC_XSTACK8
   \   000024   E9           MOV       A,R1
   \   000025   FE           MOV       R6,A
   2725          
   2726            // If the item does not already exist, set all values to 0
   2727            if (rtrn == NV_ITEM_UNINIT)
   \   000026   7409         MOV       A,#0x9
   \   000028   6E           XRL       A,R6
   \   000029   7021         JNZ       ??ZDSecMgrInitNV_0
   2728            {
   2729              nvDeviceListHdr_t hdr;
   2730              hdr.numRecs = 0;
   \   00002B   12....       LCALL     ?Subroutine12 & 0xFFFF
   2731              osal_nv_write(ZCD_NV_APS_LINK_KEY_TABLE, 0, sizeof(nvDeviceListHdr_t), &hdr);
   2732            }
   \                     ??CrossCallReturnLabel_2:
   \   00002E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000031   75..02       MOV       ?V0,#0x2
   \   000034   75..00       MOV       ?V1,#0x0
   \   000037   78..         MOV       R0,#?V0
   \   000039   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003C   7C00         MOV       R4,#0x0
   \   00003E   7D00         MOV       R5,#0x0
   \   000040   7A4C         MOV       R2,#0x4c
   \   000042   7B00         MOV       R3,#0x0
   \   000044   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000047   7404         MOV       A,#0x4
   \   000049   12....       LCALL     ?DEALLOC_XSTACK8
   2733          
   2734            rtrn |= osal_nv_item_init( ZCD_NV_TRUSTCENTER_ADDR, Z_EXTADDR_LEN,
   2735                                       zgApsTrustCenterAddr );
   2736          
   2737            return rtrn;
   \                     ??ZDSecMgrInitNV_0:
   \   00004C                ; Setup parameters for call to function osal_nv_item_init
   \   00004C   75....       MOV       ?V0,#zgApsTrustCenterAddr & 0xff
   \   00004F   75....       MOV       ?V1,#(zgApsTrustCenterAddr >> 8) & 0xff
   \   000052   78..         MOV       R0,#?V0
   \   000054   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000057   7C08         MOV       R4,#0x8
   \   000059   7D00         MOV       R5,#0x0
   \   00005B   7A71         MOV       R2,#0x71
   \   00005D   7B00         MOV       R3,#0x0
   \   00005F   12....       LCALL     `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   000062   7402         MOV       A,#0x2
   \   000064   12....       LCALL     ?DEALLOC_XSTACK8
   \   000067   E9           MOV       A,R1
   \   000068   4E           ORL       A,R6
   \   000069   F9           MOV       R1,A
   \   00006A   7402         MOV       A,#0x2
   \   00006C   02....       LJMP      ?Subroutine4 & 0xFFFF
   2738          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006   E4           CLR       A
   \   000007   F0           MOVX      @DPTR,A
   \   000008   A3           INC       DPTR
   \   000009   F0           MOVX      @DPTR,A
   \   00000A                ; Setup parameters for call to function osal_nv_write
   \   00000A                ; Setup parameters for call to function osal_nv_write
   \   00000A   A8..         MOV       R0,?XSP + 0
   \   00000C   A9..         MOV       R1,?XSP + 1
   \   00000E   88..         MOV       ?V0,R0
   \   000010   89..         MOV       ?V1,R1
   \   000012   78..         MOV       R0,#?V0
   \   000014   22           RET
   2739          
   2740          #if defined ( NV_RESTORE )
   2741          /*********************************************************************
   2742           * @fn      ZDSecMgrWriteNV()
   2743           *
   2744           * @brief   Save off the APS link key list to NV
   2745           *
   2746           * @param   none
   2747           *
   2748           * @return  none
   2749           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2750          static void ZDSecMgrWriteNV( void )
   \                     ZDSecMgrWriteNV:
   2751          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   2752            uint16 i;
   2753            nvDeviceListHdr_t hdr;
   2754          
   2755            hdr.numRecs = 0;
   \   00000A   85..82       MOV       DPL,?XSP + 0
   \   00000D   85..83       MOV       DPH,?XSP + 1
   \   000010   12....       LCALL     ?Subroutine9 & 0xFFFF
   2756          
   2757            if (ZDSecMgrEntries != NULL)
   \                     ??CrossCallReturnLabel_109:
   \   000013   6071         JZ        ??ZDSecMgrWriteNV_0
   2758            {
   2759              for ( i = 0; i < ZDSECMGR_ENTRY_MAX; i++ )
   \   000015   7E00         MOV       R6,#0x0
   \   000017   7F00         MOV       R7,#0x0
   2760              {
   2761                // Save off the record
   2762                osal_nv_write( ZCD_NV_APS_LINK_KEY_TABLE,
   2763                              (uint16)((sizeof(nvDeviceListHdr_t)) + (i * sizeof(ZDSecMgrEntry_t))),
   2764                              sizeof(ZDSecMgrEntry_t), &ZDSecMgrEntries[i] );
   \                     ??ZDSecMgrWriteNV_1:
   \   000019   8E..         MOV       ?V0,R6
   \   00001B   8F..         MOV       ?V1,R7
   \   00001D   E5..         MOV       A,?V0
   \   00001F   75F005       MOV       B,#0x5
   \   000022   A4           MUL       AB
   \   000023   F5..         MOV       ?V0,A
   \   000025   A8F0         MOV       R0,B
   \   000027   75F005       MOV       B,#0x5
   \   00002A   E5..         MOV       A,?V1
   \   00002C   A4           MUL       AB
   \   00002D   28           ADD       A,R0
   \   00002E   F5..         MOV       ?V1,A
   \   000030                ; Setup parameters for call to function osal_nv_write
   \   000030   90....       MOV       DPTR,#ZDSecMgrEntries
   \   000033   E0           MOVX      A,@DPTR
   \   000034   25..         ADD       A,?V0
   \   000036   F5..         MOV       ?V2,A
   \   000038   A3           INC       DPTR
   \   000039   E0           MOVX      A,@DPTR
   \   00003A   35..         ADDC      A,?V1
   \   00003C   F5..         MOV       ?V3,A
   \   00003E   78..         MOV       R0,#?V2
   \   000040   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000043   75..05       MOV       ?V2,#0x5
   \   000046   75..00       MOV       ?V3,#0x0
   \   000049   78..         MOV       R0,#?V2
   \   00004B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004E   12....       LCALL     ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   000051   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000054   7404         MOV       A,#0x4
   \   000056   12....       LCALL     ?DEALLOC_XSTACK8
   2765          
   2766                if ( ZDSecMgrEntries[i].ami != INVALID_NODE_ADDR )
   \   000059   90....       MOV       DPTR,#ZDSecMgrEntries
   \   00005C   E0           MOVX      A,@DPTR
   \   00005D   25..         ADD       A,?V0
   \   00005F   F8           MOV       R0,A
   \   000060   A3           INC       DPTR
   \   000061   E0           MOVX      A,@DPTR
   \   000062   35..         ADDC      A,?V1
   \   000064   8882         MOV       DPL,R0
   \   000066   F583         MOV       DPH,A
   \   000068   E0           MOVX      A,@DPTR
   \   000069   64FE         XRL       A,#0xfe
   \   00006B   7003         JNZ       ??ZDSecMgrWriteNV_2
   \   00006D   A3           INC       DPTR
   \   00006E   E0           MOVX      A,@DPTR
   \   00006F   F4           CPL       A
   \                     ??ZDSecMgrWriteNV_2:
   \   000070   600A         JZ        ??ZDSecMgrWriteNV_3
   2767                {
   2768                  hdr.numRecs++;
   \   000072   85..82       MOV       DPL,?XSP + 0
   \   000075   85..83       MOV       DPH,?XSP + 1
   \   000078   12....       LCALL     ?Subroutine35 & 0xFFFF
   2769                }
   2770              }
   \                     ??CrossCallReturnLabel_47:
   \   00007B   F0           MOVX      @DPTR,A
   \                     ??ZDSecMgrWriteNV_3:
   \   00007C   0E           INC       R6
   \   00007D   EE           MOV       A,R6
   \   00007E   7001         JNZ       ??ZDSecMgrWriteNV_4
   \   000080   0F           INC       R7
   \                     ??ZDSecMgrWriteNV_4:
   \   000081   12....       LCALL     ?Subroutine40 & 0xFFFF
   2771            }
   \                     ??CrossCallReturnLabel_54:
   \   000084   4093         JC        ??ZDSecMgrWriteNV_1
   2772          
   2773            // Save off the header
   2774            osal_nv_write( ZCD_NV_APS_LINK_KEY_TABLE, 0, sizeof( nvDeviceListHdr_t ), &hdr );
   \                     ??ZDSecMgrWriteNV_0:
   \   000086                ; Setup parameters for call to function osal_nv_write
   \   000086   A8..         MOV       R0,?XSP + 0
   \   000088   A9..         MOV       R1,?XSP + 1
   \   00008A   88..         MOV       ?V0,R0
   \   00008C   89..         MOV       ?V1,R1
   \   00008E   78..         MOV       R0,#?V0
   \   000090   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000093   75..02       MOV       ?V0,#0x2
   \   000096   75..00       MOV       ?V1,#0x0
   \   000099   78..         MOV       R0,#?V0
   \   00009B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00009E   7C00         MOV       R4,#0x0
   \   0000A0   7D00         MOV       R5,#0x0
   \   0000A2   7A4C         MOV       R2,#0x4c
   \   0000A4   7B00         MOV       R3,#0x0
   \   0000A6   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   0000A9   7404         MOV       A,#0x4
   \   0000AB   12....       LCALL     ?DEALLOC_XSTACK8
   2775          }
   \   0000AE   7402         MOV       A,#0x2
   \   0000B0                REQUIRE ?Subroutine3
   \   0000B0                ; // Fall through to label ?Subroutine3

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   C3           CLR       C
   \   000001   9403         SUBB      A,#0x3
   \   000003   EF           MOV       A,R7
   \   000004   9400         SUBB      A,#0x0
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   EE           MOV       A,R6
   \   000001   F8           MOV       R0,A
   \   000002   EF           MOV       A,R7
   \   000003   F9           MOV       R1,A
   \   000004   E8           MOV       A,R0
   \   000005   75F005       MOV       B,#0x5
   \   000008   A4           MUL       AB
   \   000009   F8           MOV       R0,A
   \   00000A   AAF0         MOV       R2,B
   \   00000C   75F005       MOV       B,#0x5
   \   00000F   E9           MOV       A,R1
   \   000010   A4           MUL       AB
   \   000011   2A           ADD       A,R2
   \   000012   12....       LCALL     ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_92:
   \   000015   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine56:
   \   000000   F9           MOV       R1,A
   \   000001   E8           MOV       A,R0
   \   000002   2402         ADD       A,#0x2
   \   000004   FC           MOV       R4,A
   \   000005   E4           CLR       A
   \   000006   39           ADDC      A,R1
   \   000007   FD           MOV       R5,A
   \   000008   7A4C         MOV       R2,#0x4c
   \   00000A   7B00         MOV       R3,#0x0
   \   00000C   22           RET
   2776          #endif // NV_RESTORE
   2777          
   2778          #if defined ( NV_RESTORE )
   2779          /******************************************************************************
   2780           * @fn          ZDSecMgrRestoreFromNV
   2781           *
   2782           * @brief       Restore the APS Link Key entry data from NV. It does not restore
   2783           *              the key data itself as they remain in NV until they are used.
   2784           *              Only list data is restored.
   2785           *              Restore zgTrustCenterAdress from NV.
   2786           *
   2787           * @param       none
   2788           *
   2789           * @return      None.
   2790           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2791          static void ZDSecMgrRestoreFromNV( void )
   \                     ZDSecMgrRestoreFromNV:
   2792          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   2793            nvDeviceListHdr_t hdr;
   2794            APSME_LinkKeyData_t *pApsLinkKey = NULL;
   2795          
   2796            if ((osal_nv_read(ZCD_NV_APS_LINK_KEY_TABLE, 0, sizeof(nvDeviceListHdr_t), &hdr) == ZSUCCESS) &&
   2797                ((hdr.numRecs > 0) && (hdr.numRecs <= ZDSECMGR_ENTRY_MAX)))
   \   00000A                ; Setup parameters for call to function osal_nv_read
   \   00000A   A8..         MOV       R0,?XSP + 0
   \   00000C   A9..         MOV       R1,?XSP + 1
   \   00000E   88..         MOV       ?V0,R0
   \   000010   89..         MOV       ?V1,R1
   \   000012   78..         MOV       R0,#?V0
   \   000014   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000017   75..02       MOV       ?V0,#0x2
   \   00001A   75..00       MOV       ?V1,#0x0
   \   00001D   78..         MOV       R0,#?V0
   \   00001F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000022   7C00         MOV       R4,#0x0
   \   000024   7D00         MOV       R5,#0x0
   \   000026   7A4C         MOV       R2,#0x4c
   \   000028   7B00         MOV       R3,#0x0
   \   00002A   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   00002D   7404         MOV       A,#0x4
   \   00002F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000032   E9           MOV       A,R1
   \   000033   6003         JZ        $+5
   \   000035   02....       LJMP      ??ZDSecMgrRestoreFromNV_0 & 0xFFFF
   \   000038   12....       LCALL     ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_184:
   \   00003B   7003         JNZ       $+5
   \   00003D   02....       LJMP      ??ZDSecMgrRestoreFromNV_0 & 0xFFFF
   \   000040   85..82       MOV       DPL,?XSP + 0
   \   000043   85..83       MOV       DPH,?XSP + 1
   \   000046   C3           CLR       C
   \   000047   E0           MOVX      A,@DPTR
   \   000048   9404         SUBB      A,#0x4
   \   00004A   A3           INC       DPTR
   \   00004B   E0           MOVX      A,@DPTR
   \   00004C   9400         SUBB      A,#0x0
   \   00004E   4003         JC        $+5
   \   000050   02....       LJMP      ??ZDSecMgrRestoreFromNV_0 & 0xFFFF
   2798            {
   2799              uint8 x;
   2800          
   2801              pApsLinkKey = (APSME_LinkKeyData_t *)osal_mem_alloc(sizeof(APSME_LinkKeyData_t));
   \   000053                ; Setup parameters for call to function osal_mem_alloc
   \   000053   7A18         MOV       R2,#0x18
   \   000055   7B00         MOV       R3,#0x0
   \   000057   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00005A   8A..         MOV       ?V8,R2
   \   00005C   8B..         MOV       ?V9,R3
   2802          
   2803              for (x = 0; x < ZDSECMGR_ENTRY_MAX; x++)
   \   00005E   75..00       MOV       ?V0,#0x0
   \   000061   EA           MOV       A,R2
   \   000062   2410         ADD       A,#0x10
   \   000064   F5..         MOV       ?V2,A
   \   000066   E4           CLR       A
   \   000067   35..         ADDC      A,?V9
   \   000069   F5..         MOV       ?V3,A
   2804              {
   2805                if ( osal_nv_read( ZCD_NV_APS_LINK_KEY_TABLE,
   2806                                  (uint16)(sizeof(nvDeviceListHdr_t) + (x * sizeof(ZDSecMgrEntry_t))),
   2807                                  sizeof(ZDSecMgrEntry_t), &ZDSecMgrEntries[x] ) == SUCCESS )
   \                     ??ZDSecMgrRestoreFromNV_1:
   \   00006B   E5..         MOV       A,?V0
   \   00006D   75F005       MOV       B,#0x5
   \   000070   A4           MUL       AB
   \   000071   FE           MOV       R6,A
   \   000072   AFF0         MOV       R7,B
   \   000074                ; Setup parameters for call to function osal_nv_read
   \   000074   90....       MOV       DPTR,#ZDSecMgrEntries
   \   000077   E0           MOVX      A,@DPTR
   \   000078   2E           ADD       A,R6
   \   000079   F5..         MOV       ?V4,A
   \   00007B   A3           INC       DPTR
   \   00007C   E0           MOVX      A,@DPTR
   \   00007D   3F           ADDC      A,R7
   \   00007E   F5..         MOV       ?V5,A
   \   000080   78..         MOV       R0,#?V4
   \   000082   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000085   75..05       MOV       ?V4,#0x5
   \   000088   75..00       MOV       ?V5,#0x0
   \   00008B   78..         MOV       R0,#?V4
   \   00008D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000090   E5..         MOV       A,?V0
   \   000092   75F005       MOV       B,#0x5
   \   000095   A4           MUL       AB
   \   000096   F8           MOV       R0,A
   \   000097   EF           MOV       A,R7
   \   000098   12....       LCALL     ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_91:
   \   00009B   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   00009E   7404         MOV       A,#0x4
   \   0000A0   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000A3   E9           MOV       A,R1
   \   0000A4   6003         JZ        $+5
   \   0000A6   02....       LJMP      ??ZDSecMgrRestoreFromNV_2 & 0xFFFF
   2808                {
   2809                  // update data only for valid entries
   2810                  if ( ZDSecMgrEntries[x].ami != INVALID_NODE_ADDR )
   \   0000A9   90....       MOV       DPTR,#ZDSecMgrEntries
   \   0000AC   E0           MOVX      A,@DPTR
   \   0000AD   2E           ADD       A,R6
   \   0000AE   F8           MOV       R0,A
   \   0000AF   A3           INC       DPTR
   \   0000B0   E0           MOVX      A,@DPTR
   \   0000B1   3F           ADDC      A,R7
   \   0000B2   F9           MOV       R1,A
   \   0000B3   E8           MOV       A,R0
   \   0000B4   FA           MOV       R2,A
   \   0000B5   E9           MOV       A,R1
   \   0000B6   FB           MOV       R3,A
   \   0000B7   8A82         MOV       DPL,R2
   \   0000B9   8B83         MOV       DPH,R3
   \   0000BB   E0           MOVX      A,@DPTR
   \   0000BC   64FE         XRL       A,#0xfe
   \   0000BE   7003         JNZ       ??ZDSecMgrRestoreFromNV_3
   \   0000C0   A3           INC       DPTR
   \   0000C1   E0           MOVX      A,@DPTR
   \   0000C2   F4           CPL       A
   \                     ??ZDSecMgrRestoreFromNV_3:
   \   0000C3   7003         JNZ       $+5
   \   0000C5   02....       LJMP      ??ZDSecMgrRestoreFromNV_2 & 0xFFFF
   2811                  {
   2812                    if (pApsLinkKey != NULL)
   \   0000C8   E5..         MOV       A,?V8
   \   0000CA   45..         ORL       A,?V9
   \   0000CC   7003         JNZ       $+5
   \   0000CE   02....       LJMP      ??ZDSecMgrRestoreFromNV_2 & 0xFFFF
   2813                    {
   2814                      // read the key form NV, keyNvId must be ZCD_NV_APS_LINK_KEY_DATA_START based
   2815                      osal_nv_read( ZDSecMgrEntries[x].keyNvId, 0,
   2816                                   sizeof(APSME_LinkKeyData_t), pApsLinkKey );
   \   0000D1                ; Setup parameters for call to function osal_nv_read
   \   0000D1   78..         MOV       R0,#?V8
   \   0000D3   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000D6   75..18       MOV       ?V4,#0x18
   \   0000D9   78..         MOV       R0,#?V4
   \   0000DB   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000DE   7C00         MOV       R4,#0x0
   \   0000E0   7D00         MOV       R5,#0x0
   \   0000E2   8A82         MOV       DPL,R2
   \   0000E4   8B83         MOV       DPH,R3
   \   0000E6   12....       LCALL     ??Subroutine61_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_132:
   \   0000E9   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   0000EC   7404         MOV       A,#0x4
   \   0000EE   12....       LCALL     ?DEALLOC_XSTACK8
   2817          
   2818                      // set new values for the counter
   2819                      pApsLinkKey->txFrmCntr += ( MAX_APS_FRAMECOUNTER_CHANGES + 1 );
   \   0000F1   90....       MOV       DPTR,#__Constant_3e9
   \   0000F4   78..         MOV       R0,#?V4
   \   0000F6   12....       LCALL     ?L_MOV_X
   \   0000F9   85..82       MOV       DPL,?V2
   \   0000FC   85..83       MOV       DPH,?V3
   \   0000FF   78..         MOV       R0,#?V4
   \   000101   12....       LCALL     ?L_ADD_TO_X
   \   000104   12....       LCALL     ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   000107   A3           INC       DPTR
   \   000108   A3           INC       DPTR
   \   000109   E0           MOVX      A,@DPTR
   \   00010A   FE           MOV       R6,A
   \   00010B   A3           INC       DPTR
   \   00010C   E0           MOVX      A,@DPTR
   \   00010D   FF           MOV       R7,A
   \   00010E   EE           MOV       A,R6
   \   00010F   F8           MOV       R0,A
   \   000110   EF           MOV       A,R7
   \   000111   F9           MOV       R1,A
   \   000112   E8           MOV       A,R0
   \   000113   75F009       MOV       B,#0x9
   \   000116   A4           MUL       AB
   \   000117   F8           MOV       R0,A
   \   000118   AAF0         MOV       R2,B
   \   00011A   75F009       MOV       B,#0x9
   \   00011D   E9           MOV       A,R1
   \   00011E   A4           MUL       AB
   \   00011F   2A           ADD       A,R2
   \   000120   F9           MOV       R1,A
   \   000121   74..         MOV       A,#ApsLinkKeyFrmCntr & 0xff
   \   000123   28           ADD       A,R0
   \   000124   FC           MOV       R4,A
   \   000125   74..         MOV       A,#(ApsLinkKeyFrmCntr >> 8) & 0xff
   \   000127   39           ADDC      A,R1
   \   000128   FD           MOV       R5,A
   \   000129   85..82       MOV       DPL,?V2
   \   00012C   85..83       MOV       DPH,?V3
   \   00012F   12....       LCALL     ?XLOAD_R0123
   \   000132   EC           MOV       A,R4
   \   000133   24F7         ADD       A,#-0x9
   \   000135   F582         MOV       DPL,A
   \   000137   ED           MOV       A,R5
   \   000138   34ED         ADDC      A,#-0x13
   \   00013A   F583         MOV       DPH,A
   \   00013C   12....       LCALL     ?XSTORE_R0123
   2820          
   2821                      // restore values for counters in RAM
   2822                      ApsLinkKeyFrmCntr[ZDSecMgrEntries[x].keyNvId - ZCD_NV_APS_LINK_KEY_DATA_START].txFrmCntr =
   2823                                                      pApsLinkKey->txFrmCntr;
   2824          
   2825                      ApsLinkKeyFrmCntr[ZDSecMgrEntries[x].keyNvId - ZCD_NV_APS_LINK_KEY_DATA_START].rxFrmCntr =
   2826                                                      pApsLinkKey->rxFrmCntr;
   \   00013F   E5..         MOV       A,?V8
   \   000141   2414         ADD       A,#0x14
   \   000143   F582         MOV       DPL,A
   \   000145   E4           CLR       A
   \   000146   35..         ADDC      A,?V9
   \   000148   F583         MOV       DPH,A
   \   00014A   12....       LCALL     ?XLOAD_R0123
   \   00014D   EC           MOV       A,R4
   \   00014E   24FB         ADD       A,#-0x5
   \   000150   F582         MOV       DPL,A
   \   000152   ED           MOV       A,R5
   \   000153   34ED         ADDC      A,#-0x13
   \   000155   F583         MOV       DPH,A
   \   000157   12....       LCALL     ?XSTORE_R0123
   2827          
   2828                      osal_nv_write( ZDSecMgrEntries[x].keyNvId, 0,
   2829                                    sizeof(APSME_LinkKeyData_t), pApsLinkKey );
   \   00015A                ; Setup parameters for call to function osal_nv_write
   \   00015A   78..         MOV       R0,#?V8
   \   00015C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00015F   75..18       MOV       ?V4,#0x18
   \   000162   75..00       MOV       ?V5,#0x0
   \   000165   78..         MOV       R0,#?V4
   \   000167   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00016A   7C00         MOV       R4,#0x0
   \   00016C   7D00         MOV       R5,#0x0
   \   00016E   EE           MOV       A,R6
   \   00016F   FA           MOV       R2,A
   \   000170   EF           MOV       A,R7
   \   000171   FB           MOV       R3,A
   \   000172   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000175   7404         MOV       A,#0x4
   \   000177   12....       LCALL     ?DEALLOC_XSTACK8
   2830          
   2831                      // clear copy of key in RAM
   2832                      osal_memset(pApsLinkKey, 0x00, sizeof(APSME_LinkKeyData_t));
   \   00017A                ; Setup parameters for call to function osal_memset
   \   00017A   7C18         MOV       R4,#0x18
   \   00017C   7D00         MOV       R5,#0x0
   \   00017E   7900         MOV       R1,#0x0
   \   000180   AA..         MOV       R2,?V8
   \   000182   AB..         MOV       R3,?V9
   \   000184   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   2833                    }
   2834                  }
   2835                }
   2836              }
   \                     ??ZDSecMgrRestoreFromNV_2:
   \   000187   05..         INC       ?V0
   \   000189   E5..         MOV       A,?V0
   \   00018B   C3           CLR       C
   \   00018C   9403         SUBB      A,#0x3
   \   00018E   5003         JNC       $+5
   \   000190   02....       LJMP      ??ZDSecMgrRestoreFromNV_1 & 0xFFFF
   2837          
   2838              if (pApsLinkKey != NULL)
   \   000193   E5..         MOV       A,?V8
   \   000195   45..         ORL       A,?V9
   \   000197   6007         JZ        ??ZDSecMgrRestoreFromNV_0
   2839              {
   2840                osal_mem_free(pApsLinkKey);
   \   000199                ; Setup parameters for call to function osal_mem_free
   \   000199   AA..         MOV       R2,?V8
   \   00019B   AB..         MOV       R3,?V9
   \   00019D   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2841              }
   2842            }
   2843          
   2844            osal_nv_read( ZCD_NV_TRUSTCENTER_ADDR, 0, Z_EXTADDR_LEN, zgApsTrustCenterAddr );
   \                     ??ZDSecMgrRestoreFromNV_0:
   \   0001A0                ; Setup parameters for call to function osal_nv_read
   \   0001A0   75....       MOV       ?V0,#zgApsTrustCenterAddr & 0xff
   \   0001A3   75....       MOV       ?V1,#(zgApsTrustCenterAddr >> 8) & 0xff
   \   0001A6   78..         MOV       R0,#?V0
   \   0001A8   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001AB   75..08       MOV       ?V0,#0x8
   \   0001AE   75..00       MOV       ?V1,#0x0
   \   0001B1   78..         MOV       R0,#?V0
   \   0001B3   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001B6   7C00         MOV       R4,#0x0
   \   0001B8   7D00         MOV       R5,#0x0
   \   0001BA   7A71         MOV       R2,#0x71
   \   0001BC   7B00         MOV       R3,#0x0
   \   0001BE   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   0001C1   7404         MOV       A,#0x4
   \   0001C3   12....       LCALL     ?DEALLOC_XSTACK8
   2845          }
   \   0001C6   7402         MOV       A,#0x2
   \   0001C8   02....       LJMP      ?Subroutine5 & 0xFFFF
   2846          #endif // NV_RESTORE
   2847          
   2848          /*********************************************************************
   2849           * @fn          ZDSecMgrSetDefaultNV
   2850           *
   2851           * @brief       Write the defaults to NV for Entry table and for APS key data table
   2852           *
   2853           * @param       none
   2854           *
   2855           * @return      none
   2856           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2857          void ZDSecMgrSetDefaultNV( void )
   \                     ZDSecMgrSetDefaultNV:
   2858          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 7
   \   000005   74F9         MOV       A,#-0x7
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   2859            uint16 i;
   2860            nvDeviceListHdr_t hdr;
   2861            ZDSecMgrEntry_t secMgrEntry;
   2862            APSME_LinkKeyData_t *pApsLinkKey = NULL;
   2863          
   2864            // Initialize the header
   2865            hdr.numRecs = 0;
   \   00000A   12....       LCALL     ?Subroutine12 & 0xFFFF
   2866          
   2867            // clear the header
   2868            osal_nv_write(ZCD_NV_APS_LINK_KEY_TABLE, 0, sizeof(nvDeviceListHdr_t), &hdr);
   \                     ??CrossCallReturnLabel_3:
   \   00000D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000010   75..02       MOV       ?V0,#0x2
   \   000013   75..00       MOV       ?V1,#0x0
   \   000016   78..         MOV       R0,#?V0
   \   000018   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001B   7C00         MOV       R4,#0x0
   \   00001D   7D00         MOV       R5,#0x0
   \   00001F   7A4C         MOV       R2,#0x4c
   \   000021   7B00         MOV       R3,#0x0
   \   000023   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000026   7404         MOV       A,#0x4
   \   000028   12....       LCALL     ?DEALLOC_XSTACK8
   2869          
   2870            osal_memset( &secMgrEntry, 0x00, sizeof(ZDSecMgrEntry_t) );
   \   00002B                ; Setup parameters for call to function osal_memset
   \   00002B   7C05         MOV       R4,#0x5
   \   00002D   7D00         MOV       R5,#0x0
   \   00002F   7900         MOV       R1,#0x0
   \   000031   7402         MOV       A,#0x2
   \   000033   12....       LCALL     ?XSTACK_DISP101_8
   \   000036   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   2871          
   2872            for ( i = 0; i < ZDSECMGR_ENTRY_MAX; i++ )
   \   000039   7E00         MOV       R6,#0x0
   \   00003B   7F00         MOV       R7,#0x0
   2873            {
   2874              // Clear the record
   2875              osal_nv_write( ZCD_NV_APS_LINK_KEY_TABLE,
   2876                          (uint16)((sizeof(nvDeviceListHdr_t)) + (i * sizeof(ZDSecMgrEntry_t))),
   2877                                  sizeof(ZDSecMgrEntry_t), &secMgrEntry );
   \                     ??ZDSecMgrSetDefaultNV_0:
   \   00003D                ; Setup parameters for call to function osal_nv_write
   \   00003D   7402         MOV       A,#0x2
   \   00003F   12....       LCALL     ?XSTACK_DISP100_8
   \   000042   88..         MOV       ?V0,R0
   \   000044   89..         MOV       ?V1,R1
   \   000046   78..         MOV       R0,#?V0
   \   000048   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004B   75..05       MOV       ?V0,#0x5
   \   00004E   75..00       MOV       ?V1,#0x0
   \   000051   78..         MOV       R0,#?V0
   \   000053   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000056   12....       LCALL     ?Subroutine38 & 0xFFFF
   2878            }
   \                     ??CrossCallReturnLabel_53:
   \   000059   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   00005C   7404         MOV       A,#0x4
   \   00005E   12....       LCALL     ?DEALLOC_XSTACK8
   \   000061   0E           INC       R6
   \   000062   EE           MOV       A,R6
   \   000063   7001         JNZ       ??ZDSecMgrSetDefaultNV_1
   \   000065   0F           INC       R7
   \                     ??ZDSecMgrSetDefaultNV_1:
   \   000066   12....       LCALL     ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   000069   40D2         JC        ??ZDSecMgrSetDefaultNV_0
   2879          
   2880            pApsLinkKey = (APSME_LinkKeyData_t *)osal_mem_alloc(sizeof(APSME_LinkKeyData_t));
   \   00006B                ; Setup parameters for call to function osal_mem_alloc
   \   00006B   7A18         MOV       R2,#0x18
   \   00006D   7B00         MOV       R3,#0x0
   \   00006F   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000072   8A..         MOV       ?V0,R2
   \   000074   8B..         MOV       ?V1,R3
   2881          
   2882            if (pApsLinkKey != NULL)
   \   000076   EA           MOV       A,R2
   \   000077   45..         ORL       A,?V1
   \   000079   6042         JZ        ??ZDSecMgrSetDefaultNV_2
   2883            {
   2884              osal_memset( pApsLinkKey, 0x00, sizeof(APSME_LinkKeyData_t) );
   \   00007B                ; Setup parameters for call to function osal_memset
   \   00007B   7C18         MOV       R4,#0x18
   \   00007D   7D00         MOV       R5,#0x0
   \   00007F   7900         MOV       R1,#0x0
   \   000081   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   2885          
   2886              for ( i = 0; i < ZDSECMGR_ENTRY_MAX; i++ )
   \   000084   7E00         MOV       R6,#0x0
   \   000086   7F00         MOV       R7,#0x0
   2887              {
   2888                // Clear the record
   2889                osal_nv_write( (ZCD_NV_APS_LINK_KEY_DATA_START + i), 0,
   2890                              sizeof(APSME_LinkKeyData_t), pApsLinkKey);
   \                     ??ZDSecMgrSetDefaultNV_3:
   \   000088                ; Setup parameters for call to function osal_nv_write
   \   000088   78..         MOV       R0,#?V0
   \   00008A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00008D   75..18       MOV       ?V2,#0x18
   \   000090   75..00       MOV       ?V3,#0x0
   \   000093   78..         MOV       R0,#?V2
   \   000095   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000098   7C00         MOV       R4,#0x0
   \   00009A   7D00         MOV       R5,#0x0
   \   00009C   EE           MOV       A,R6
   \   00009D   2401         ADD       A,#0x1
   \   00009F   FA           MOV       R2,A
   \   0000A0   EF           MOV       A,R7
   \   0000A1   3402         ADDC      A,#0x2
   \   0000A3   FB           MOV       R3,A
   \   0000A4   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   0000A7   7404         MOV       A,#0x4
   \   0000A9   12....       LCALL     ?DEALLOC_XSTACK8
   2891              }
   \   0000AC   0E           INC       R6
   \   0000AD   EE           MOV       A,R6
   \   0000AE   7001         JNZ       ??ZDSecMgrSetDefaultNV_4
   \   0000B0   0F           INC       R7
   \                     ??ZDSecMgrSetDefaultNV_4:
   \   0000B1   12....       LCALL     ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   0000B4   40D2         JC        ??ZDSecMgrSetDefaultNV_3
   2892          
   2893              osal_mem_free(pApsLinkKey);
   \   0000B6                ; Setup parameters for call to function osal_mem_free
   \   0000B6   AA..         MOV       R2,?V0
   \   0000B8   AB..         MOV       R3,?V1
   \   0000BA   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2894            }
   2895          }
   \                     ??ZDSecMgrSetDefaultNV_2:
   \   0000BD   7407         MOV       A,#0x7
   \   0000BF   02....       LJMP      ?Subroutine3 & 0xFFFF
   2896          
   2897          #if defined ( NV_RESTORE )
   2898          /*********************************************************************
   2899           * @fn      ZDSecMgrUpdateNV()
   2900           *
   2901           * @brief   Updates one entry of the APS link key table to NV
   2902           *
   2903           * @param   index - to the entry in security manager table
   2904           *
   2905           * @return  none
   2906           */
   2907          static void ZDSecMgrUpdateNV( uint16 index )
   2908          {
   2909            nvDeviceListHdr_t hdr;
   2910          
   2911            if (ZDSecMgrEntries != NULL)
   2912            {
   2913              // Save off the record
   2914              osal_nv_write( ZCD_NV_APS_LINK_KEY_TABLE,
   2915                             (uint16)((sizeof(nvDeviceListHdr_t)) + (index * sizeof(ZDSecMgrEntry_t))),
   2916                             sizeof(ZDSecMgrEntry_t), &ZDSecMgrEntries[index] );
   2917            }
   2918          
   2919            if (osal_nv_read(ZCD_NV_APS_LINK_KEY_TABLE, 0, sizeof(nvDeviceListHdr_t), &hdr) == ZSUCCESS)
   2920            {
   2921              if ( ZDSecMgrEntries[index].ami == INVALID_NODE_ADDR )
   2922              {
   2923                if (hdr.numRecs > 0)
   2924                {
   2925                  hdr.numRecs--;
   2926                }
   2927              }
   2928              else
   2929              {
   2930                hdr.numRecs++;
   2931              }
   2932          
   2933              // Save off the header
   2934              osal_nv_write( ZCD_NV_APS_LINK_KEY_TABLE, 0, sizeof( nvDeviceListHdr_t ), &hdr );
   2935            }
   2936          }
   2937          #endif // NV_RESTORE
   2938          
   2939          /******************************************************************************
   2940           * @fn          ZDSecMgrAPSRemove
   2941           *
   2942           * @brief       Remove device from network.
   2943           *
   2944           * @param       nwkAddr - device's NWK address
   2945           * @param       extAddr - device's Extended address
   2946           * @param       parentAddr - parent's NWK address
   2947           *
   2948           * @return      ZStatus_t
   2949           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2950          ZStatus_t ZDSecMgrAPSRemove( uint16 nwkAddr, uint8 *extAddr, uint16 parentAddr )
   \                     ZDSecMgrAPSRemove:
   2951          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 8
   \   000004   74F8         MOV       A,#-0x8
   \   000006   12....       LCALL     ?ALLOC_XSTACK8
   2952            ZDSecMgrDevice_t device;
   2953          
   2954            if ( ( nwkAddr == INVALID_NODE_ADDR ) ||
   2955                 ( extAddr == NULL )              ||
   2956                 ( parentAddr == INVALID_NODE_ADDR ) )
   \   000009   74FE         MOV       A,#-0x2
   \   00000B   6A           XRL       A,R2
   \   00000C   7003         JNZ       ??ZDSecMgrAPSRemove_0
   \   00000E   74FF         MOV       A,#-0x1
   \   000010   6B           XRL       A,R3
   \                     ??ZDSecMgrAPSRemove_0:
   \   000011   6016         JZ        ??ZDSecMgrAPSRemove_1
   \   000013   EC           MOV       A,R4
   \   000014   4D           ORL       A,R5
   \   000015   6012         JZ        ??ZDSecMgrAPSRemove_1
   \   000017   7408         MOV       A,#0x8
   \   000019   12....       LCALL     ?XSTACK_DISP0_8
   \   00001C   12....       LCALL     ??Subroutine66_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_164:
   \   00001F   74FE         MOV       A,#-0x2
   \   000021   68           XRL       A,R0
   \   000022   7003         JNZ       ??ZDSecMgrAPSRemove_2
   \   000024   74FF         MOV       A,#-0x1
   \   000026   69           XRL       A,R1
   \                     ??ZDSecMgrAPSRemove_2:
   \   000027   7004         JNZ       ??ZDSecMgrAPSRemove_3
   2957            {
   2958              return ( ZFailure );
   \                     ??ZDSecMgrAPSRemove_1:
   \   000029   7901         MOV       R1,#0x1
   \   00002B   8024         SJMP      ??ZDSecMgrAPSRemove_4
   2959            }
   2960          
   2961            device.nwkAddr = nwkAddr;
   \                     ??ZDSecMgrAPSRemove_3:
   \   00002D   85..82       MOV       DPL,?XSP + 0
   \   000030   85..83       MOV       DPH,?XSP + 1
   \   000033   12....       LCALL     ?Subroutine50 & 0xFFFF
   2962            device.extAddr = extAddr;
   \                     ??CrossCallReturnLabel_81:
   \   000036   7402         MOV       A,#0x2
   \   000038   12....       LCALL     ?XSTACK_DISP0_8
   \   00003B   EC           MOV       A,R4
   \   00003C   F0           MOVX      @DPTR,A
   \   00003D   A3           INC       DPTR
   \   00003E   ED           MOV       A,R5
   \   00003F   F0           MOVX      @DPTR,A
   2963            device.parentAddr = parentAddr;
   \   000040   7404         MOV       A,#0x4
   \   000042   12....       LCALL     ?XSTACK_DISP0_8
   \   000045   E8           MOV       A,R0
   \   000046   F0           MOVX      @DPTR,A
   \   000047   A3           INC       DPTR
   \   000048   E9           MOV       A,R1
   \   000049   12....       LCALL     ??Subroutine73_0 & 0xFFFF
   2964          
   2965            // remove device
   2966            ZDSecMgrDeviceRemove( &device );
   \                     ??CrossCallReturnLabel_192:
   \   00004C   12....       LCALL     `??ZDSecMgrDeviceRemove::?relay`; Banked call to: ZDSecMgrDeviceRemove
   2967          
   2968            return ( ZSuccess );
   \   00004F   7900         MOV       R1,#0x0
   \                     ??ZDSecMgrAPSRemove_4:
   \   000051   02....       LJMP      ?Subroutine2 & 0xFFFF
   2969          }
   2970          
   2971          /******************************************************************************
   2972           * @fn          APSME_TCLinkKeyInit
   2973           *
   2974           * @brief       Initialize the NV table for preconfigured TC link key
   2975           *
   2976           *              When zgUseDefaultTCL is set to TRUE, the default preconfig
   2977           *              Trust Center Link Key is written to NV. A single tclk is used
   2978           *              by all devices joining the network.
   2979           *
   2980           * @param       setDefault - TRUE to set default values
   2981           *
   2982           * @return      none
   2983           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2984          void APSME_TCLinkKeyInit(uint8 setDefault)
   \                     APSME_TCLinkKeyInit:
   2985          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 19
   \   000005   74ED         MOV       A,#-0x13
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V8,R1
   2986            APSME_TCLKDevEntry_t TCLKDevEntry;
   2987            uint8                rtrn;
   2988            uint16               i;
   2989            
   2990            // Clear the data for the keys
   2991            osal_memset( &TCLKDevEntry, 0x00, sizeof(APSME_TCLKDevEntry_t) );
   \   00000C                ; Setup parameters for call to function osal_memset
   \   00000C   7C13         MOV       R4,#0x13
   \   00000E   7D00         MOV       R5,#0x0
   \   000010   7900         MOV       R1,#0x0
   \   000012   AA..         MOV       R2,?XSP + 0
   \   000014   AB..         MOV       R3,?XSP + 1
   \   000016   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   2992            TCLKDevEntry.keyAttributes = ZG_DEFAULT_KEY;
   \   000019   7410         MOV       A,#0x10
   \   00001B   12....       LCALL     ?XSTACK_DISP0_8
   \   00001E   74FF         MOV       A,#-0x1
   \   000020   F0           MOVX      @DPTR,A
   2993            
   2994            // Initialize all NV items
   2995            for( i = 0; i < gZDSECMGR_TC_DEVICE_MAX; i++ )
   \   000021   7E00         MOV       R6,#0x0
   \   000023   7F00         MOV       R7,#0x0
   2996            {
   2997              // If the item doesn't exist in NV memory, create and initialize
   2998              // it with the default value passed in, either defaultTCLK or 0
   2999              rtrn = osal_nv_item_init( (ZCD_NV_TCLK_TABLE_START + i),
   3000                                         sizeof(APSME_TCLKDevEntry_t), &TCLKDevEntry);
   3001          
   3002              if (rtrn == SUCCESS)
   \                     ??APSME_TCLinkKeyInit_0:
   \   000025   EE           MOV       A,R6
   \   000026   2411         ADD       A,#0x11
   \   000028   F5..         MOV       ?V0,A
   \   00002A   EF           MOV       A,R7
   \   00002B   3401         ADDC      A,#0x1
   \   00002D   F5..         MOV       ?V1,A
   \   00002F                ; Setup parameters for call to function osal_nv_item_init
   \   00002F   A8..         MOV       R0,?XSP + 0
   \   000031   A9..         MOV       R1,?XSP + 1
   \   000033   88..         MOV       ?V2,R0
   \   000035   89..         MOV       ?V3,R1
   \   000037   78..         MOV       R0,#?V2
   \   000039   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003C   7C13         MOV       R4,#0x13
   \   00003E   7D00         MOV       R5,#0x0
   \   000040   AA..         MOV       R2,?V0
   \   000042   AB..         MOV       R3,?V1
   \   000044   12....       LCALL     `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   000047   7402         MOV       A,#0x2
   \   000049   12....       LCALL     ?DEALLOC_XSTACK8
   \   00004C   E9           MOV       A,R1
   \   00004D   6003         JZ        $+5
   \   00004F   02....       LJMP      ??APSME_TCLinkKeyInit_1 & 0xFFFF
   3003              {
   3004                if(setDefault)
   \   000052   EE           MOV       A,R6
   \   000053   F8           MOV       R0,A
   \   000054   EF           MOV       A,R7
   \   000055   F9           MOV       R1,A
   \   000056   E8           MOV       A,R0
   \   000057   75F009       MOV       B,#0x9
   \   00005A   A4           MUL       AB
   \   00005B   F8           MOV       R0,A
   \   00005C   AAF0         MOV       R2,B
   \   00005E   75F009       MOV       B,#0x9
   \   000061   E9           MOV       A,R1
   \   000062   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   000065   2404         ADD       A,#0x4
   \   000067   F5..         MOV       ?V10,A
   \   000069   E4           CLR       A
   \   00006A   35..         ADDC      A,?V3
   \   00006C   F5..         MOV       ?V11,A
   \   00006E   E5..         MOV       A,?V8
   \   000070   A8..         MOV       R0,?XSP + 0
   \   000072   A9..         MOV       R1,?XSP + 1
   \   000074   88..         MOV       ?V4,R0
   \   000076   89..         MOV       ?V5,R1
   \   000078   78..         MOV       R0,#?V4
   \   00007A   6036         JZ        ??APSME_TCLinkKeyInit_2
   3005                {
   3006                  //Force to initialize the entry
   3007                  osal_nv_write(ZCD_NV_TCLK_TABLE_START + i, 0, sizeof(APSME_TCLKDevEntry_t), &TCLKDevEntry);
   \   00007C                ; Setup parameters for call to function osal_nv_write
   \   00007C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00007F   75..13       MOV       ?V4,#0x13
   \   000082   75..00       MOV       ?V5,#0x0
   \   000085   78..         MOV       R0,#?V4
   \   000087   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00008A   7C00         MOV       R4,#0x0
   \   00008C   7D00         MOV       R5,#0x0
   \   00008E   AA..         MOV       R2,?V0
   \   000090   AB..         MOV       R3,?V1
   \   000092   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000095   7404         MOV       A,#0x4
   \   000097   12....       LCALL     ?DEALLOC_XSTACK8
   3008                  TCLinkKeyFrmCntr[i].txFrmCntr = 0;
   \   00009A   85..82       MOV       DPL,?V2
   \   00009D   85..83       MOV       DPH,?V3
   \   0000A0   12....       LCALL     ??Subroutine75_0 & 0xFFFF
   3009                  TCLinkKeyFrmCntr[i].rxFrmCntr = 0;
   \                     ??CrossCallReturnLabel_197:
   \   0000A3   85..82       MOV       DPL,?V10
   \   0000A6   85..83       MOV       DPH,?V11
   \   0000A9   F0           MOVX      @DPTR,A
   \   0000AA   A3           INC       DPTR
   \   0000AB   F0           MOVX      @DPTR,A
   \   0000AC   A3           INC       DPTR
   \   0000AD   F0           MOVX      @DPTR,A
   \   0000AE   A3           INC       DPTR
   \   0000AF   02....       LJMP      ??APSME_TCLinkKeyInit_3 & 0xFFFF
   3010                }
   3011                else
   3012                {
   3013                  // set the Frame counters to 0 to existing keys in NV
   3014                  osal_nv_read( ( ZCD_NV_TCLK_TABLE_START + i), 0,
   3015                                 sizeof(APSME_TCLKDevEntry_t), &TCLKDevEntry );
   \                     ??APSME_TCLinkKeyInit_2:
   \   0000B2                ; Setup parameters for call to function osal_nv_read
   \   0000B2   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000B5   75..13       MOV       ?V4,#0x13
   \   0000B8   75..00       MOV       ?V5,#0x0
   \   0000BB   78..         MOV       R0,#?V4
   \   0000BD   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000C0   7C00         MOV       R4,#0x0
   \   0000C2   7D00         MOV       R5,#0x0
   \   0000C4   AA..         MOV       R2,?V0
   \   0000C6   AB..         MOV       R3,?V1
   \   0000C8   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   0000CB   7404         MOV       A,#0x4
   \   0000CD   12....       LCALL     ?DEALLOC_XSTACK8
   3016          
   3017                  // increase the value stored in NV
   3018                  TCLKDevEntry.txFrmCntr += ( MAX_TCLK_FRAMECOUNTER_CHANGES + 1 );
   \   0000D0   90....       MOV       DPTR,#__Constant_b
   \   0000D3   78..         MOV       R0,#?V4
   \   0000D5   12....       LCALL     ?L_MOV_X
   \   0000D8   85..82       MOV       DPL,?XSP + 0
   \   0000DB   85..83       MOV       DPH,?XSP + 1
   \   0000DE   78..         MOV       R0,#?V4
   \   0000E0   12....       LCALL     ?L_ADD_TO_X
   3019          
   3020                  osal_nv_write( ( ZCD_NV_TCLK_TABLE_START + i), 0,
   3021                                  sizeof(APSME_TCLKDevEntry_t), &TCLKDevEntry );
   \   0000E3                ; Setup parameters for call to function osal_nv_write
   \   0000E3   A8..         MOV       R0,?XSP + 0
   \   0000E5   A9..         MOV       R1,?XSP + 1
   \   0000E7   88..         MOV       ?V4,R0
   \   0000E9   89..         MOV       ?V5,R1
   \   0000EB   78..         MOV       R0,#?V4
   \   0000ED   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000F0   75..13       MOV       ?V4,#0x13
   \   0000F3   75..00       MOV       ?V5,#0x0
   \   0000F6   78..         MOV       R0,#?V4
   \   0000F8   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000FB   7C00         MOV       R4,#0x0
   \   0000FD   7D00         MOV       R5,#0x0
   \   0000FF   AA..         MOV       R2,?V0
   \   000101   AB..         MOV       R3,?V1
   \   000103   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000106   7404         MOV       A,#0x4
   \   000108   12....       LCALL     ?DEALLOC_XSTACK8
   3022          
   3023                  // set initial values for counters in RAM
   3024                  TCLinkKeyFrmCntr[i].txFrmCntr = TCLKDevEntry.txFrmCntr;
   \   00010B   85..82       MOV       DPL,?XSP + 0
   \   00010E   85..83       MOV       DPH,?XSP + 1
   \   000111   12....       LCALL     ?XLOAD_R0123
   \   000114   85..82       MOV       DPL,?V2
   \   000117   85..83       MOV       DPH,?V3
   \   00011A   12....       LCALL     ?XSTORE_R0123
   3025                  TCLinkKeyFrmCntr[i].rxFrmCntr = TCLKDevEntry.rxFrmCntr;
   \   00011D   7404         MOV       A,#0x4
   \   00011F   12....       LCALL     ?XSTACK_DISP0_8
   \   000122   12....       LCALL     ?XLOAD_R0123
   \   000125   85..82       MOV       DPL,?V10
   \   000128   85..83       MOV       DPH,?V11
   \   00012B   12....       LCALL     ?XSTORE_R0123
   3026                  
   3027                  // Making sure data is cleared and set to default for every key all the time
   3028                  osal_memset( &TCLKDevEntry, 0x00, sizeof(APSME_TCLKDevEntry_t) );
   \   00012E                ; Setup parameters for call to function osal_memset
   \   00012E   7C13         MOV       R4,#0x13
   \   000130   7D00         MOV       R5,#0x0
   \   000132   7900         MOV       R1,#0x0
   \   000134   AA..         MOV       R2,?XSP + 0
   \   000136   AB..         MOV       R3,?XSP + 1
   \   000138   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   3029                  TCLKDevEntry.keyAttributes = ZG_DEFAULT_KEY;
   \   00013B   7410         MOV       A,#0x10
   \   00013D   12....       LCALL     ?XSTACK_DISP0_8
   \   000140   74FF         MOV       A,#-0x1
   \                     ??APSME_TCLinkKeyInit_3:
   \   000142   F0           MOVX      @DPTR,A
   3030                }
   3031              }
   3032            }
   \                     ??APSME_TCLinkKeyInit_1:
   \   000143   0E           INC       R6
   \   000144   EE           MOV       A,R6
   \   000145   7001         JNZ       ??APSME_TCLinkKeyInit_4
   \   000147   0F           INC       R7
   \                     ??APSME_TCLinkKeyInit_4:
   \   000148   12....       LCALL     ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   00014B   5003         JNC       $+5
   \   00014D   02....       LJMP      ??APSME_TCLinkKeyInit_0 & 0xFFFF
   3033          
   3034            if(setDefault)
   \   000150   E5..         MOV       A,?V8
   \   000152   6007         JZ        ??APSME_TCLinkKeyInit_5
   3035            {
   3036              //Force to erase all IC
   3037              APSME_EraseICEntry(NULL);
   \   000154                ; Setup parameters for call to function APSME_EraseICEntry
   \   000154   7A00         MOV       R2,#0x0
   \   000156   7B00         MOV       R3,#0x0
   \   000158   12....       LCALL     `??APSME_EraseICEntry::?relay`; Banked call to: APSME_EraseICEntry
   3038            }
   3039          }
   \                     ??APSME_TCLinkKeyInit_5:
   \   00015B   7413         MOV       A,#0x13
   \   00015D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000160   7F0C         MOV       R7,#0xc
   \   000162   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   A4           MUL       AB
   \   000001   2A           ADD       A,R2
   \   000002   F9           MOV       R1,A
   \   000003   74..         MOV       A,#TCLinkKeyFrmCntr & 0xff
   \   000005   28           ADD       A,R0
   \   000006   F5..         MOV       ?V2,A
   \   000008   74..         MOV       A,#(TCLinkKeyFrmCntr >> 8) & 0xff
   \   00000A   39           ADDC      A,R1
   \   00000B   F5..         MOV       ?V3,A
   \   00000D   E5..         MOV       A,?V2
   \   00000F   22           RET
   3040          
   3041          
   3042          /******************************************************************************
   3043           * @fn          APSME_TCLinkKeySync
   3044           *
   3045           * @brief       Sync Trust Center LINK key data.
   3046           *
   3047           * @param       srcAddr - [in] srcAddr
   3048           * @param       si      - [in, out] SSP_Info_t
   3049           *
   3050           * @return      ZStatus_t
   3051           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3052          ZStatus_t APSME_TCLinkKeySync( uint16 srcAddr, SSP_Info_t* si )
   \                     APSME_TCLinkKeySync:
   3053          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 28
   \   000005   74E4         MOV       A,#-0x1c
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V4,R2
   \   00000C   8B..         MOV       ?V5,R3
   \   00000E   EC           MOV       A,R4
   \   00000F   FE           MOV       R6,A
   \   000010   ED           MOV       A,R5
   \   000011   FF           MOV       R7,A
   3054            APSME_TCLKDevEntry_t  TCLKDevEntry;
   3055            ZStatus_t             status = ZSecNoKey;
   \   000012   75..A1       MOV       ?V0,#-0x5f
   3056            uint32                *tclkRxFrmCntr;
   3057            uint16                entryIndex = 0xFFFF;
   3058            uint16                selectedId = gZDSECMGR_TC_DEVICE_MAX;
   3059            uint8                 entryFound = FALSE;
   \   000015   85..82       MOV       DPL,?XSP + 0
   \   000018   85..83       MOV       DPH,?XSP + 1
   \   00001B   E4           CLR       A
   \   00001C   F0           MOVX      @DPTR,A
   3060            
   3061          #if ZG_BUILD_JOINING_TYPE
   3062            uint8   defaultEntry[Z_EXTADDR_LEN];
   3063          #endif
   3064           
   3065            // Look up the IEEE address of the trust center if it's available
   3066            if ( AddrMgrExtAddrValid( si->extAddr ) == FALSE )
   \   00001D   EE           MOV       A,R6
   \   00001E   2406         ADD       A,#0x6
   \   000020   F5..         MOV       ?V2,A
   \   000022   E4           CLR       A
   \   000023   3F           ADDC      A,R7
   \   000024   F5..         MOV       ?V3,A
   \   000026                ; Setup parameters for call to function AddrMgrExtAddrValid
   \   000026   AA..         MOV       R2,?V2
   \   000028   FB           MOV       R3,A
   \   000029   12....       LCALL     `??AddrMgrExtAddrValid::?relay`; Banked call to: AddrMgrExtAddrValid
   \   00002C   E9           MOV       A,R1
   \   00002D   700B         JNZ       ??APSME_TCLinkKeySync_0
   3067            {
   3068              APSME_LookupExtAddr( srcAddr, si->extAddr );
   \   00002F                ; Setup parameters for call to function APSME_LookupExtAddr
   \   00002F   AC..         MOV       R4,?V2
   \   000031   AD..         MOV       R5,?V3
   \   000033   AA..         MOV       R2,?V4
   \   000035   AB..         MOV       R3,?V5
   \   000037   12....       LCALL     `??APSME_LookupExtAddr::?relay`; Banked call to: APSME_LookupExtAddr
   3069            }
   3070          
   3071            entryIndex = APSME_SearchTCLinkKeyEntry(si->extAddr,&entryFound,&TCLKDevEntry);
   \                     ??APSME_TCLinkKeySync_0:
   \   00003A                ; Setup parameters for call to function APSME_SearchTCLinkKeyEntry
   \   00003A   7409         MOV       A,#0x9
   \   00003C   12....       LCALL     ?XSTACK_DISP100_8
   \   00003F   88..         MOV       ?V4,R0
   \   000041   89..         MOV       ?V5,R1
   \   000043   78..         MOV       R0,#?V4
   \   000045   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000048   7402         MOV       A,#0x2
   \   00004A   12....       LCALL     ?XSTACK_DISP102_8
   \   00004D   AA..         MOV       R2,?V2
   \   00004F   AB..         MOV       R3,?V3
   \   000051   12....       LCALL     `??APSME_SearchTCLinkKeyEntry::?relay`; Banked call to: APSME_SearchTCLinkKeyEntry
   \   000054   7402         MOV       A,#0x2
   \   000056   12....       LCALL     ?DEALLOC_XSTACK8
   \   000059   8A..         MOV       ?V2,R2
   \   00005B   8B..         MOV       ?V3,R3
   \   00005D   A8..         MOV       R0,?V2
   \   00005F   A9..         MOV       R1,?V3
   3072            
   3073          #if ZG_BUILD_JOINING_TYPE
   3074            if(ZG_DEVICE_JOINING_TYPE && !entryFound)
   \   000061   90....       MOV       DPTR,#zgDeviceLogicalType
   \   000064   E0           MOVX      A,@DPTR
   \   000065   6401         XRL       A,#0x1
   \   000067   6005         JZ        ??APSME_TCLinkKeySync_1
   \   000069   E0           MOVX      A,@DPTR
   \   00006A   6402         XRL       A,#0x2
   \   00006C   703F         JNZ       ??APSME_TCLinkKeySync_2
   \                     ??APSME_TCLinkKeySync_1:
   \   00006E   85..82       MOV       DPL,?XSP + 0
   \   000071   85..83       MOV       DPH,?XSP + 1
   \   000074   E0           MOVX      A,@DPTR
   \   000075   7036         JNZ       ??APSME_TCLinkKeySync_2
   3075            {
   3076              osal_memset(defaultEntry, 0, Z_EXTADDR_LEN);
   \   000077                ; Setup parameters for call to function osal_memset
   \   000077   7C08         MOV       R4,#0x8
   \   000079   7D00         MOV       R5,#0x0
   \   00007B   7900         MOV       R1,#0x0
   \   00007D   7401         MOV       A,#0x1
   \   00007F   12....       LCALL     ?XSTACK_DISP101_8
   \   000082   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   3077              entryIndex = APSME_SearchTCLinkKeyEntry(defaultEntry,&entryFound,&TCLKDevEntry);
   \   000085                ; Setup parameters for call to function APSME_SearchTCLinkKeyEntry
   \   000085   7409         MOV       A,#0x9
   \   000087   12....       LCALL     ?XSTACK_DISP100_8
   \   00008A   88..         MOV       ?V2,R0
   \   00008C   89..         MOV       ?V3,R1
   \   00008E   78..         MOV       R0,#?V2
   \   000090   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000093   7402         MOV       A,#0x2
   \   000095   12....       LCALL     ?XSTACK_DISP102_8
   \   000098   7403         MOV       A,#0x3
   \   00009A   12....       LCALL     ?XSTACK_DISP101_8
   \   00009D   12....       LCALL     `??APSME_SearchTCLinkKeyEntry::?relay`; Banked call to: APSME_SearchTCLinkKeyEntry
   \   0000A0   7402         MOV       A,#0x2
   \   0000A2   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000A5   8A..         MOV       ?V2,R2
   \   0000A7   8B..         MOV       ?V3,R3
   \   0000A9   A8..         MOV       R0,?V2
   \   0000AB   A9..         MOV       R1,?V3
   3078            }
   3079          #endif
   3080            
   3081            if(entryFound)
   \                     ??APSME_TCLinkKeySync_2:
   \   0000AD   EE           MOV       A,R6
   \   0000AE   240F         ADD       A,#0xf
   \   0000B0   F5..         MOV       ?V2,A
   \   0000B2   E4           CLR       A
   \   0000B3   3F           ADDC      A,R7
   \   0000B4   F5..         MOV       ?V3,A
   \   0000B6   85..82       MOV       DPL,?XSP + 0
   \   0000B9   85..83       MOV       DPH,?XSP + 1
   \   0000BC   E0           MOVX      A,@DPTR
   \   0000BD   7003         JNZ       $+5
   \   0000BF   02....       LJMP      ??APSME_TCLinkKeySync_3 & 0xFFFF
   3082            {
   3083              status = ZSuccess;
   \   0000C2   75..00       MOV       ?V0,#0x0
   3084              
   3085              selectedId = entryIndex - ZCD_NV_TCLK_TABLE_START;
   3086          
   3087              switch(TCLKDevEntry.keyAttributes)
   \   0000C5   EE           MOV       A,R6
   \   0000C6   2420         ADD       A,#0x20
   \   0000C8   FA           MOV       R2,A
   \   0000C9   E4           CLR       A
   \   0000CA   3F           ADDC      A,R7
   \   0000CB   FB           MOV       R3,A
   \   0000CC   7419         MOV       A,#0x19
   \   0000CE   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D1   E0           MOVX      A,@DPTR
   \   0000D2   6047         JZ        ??APSME_TCLinkKeySync_4
   \   0000D4   14           DEC       A
   \   0000D5   600E         JZ        ??APSME_TCLinkKeySync_5
   \   0000D7   14           DEC       A
   \   0000D8   606E         JZ        ??APSME_TCLinkKeySync_6
   \   0000DA   2405         ADD       A,#0x5
   \   0000DC   606A         JZ        ??APSME_TCLinkKeySync_6
   \   0000DE   24FE         ADD       A,#-0x2
   \   0000E0   6016         JZ        ??APSME_TCLinkKeySync_7
   \   0000E2   02....       LJMP      ??APSME_TCLinkKeySync_8 & 0xFFFF
   3088              {
   3089                case ZG_UNVERIFIED_KEY:
   3090                  #if ZG_BUILD_JOINING_TYPE
   3091                  if(ZG_DEVICE_JOINING_TYPE)
   \                     ??APSME_TCLinkKeySync_5:
   \   0000E5   90....       MOV       DPTR,#zgDeviceLogicalType
   \   0000E8   E0           MOVX      A,@DPTR
   \   0000E9   6401         XRL       A,#0x1
   \   0000EB   7003         JNZ       $+5
   \   0000ED   02....       LJMP      ??APSME_TCLinkKeySync_9 & 0xFFFF
   \   0000F0   E0           MOVX      A,@DPTR
   \   0000F1   6402         XRL       A,#0x2
   \   0000F3   700B         JNZ       ??APSME_TCLinkKeySync_10
   \   0000F5   02....       LJMP      ??APSME_TCLinkKeySync_9 & 0xFFFF
   3092                  {   
   3093                    si->keyNvId = ZCD_NV_TCLK_JOIN_DEV;
   3094                    break;
   3095                  }
   3096                  #endif
   3097                case ZG_DEFAULT_KEY:
   3098                  if(ZG_DEVICE_JOINING_TYPE)
   \                     ??APSME_TCLinkKeySync_7:
   \   0000F8   90....       MOV       DPTR,#zgDeviceLogicalType
   \   0000FB   E0           MOVX      A,@DPTR
   \   0000FC   6401         XRL       A,#0x1
   \   0000FE   6005         JZ        ??APSME_TCLinkKeySync_11
   \                     ??APSME_TCLinkKeySync_10:
   \   000100   E0           MOVX      A,@DPTR
   \   000101   6402         XRL       A,#0x2
   \   000103   7007         JNZ       ??APSME_TCLinkKeySync_12
   3099                  { 
   3100                    //If default was found, then it is joining as FN, then try distributed key as well
   3101                    si->distributedKeyTry = TRUE;
   \                     ??APSME_TCLinkKeySync_11:
   \   000105   8A82         MOV       DPL,R2
   \   000107   8B83         MOV       DPH,R3
   \   000109   7401         MOV       A,#0x1
   \   00010B   F0           MOVX      @DPTR,A
   3102                  }
   3103                  si->keyNvId = ZCD_NV_TCLK_DEFAULT;
   \                     ??APSME_TCLinkKeySync_12:
   \   00010C   85..82       MOV       DPL,?V2
   \   00010F   85..83       MOV       DPH,?V3
   \   000112   7403         MOV       A,#0x3
   \   000114   F0           MOVX      @DPTR,A
   \   000115   A3           INC       DPTR
   \   000116   7401         MOV       A,#0x1
   \   000118   02....       LJMP      ??APSME_TCLinkKeySync_13 & 0xFFFF
   3104                break;
   3105                case ZG_PROVISIONAL_KEY:
   3106                  si->keyNvId = ZCD_NV_TCLK_IC_TABLE_START + TCLKDevEntry.SeedShift_IcIndex;
   \                     ??APSME_TCLinkKeySync_4:
   \   00011B   741B         MOV       A,#0x1b
   \   00011D   12....       LCALL     ?XSTACK_DISP0_8
   \   000120   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   000123   85..82       MOV       DPL,?V2
   \   000126   85..83       MOV       DPH,?V3
   \   000129   12....       LCALL     ??Subroutine65_0 & 0xFFFF
   3107                  //Attempt to use default keys (centralized and distributed) if IC fails?
   3108                  si->distributedKeyTry = gZDSECMGR_TC_ATTEMPT_DEFAULT_KEY;
   \                     ??CrossCallReturnLabel_153:
   \   00012C   90....       MOV       DPTR,#gZDSECMGR_TC_ATTEMPT_DEFAULT_KEY
   \   00012F   E0           MOVX      A,@DPTR
   \   000130   8A82         MOV       DPL,R2
   \   000132   8B83         MOV       DPH,R3
   \   000134   F0           MOVX      @DPTR,A
   3109                  si->defaultKeyTry = gZDSECMGR_TC_ATTEMPT_DEFAULT_KEY;
   \   000135   90....       MOV       DPTR,#gZDSECMGR_TC_ATTEMPT_DEFAULT_KEY
   \   000138   E0           MOVX      A,@DPTR
   \   000139   C0E0         PUSH      A
   \   00013B   EE           MOV       A,R6
   \   00013C   2421         ADD       A,#0x21
   \   00013E   F582         MOV       DPL,A
   \   000140   E4           CLR       A
   \   000141   3F           ADDC      A,R7
   \   000142   F583         MOV       DPH,A
   \   000144   D0E0         POP       A
   \   000146   8063         SJMP      ??APSME_TCLinkKeySync_13
   3110                break;
   3111                case ZG_VERIFIED_KEY:
   3112                case ZG_NON_R21_NWK_JOINED:
   3113                  //Only verify the frame counter for Verified keys, or keys used with non R21 TC
   3114                  tclkRxFrmCntr = &TCLinkKeyFrmCntr[selectedId].rxFrmCntr;
   \                     ??APSME_TCLinkKeySync_6:
   \   000148   E8           MOV       A,R0
   \   000149   75F009       MOV       B,#0x9
   \   00014C   A4           MUL       AB
   \   00014D   F8           MOV       R0,A
   \   00014E   AAF0         MOV       R2,B
   \   000150   75F009       MOV       B,#0x9
   \   000153   E9           MOV       A,R1
   \   000154   A4           MUL       AB
   \   000155   2A           ADD       A,R2
   \   000156   F9           MOV       R1,A
   \   000157   74..         MOV       A,#(TCLinkKeyFrmCntr + 107) & 0xff
   \   000159   28           ADD       A,R0
   \   00015A   F5..         MOV       ?V8,A
   \   00015C   74..         MOV       A,#((TCLinkKeyFrmCntr - 2453) >> 8) & 0xff
   \   00015E   39           ADDC      A,R1
   \   00015F   F5..         MOV       ?V9,A
   3115          
   3116                  if ( si->frmCntr >= *tclkRxFrmCntr )
   \   000161   12....       LCALL     ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   000164   78..         MOV       R0,#?V4
   \   000166   12....       LCALL     ?L_MOV_X
   \   000169   85..82       MOV       DPL,?V8
   \   00016C   85..83       MOV       DPH,?V9
   \   00016F   78..         MOV       R0,#?V4
   \   000171   12....       LCALL     ?UL_GE_X
   \   000174   5062         JNC       ??APSME_TCLinkKeySync_14
   3117                  {
   3118                    // update the rx frame counter
   3119                    *tclkRxFrmCntr = si->frmCntr + 1;
   \   000176   90....       MOV       DPTR,#__Constant_1
   \   000179   78..         MOV       R0,#?V4
   \   00017B   12....       LCALL     ?L_ADD_X
   \   00017E   85..82       MOV       DPL,?V8
   \   000181   85..83       MOV       DPH,?V9
   \   000184   E5..         MOV       A,?V4
   \   000186   F0           MOVX      @DPTR,A
   \   000187   A3           INC       DPTR
   \   000188   E5..         MOV       A,?V5
   \   00018A   F0           MOVX      @DPTR,A
   \   00018B   A3           INC       DPTR
   \   00018C   E5..         MOV       A,?V6
   \   00018E   F0           MOVX      @DPTR,A
   \   00018F   A3           INC       DPTR
   \   000190   E5..         MOV       A,?V7
   \   000192   F0           MOVX      @DPTR,A
   3120                    status = ZSuccess;
   3121                    
   3122                    #if ZG_BUILD_JOINING_TYPE
   3123                    if(ZG_DEVICE_JOINING_TYPE)
   \   000193   90....       MOV       DPTR,#zgDeviceLogicalType
   \   000196   E0           MOVX      A,@DPTR
   \   000197   6401         XRL       A,#0x1
   \   000199   6005         JZ        ??APSME_TCLinkKeySync_9
   \   00019B   E0           MOVX      A,@DPTR
   \   00019C   6402         XRL       A,#0x2
   \   00019E   700E         JNZ       ??APSME_TCLinkKeySync_15
   3124                    {   
   3125                      si->keyNvId = ZCD_NV_TCLK_JOIN_DEV;
   \                     ??APSME_TCLinkKeySync_9:
   \   0001A0   85..82       MOV       DPL,?V2
   \   0001A3   85..83       MOV       DPH,?V3
   \   0001A6   7402         MOV       A,#0x2
   \   0001A8   F0           MOVX      @DPTR,A
   \   0001A9   A3           INC       DPTR
   \   0001AA   14           DEC       A
   \                     ??APSME_TCLinkKeySync_13:
   \   0001AB   F0           MOVX      @DPTR,A
   3126                      break;
   \   0001AC   804B         SJMP      ??APSME_TCLinkKeySync_8
   3127                    }
   3128                    #endif
   3129                    #if ZG_BUILD_COORDINATOR_TYPE
   3130                    if(ZG_DEVICE_COORDINATOR_TYPE)
   3131                    {
   3132                      si->keyNvId = ZCD_NV_TCLK_SEED;
   3133                      si->seedShift = TCLKDevEntry.SeedShift_IcIndex;
   3134                    }
   3135                    #endif
   3136                    osal_memcpy(si->dstExtAddr, TCLKDevEntry.extAddr,Z_EXTADDR_LEN);
   \                     ??APSME_TCLinkKeySync_15:
   \   0001AE                ; Setup parameters for call to function osal_memcpy
   \   0001AE   7411         MOV       A,#0x11
   \   0001B0   12....       LCALL     ?XSTACK_DISP0_8
   \   0001B3   A982         MOV       R1,DPL
   \   0001B5   AA83         MOV       R2,DPH
   \   0001B7   89..         MOV       ?V4,R1
   \   0001B9   8A..         MOV       ?V5,R2
   \   0001BB   75..00       MOV       ?V6,#0x0
   \   0001BE   78..         MOV       R0,#?V4
   \   0001C0   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0001C3   7C08         MOV       R4,#0x8
   \   0001C5   7D00         MOV       R5,#0x0
   \   0001C7   EE           MOV       A,R6
   \   0001C8   2418         ADD       A,#0x18
   \   0001CA   FA           MOV       R2,A
   \   0001CB   E4           CLR       A
   \   0001CC   3F           ADDC      A,R7
   \   0001CD   FB           MOV       R3,A
   \   0001CE   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0001D1   7403         MOV       A,#0x3
   \   0001D3   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001D6   8021         SJMP      ??APSME_TCLinkKeySync_8
   3137                  }
   3138                  else
   3139                  {
   3140                    status = ZSecOldFrmCount;
   \                     ??APSME_TCLinkKeySync_14:
   \   0001D8   75..A2       MOV       ?V0,#-0x5e
   \   0001DB   801C         SJMP      ??APSME_TCLinkKeySync_8
   3141                  }
   3142                break;
   3143                default:
   3144                  //This should not happen
   3145                break;
   3146              }
   3147            }
   3148            else
   3149            {
   3150              if (ZG_DEVICE_COORDINATOR_TYPE) 
   \                     ??APSME_TCLinkKeySync_3:
   \   0001DD   90....       MOV       DPTR,#zgDeviceLogicalType
   \   0001E0   E0           MOVX      A,@DPTR
   \   0001E1   7016         JNZ       ??APSME_TCLinkKeySync_8
   3151              {    
   3152                if(bdb_doTrustCenterRequireKeyExchange() == FALSE)
   \   0001E3                ; Setup parameters for call to function bdb_doTrustCenterRequireKeyExchange
   \   0001E3   12....       LCALL     `??bdb_doTrustCenterRequireKeyExchange::?relay`; Banked call to: bdb_doTrustCenterRequireKeyExchange
   \   0001E6   E9           MOV       A,R1
   \   0001E7   7010         JNZ       ??APSME_TCLinkKeySync_8
   3153                {
   3154                  //If the TCLK exchange is not mandated, and the key cannot be found for this device, 
   3155                  //is because we have erased the entry. Try with default key.
   3156                  si->keyNvId = ZCD_NV_TCLK_DEFAULT;
   \   0001E9   85..82       MOV       DPL,?V2
   \   0001EC   85..83       MOV       DPH,?V3
   \   0001EF   7403         MOV       A,#0x3
   \   0001F1   F0           MOVX      @DPTR,A
   \   0001F2   A3           INC       DPTR
   \   0001F3   7401         MOV       A,#0x1
   \   0001F5   F0           MOVX      @DPTR,A
   3157                  status = ZSuccess;
   \   0001F6   75..00       MOV       ?V0,#0x0
   3158                }
   3159              }
   3160            }
   3161            
   3162            
   3163            return status;
   \                     ??APSME_TCLinkKeySync_8:
   \   0001F9   A9..         MOV       R1,?V0
   \   0001FB   741C         MOV       A,#0x1c
   \   0001FD   02....       LJMP      ?Subroutine5 & 0xFFFF
   3164          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000   EE           MOV       A,R6
   \   000001   2412         ADD       A,#0x12
   \   000003   F582         MOV       DPL,A
   \   000005   E4           CLR       A
   \   000006   3F           ADDC      A,R7
   \   000007   F583         MOV       DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   2404         ADD       A,#0x4
   \   000003   F8           MOV       R0,A
   \   000004   E4           CLR       A
   \   000005   3401         ADDC      A,#0x1
   \   000007   F9           MOV       R1,A
   \   000008   22           RET
   3165          
   3166          /******************************************************************************
   3167           * @fn          APSME_TCLinkKeyLoad
   3168           *
   3169           * @brief       Load Trust Center LINK key data.
   3170           *
   3171           * @param       dstAddr - [in] dstAddr
   3172           * @param       si      - [in, out] SSP_Info_t
   3173           *
   3174           * @return      ZStatus_t
   3175           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3176          ZStatus_t APSME_TCLinkKeyLoad( uint16 dstAddr, SSP_Info_t* si )
   \                     APSME_TCLinkKeyLoad:
   3177          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 33
   \   000005   74DF         MOV       A,#-0x21
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EC           MOV       A,R4
   \   00000B   FE           MOV       R6,A
   \   00000C   ED           MOV       A,R5
   \   00000D   FF           MOV       R7,A
   3178            APSME_TCLKDevEntry_t TCLKDevEntry;
   3179            AddrMgrEntry_t       addrEntry;
   3180            ZStatus_t            status = ZSecNoKey;
   \   00000E   75..A1       MOV       ?V0,#-0x5f
   3181            uint16               entryIndex;
   3182            uint8                extAddrFound;
   3183            uint8                found;
   3184          
   3185            
   3186            // Look up the ami of the srcAddr if available
   3187            addrEntry.user    = ADDRMGR_USER_DEFAULT;
   \   000011   7414         MOV       A,#0x14
   \   000013   12....       LCALL     ?XSTACK_DISP0_8
   \   000016   E4           CLR       A
   \   000017   F0           MOVX      @DPTR,A
   3188            addrEntry.nwkAddr = dstAddr;
   \   000018   7415         MOV       A,#0x15
   \   00001A   12....       LCALL     ?XSTACK_DISP0_8
   \   00001D   12....       LCALL     ?Subroutine50 & 0xFFFF
   3189          
   3190            extAddrFound = AddrMgrExtAddrValid( si->extAddr );
   3191            
   3192            if(extAddrFound)
   \                     ??CrossCallReturnLabel_82:
   \   000020   EE           MOV       A,R6
   \   000021   2406         ADD       A,#0x6
   \   000023   F5..         MOV       ?V4,A
   \   000025   E4           CLR       A
   \   000026   3F           ADDC      A,R7
   \   000027   F5..         MOV       ?V5,A
   \   000029                ; Setup parameters for call to function AddrMgrExtAddrValid
   \   000029   AA..         MOV       R2,?V4
   \   00002B   FB           MOV       R3,A
   \   00002C   12....       LCALL     `??AddrMgrExtAddrValid::?relay`; Banked call to: AddrMgrExtAddrValid
   \   00002F   E9           MOV       A,R1
   \   000030   7003         JNZ       $+5
   \   000032   02....       LJMP      ??APSME_TCLinkKeyLoad_0 & 0xFFFF
   3193            {
   3194              entryIndex = APSME_SearchTCLinkKeyEntry(si->extAddr,&found,&TCLKDevEntry);
   \   000035                ; Setup parameters for call to function APSME_SearchTCLinkKeyEntry
   \   000035   7401         MOV       A,#0x1
   \   000037   12....       LCALL     ?XSTACK_DISP100_8
   \   00003A   88..         MOV       ?V0,R0
   \   00003C   89..         MOV       ?V1,R1
   \   00003E   78..         MOV       R0,#?V0
   \   000040   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000043   7402         MOV       A,#0x2
   \   000045   12....       LCALL     ?XSTACK_DISP102_8
   \   000048   AA..         MOV       R2,?V4
   \   00004A   AB..         MOV       R3,?V5
   \   00004C   12....       LCALL     `??APSME_SearchTCLinkKeyEntry::?relay`; Banked call to: APSME_SearchTCLinkKeyEntry
   \   00004F   7402         MOV       A,#0x2
   \   000051   12....       LCALL     ?DEALLOC_XSTACK8
   \   000054   8A..         MOV       ?V2,R2
   \   000056   8B..         MOV       ?V3,R3
   3195              if(entryIndex != 0xFFFF)
   \   000058   EE           MOV       A,R6
   \   000059   240F         ADD       A,#0xf
   \   00005B   F5..         MOV       ?V0,A
   \   00005D   E4           CLR       A
   \   00005E   3F           ADDC      A,R7
   \   00005F   F5..         MOV       ?V1,A
   \   000061   74FF         MOV       A,#-0x1
   \   000063   65..         XRL       A,?V2
   \   000065   7004         JNZ       ??APSME_TCLinkKeyLoad_1
   \   000067   74FF         MOV       A,#-0x1
   \   000069   65..         XRL       A,?V3
   \                     ??APSME_TCLinkKeyLoad_1:
   \   00006B   7003         JNZ       $+5
   \   00006D   02....       LJMP      ??APSME_TCLinkKeyLoad_2 & 0xFFFF
   3196              {
   3197                uint16 i = entryIndex - ZCD_NV_TCLK_TABLE_START;
   \   000070   12....       LCALL     ?Subroutine44 & 0xFFFF
   3198                
   3199                if(found)
   \                     ??CrossCallReturnLabel_65:
   \   000073   AAF0         MOV       R2,B
   \   000075   75F009       MOV       B,#0x9
   \   000078   E9           MOV       A,R1
   \   000079   A4           MUL       AB
   \   00007A   2A           ADD       A,R2
   \   00007B   F9           MOV       R1,A
   \   00007C   74..         MOV       A,#TCLinkKeyFrmCntr & 0xff
   \   00007E   28           ADD       A,R0
   \   00007F   F5..         MOV       ?V8,A
   \   000081   74..         MOV       A,#(TCLinkKeyFrmCntr >> 8) & 0xff
   \   000083   39           ADDC      A,R1
   \   000084   F5..         MOV       ?V9,A
   \   000086   85..82       MOV       DPL,?XSP + 0
   \   000089   85..83       MOV       DPH,?XSP + 1
   \   00008C   E0           MOVX      A,@DPTR
   \   00008D   7003         JNZ       $+5
   \   00008F   02....       LJMP      ??APSME_TCLinkKeyLoad_3 & 0xFFFF
   3200                {
   3201                  switch(TCLKDevEntry.keyAttributes)
   \   000092   7411         MOV       A,#0x11
   \   000094   12....       LCALL     ?XSTACK_DISP0_8
   \   000097   E0           MOVX      A,@DPTR
   \   000098   6021         JZ        ??APSME_TCLinkKeyLoad_4
   \   00009A   14           DEC       A
   \   00009B   600E         JZ        ??APSME_TCLinkKeyLoad_5
   \   00009D   14           DEC       A
   \   00009E   6030         JZ        ??APSME_TCLinkKeyLoad_6
   \   0000A0   2405         ADD       A,#0x5
   \   0000A2   6014         JZ        ??APSME_TCLinkKeyLoad_7
   \   0000A4   24FE         ADD       A,#-0x2
   \   0000A6   6010         JZ        ??APSME_TCLinkKeyLoad_7
   \   0000A8   02....       LJMP      ??APSME_TCLinkKeyLoad_8 & 0xFFFF
   3202                  {
   3203                    case ZG_UNVERIFIED_KEY:
   3204                      #if ZG_BUILD_JOINING_TYPE
   3205                      if(ZG_DEVICE_JOINING_TYPE)
   \                     ??APSME_TCLinkKeyLoad_5:
   \   0000AB   90....       MOV       DPTR,#zgDeviceLogicalType
   \   0000AE   E0           MOVX      A,@DPTR
   \   0000AF   6401         XRL       A,#0x1
   \   0000B1   602A         JZ        ??APSME_TCLinkKeyLoad_9
   \   0000B3   E0           MOVX      A,@DPTR
   \   0000B4   6402         XRL       A,#0x2
   \   0000B6   6025         JZ        ??APSME_TCLinkKeyLoad_9
   3206                      {   
   3207                        si->keyNvId = ZCD_NV_TCLK_JOIN_DEV;
   3208                        break;
   3209                      }
   3210                      #endif
   3211                    case ZG_DEFAULT_KEY:
   3212                    case ZG_NON_R21_NWK_JOINED:
   3213                      si->keyNvId = ZCD_NV_TCLK_DEFAULT;
   \                     ??APSME_TCLinkKeyLoad_7:
   \   0000B8   02....       LJMP      ??APSME_TCLinkKeyLoad_10 & 0xFFFF
   3214                    break;
   3215                    case ZG_PROVISIONAL_KEY:
   3216                      si->keyNvId = ZCD_NV_TCLK_IC_TABLE_START + TCLKDevEntry.SeedShift_IcIndex;
   \                     ??APSME_TCLinkKeyLoad_4:
   \   0000BB   7413         MOV       A,#0x13
   \   0000BD   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C0   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   0000C3   85..82       MOV       DPL,?V0
   \   0000C6   85..83       MOV       DPH,?V1
   \   0000C9   E8           MOV       A,R0
   \   0000CA   F0           MOVX      @DPTR,A
   \   0000CB   A3           INC       DPTR
   \   0000CC   E9           MOV       A,R1
   \   0000CD   02....       LJMP      ??APSME_TCLinkKeyLoad_11 & 0xFFFF
   3217                    break;
   3218                    case ZG_VERIFIED_KEY:
   3219                      #if ZG_BUILD_JOINING_TYPE
   3220                      if(ZG_DEVICE_JOINING_TYPE)
   \                     ??APSME_TCLinkKeyLoad_6:
   \   0000D0   90....       MOV       DPTR,#zgDeviceLogicalType
   \   0000D3   E0           MOVX      A,@DPTR
   \   0000D4   6401         XRL       A,#0x1
   \   0000D6   6005         JZ        ??APSME_TCLinkKeyLoad_9
   \   0000D8   E0           MOVX      A,@DPTR
   \   0000D9   6402         XRL       A,#0x2
   \   0000DB   700E         JNZ       ??APSME_TCLinkKeyLoad_12
   3221                      {   
   3222                        si->keyNvId = ZCD_NV_TCLK_JOIN_DEV;
   \                     ??APSME_TCLinkKeyLoad_9:
   \   0000DD   85..82       MOV       DPL,?V0
   \   0000E0   85..83       MOV       DPH,?V1
   \   0000E3   7402         MOV       A,#0x2
   \   0000E5   F0           MOVX      @DPTR,A
   \   0000E6   A3           INC       DPTR
   \   0000E7   14           DEC       A
   \   0000E8   02....       LJMP      ??APSME_TCLinkKeyLoad_11 & 0xFFFF
   3223                        break;
   3224                      }
   3225                      #endif
   3226                      #if ZG_BUILD_COORDINATOR_TYPE
   3227                      if(ZG_DEVICE_COORDINATOR_TYPE)
   3228                      {
   3229                        si->keyNvId = ZCD_NV_TCLK_SEED;
   3230                        si->seedShift = TCLKDevEntry.SeedShift_IcIndex;
   3231                      }
   3232                      #endif
   3233                      osal_memcpy(si->dstExtAddr, TCLKDevEntry.extAddr,Z_EXTADDR_LEN);
   \                     ??APSME_TCLinkKeyLoad_12:
   \   0000EB                ; Setup parameters for call to function osal_memcpy
   \   0000EB   7409         MOV       A,#0x9
   \   0000ED   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F0   A982         MOV       R1,DPL
   \   0000F2   AA83         MOV       R2,DPH
   \   0000F4   89..         MOV       ?V0,R1
   \   0000F6   8A..         MOV       ?V1,R2
   \   0000F8   75..00       MOV       ?V2,#0x0
   \   0000FB   78..         MOV       R0,#?V0
   \   0000FD   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000100   7C08         MOV       R4,#0x8
   \   000102   7D00         MOV       R5,#0x0
   \   000104   EE           MOV       A,R6
   \   000105   2418         ADD       A,#0x18
   \   000107   FA           MOV       R2,A
   \   000108   E4           CLR       A
   \   000109   3F           ADDC      A,R7
   \   00010A   FB           MOV       R3,A
   \   00010B   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00010E   7403         MOV       A,#0x3
   \   000110   12....       LCALL     ?DEALLOC_XSTACK8
   3234                    break;
   \   000113   02....       LJMP      ??APSME_TCLinkKeyLoad_8 & 0xFFFF
   3235                    default:
   3236                      //This should not happen
   3237                    break;
   3238                  }
   3239                }
   3240                //Not found, then create an entry for it. Adding the device to the TCLKDev Entries for first time
   3241                else
   3242                {
   3243                  //Initialize the entry
   3244                  osal_memcpy(TCLKDevEntry.extAddr, si->extAddr, Z_EXTADDR_LEN);
   \                     ??APSME_TCLinkKeyLoad_3:
   \   000116                ; Setup parameters for call to function osal_memcpy
   \   000116   75..00       MOV       ?V6,#0x0
   \   000119   78..         MOV       R0,#?V4
   \   00011B   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00011E   7C08         MOV       R4,#0x8
   \   000120   7D00         MOV       R5,#0x0
   \   000122   740C         MOV       A,#0xc
   \   000124   12....       LCALL     ?XSTACK_DISP0_8
   \   000127   AA82         MOV       R2,DPL
   \   000129   AB83         MOV       R3,DPH
   \   00012B   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00012E   7403         MOV       A,#0x3
   \   000130   12....       LCALL     ?DEALLOC_XSTACK8
   3245                  TCLKDevEntry.keyAttributes = ZG_DEFAULT_KEY;
   \   000133   7411         MOV       A,#0x11
   \   000135   12....       LCALL     ?XSTACK_DISP0_8
   \   000138   74FF         MOV       A,#-0x1
   \   00013A   F0           MOVX      @DPTR,A
   3246                  TCLKDevEntry.keyType = ZG_GLOBAL_LINK_KEY;
   \   00013B   7412         MOV       A,#0x12
   \   00013D   12....       LCALL     ?XSTACK_DISP0_8
   \   000140   7401         MOV       A,#0x1
   \   000142   F0           MOVX      @DPTR,A
   3247                  //Create the entry with a random shift of the seed. Validate the maximum shift of the seed which is 15
   3248                  TCLKDevEntry.SeedShift_IcIndex = osal_rand() & 0x000F;
   \   000143                ; Setup parameters for call to function osal_rand
   \   000143   12....       LCALL     `??osal_rand::?relay`; Banked call to: osal_rand
   \   000146   EA           MOV       A,R2
   \   000147   540F         ANL       A,#0xf
   \   000149   C0E0         PUSH      A
   \   00014B   7413         MOV       A,#0x13
   \   00014D   12....       LCALL     ?XSTACK_DISP0_8
   \   000150   D0E0         POP       A
   \   000152   F0           MOVX      @DPTR,A
   3249                  TCLKDevEntry.txFrmCntr = 0;
   \   000153   7401         MOV       A,#0x1
   \   000155   12....       LCALL     ?XSTACK_DISP0_8
   \   000158   12....       LCALL     ?Subroutine21 & 0xFFFF
   3250                  TCLKDevEntry.rxFrmCntr = 0;
   \                     ??CrossCallReturnLabel_21:
   \   00015B   12....       LCALL     ?XSTACK_DISP0_8
   \   00015E   12....       LCALL     ?Subroutine22 & 0xFFFF
   3251                  //save entry in nv
   3252                  osal_nv_write(entryIndex,0,sizeof(APSME_TCLKDevEntry_t),&TCLKDevEntry);
   \                     ??CrossCallReturnLabel_23:
   \   000161   12....       LCALL     ?XSTACK_DISP100_8
   \   000164   88..         MOV       ?V4,R0
   \   000166   89..         MOV       ?V5,R1
   \   000168   78..         MOV       R0,#?V4
   \   00016A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00016D   75..13       MOV       ?V4,#0x13
   \   000170   75..00       MOV       ?V5,#0x0
   \   000173   78..         MOV       R0,#?V4
   \   000175   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000178   7C00         MOV       R4,#0x0
   \   00017A   7D00         MOV       R5,#0x0
   \   00017C   AA..         MOV       R2,?V2
   \   00017E   AB..         MOV       R3,?V3
   \   000180   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000183   7404         MOV       A,#0x4
   \   000185   12....       LCALL     ?DEALLOC_XSTACK8
   3253                  //Initialize framecounter
   3254                  osal_memset(&TCLinkKeyFrmCntr[i],0,sizeof(APSME_TCLinkKeyFrmCntr_t));
   \   000188                ; Setup parameters for call to function osal_memset
   \   000188   7C09         MOV       R4,#0x9
   \   00018A   7D00         MOV       R5,#0x0
   \   00018C   7900         MOV       R1,#0x0
   \   00018E   AA..         MOV       R2,?V8
   \   000190   AB..         MOV       R3,?V9
   \   000192   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   3255                  // set the keyNvId to use
   3256                  si->keyNvId = ZCD_NV_TCLK_DEFAULT;
   \                     ??APSME_TCLinkKeyLoad_10:
   \   000195   85..82       MOV       DPL,?V0
   \   000198   85..83       MOV       DPH,?V1
   \   00019B   7403         MOV       A,#0x3
   \   00019D   F0           MOVX      @DPTR,A
   \   00019E   A3           INC       DPTR
   \   00019F   7401         MOV       A,#0x1
   \                     ??APSME_TCLinkKeyLoad_11:
   \   0001A1   F0           MOVX      @DPTR,A
   3257                }
   3258          
   3259                // update link key related fields
   3260                si->keyID   = SEC_KEYID_LINK;
   \                     ??APSME_TCLinkKeyLoad_8:
   \   0001A2   EE           MOV       A,R6
   \   0001A3   240E         ADD       A,#0xe
   \   0001A5   F582         MOV       DPL,A
   \   0001A7   E4           CLR       A
   \   0001A8   3F           ADDC      A,R7
   \   0001A9   F583         MOV       DPH,A
   \   0001AB   E4           CLR       A
   \   0001AC   F0           MOVX      @DPTR,A
   3261                si->frmCntr = TCLinkKeyFrmCntr[i].txFrmCntr;
   \   0001AD   85..82       MOV       DPL,?V8
   \   0001B0   85..83       MOV       DPH,?V9
   \   0001B3   12....       LCALL     ?XLOAD_R0123
   \   0001B6   12....       LCALL     ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   0001B9   12....       LCALL     ?XSTORE_R0123
   3262          
   3263                // update outgoing frame counter
   3264                TCLinkKeyFrmCntr[i].txFrmCntr++;
   \   0001BC   90....       MOV       DPTR,#__Constant_1
   \   0001BF   78..         MOV       R0,#?V0
   \   0001C1   12....       LCALL     ?L_MOV_X
   \   0001C4   85..82       MOV       DPL,?V8
   \   0001C7   85..83       MOV       DPH,?V9
   \   0001CA   78..         MOV       R0,#?V0
   \   0001CC   12....       LCALL     ?L_ADD_TO_X
   3265          
   3266            #if defined ( NV_RESTORE )
   3267                // write periodically to NV
   3268                if ( !(TCLinkKeyFrmCntr[i].txFrmCntr % MAX_TCLK_FRAMECOUNTER_CHANGES) )
   \   0001CF   85..82       MOV       DPL,?V8
   \   0001D2   85..83       MOV       DPH,?V9
   \   0001D5   78..         MOV       R0,#?V0
   \   0001D7   12....       LCALL     ?L_MOV_X
   \   0001DA   90....       MOV       DPTR,#__Constant_a
   \   0001DD   78..         MOV       R0,#?V4
   \   0001DF   12....       LCALL     ?L_MOV_X
   \   0001E2   78..         MOV       R0,#?V0
   \   0001E4   79..         MOV       R1,#?V4
   \   0001E6   12....       LCALL     ?UL_DIV_MOD
   \   0001E9   E5..         MOV       A,?V4
   \   0001EB   45..         ORL       A,?V5
   \   0001ED   45..         ORL       A,?V6
   \   0001EF   45..         ORL       A,?V7
   \   0001F1   702C         JNZ       ??APSME_TCLinkKeyLoad_13
   3269                {
   3270                  // set the flag to write key to NV
   3271                  TCLinkKeyFrmCntr[i].pendingFlag = TRUE;
   \   0001F3   85..82       MOV       DPL,?V8
   \   0001F6   85..83       MOV       DPH,?V9
   \   0001F9   A3           INC       DPTR
   \   0001FA   A3           INC       DPTR
   \   0001FB   A3           INC       DPTR
   \   0001FC   A3           INC       DPTR
   \   0001FD   A3           INC       DPTR
   \   0001FE   A3           INC       DPTR
   \   0001FF   A3           INC       DPTR
   \   000200   A3           INC       DPTR
   \   000201   7401         MOV       A,#0x1
   \   000203   F0           MOVX      @DPTR,A
   3272          
   3273                  // Notify the ZDApp that the frame counter has changed.
   3274                  osal_set_event( ZDAppTaskID, ZDO_TCLK_FRAMECOUNTER_CHANGE );
   \   000204                ; Setup parameters for call to function osal_set_event
   \   000204   7A00         MOV       R2,#0x0
   \   000206   7B04         MOV       R3,#0x4
   \   000208   90....       MOV       DPTR,#ZDAppTaskID
   \   00020B   E0           MOVX      A,@DPTR
   \   00020C   F9           MOV       R1,A
   \   00020D   12....       LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   000210   800D         SJMP      ??APSME_TCLinkKeyLoad_13
   3275                }
   3276            #endif
   3277              }  
   3278              else
   3279              {
   3280                //If no more TCLK entries, try global so we can try to add legacy devices
   3281                si->keyNvId = ZCD_NV_TCLK_DEFAULT;
   \                     ??APSME_TCLinkKeyLoad_2:
   \   000212   85..82       MOV       DPL,?V0
   \   000215   85..83       MOV       DPH,?V1
   \   000218   7403         MOV       A,#0x3
   \   00021A   F0           MOVX      @DPTR,A
   \   00021B   A3           INC       DPTR
   \   00021C   7401         MOV       A,#0x1
   \   00021E   F0           MOVX      @DPTR,A
   3282              }
   3283              status = ZSuccess;
   \                     ??APSME_TCLinkKeyLoad_13:
   \   00021F   75..00       MOV       ?V0,#0x0
   \   000222   8015         SJMP      ??APSME_TCLinkKeyLoad_14
   \                     ??APSME_TCLinkKeyLoad_0:
   \   000224                ; Setup parameters for call to function AddrMgrEntryLookupNwk
   3284            }
   \   000224   7414         MOV       A,#0x14
   \   000226   12....       LCALL     ?XSTACK_DISP101_8
   \   000229   12....       LCALL     `??AddrMgrEntryLookupNwk::?relay`; Banked call to: AddrMgrEntryLookupNwk
   \   00022C   E9           MOV       A,R1
   \   00022D   6401         XRL       A,#0x1
   \   00022F   7008         JNZ       ??APSME_TCLinkKeyLoad_14
   3285            
   3286            // If no TC link key found, remove the device from the address manager
   3287            if ( (status != ZSuccess) && (AddrMgrEntryLookupNwk(&addrEntry) == TRUE) )
   3288            {
   3289              AddrMgrEntryRelease( &addrEntry );
   \   000231                ; Setup parameters for call to function AddrMgrEntryRelease
   \   000231   7414         MOV       A,#0x14
   \   000233   12....       LCALL     ?XSTACK_DISP101_8
   \   000236   12....       LCALL     `??AddrMgrEntryRelease::?relay`; Banked call to: AddrMgrEntryRelease
   3290            }
   3291          
   3292            return status;
   \                     ??APSME_TCLinkKeyLoad_14:
   \   000239   A9..         MOV       R1,?V0
   \   00023B   7421         MOV       A,#0x21
   \   00023D                REQUIRE ?Subroutine5
   \   00023D                ; // Fall through to label ?Subroutine5
   3293          }
   3294          
   3295          /******************************************************************************
   3296           * @fn          APSME_IsDefaultTCLK
   3297           *
   3298           * @brief       Return TRUE or FALSE based on the extended address.  If the
   3299           *              input ext address is all FFs, it means the trust center link
   3300           *              assoiciated with the address is the default trust center link key
   3301           *
   3302           * @param       extAddr - [in] extended address
   3303           *
   3304           * @return      uint8 TRUE/FALSE
   3305           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3306          uint8 APSME_IsDefaultTCLK( uint8 *extAddr )
   \                     APSME_IsDefaultTCLK:
   3307          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3308            return osal_isbufset( extAddr, 0xFF, Z_EXTADDR_LEN );
   \   000004                ; Setup parameters for call to function osal_isbufset
   \   000004   7C08         MOV       R4,#0x8
   \   000006   79FF         MOV       R1,#-0x1
   \   000008   12....       LCALL     `??osal_isbufset::?relay`; Banked call to: osal_isbufset
   \   00000B   02....       LJMP      ??Subroutine64_0 & 0xFFFF
   3309          }
   3310          
   3311          /******************************************************************************
   3312           * @fn          ZDSecMgrNwkKeyInit
   3313           *
   3314           * @brief       Initialize the NV items for
   3315           *                  ZCD_NV_NWKKEY,
   3316           *                  ZCD_NV_NWK_ACTIVE_KEY_INFO and
   3317           *                  ZCD_NV_NWK_ALTERN_KEY_INFO
   3318           *
   3319           * @param       setDefault
   3320           *
   3321           * @return      none
   3322           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3323          void ZDSecMgrNwkKeyInit(uint8 setDefault)
   \                     ZDSecMgrNwkKeyInit:
   3324          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 50
   \   000005   74CE         MOV       A,#-0x32
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V0,R1
   3325            uint8 status;
   3326            nwkKeyDesc nwkKey;
   3327            // Initialize NV items for NWK key, this structure contains the frame counter
   3328            // and is only used when NV_RESTORE is enabled
   3329            nwkActiveKeyItems keyItems;
   3330            
   3331          
   3332            uint8 i,nwkFrameCounterReset = FALSE;
   \   00000C   C2..         CLR       ?VB.0
   3333            nwkSecMaterialDesc_t nwkSecMaterialDesc;
   3334            
   3335            //NwkSecMaterial entry is empty if set to 0s
   3336            osal_memset(&nwkSecMaterialDesc,0,sizeof(nwkSecMaterialDesc_t));
   \   00000E                ; Setup parameters for call to function osal_memset
   \   00000E   7C0C         MOV       R4,#0xc
   \   000010   7D00         MOV       R5,#0x0
   \   000012   7900         MOV       R1,#0x0
   \   000014   AA..         MOV       R2,?XSP + 0
   \   000016   AB..         MOV       R3,?XSP + 1
   \   000018   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   3337          #ifdef NV_RESTORE  
   3338            // Has been set to reset the nwk security material?
   3339            if ( zgReadStartupOptions() & ZCD_STARTOPT_CLEAR_NWK_FRAME_COUNTER )
   \   00001B                ; Setup parameters for call to function zgReadStartupOptions
   \   00001B   12....       LCALL     `??zgReadStartupOptions::?relay`; Banked call to: zgReadStartupOptions
   \   00001E   E9           MOV       A,R1
   \   00001F   F8           MOV       R0,A
   \   000020   A2E7         MOV       C,0xE0 /* A   */.7
   \   000022   5002         JNC       ??ZDSecMgrNwkKeyInit_0
   3340            {
   3341              nwkFrameCounterReset = TRUE;
   \   000024   D2..         SETB      ?VB.0
   3342            }
   3343          #else
   3344            nwkFrameCounterReset = TRUE;
   3345          #endif
   3346            
   3347            //Initialize the nwk security material
   3348            for( i = 0; i < gMAX_NWK_SEC_MATERIAL_TABLE_ENTRIES; i++)
   \                     ??ZDSecMgrNwkKeyInit_0:
   \   000026   75..00       MOV       ?V1,#0x0
   \   000029   804D         SJMP      ??ZDSecMgrNwkKeyInit_1
   3349            {
   3350              if((osal_nv_item_init(ZCD_NV_NWK_SEC_MATERIAL_TABLE_START + i,sizeof(nwkSecMaterialDesc_t),&nwkSecMaterialDesc) == SUCCESS) && (nwkFrameCounterReset))
   \                     ??ZDSecMgrNwkKeyInit_2:
   \   00002B   EE           MOV       A,R6
   \   00002C   2475         ADD       A,#0x75
   \   00002E   FE           MOV       R6,A
   \   00002F   5001         JNC       ??ZDSecMgrNwkKeyInit_3
   \   000031   0F           INC       R7
   \                     ??ZDSecMgrNwkKeyInit_3:
   \   000032                ; Setup parameters for call to function osal_nv_item_init
   \   000032   A8..         MOV       R0,?XSP + 0
   \   000034   A9..         MOV       R1,?XSP + 1
   \   000036   88..         MOV       ?V2,R0
   \   000038   89..         MOV       ?V3,R1
   \   00003A   78..         MOV       R0,#?V2
   \   00003C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003F   7C0C         MOV       R4,#0xc
   \   000041   7D00         MOV       R5,#0x0
   \   000043   EE           MOV       A,R6
   \   000044   FA           MOV       R2,A
   \   000045   EF           MOV       A,R7
   \   000046   FB           MOV       R3,A
   \   000047   12....       LCALL     `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   00004A   7402         MOV       A,#0x2
   \   00004C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00004F   E9           MOV       A,R1
   \   000050   7024         JNZ       ??ZDSecMgrNwkKeyInit_4
   \   000052   A2..         MOV       C,?VB.0
   \   000054   5020         JNC       ??ZDSecMgrNwkKeyInit_4
   3351              {
   3352                osal_nv_write(ZCD_NV_NWK_SEC_MATERIAL_TABLE_START + i,0,sizeof(nwkSecMaterialDesc_t),&nwkSecMaterialDesc);
   \   000056                ; Setup parameters for call to function osal_nv_write
   \   000056   78..         MOV       R0,#?V2
   \   000058   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00005B   75..0C       MOV       ?V2,#0xc
   \   00005E   75..00       MOV       ?V3,#0x0
   \   000061   78..         MOV       R0,#?V2
   \   000063   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000066   7C00         MOV       R4,#0x0
   \   000068   7D00         MOV       R5,#0x0
   \   00006A   EE           MOV       A,R6
   \   00006B   FA           MOV       R2,A
   \   00006C   EF           MOV       A,R7
   \   00006D   FB           MOV       R3,A
   \   00006E   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000071   7404         MOV       A,#0x4
   \   000073   12....       LCALL     ?DEALLOC_XSTACK8
   3353              }
   3354            }
   \                     ??ZDSecMgrNwkKeyInit_4:
   \   000076   05..         INC       ?V1
   \                     ??ZDSecMgrNwkKeyInit_1:
   \   000078   AE..         MOV       R6,?V1
   \   00007A   7F00         MOV       R7,#0x0
   \   00007C   90....       MOV       DPTR,#gMAX_NWK_SEC_MATERIAL_TABLE_ENTRIES
   \   00007F   E4           CLR       A
   \   000080   93           MOVC      A,@A+DPTR
   \   000081   F8           MOV       R0,A
   \   000082   EE           MOV       A,R6
   \   000083   C3           CLR       C
   \   000084   98           SUBB      A,R0
   \   000085   40A4         JC        ??ZDSecMgrNwkKeyInit_2
   3355            //Set the last item to the generic nwk security material by setting extPanId to 0xFFs
   3356            osal_memset(nwkSecMaterialDesc.extendedPanID,0xFF,Z_EXTADDR_LEN);
   \   000087                ; Setup parameters for call to function osal_memset
   \   000087   7C08         MOV       R4,#0x8
   \   000089   7D00         MOV       R5,#0x0
   \   00008B   79FF         MOV       R1,#-0x1
   \   00008D   7404         MOV       A,#0x4
   \   00008F   12....       LCALL     ?XSTACK_DISP0_8
   \   000092   AA82         MOV       R2,DPL
   \   000094   AB83         MOV       R3,DPH
   \   000096   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   3357            
   3358            if((osal_nv_item_init(ZCD_NV_NWK_SEC_MATERIAL_TABLE_START + i - 1,sizeof(nwkSecMaterialDesc_t),&nwkSecMaterialDesc) == SUCCESS) && (nwkFrameCounterReset))
   \   000099   EE           MOV       A,R6
   \   00009A   2474         ADD       A,#0x74
   \   00009C   FE           MOV       R6,A
   \   00009D   5001         JNC       ??ZDSecMgrNwkKeyInit_5
   \   00009F   0F           INC       R7
   \                     ??ZDSecMgrNwkKeyInit_5:
   \   0000A0                ; Setup parameters for call to function osal_nv_item_init
   \   0000A0   A8..         MOV       R0,?XSP + 0
   \   0000A2   A9..         MOV       R1,?XSP + 1
   \   0000A4   88..         MOV       ?V2,R0
   \   0000A6   89..         MOV       ?V3,R1
   \   0000A8   78..         MOV       R0,#?V2
   \   0000AA   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000AD   7C0C         MOV       R4,#0xc
   \   0000AF   7D00         MOV       R5,#0x0
   \   0000B1   EE           MOV       A,R6
   \   0000B2   FA           MOV       R2,A
   \   0000B3   EF           MOV       A,R7
   \   0000B4   FB           MOV       R3,A
   \   0000B5   12....       LCALL     `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   0000B8   7402         MOV       A,#0x2
   \   0000BA   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000BD   E9           MOV       A,R1
   \   0000BE   7024         JNZ       ??ZDSecMgrNwkKeyInit_6
   \   0000C0   A2..         MOV       C,?VB.0
   \   0000C2   5020         JNC       ??ZDSecMgrNwkKeyInit_6
   3359            {
   3360              osal_nv_write(ZCD_NV_NWK_SEC_MATERIAL_TABLE_START + i - 1,0,sizeof(nwkSecMaterialDesc_t),&nwkSecMaterialDesc);
   \   0000C4                ; Setup parameters for call to function osal_nv_write
   \   0000C4   78..         MOV       R0,#?V2
   \   0000C6   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000C9   75..0C       MOV       ?V2,#0xc
   \   0000CC   75..00       MOV       ?V3,#0x0
   \   0000CF   78..         MOV       R0,#?V2
   \   0000D1   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000D4   7C00         MOV       R4,#0x0
   \   0000D6   7D00         MOV       R5,#0x0
   \   0000D8   EE           MOV       A,R6
   \   0000D9   FA           MOV       R2,A
   \   0000DA   EF           MOV       A,R7
   \   0000DB   FB           MOV       R3,A
   \   0000DC   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   0000DF   7404         MOV       A,#0x4
   \   0000E1   12....       LCALL     ?DEALLOC_XSTACK8
   3361            }
   3362          
   3363          
   3364            osal_memset( &keyItems, 0, sizeof( nwkActiveKeyItems ) );
   \                     ??ZDSecMgrNwkKeyInit_6:
   \   0000E4                ; Setup parameters for call to function osal_memset
   \   0000E4   7C15         MOV       R4,#0x15
   \   0000E6   7D00         MOV       R5,#0x0
   \   0000E8   7900         MOV       R1,#0x0
   \   0000EA   741D         MOV       A,#0x1d
   \   0000EC   12....       LCALL     ?XSTACK_DISP101_8
   \   0000EF   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   3365          
   3366            status = osal_nv_item_init( ZCD_NV_NWKKEY, sizeof(nwkActiveKeyItems), (void *)&keyItems );
   3367          
   3368          #if defined ( NV_RESTORE )
   3369            // reset the values of NV items if NV_RESTORE is not enabled
   3370            if ((status == SUCCESS) && (setDefault == TRUE))
   \   0000F2                ; Setup parameters for call to function osal_nv_item_init
   \   0000F2   741D         MOV       A,#0x1d
   \   0000F4   12....       LCALL     ?XSTACK_DISP100_8
   \   0000F7   88..         MOV       ?V2,R0
   \   0000F9   89..         MOV       ?V3,R1
   \   0000FB   78..         MOV       R0,#?V2
   \   0000FD   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000100   7C15         MOV       R4,#0x15
   \   000102   7D00         MOV       R5,#0x0
   \   000104   7A82         MOV       R2,#-0x7e
   \   000106   7B00         MOV       R3,#0x0
   \   000108   12....       LCALL     `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   00010B   7402         MOV       A,#0x2
   \   00010D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000110   E9           MOV       A,R1
   \   000111   7026         JNZ       ??ZDSecMgrNwkKeyInit_7
   \   000113   7401         MOV       A,#0x1
   \   000115   65..         XRL       A,?V0
   \   000117   7020         JNZ       ??ZDSecMgrNwkKeyInit_7
   3371            {
   3372              // clear NV data to default values
   3373              osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof(nwkActiveKeyItems), &keyItems );
   \   000119                ; Setup parameters for call to function osal_nv_write
   \   000119   78..         MOV       R0,#?V2
   \   00011B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00011E   75..15       MOV       ?V2,#0x15
   \   000121   75..00       MOV       ?V3,#0x0
   \   000124   78..         MOV       R0,#?V2
   \   000126   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000129   7C00         MOV       R4,#0x0
   \   00012B   7D00         MOV       R5,#0x0
   \   00012D   7A82         MOV       R2,#-0x7e
   \   00012F   7B00         MOV       R3,#0x0
   \   000131   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000134   7404         MOV       A,#0x4
   \   000136   12....       LCALL     ?DEALLOC_XSTACK8
   3374            }
   3375          #else
   3376            (void)setDefault;   // to eliminate compiler warning
   3377          
   3378            // reset the values of NV items if NV_RESTORE is not enabled
   3379            if (status == SUCCESS)
   3380            {
   3381              osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof(nwkActiveKeyItems), &keyItems );
   3382            }
   3383          #endif // defined (NV_RESTORE)
   3384          
   3385            // Initialize NV items for NWK Active and Alternate keys. These items are used
   3386            // all the time, independently of NV_RESTORE being set or not
   3387            osal_memset( &nwkKey, 0x00, sizeof(nwkKey) );
   \                     ??ZDSecMgrNwkKeyInit_7:
   \   000139                ; Setup parameters for call to function osal_memset
   \   000139   7C11         MOV       R4,#0x11
   \   00013B   7D00         MOV       R5,#0x0
   \   00013D   7900         MOV       R1,#0x0
   \   00013F   740C         MOV       A,#0xc
   \   000141   12....       LCALL     ?XSTACK_DISP101_8
   \   000144   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   3388          
   3389            status = osal_nv_item_init( ZCD_NV_NWK_ACTIVE_KEY_INFO, sizeof(nwkKey), &nwkKey);
   3390          
   3391          #if defined ( NV_RESTORE )
   3392            // reset the values of NV items if NV_RESTORE is not enabled
   3393            if ((status == SUCCESS) && (setDefault == TRUE))
   \   000147                ; Setup parameters for call to function osal_nv_item_init
   \   000147   740C         MOV       A,#0xc
   \   000149   12....       LCALL     ?XSTACK_DISP100_8
   \   00014C   88..         MOV       ?V2,R0
   \   00014E   89..         MOV       ?V3,R1
   \   000150   78..         MOV       R0,#?V2
   \   000152   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000155   7C11         MOV       R4,#0x11
   \   000157   7D00         MOV       R5,#0x0
   \   000159   7A3A         MOV       R2,#0x3a
   \   00015B   7B00         MOV       R3,#0x0
   \   00015D   12....       LCALL     `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   000160   7402         MOV       A,#0x2
   \   000162   12....       LCALL     ?DEALLOC_XSTACK8
   \   000165   E9           MOV       A,R1
   \   000166   7026         JNZ       ??ZDSecMgrNwkKeyInit_8
   \   000168   7401         MOV       A,#0x1
   \   00016A   65..         XRL       A,?V0
   \   00016C   7020         JNZ       ??ZDSecMgrNwkKeyInit_8
   3394            {
   3395              // clear NV data to default values
   3396              osal_nv_write( ZCD_NV_NWK_ACTIVE_KEY_INFO, 0, sizeof(nwkKey), &nwkKey );
   \   00016E                ; Setup parameters for call to function osal_nv_write
   \   00016E   78..         MOV       R0,#?V2
   \   000170   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000173   75..11       MOV       ?V2,#0x11
   \   000176   75..00       MOV       ?V3,#0x0
   \   000179   78..         MOV       R0,#?V2
   \   00017B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00017E   7C00         MOV       R4,#0x0
   \   000180   7D00         MOV       R5,#0x0
   \   000182   7A3A         MOV       R2,#0x3a
   \   000184   7B00         MOV       R3,#0x0
   \   000186   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000189   7404         MOV       A,#0x4
   \   00018B   12....       LCALL     ?DEALLOC_XSTACK8
   3397            }
   3398          #else
   3399            // reset the values of NV items if NV_RESTORE is not enabled
   3400            if (status == SUCCESS)
   3401            {
   3402              osal_nv_write( ZCD_NV_NWK_ACTIVE_KEY_INFO, 0, sizeof(nwkKey), &nwkKey );
   3403            }
   3404          #endif // defined (NV_RESTORE)
   3405          
   3406            status = osal_nv_item_init( ZCD_NV_NWK_ALTERN_KEY_INFO, sizeof(nwkKey), &nwkKey );
   3407          
   3408          #if defined ( NV_RESTORE )
   3409            // reset the values of NV items if NV_RESTORE is not enabled
   3410            if ((status == SUCCESS) && (setDefault == TRUE))
   \                     ??ZDSecMgrNwkKeyInit_8:
   \   00018E                ; Setup parameters for call to function osal_nv_item_init
   \   00018E   740C         MOV       A,#0xc
   \   000190   12....       LCALL     ?XSTACK_DISP100_8
   \   000193   88..         MOV       ?V2,R0
   \   000195   89..         MOV       ?V3,R1
   \   000197   78..         MOV       R0,#?V2
   \   000199   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00019C   7C11         MOV       R4,#0x11
   \   00019E   7D00         MOV       R5,#0x0
   \   0001A0   7A3B         MOV       R2,#0x3b
   \   0001A2   7B00         MOV       R3,#0x0
   \   0001A4   12....       LCALL     `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   0001A7   7402         MOV       A,#0x2
   \   0001A9   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001AC   E9           MOV       A,R1
   \   0001AD   7026         JNZ       ??ZDSecMgrNwkKeyInit_9
   \   0001AF   7401         MOV       A,#0x1
   \   0001B1   65..         XRL       A,?V0
   \   0001B3   7020         JNZ       ??ZDSecMgrNwkKeyInit_9
   3411            {
   3412              // clear NV data to default values
   3413              osal_nv_write( ZCD_NV_NWK_ALTERN_KEY_INFO, 0, sizeof(nwkKey), &nwkKey );
   \   0001B5                ; Setup parameters for call to function osal_nv_write
   \   0001B5   78..         MOV       R0,#?V2
   \   0001B7   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001BA   75..11       MOV       ?V2,#0x11
   \   0001BD   75..00       MOV       ?V3,#0x0
   \   0001C0   78..         MOV       R0,#?V2
   \   0001C2   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001C5   7C00         MOV       R4,#0x0
   \   0001C7   7D00         MOV       R5,#0x0
   \   0001C9   7A3B         MOV       R2,#0x3b
   \   0001CB   7B00         MOV       R3,#0x0
   \   0001CD   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   0001D0   7404         MOV       A,#0x4
   \   0001D2   12....       LCALL     ?DEALLOC_XSTACK8
   3414            }
   3415          #else
   3416            // reset the values of NV items if NV_RESTORE is not enabled
   3417            if (status == SUCCESS)
   3418            {
   3419              osal_nv_write( ZCD_NV_NWK_ALTERN_KEY_INFO, 0, sizeof(nwkKey), &nwkKey );
   3420            }
   3421          #endif // defined (NV_RESTORE)
   3422          
   3423          }
   \                     ??ZDSecMgrNwkKeyInit_9:
   \   0001D5   7432         MOV       A,#0x32
   \   0001D7   02....       LJMP      ?Subroutine3 & 0xFFFF
   3424          
   3425          
   3426          
   3427          /*********************************************************************
   3428           * @fn          ZDSecMgrReadKeyFromNv
   3429           *
   3430           * @brief       Looks for a specific key in NV based on Index value
   3431           *
   3432           * @param   keyNvId - Index of key to look in NV
   3433           *                    valid values are:
   3434           *                    ZCD_NV_NWK_ACTIVE_KEY_INFO
   3435           *                    ZCD_NV_NWK_ALTERN_KEY_INFO
   3436           *                    ZCD_NV_TCLK_TABLE_START + <offset_in_table>
   3437           *                    ZCD_NV_APS_LINK_KEY_DATA_START + <offset_in_table>
   3438           *                    ZCD_NV_PRECFGKEY
   3439           *
   3440           * @param  *keyinfo - Data is read into this buffer.
   3441           *
   3442           * @return  SUCCESS if NV data was copied to the keyinfo parameter .
   3443           *          Otherwise, NV_OPER_FAILED for failure.
   3444           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3445          ZStatus_t ZDSecMgrReadKeyFromNv(uint16 keyNvId, void *keyinfo)
   \                     ZDSecMgrReadKeyFromNv:
   3446          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   8C..         MOV       ?V0,R4
   \   000007   8D..         MOV       ?V1,R5
   3447            if ((keyNvId == ZCD_NV_NWK_ACTIVE_KEY_INFO) ||
   3448                (keyNvId == ZCD_NV_NWK_ALTERN_KEY_INFO))
   \   000009   743A         MOV       A,#0x3a
   \   00000B   6A           XRL       A,R2
   \   00000C   7001         JNZ       ??ZDSecMgrReadKeyFromNv_0
   \   00000E   EB           MOV       A,R3
   \                     ??ZDSecMgrReadKeyFromNv_0:
   \   00000F   6006         JZ        ??ZDSecMgrReadKeyFromNv_1
   \   000011   743B         MOV       A,#0x3b
   \   000013   6A           XRL       A,R2
   \   000014   4B           ORL       A,R3
   \   000015   7015         JNZ       ??ZDSecMgrReadKeyFromNv_2
   3449            {
   3450              // get NWK active or alternate key from NV
   3451              return (osal_nv_read(keyNvId,
   3452                                   osal_offsetof(nwkKeyDesc, key),
   3453                                   SEC_KEY_LEN,
   3454                                   keyinfo));
   \                     ??ZDSecMgrReadKeyFromNv_1:
   \   000017                ; Setup parameters for call to function osal_nv_read
   \   000017   78..         MOV       R0,#?V0
   \   000019   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001C   75..10       MOV       ?V0,#0x10
   \   00001F   75..00       MOV       ?V1,#0x0
   \   000022   78..         MOV       R0,#?V0
   \   000024   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000027   7C01         MOV       R4,#0x1
   \   000029   02....       LJMP      ??ZDSecMgrReadKeyFromNv_3 & 0xFFFF
   3455            }
   3456            
   3457            else if(keyNvId == ZCD_NV_TCLK_DEFAULT)
   \                     ??ZDSecMgrReadKeyFromNv_2:
   \   00002C   7403         MOV       A,#0x3
   \   00002E   6A           XRL       A,R2
   \   00002F   7003         JNZ       ??ZDSecMgrReadKeyFromNv_4
   \   000031   7401         MOV       A,#0x1
   \   000033   6B           XRL       A,R3
   \                     ??ZDSecMgrReadKeyFromNv_4:
   \   000034   7008         JNZ       ??ZDSecMgrReadKeyFromNv_5
   3458            {
   3459              osal_memcpy(keyinfo,defaultTCLinkKey,SEC_KEY_LEN);
   \   000036                ; Setup parameters for call to function osal_memcpy
   \   000036   75....       MOV       ?V4,#defaultTCLinkKey & 0xff
   \   000039   75....       MOV       ?V5,#(defaultTCLinkKey >> 8) & 0xff
   \   00003C   8019         SJMP      ??ZDSecMgrReadKeyFromNv_6
   3460              return ZSuccess;
   3461            }
   3462            
   3463          #if (ZG_BUILD_JOINING_TYPE) 
   3464            else if(keyNvId == ZCD_NV_DISTRIBUTED_KEY)
   \                     ??ZDSecMgrReadKeyFromNv_5:
   \   00003E   7468         MOV       A,#0x68
   \   000040   6A           XRL       A,R2
   \   000041   4B           ORL       A,R3
   \   000042   702F         JNZ       ??ZDSecMgrReadKeyFromNv_7
   3465            {
   3466              if(ZG_DEVICE_JOINING_TYPE)
   \   000044   90....       MOV       DPTR,#zgDeviceLogicalType
   \   000047   E0           MOVX      A,@DPTR
   \   000048   6401         XRL       A,#0x1
   \   00004A   6005         JZ        ??ZDSecMgrReadKeyFromNv_8
   \   00004C   E0           MOVX      A,@DPTR
   \   00004D   6402         XRL       A,#0x2
   \   00004F   706B         JNZ       ??ZDSecMgrReadKeyFromNv_9
   3467              {
   3468                osal_memcpy(keyinfo,distributedDefaultKey,SEC_KEY_LEN);
   \                     ??ZDSecMgrReadKeyFromNv_8:
   \   000051                ; Setup parameters for call to function osal_memcpy
   \   000051   75....       MOV       ?V4,#distributedDefaultKey & 0xff
   \   000054   75....       MOV       ?V5,#(distributedDefaultKey >> 8) & 0xff
   \                     ??ZDSecMgrReadKeyFromNv_6:
   \   000057   75..80       MOV       ?V6,#-0x80
   \   00005A   78..         MOV       R0,#?V4
   \   00005C   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00005F   7C10         MOV       R4,#0x10
   \   000061   7D00         MOV       R5,#0x0
   \   000063   AA..         MOV       R2,?V0
   \   000065   AB..         MOV       R3,?V1
   \   000067   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00006A   7403         MOV       A,#0x3
   \   00006C   12....       LCALL     ?DEALLOC_XSTACK8
   3469                return ZSuccess;
   \   00006F   7900         MOV       R1,#0x0
   \   000071   804B         SJMP      ??ZDSecMgrReadKeyFromNv_10
   3470              }
   3471            }
   3472          #endif
   3473            
   3474            else if((keyNvId == ZCD_NV_TCLK_JOIN_DEV) || (keyNvId == ZCD_NV_PRECFGKEY)) 
   \                     ??ZDSecMgrReadKeyFromNv_7:
   \   000073   7402         MOV       A,#0x2
   \   000075   6A           XRL       A,R2
   \   000076   7003         JNZ       ??ZDSecMgrReadKeyFromNv_11
   \   000078   7401         MOV       A,#0x1
   \   00007A   6B           XRL       A,R3
   \                     ??ZDSecMgrReadKeyFromNv_11:
   \   00007B   6021         JZ        ??ZDSecMgrReadKeyFromNv_12
   \   00007D   7462         MOV       A,#0x62
   \   00007F   6A           XRL       A,R2
   \   000080   4B           ORL       A,R3
   \   000081   601B         JZ        ??ZDSecMgrReadKeyFromNv_12
   3475            {
   3476              // Read entry keyNvId of the TC link key table from NV. keyNvId should be
   3477              // ZCD_NV_TCLK_TABLE_START + <offset_in_table>
   3478              return (osal_nv_read(keyNvId,
   3479                                   0,
   3480                                   SEC_KEY_LEN,
   3481                                   keyinfo));
   \   000083                ; Setup parameters for call to function osal_nv_read
   3482            }
   3483              else if (keyNvId == ZCD_NV_PRECFGKEY)
   3484            {
   3485              // Read entry keyNvId of the Preconfig key from NV.
   3486              return (osal_nv_read(keyNvId,
   3487                                   0,
   3488                                   SEC_KEY_LEN,
   3489                                   keyinfo));
   3490            }
   3491          
   3492            else if((keyNvId >= ZCD_NV_TCLK_IC_TABLE_START) &&
   3493                     (keyNvId < (ZCD_NV_TCLK_IC_TABLE_START + gZDSECMGR_TC_DEVICE_IC_MAX)))
   \   000083   EA           MOV       A,R2
   \   000084   24FC         ADD       A,#-0x4
   \   000086   F8           MOV       R0,A
   \   000087   EB           MOV       A,R3
   \   000088   34FE         ADDC      A,#-0x2
   \   00008A   F9           MOV       R1,A
   \   00008B   E8           MOV       A,R0
   \   00008C   49           ORL       A,R1
   \   00008D   600F         JZ        ??ZDSecMgrReadKeyFromNv_12
   3494            {
   3495              //Read the key derived from the IC
   3496              return (osal_nv_read(keyNvId,
   3497                                   0,
   3498                                   SEC_KEY_LEN,
   3499                                   keyinfo));
   \   00008F                ; Setup parameters for call to function osal_nv_read
   3500            
   3501            }
   3502            else if ((keyNvId >= ZCD_NV_APS_LINK_KEY_DATA_START) &&
   3503                     (keyNvId < (ZCD_NV_APS_LINK_KEY_DATA_START + ZDSECMGR_ENTRY_MAX)))
   \   00008F   EA           MOV       A,R2
   \   000090   24FF         ADD       A,#-0x1
   \   000092   F8           MOV       R0,A
   \   000093   EB           MOV       A,R3
   \   000094   34FD         ADDC      A,#-0x3
   \   000096   F9           MOV       R1,A
   \   000097   C3           CLR       C
   \   000098   E8           MOV       A,R0
   \   000099   12....       LCALL     ??Subroutine59_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_100:
   \   00009C   501E         JNC       ??ZDSecMgrReadKeyFromNv_9
   3504            {
   3505              // Read entry keyNvId of the APS link key table from NV. keyNvId should be
   3506              // ZCD_NV_APS_LINK_KEY_DATA_START + <offset_in_table>
   3507              return (osal_nv_read(keyNvId,
   3508                                   osal_offsetof(APSME_LinkKeyData_t, key),
   3509                                   SEC_KEY_LEN,
   3510                                   keyinfo));
   \   00009E                ; Setup parameters for call to function osal_nv_read
   \                     ??ZDSecMgrReadKeyFromNv_12:
   \   00009E   78..         MOV       R0,#?V0
   \   0000A0   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000A3   75..10       MOV       ?V0,#0x10
   \   0000A6   75..00       MOV       ?V1,#0x0
   \   0000A9   78..         MOV       R0,#?V0
   \   0000AB   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000AE   7C00         MOV       R4,#0x0
   \                     ??ZDSecMgrReadKeyFromNv_3:
   \   0000B0   7D00         MOV       R5,#0x0
   \   0000B2   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   0000B5   7404         MOV       A,#0x4
   \   0000B7   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000BA   8002         SJMP      ??ZDSecMgrReadKeyFromNv_10
   3511            }
   3512          
   3513            return NV_OPER_FAILED;
   \                     ??ZDSecMgrReadKeyFromNv_9:
   \   0000BC   790A         MOV       R1,#0xa
   \                     ??ZDSecMgrReadKeyFromNv_10:
   \   0000BE   02....       LJMP      ??Subroutine71_0 & 0xFFFF
   3514          }
   3515          
   3516          /******************************************************************************
   3517           * @fn          ZDSecMgrApsLinkKeyInit
   3518           *
   3519           * @brief       Initialize the NV table for Application link keys
   3520           *
   3521           * @param       setDefault - TRUE to set default values
   3522           *
   3523           * @return      none
   3524           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3525          void ZDSecMgrApsLinkKeyInit(uint8 setDefault)
   \                     ZDSecMgrApsLinkKeyInit:
   3526          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 24
   \   000005   74E8         MOV       A,#-0x18
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V1,R1
   3527            APSME_LinkKeyData_t pApsLinkKey;
   3528            uint8 i;
   3529            uint8 status;
   3530          
   3531            // Initialize all NV items for APS link key, if not exist already.
   3532            osal_memset( &pApsLinkKey, 0x00, sizeof(APSME_LinkKeyData_t) );
   \   00000C                ; Setup parameters for call to function osal_memset
   \   00000C   7C18         MOV       R4,#0x18
   \   00000E   7D00         MOV       R5,#0x0
   \   000010   7900         MOV       R1,#0x0
   \   000012   AA..         MOV       R2,?XSP + 0
   \   000014   AB..         MOV       R3,?XSP + 1
   \   000016   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   3533          
   3534            for( i = 0; i < ZDSECMGR_ENTRY_MAX; i++ )
   \   000019   75..00       MOV       ?V0,#0x0
   3535            {
   3536              status = osal_nv_item_init( (ZCD_NV_APS_LINK_KEY_DATA_START + i),
   3537                                         sizeof(APSME_LinkKeyData_t), &pApsLinkKey );
   3538          
   3539          #if defined ( NV_RESTORE )
   3540            // If the set default is requested, the APS Link key needs to be erased, regardless of the NV_RESTORE enabled
   3541                if ((status == SUCCESS) && (setDefault == TRUE ))
   \                     ??ZDSecMgrApsLinkKeyInit_0:
   \   00001C   E5..         MOV       A,?V0
   \   00001E   2401         ADD       A,#0x1
   \   000020   FE           MOV       R6,A
   \   000021   E4           CLR       A
   \   000022   3402         ADDC      A,#0x2
   \   000024   FF           MOV       R7,A
   \   000025                ; Setup parameters for call to function osal_nv_item_init
   \   000025   A8..         MOV       R0,?XSP + 0
   \   000027   A9..         MOV       R1,?XSP + 1
   \   000029   88..         MOV       ?V2,R0
   \   00002B   89..         MOV       ?V3,R1
   \   00002D   78..         MOV       R0,#?V2
   \   00002F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000032   7C18         MOV       R4,#0x18
   \   000034   7D00         MOV       R5,#0x0
   \   000036   EE           MOV       A,R6
   \   000037   FA           MOV       R2,A
   \   000038   EF           MOV       A,R7
   \   000039   FB           MOV       R3,A
   \   00003A   12....       LCALL     `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   00003D   7402         MOV       A,#0x2
   \   00003F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000042   E9           MOV       A,R1
   \   000043   7026         JNZ       ??ZDSecMgrApsLinkKeyInit_1
   \   000045   7401         MOV       A,#0x1
   \   000047   65..         XRL       A,?V1
   \   000049   7020         JNZ       ??ZDSecMgrApsLinkKeyInit_1
   3542                {
   3543                  osal_nv_write( (ZCD_NV_APS_LINK_KEY_DATA_START + i), 0,
   3544                                sizeof(APSME_LinkKeyData_t), &pApsLinkKey );
   \   00004B                ; Setup parameters for call to function osal_nv_write
   \   00004B   78..         MOV       R0,#?V2
   \   00004D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000050   75..18       MOV       ?V2,#0x18
   \   000053   75..00       MOV       ?V3,#0x0
   \   000056   78..         MOV       R0,#?V2
   \   000058   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00005B   7C00         MOV       R4,#0x0
   \   00005D   7D00         MOV       R5,#0x0
   \   00005F   EE           MOV       A,R6
   \   000060   FA           MOV       R2,A
   \   000061   EF           MOV       A,R7
   \   000062   FB           MOV       R3,A
   \   000063   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000066   7404         MOV       A,#0x4
   \   000068   12....       LCALL     ?DEALLOC_XSTACK8
   3545          
   3546                }
   3547          #else
   3548              // reset the values of NV items if NV_RESTORE is not enabled
   3549              if (status == SUCCESS)
   3550              {
   3551                osal_nv_write( (ZCD_NV_APS_LINK_KEY_DATA_START + i), 0,
   3552                              sizeof(APSME_LinkKeyData_t), &pApsLinkKey );
   3553          
   3554              }
   3555          #endif // defined (NV_RESTORE)
   3556            }
   \                     ??ZDSecMgrApsLinkKeyInit_1:
   \   00006B   05..         INC       ?V0
   \   00006D   EE           MOV       A,R6
   \   00006E   C3           CLR       C
   \   00006F   9403         SUBB      A,#0x3
   \   000071   40A9         JC        ??ZDSecMgrApsLinkKeyInit_0
   3557          }
   \   000073   7418         MOV       A,#0x18
   \   000075   02....       LJMP      ?Subroutine3 & 0xFFFF
   3558          
   3559          
   3560          /******************************************************************************
   3561           * @fn          ZDSecMgrInitNVKeyTables
   3562           *
   3563           * @brief       Initialize the NV table for All keys: NWK, Master, TCLK and APS
   3564           *
   3565           * @param       setDefault - TRUE to set default values
   3566           *
   3567           * @return      none
   3568           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3569          void ZDSecMgrInitNVKeyTables(uint8 setDefault)
   \                     ZDSecMgrInitNVKeyTables:
   3570          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   3571            ZDSecMgrNwkKeyInit(setDefault);
   \   000007                ; Setup parameters for call to function ZDSecMgrNwkKeyInit
   \   000007   12....       LCALL     `??ZDSecMgrNwkKeyInit::?relay`; Banked call to: ZDSecMgrNwkKeyInit
   3572            ZDSecMgrApsLinkKeyInit(setDefault); 
   \   00000A                ; Setup parameters for call to function ZDSecMgrApsLinkKeyInit
   \   00000A   EE           MOV       A,R6
   \   00000B   F9           MOV       R1,A
   \   00000C   12....       LCALL     `??ZDSecMgrApsLinkKeyInit::?relay`; Banked call to: ZDSecMgrApsLinkKeyInit
   3573            APSME_TCLinkKeyInit(setDefault);
   \   00000F                ; Setup parameters for call to function APSME_TCLinkKeyInit
   \   00000F   EE           MOV       A,R6
   \   000010   F9           MOV       R1,A
   \   000011   12....       LCALL     `??APSME_TCLinkKeyInit::?relay`; Banked call to: APSME_TCLinkKeyInit
   3574            
   3575          #if ZG_BUILD_COORDINATOR_TYPE
   3576            if(ZG_DEVICE_COORDINATOR_TYPE)
   3577            {
   3578              ZDSecMgrGenerateSeed(setDefault);
   3579              
   3580            }
   3581          #endif
   3582          }
   \   000014   02....       LJMP      ??Subroutine69_0 & 0xFFFF
   3583          
   3584          
   3585          /******************************************************************************
   3586           * @fn          ZDSecMgrSaveApsLinkKey
   3587           *
   3588           * @brief       Save APS Link Key to NV. It will loop through all the keys
   3589           *              to see which one to save.
   3590           *
   3591           * @param       none
   3592           *
   3593           * @return      none
   3594           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3595          void ZDSecMgrSaveApsLinkKey(void)
   \                     ZDSecMgrSaveApsLinkKey:
   3596          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   3597            APSME_LinkKeyData_t *pKeyData = NULL;
   3598            int i;
   3599          
   3600            pKeyData = (APSME_LinkKeyData_t *)osal_mem_alloc(sizeof(APSME_LinkKeyData_t));
   \   000005                ; Setup parameters for call to function osal_mem_alloc
   \   000005   7A18         MOV       R2,#0x18
   \   000007   7B00         MOV       R3,#0x0
   \   000009   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00000C   8A..         MOV       ?V6,R2
   \   00000E   8B..         MOV       ?V7,R3
   3601          
   3602            if (pKeyData != NULL)
   \   000010   EA           MOV       A,R2
   \   000011   45..         ORL       A,?V7
   \   000013   7003         JNZ       $+5
   \   000015   02....       LJMP      ??ZDSecMgrSaveApsLinkKey_0 & 0xFFFF
   3603            {
   3604              // checks all pending flags to know which one to save
   3605              for (i = 0; i < ZDSECMGR_ENTRY_MAX; i++)
   \   000018   75..00       MOV       ?V0,#0x0
   \   00001B   75..00       MOV       ?V1,#0x0
   3606              {
   3607                if (ApsLinkKeyFrmCntr[i].pendingFlag == TRUE)
   \                     ??ZDSecMgrSaveApsLinkKey_1:
   \   00001E   E5..         MOV       A,?V0
   \   000020   75F009       MOV       B,#0x9
   \   000023   A4           MUL       AB
   \   000024   F8           MOV       R0,A
   \   000025   AAF0         MOV       R2,B
   \   000027   75F009       MOV       B,#0x9
   \   00002A   E5..         MOV       A,?V1
   \   00002C   A4           MUL       AB
   \   00002D   2A           ADD       A,R2
   \   00002E   F9           MOV       R1,A
   \   00002F   74..         MOV       A,#ApsLinkKeyFrmCntr & 0xff
   \   000031   28           ADD       A,R0
   \   000032   F5..         MOV       ?V2,A
   \   000034   74..         MOV       A,#(ApsLinkKeyFrmCntr >> 8) & 0xff
   \   000036   39           ADDC      A,R1
   \   000037   F5..         MOV       ?V3,A
   \   000039   E5..         MOV       A,?V2
   \   00003B   12....       LCALL     ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   00003E   6003         JZ        $+5
   \   000040   02....       LJMP      ??ZDSecMgrSaveApsLinkKey_2 & 0xFFFF
   \   000043   E5..         MOV       A,?V0
   \   000045   2401         ADD       A,#0x1
   \   000047   FE           MOV       R6,A
   \   000048   E5..         MOV       A,?V1
   \   00004A   3402         ADDC      A,#0x2
   \   00004C   FF           MOV       R7,A
   \   00004D                ; Setup parameters for call to function osal_nv_read
   \   00004D   78..         MOV       R0,#?V6
   \   00004F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000052   75..18       MOV       ?V8,#0x18
   \   000055   75..00       MOV       ?V9,#0x0
   \   000058   78..         MOV       R0,#?V8
   \   00005A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00005D   7C00         MOV       R4,#0x0
   \   00005F   7D00         MOV       R5,#0x0
   \   000061   EE           MOV       A,R6
   \   000062   FA           MOV       R2,A
   \   000063   EF           MOV       A,R7
   \   000064   FB           MOV       R3,A
   3608                {
   3609                  // retrieve key from NV
   3610                  if (osal_nv_read(ZCD_NV_APS_LINK_KEY_DATA_START + i, 0,
   3611                                   sizeof(APSME_LinkKeyData_t), pKeyData) == SUCCESS)
   \   000065   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000068   7404         MOV       A,#0x4
   \   00006A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00006D   E9           MOV       A,R1
   \   00006E   705A         JNZ       ??ZDSecMgrSaveApsLinkKey_2
   3612                  {
   3613                    pKeyData->txFrmCntr = ApsLinkKeyFrmCntr[i].txFrmCntr;
   \   000070   85..82       MOV       DPL,?V2
   \   000073   85..83       MOV       DPH,?V3
   \   000076   12....       LCALL     ?XLOAD_R0123
   \   000079   E5..         MOV       A,?V6
   \   00007B   2410         ADD       A,#0x10
   \   00007D   F582         MOV       DPL,A
   \   00007F   E4           CLR       A
   \   000080   35..         ADDC      A,?V7
   \   000082   F583         MOV       DPH,A
   \   000084   12....       LCALL     ?XSTORE_R0123
   3614                    pKeyData->rxFrmCntr = ApsLinkKeyFrmCntr[i].rxFrmCntr;
   \   000087   85..82       MOV       DPL,?V2
   \   00008A   85..83       MOV       DPH,?V3
   \   00008D   A3           INC       DPTR
   \   00008E   A3           INC       DPTR
   \   00008F   A3           INC       DPTR
   \   000090   A3           INC       DPTR
   \   000091   12....       LCALL     ?XLOAD_R0123
   \   000094   E5..         MOV       A,?V6
   \   000096   2414         ADD       A,#0x14
   \   000098   F582         MOV       DPL,A
   \   00009A   E4           CLR       A
   \   00009B   35..         ADDC      A,?V7
   \   00009D   F583         MOV       DPH,A
   \   00009F   12....       LCALL     ?XSTORE_R0123
   3615          
   3616                    // Write the APS link key back to the NV
   3617                    osal_nv_write(ZCD_NV_APS_LINK_KEY_DATA_START + i, 0,
   3618                                  sizeof(APSME_LinkKeyData_t), pKeyData);
   \   0000A2                ; Setup parameters for call to function osal_nv_write
   \   0000A2   78..         MOV       R0,#?V6
   \   0000A4   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000A7   75..18       MOV       ?V2,#0x18
   \   0000AA   75..00       MOV       ?V3,#0x0
   \   0000AD   78..         MOV       R0,#?V2
   \   0000AF   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000B2   7C00         MOV       R4,#0x0
   \   0000B4   7D00         MOV       R5,#0x0
   \   0000B6   EE           MOV       A,R6
   \   0000B7   FA           MOV       R2,A
   \   0000B8   EF           MOV       A,R7
   \   0000B9   FB           MOV       R3,A
   \   0000BA   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   0000BD   7404         MOV       A,#0x4
   \   0000BF   12....       LCALL     ?DEALLOC_XSTACK8
   3619          
   3620                    // clear the pending write flag
   3621                    ApsLinkKeyFrmCntr[i].pendingFlag = FALSE;
   \   0000C2   85..82       MOV       DPL,?V4
   \   0000C5   85..83       MOV       DPH,?V5
   \   0000C8   E4           CLR       A
   \   0000C9   F0           MOVX      @DPTR,A
   3622                  }
   3623                }
   3624              }
   \                     ??ZDSecMgrSaveApsLinkKey_2:
   \   0000CA   05..         INC       ?V0
   \   0000CC   E5..         MOV       A,?V0
   \   0000CE   7002         JNZ       ??ZDSecMgrSaveApsLinkKey_3
   \   0000D0   05..         INC       ?V1
   \                     ??ZDSecMgrSaveApsLinkKey_3:
   \   0000D2   C3           CLR       C
   \   0000D3   9403         SUBB      A,#0x3
   \   0000D5   E5..         MOV       A,?V1
   \   0000D7   9400         SUBB      A,#0x0
   \   0000D9   A2D2         MOV       C,0xD0 /* PSW */.2
   \   0000DB   65D0         XRL       A,PSW
   \   0000DD   33           RLC       A
   \   0000DE   5003         JNC       $+5
   \   0000E0   02....       LJMP      ??ZDSecMgrSaveApsLinkKey_1 & 0xFFFF
   3625          
   3626              // clear copy of key in RAM
   3627              osal_memset( pKeyData, 0x00, sizeof(APSME_LinkKeyData_t) );
   \   0000E3                ; Setup parameters for call to function osal_memset
   \   0000E3   7C18         MOV       R4,#0x18
   \   0000E5   7D00         MOV       R5,#0x0
   \   0000E7   7900         MOV       R1,#0x0
   \   0000E9   AA..         MOV       R2,?V6
   \   0000EB   AB..         MOV       R3,?V7
   \   0000ED   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   3628          
   3629              osal_mem_free(pKeyData);
   \   0000F0                ; Setup parameters for call to function osal_mem_free
   \   0000F0   AA..         MOV       R2,?V6
   \   0000F2   AB..         MOV       R3,?V7
   \   0000F4   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   3630            }
   3631          }
   \                     ??ZDSecMgrSaveApsLinkKey_0:
   \   0000F7   02....       LJMP      ??Subroutine77_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000   2408         ADD       A,#0x8
   \   000002   F5..         MOV       ?V4,A
   \   000004   E4           CLR       A
   \   000005   35..         ADDC      A,?V3
   \   000007   F5..         MOV       ?V5,A
   \   000009   85..82       MOV       DPL,?V4
   \   00000C   F583         MOV       DPH,A
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   6401         XRL       A,#0x1
   \   000011   22           RET
   3632          
   3633          /******************************************************************************
   3634           * @fn          ZDSecMgrSaveTCLinkKey
   3635           *
   3636           * @brief       Save TC Link Key to NV. It will loop through all the keys
   3637           *              to see which one to save.
   3638           *
   3639           * @param       none
   3640           *
   3641           * @return      none
   3642           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3643          void ZDSecMgrSaveTCLinkKey(void)
   \                     ZDSecMgrSaveTCLinkKey:
   3644          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV       A,#-0x12
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   3645            APSME_TCLKDevEntry_t *pKeyData = NULL;
   3646            uint16 i;
   3647          
   3648            pKeyData = (APSME_TCLKDevEntry_t *)osal_mem_alloc(sizeof(APSME_TCLKDevEntry_t));
   \   000005                ; Setup parameters for call to function osal_mem_alloc
   \   000005   7A13         MOV       R2,#0x13
   \   000007   7B00         MOV       R3,#0x0
   \   000009   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00000C   8A..         MOV       ?V6,R2
   \   00000E   8B..         MOV       ?V7,R3
   3649          
   3650            if (pKeyData != NULL)
   \   000010   EA           MOV       A,R2
   \   000011   45..         ORL       A,?V7
   \   000013   7003         JNZ       $+5
   \   000015   02....       LJMP      ??ZDSecMgrSaveTCLinkKey_0 & 0xFFFF
   3651            {
   3652              for( i = 0; i < gZDSECMGR_TC_DEVICE_MAX; i++ )
   \   000018   75..00       MOV       ?V0,#0x0
   \   00001B   75..00       MOV       ?V1,#0x0
   3653              {
   3654                if (TCLinkKeyFrmCntr[i].pendingFlag == TRUE)
   \                     ??ZDSecMgrSaveTCLinkKey_1:
   \   00001E   E5..         MOV       A,?V0
   \   000020   75F009       MOV       B,#0x9
   \   000023   A4           MUL       AB
   \   000024   F8           MOV       R0,A
   \   000025   AAF0         MOV       R2,B
   \   000027   75F009       MOV       B,#0x9
   \   00002A   E5..         MOV       A,?V1
   \   00002C   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   00002F   12....       LCALL     ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   000032   6003         JZ        $+5
   \   000034   02....       LJMP      ??ZDSecMgrSaveTCLinkKey_2 & 0xFFFF
   3655                {
   3656                  if (osal_nv_read(ZCD_NV_TCLK_TABLE_START + i, 0,
   3657                                   sizeof(APSME_TCLKDevEntry_t), pKeyData) == SUCCESS)
   \   000037   E5..         MOV       A,?V0
   \   000039   2411         ADD       A,#0x11
   \   00003B   FE           MOV       R6,A
   \   00003C   E5..         MOV       A,?V1
   \   00003E   3401         ADDC      A,#0x1
   \   000040   FF           MOV       R7,A
   \   000041                ; Setup parameters for call to function osal_nv_read
   \   000041   78..         MOV       R0,#?V6
   \   000043   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000046   75..13       MOV       ?V8,#0x13
   \   000049   75..00       MOV       ?V9,#0x0
   \   00004C   78..         MOV       R0,#?V8
   \   00004E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000051   7C00         MOV       R4,#0x0
   \   000053   7D00         MOV       R5,#0x0
   \   000055   EE           MOV       A,R6
   \   000056   FA           MOV       R2,A
   \   000057   EF           MOV       A,R7
   \   000058   FB           MOV       R3,A
   \   000059   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   00005C   7404         MOV       A,#0x4
   \   00005E   12....       LCALL     ?DEALLOC_XSTACK8
   \   000061   E9           MOV       A,R1
   \   000062   7054         JNZ       ??ZDSecMgrSaveTCLinkKey_2
   3658                  {
   3659                    pKeyData->txFrmCntr = TCLinkKeyFrmCntr[i].txFrmCntr;
   \   000064   85..82       MOV       DPL,?V2
   \   000067   85..83       MOV       DPH,?V3
   \   00006A   12....       LCALL     ?XLOAD_R0123
   \   00006D   85..82       MOV       DPL,?V6
   \   000070   85..83       MOV       DPH,?V7
   \   000073   12....       LCALL     ?XSTORE_R0123
   3660                    pKeyData->rxFrmCntr = TCLinkKeyFrmCntr[i].rxFrmCntr;
   \   000076   85..82       MOV       DPL,?V2
   \   000079   85..83       MOV       DPH,?V3
   \   00007C   A3           INC       DPTR
   \   00007D   A3           INC       DPTR
   \   00007E   A3           INC       DPTR
   \   00007F   A3           INC       DPTR
   \   000080   12....       LCALL     ?XLOAD_R0123
   \   000083   85..82       MOV       DPL,?V6
   \   000086   85..83       MOV       DPH,?V7
   \   000089   A3           INC       DPTR
   \   00008A   A3           INC       DPTR
   \   00008B   A3           INC       DPTR
   \   00008C   A3           INC       DPTR
   \   00008D   12....       LCALL     ?XSTORE_R0123
   3661          
   3662                    // Write the TC link key back to the NV
   3663                    osal_nv_write(ZCD_NV_TCLK_TABLE_START + i, 0,
   3664                                  sizeof(APSME_TCLKDevEntry_t), pKeyData);
   \   000090                ; Setup parameters for call to function osal_nv_write
   \   000090   78..         MOV       R0,#?V6
   \   000092   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000095   75..13       MOV       ?V2,#0x13
   \   000098   75..00       MOV       ?V3,#0x0
   \   00009B   78..         MOV       R0,#?V2
   \   00009D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000A0   7C00         MOV       R4,#0x0
   \   0000A2   7D00         MOV       R5,#0x0
   \   0000A4   EE           MOV       A,R6
   \   0000A5   FA           MOV       R2,A
   \   0000A6   EF           MOV       A,R7
   \   0000A7   FB           MOV       R3,A
   \   0000A8   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   0000AB   7404         MOV       A,#0x4
   \   0000AD   12....       LCALL     ?DEALLOC_XSTACK8
   3665          
   3666                    // clear the pending write flag
   3667                    TCLinkKeyFrmCntr[i].pendingFlag = FALSE;
   \   0000B0   85..82       MOV       DPL,?V4
   \   0000B3   85..83       MOV       DPH,?V5
   \   0000B6   E4           CLR       A
   \   0000B7   F0           MOVX      @DPTR,A
   3668                  }
   3669                }
   3670              }
   \                     ??ZDSecMgrSaveTCLinkKey_2:
   \   0000B8   05..         INC       ?V0
   \   0000BA   E5..         MOV       A,?V0
   \   0000BC   7002         JNZ       ??ZDSecMgrSaveTCLinkKey_3
   \   0000BE   05..         INC       ?V1
   \                     ??ZDSecMgrSaveTCLinkKey_3:
   \   0000C0   C3           CLR       C
   \   0000C1   9403         SUBB      A,#0x3
   \   0000C3   E5..         MOV       A,?V1
   \   0000C5   9400         SUBB      A,#0x0
   \   0000C7   5003         JNC       $+5
   \   0000C9   02....       LJMP      ??ZDSecMgrSaveTCLinkKey_1 & 0xFFFF
   3671          
   3672              osal_mem_free(pKeyData);
   \   0000CC                ; Setup parameters for call to function osal_mem_free
   \   0000CC   AA..         MOV       R2,?V6
   \   0000CE   AB..         MOV       R3,?V7
   \   0000D0   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   3673            }
   3674          }
   \                     ??ZDSecMgrSaveTCLinkKey_0:
   \   0000D3   02....       LJMP      ??Subroutine77_0 & 0xFFFF
   3675          
   3676          /******************************************************************************
   3677           * @fn          ZDSecMgrUpdateTCAddress
   3678           *
   3679           * @brief       Update Trust Center address and save to NV.
   3680           *
   3681           * @param       extAddr - [in] extended address or NULL if no TC protected
   3682           *
   3683           * @return      none
   3684           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3685          void ZDSecMgrUpdateTCAddress( uint8 *extAddr )
   \                     ZDSecMgrUpdateTCAddress:
   3686          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV       A,#-0x8
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   3687            uint8 noTCAddress[Z_EXTADDR_LEN] = { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF };
   \   00000A   90....       MOV       DPTR,#`?<Constant {255, 255, 255, 255, 255, 255, 255,`
   \   00000D   AC..         MOV       R4,?XSP + 0
   \   00000F   AD..         MOV       R5,?XSP + 1
   \   000011   7408         MOV       A,#0x8
   \   000013   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
   3688            APSME_SetRequest( apsTrustCenterAddress, 0, ( extAddr != NULL) ? extAddr : noTCAddress );
   \   000016   EA           MOV       A,R2
   \   000017   4B           ORL       A,R3
   \   000018   6006         JZ        ??ZDSecMgrUpdateTCAddress_0
   \   00001A   EA           MOV       A,R2
   \   00001B   FE           MOV       R6,A
   \   00001C   EB           MOV       A,R3
   \   00001D   FF           MOV       R7,A
   \   00001E   800C         SJMP      ??ZDSecMgrUpdateTCAddress_1
   \                     ??ZDSecMgrUpdateTCAddress_0:
   \   000020   A8..         MOV       R0,?XSP + 0
   \   000022   A9..         MOV       R1,?XSP + 1
   \   000024   88..         MOV       ?V0,R0
   \   000026   89..         MOV       ?V1,R1
   \   000028   AE..         MOV       R6,?V0
   \   00002A   AF..         MOV       R7,?V1
   \                     ??ZDSecMgrUpdateTCAddress_1:
   \   00002C                ; Setup parameters for call to function APSME_SetRequest
   \   00002C   EE           MOV       A,R6
   \   00002D   FC           MOV       R4,A
   \   00002E   EF           MOV       A,R7
   \   00002F   FD           MOV       R5,A
   \   000030   7A00         MOV       R2,#0x0
   \   000032   7B00         MOV       R3,#0x0
   \   000034   79AB         MOV       R1,#-0x55
   \   000036   12....       LCALL     `??APSME_SetRequest::?relay`; Banked call to: APSME_SetRequest
   3689            osal_cpyExtAddr( zgApsTrustCenterAddr, ( extAddr != NULL) ? extAddr : noTCAddress );
   \   000039   EE           MOV       A,R6
   \   00003A   FC           MOV       R4,A
   \   00003B   EF           MOV       A,R7
   \   00003C   FD           MOV       R5,A
   \   00003D                ; Setup parameters for call to function sAddrExtCpy
   \   00003D   7A..         MOV       R2,#zgApsTrustCenterAddr & 0xff
   \   00003F   7B..         MOV       R3,#(zgApsTrustCenterAddr >> 8) & 0xff
   \   000041   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   3690            
   3691          #if defined ( NV_RESTORE )
   3692            osal_nv_write( ZCD_NV_TRUSTCENTER_ADDR, 0, Z_EXTADDR_LEN, zgApsTrustCenterAddr );
   \   000044                ; Setup parameters for call to function osal_nv_write
   \   000044   75....       MOV       ?V0,#zgApsTrustCenterAddr & 0xff
   \   000047   75....       MOV       ?V1,#(zgApsTrustCenterAddr >> 8) & 0xff
   \   00004A   78..         MOV       R0,#?V0
   \   00004C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004F   75..08       MOV       ?V0,#0x8
   \   000052   75..00       MOV       ?V1,#0x0
   \   000055   78..         MOV       R0,#?V0
   \   000057   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00005A   7C00         MOV       R4,#0x0
   \   00005C   7D00         MOV       R5,#0x0
   \   00005E   7A71         MOV       R2,#0x71
   \   000060   7B00         MOV       R3,#0x0
   \   000062   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000065   7404         MOV       A,#0x4
   \   000067   12....       LCALL     ?DEALLOC_XSTACK8
   3693          #endif
   3694          }
   \   00006A   7408         MOV       A,#0x8
   \   00006C   02....       LJMP      ?Subroutine4 & 0xFFFF
   3695          
   3696          #if defined ( ZBA_FALLBACK_NWKKEY )
   3697          /******************************************************************************
   3698           * @fn          ZDSecMgrFallbackNwkKey
   3699           *
   3700           * @brief       Use the ZBA fallback network key.
   3701           *
   3702           * @param       none
   3703           *
   3704           * @return      none
   3705           */
   3706          void ZDSecMgrFallbackNwkKey( void )
   3707          {
   3708            if ( !_NIB.nwkKeyLoaded )
   3709            {
   3710              uint8 fallbackKey[SEC_KEY_LEN];
   3711          
   3712              ZDSecMgrReadKeyFromNv( ZCD_NV_PRECFGKEY, fallbackKey );
   3713              SSP_UpdateNwkKey( fallbackKey, 0);
   3714              SSP_SwitchNwkKey( 0 );
   3715          
   3716              // clear local copy of key
   3717              osal_memset( fallbackKey, 0x00, SEC_KEY_LEN );
   3718          
   3719              // handle next step in authentication process
   3720              ZDSecMgrAuthNwkKey();
   3721            }
   3722          }
   3723          #endif // defined ( ZBA_FALLBACK_NWKKEY )
   3724          
   3725          #if defined ( NV_RESTORE )
   3726          /******************************************************************************
   3727           * @fn          ZDSecMgrClearNVKeyValues
   3728           *
   3729           * @brief       If NV_RESTORE is enabled and the status of the network needs
   3730           *              default values this fuction clears ZCD_NV_NWKKEY,
   3731           *              ZCD_NV_NWK_ACTIVE_KEY_INFO and ZCD_NV_NWK_ALTERN_KEY_INFO link
   3732           *
   3733           * @param       none
   3734           *
   3735           * @return      none
   3736           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3737          void ZDSecMgrClearNVKeyValues(void)
   \                     ZDSecMgrClearNVKeyValues:
   3738          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 38
   \   000005   74DA         MOV       A,#-0x26
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   3739            nwkActiveKeyItems keyItems;
   3740            nwkKeyDesc nwkKey;
   3741          
   3742            osal_memset(&keyItems, 0x00, sizeof(nwkActiveKeyItems));
   \   00000A                ; Setup parameters for call to function osal_memset
   \   00000A   7C15         MOV       R4,#0x15
   \   00000C   7D00         MOV       R5,#0x0
   \   00000E   7900         MOV       R1,#0x0
   \   000010   7411         MOV       A,#0x11
   \   000012   12....       LCALL     ?XSTACK_DISP101_8
   \   000015   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   3743          
   3744            osal_nv_write(ZCD_NV_NWKKEY, 0, sizeof(nwkActiveKeyItems), &keyItems);
   \   000018                ; Setup parameters for call to function osal_nv_write
   \   000018   7411         MOV       A,#0x11
   \   00001A   12....       LCALL     ?XSTACK_DISP100_8
   \   00001D   88..         MOV       ?V0,R0
   \   00001F   89..         MOV       ?V1,R1
   \   000021   78..         MOV       R0,#?V0
   \   000023   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000026   75..15       MOV       ?V0,#0x15
   \   000029   75..00       MOV       ?V1,#0x0
   \   00002C   78..         MOV       R0,#?V0
   \   00002E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000031   7C00         MOV       R4,#0x0
   \   000033   7D00         MOV       R5,#0x0
   \   000035   7A82         MOV       R2,#-0x7e
   \   000037   7B00         MOV       R3,#0x0
   \   000039   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   00003C   7404         MOV       A,#0x4
   \   00003E   12....       LCALL     ?DEALLOC_XSTACK8
   3745          
   3746            // Initialize NV items for NWK Active and Alternate keys.
   3747            osal_memset( &nwkKey, 0x00, sizeof(nwkKeyDesc) );
   \   000041                ; Setup parameters for call to function osal_memset
   \   000041   7C11         MOV       R4,#0x11
   \   000043   7D00         MOV       R5,#0x0
   \   000045   7900         MOV       R1,#0x0
   \   000047   AA..         MOV       R2,?XSP + 0
   \   000049   AB..         MOV       R3,?XSP + 1
   \   00004B   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   3748          
   3749            osal_nv_write(ZCD_NV_NWK_ACTIVE_KEY_INFO, 0, sizeof(nwkKeyDesc), &nwkKey);
   \   00004E                ; Setup parameters for call to function osal_nv_write
   \   00004E   A8..         MOV       R0,?XSP + 0
   \   000050   A9..         MOV       R1,?XSP + 1
   \   000052   88..         MOV       ?V0,R0
   \   000054   89..         MOV       ?V1,R1
   \   000056   78..         MOV       R0,#?V0
   \   000058   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00005B   75..11       MOV       ?V0,#0x11
   \   00005E   75..00       MOV       ?V1,#0x0
   \   000061   78..         MOV       R0,#?V0
   \   000063   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000066   7C00         MOV       R4,#0x0
   \   000068   7D00         MOV       R5,#0x0
   \   00006A   7A3A         MOV       R2,#0x3a
   \   00006C   7B00         MOV       R3,#0x0
   \   00006E   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000071   7404         MOV       A,#0x4
   \   000073   12....       LCALL     ?DEALLOC_XSTACK8
   3750          
   3751            osal_nv_write(ZCD_NV_NWK_ALTERN_KEY_INFO, 0, sizeof(nwkKeyDesc), &nwkKey);
   \   000076                ; Setup parameters for call to function osal_nv_write
   \   000076   A8..         MOV       R0,?XSP + 0
   \   000078   A9..         MOV       R1,?XSP + 1
   \   00007A   88..         MOV       ?V0,R0
   \   00007C   89..         MOV       ?V1,R1
   \   00007E   78..         MOV       R0,#?V0
   \   000080   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000083   75..11       MOV       ?V0,#0x11
   \   000086   75..00       MOV       ?V1,#0x0
   \   000089   78..         MOV       R0,#?V0
   \   00008B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00008E   7C00         MOV       R4,#0x0
   \   000090   7D00         MOV       R5,#0x0
   \   000092   7A3B         MOV       R2,#0x3b
   \   000094   7B00         MOV       R3,#0x0
   \   000096   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000099   7404         MOV       A,#0x4
   \   00009B   12....       LCALL     ?DEALLOC_XSTACK8
   3752          }
   \   00009E   7426         MOV       A,#0x26
   \   0000A0   02....       LJMP      ?Subroutine4 & 0xFFFF

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for requestNewTrustCenterLinkKey`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for requestLinkKeyTimeout>`:
   \   000000   88130000     DD 5000

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ZDSecMgrAppKeyType>`:
   \   000000   03           DB 3

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrAddrStore::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrAddrStore

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrExtAddrStore::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrExtAddrStore

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrExtAddrLookup::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrExtAddrLookup

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrAddrClear::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrAddrClear

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrEntryInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrEntryInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrEntryLookup::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrEntryLookup

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrEntryLookupAMI::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrEntryLookupAMI

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrEntryLookupExt::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrEntryLookupExt

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrEntryLookupExtGetIndex::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrEntryLookupExtGetIndex

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrEntryLookupAMIGetIndex::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrEntryLookupAMIGetIndex

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrEntryFree::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrEntryFree

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrEntryNew::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrEntryNew

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrAppKeyGet::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrAppKeyGet

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrAppKeyReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrAppKeyReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrTclkReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrTclkReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrAppConfKeyReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrAppConfKeyReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrSendNwkKey::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrSendNwkKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrDeviceRemoveByExtAddr::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrDeviceRemoveByExtAddr

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrDeviceRemove::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrDeviceRemove

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrDeviceValidateRM::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrDeviceValidateRM

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrDeviceValidate::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrDeviceValidate

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrDeviceJoin::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrDeviceJoin

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrDeviceJoinDirect::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrDeviceJoinDirect

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrDeviceJoinFwd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrDeviceJoinFwd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrDeviceNew::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrDeviceNew

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrAssocDeviceAuth::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrAssocDeviceAuth

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrAuthNwkKey::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrAuthNwkKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrConfig::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrConfig

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrPermitJoining::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrPermitJoining

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrPermitJoiningTimeout::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrPermitJoiningTimeout

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrNewDeviceEvent::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrNewDeviceEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrTCExtAddrCheck::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrTCExtAddrCheck

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrTCDataLoad::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrTCDataLoad

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrTransportKeyInd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrTransportKeyInd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrUpdateDeviceInd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrUpdateDeviceInd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrRemoveDeviceInd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrRemoveDeviceInd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrRequestKeyInd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrRequestKeyInd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrVerifyKeyInd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrVerifyKeyInd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrSwitchKeyInd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrSwitchKeyInd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrGenerateSeed::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrGenerateSeed

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrGenerateKeyFromSeed::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrGenerateKeyFromSeed

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrGenerateRndKey::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrGenerateRndKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrRequestAppKey::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrRequestAppKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrSetupPartner::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrSetupPartner

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??APSME_LinkKeySet::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    APSME_LinkKeySet

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrAuthenticationSet::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrAuthenticationSet

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrAuthenticationCheck::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrAuthenticationCheck

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??APSME_LinkKeyNVIdGet::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    APSME_LinkKeyNVIdGet

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??APSME_IsLinkKeyValid::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    APSME_IsLinkKeyValid

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??APSME_KeyFwdToChild::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    APSME_KeyFwdToChild

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrAddLinkKey::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrAddLinkKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrInitNV::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrInitNV

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrWriteNV::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrWriteNV

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrRestoreFromNV::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrRestoreFromNV

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrSetDefaultNV::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrSetDefaultNV

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrAPSRemove::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrAPSRemove

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??APSME_TCLinkKeyInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    APSME_TCLinkKeyInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??APSME_TCLinkKeySync::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    APSME_TCLinkKeySync

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??APSME_TCLinkKeyLoad::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    APSME_TCLinkKeyLoad

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??APSME_IsDefaultTCLK::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    APSME_IsDefaultTCLK

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrNwkKeyInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrNwkKeyInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrReadKeyFromNv::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrReadKeyFromNv

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrApsLinkKeyInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrApsLinkKeyInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrInitNVKeyTables::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrInitNVKeyTables

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrSaveApsLinkKey::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrSaveApsLinkKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrSaveTCLinkKey::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrSaveTCLinkKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrUpdateTCAddress::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrUpdateTCAddress

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrClearNVKeyValues::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrClearNVKeyValues

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {255, 255, 255, 255, 255, 255, 255,`:
   \   000000   FF           DB 255
   \   000001   FF           DB 255
   \   000002   FF           DB 255
   \   000003   FF           DB 255
   \   000004   FF           DB 255
   \   000005   FF           DB 255
   \   000006   FF           DB 255
   \   000007   FF           DB 255

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3e9:
   \   000000   E9030000     DD 1001

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_b:
   \   000000   0B000000     DD 11

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_1:
   \   000000   01000000     DD 1

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_a:
   \   000000   0A000000     DD 10
   3753          #endif // defined ( NV_RESTORE )
   3754          
   3755          /******************************************************************************
   3756          ******************************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      2      0   APSME_IsDefaultTCLK
        2      0   -> osal_isbufset
      0     37   APSME_IsLinkKeyValid
        0     33   -> APSME_LinkKeyNVIdGet
        0     33   -> osal_mem_alloc
        0     33   -> osal_mem_free
        0     36   -> osal_memcmp
        0     33   -> osal_memset
        0     37   -> osal_nv_read
      0     10   APSME_KeyFwdToChild
        0     10   -> AssocGetWithExt
        0     10   -> ZDSecMgrAssocDeviceAuth
      0     44   APSME_LinkKeyNVIdGet
        0     11   -> ZDSecMgrEntryLookupExt
      0     77   APSME_LinkKeySet
        0     21   -> ZDSecMgrEntryLookupExtGetIndex
        0     19   -> osal_mem_alloc
        0     19   -> osal_mem_free
        0     22   -> osal_memcpy
        0     19   -> osal_memset
        0     23   -> osal_nv_read
        0     23   -> osal_nv_write
      0     52   APSME_TCLinkKeyInit
        0     39   -> APSME_EraseICEntry
        0     39   -> osal_memset
        0     41   -> osal_nv_item_init
        0     43   -> osal_nv_read
        0     43   -> osal_nv_write
      1     55   APSME_TCLinkKeyLoad
        0     53   -> APSME_SearchTCLinkKeyEntry
        0     51   -> AddrMgrEntryLookupNwk
        0     51   -> AddrMgrEntryRelease
        0     51   -> AddrMgrExtAddrValid
        0     54   -> osal_memcpy
        0     51   -> osal_memset
        0     55   -> osal_nv_write
        0     51   -> osal_rand
        0     51   -> osal_set_event
      1     49   APSME_TCLinkKeySync
        0     46   -> APSME_LookupExtAddr
        0     48   -> APSME_SearchTCLinkKeyEntry
        0     46   -> AddrMgrExtAddrValid
        0     46   -> bdb_doTrustCenterRequireKeyExchange
        0     49   -> osal_memcpy
        0     46   -> osal_memset
      2     10   ZDSecMgrAPSRemove
        2      8   -> ZDSecMgrDeviceRemove
      0     18   ZDSecMgrAddLinkKey
        0     14   -> APSME_LinkKeySet
        0     16   -> ZDSecMgrAddrStore
        0     14   -> ZDSecMgrAuthenticationSet
        0     14   -> ZDSecMgrEntryLookupAMI
        0     14   -> ZDSecMgrEntryNew
        0     14   -> ZDSecMgrWriteNV
      0     57   ZDSecMgrAddrClear
        0     24   -> AddrMgrEntryRelease
        0     24   -> ZDSecMgrExtAddrLookup
      0     78   ZDSecMgrAddrStore
        0     22   -> AddrMgrEntryUpdate
        0     22   -> AddrMgrExtAddrSet
      0      0   ZDSecMgrAppConfKeyReq
      3     59   ZDSecMgrAppKeyGet
        2      0   -> SSP_GetTrueRand
      0     59   ZDSecMgrAppKeyReq
        0     51   -> APSME_LookupExtAddr
        0     51   -> APSME_LookupNwkAddr
        0     51   -> APSME_TransportKeyReq
        0     59   -> ZDSecMgrAppKeyGet
        0     51   -> osal_memset
      0     49   ZDSecMgrApsLinkKeyInit
        0     36   -> osal_memset
        0     38   -> osal_nv_item_init
        0     40   -> osal_nv_write
      2     33   ZDSecMgrAssocDeviceAuth
      2     54   ZDSecMgrAuthNwkKey
        2      0   -> osal_set_event
      0     22   ZDSecMgrAuthenticationCheck
        0     22   -> APSME_GetRequest
        0     22   -> AddrMgrExtAddrLookup
        0     22   -> NLME_GetExtAddr
        0     22   -> ZDSecMgrEntryLookupExt
        0     22   -> ZDSecMgrExtAddrLookup
        0     22   -> sAddrExtCmp
      1     25   ZDSecMgrAuthenticationSet
        0     11   -> ZDSecMgrEntryLookupExt
      0     52   ZDSecMgrClearNVKeyValues
        0     48   -> osal_memset
        0     52   -> osal_nv_write
      2      0   ZDSecMgrConfig
        2      0   -> APSME_SecurityCM_ED
        2      0   -> SSP_Init
      0     65   ZDSecMgrDeviceJoin
        0     30   -> ZDSecMgrAddrClear
        0     32   -> ZDSecMgrAddrStore
        0     30   -> ZDSecMgrDeviceRemove
        0     30   -> ZDSecMgrDeviceValidate
        0     30   -> ZDSecMgrSendNwkKey
        0     33   -> osal_memcpy
      1     36   ZDSecMgrDeviceJoinDirect
        0     34   -> APSME_SearchTCLinkKeyEntry
        0     32   -> AssocGetWithShort
        0     32   -> ZDSecMgrAssocDeviceAuth
        0     32   -> ZDSecMgrDeviceJoin
        0     36   -> osal_nv_write
      0     29   ZDSecMgrDeviceJoinFwd
        0     27   -> APSME_GetRequest
        0     29   -> APSME_SearchTCLinkKeyEntry
        0     27   -> APSME_UpdateDeviceReq
        0     27   -> AssocGetWithShort
        0     27   -> ZDSecMgrAssocDeviceAuth
      2     33   ZDSecMgrDeviceNew
        2      0   -> ZDSecMgrDeviceJoinFwd
      0     61   ZDSecMgrDeviceRemove
        0     29   -> APSME_GetRequest
        0     29   -> APSME_RemoveDeviceReq
        0     31   -> APSME_SearchTCLinkKeyEntry
        0     29   -> AssocGetWithExt
        0     29   -> NLME_GetShortAddr
        0     29   -> NLME_LeaveReq
      0     11   ZDSecMgrDeviceRemoveByExtAddr
        0     11   -> ZDSecMgrEntryFree
        0     11   -> ZDSecMgrEntryLookupExt
      2     30   ZDSecMgrDeviceValidate
        2      0   -> ZDSecMgrDeviceValidateRM
      2      0   ZDSecMgrDeviceValidateRM
      0     35   ZDSecMgrEntryFree
        0     20   -> ZDSecMgrEntryLookupAMIGetIndex
        0     20   -> osal_mem_alloc
        0     20   -> osal_mem_free
        0     20   -> osal_memset
        0     24   -> osal_nv_read
        0     24   -> osal_nv_write
      0     18   ZDSecMgrEntryInit
        0      9   -> ZDSecMgrRestoreFromNV
        0      9   -> osal_mem_alloc
      0     22   ZDSecMgrEntryLookup
        0     22   -> AddrMgrEntryLookupNwk
      0     63   ZDSecMgrEntryLookupAMI
      0     29   ZDSecMgrEntryLookupAMIGetIndex
      0     33   ZDSecMgrEntryLookupExt
        0     11   -> ZDSecMgrEntryLookupAMI
        0     11   -> ZDSecMgrExtAddrLookup
      0     32   ZDSecMgrEntryLookupExtGetIndex
        0     11   -> ZDSecMgrExtAddrLookup
      0     63   ZDSecMgrEntryNew
      0     76   ZDSecMgrExtAddrLookup
        0     22   -> AddrMgrEntryLookupExt
        0     22   -> AddrMgrExtAddrSet
      0     24   ZDSecMgrExtAddrStore
        0     22   -> AddrMgrEntryUpdate
        0     22   -> AddrMgrExtAddrSet
      0    107   ZDSecMgrGenerateKeyFromSeed
        0     37   -> osal_memcpy
        0     38   -> osal_nv_read
      1     38   ZDSecMgrGenerateRndKey
        0     12   -> osal_rand
      0     30   ZDSecMgrGenerateSeed
        0     26   -> ZDSecMgrGenerateRndKey
        0     26   -> osal_memset
        0     28   -> osal_nv_item_init
        0     30   -> osal_nv_write
      0      9   ZDSecMgrInit
        0      9   -> APSME_SecurityCM_ED
        0      9   -> SSP_Init
        0      9   -> ZDSecMgrEntryInit
      0     16   ZDSecMgrInitNV
        0     14   -> osal_nv_item_init
        0     16   -> osal_nv_write
      0      9   ZDSecMgrInitNVKeyTables
        0      9   -> APSME_TCLinkKeyInit
        0      9   -> ZDSecMgrApsLinkKeyInit
        0      9   -> ZDSecMgrNwkKeyInit
      1     33   ZDSecMgrNewDeviceEvent
        0     33   -> AddrMgrEntryGet
        0     33   -> AssocGetWithShort
        0     33   -> AssocRemove
        0     33   -> NLME_GetShortAddr
        0     33   -> ZDSecMgrAddrClear
        0     33   -> ZDSecMgrAssocDeviceAuth
        0     33   -> ZDSecMgrDeviceNew
      0     75   ZDSecMgrNwkKeyInit
        0     62   -> osal_memset
        0     64   -> osal_nv_item_init
        0     66   -> osal_nv_write
        0     62   -> zgReadStartupOptions
      2      0   ZDSecMgrPermitJoining
      2      0   ZDSecMgrPermitJoiningTimeout
      0     73   ZDSecMgrReadKeyFromNv
        0     18   -> osal_memcpy
        0     19   -> osal_nv_read
      0     17   ZDSecMgrRemoveDeviceInd
        0     17   -> APSME_LookupNwkAddr
        0     17   -> NLME_GetShortAddr
        0     17   -> ZDSecMgrDeviceRemove
      2      4   ZDSecMgrRequestAppKey
        2      4   -> APSME_RequestKeyReq
      2      0   ZDSecMgrRequestKeyInd
        2      0   -> ZDSecMgrAppKeyReq
        2      0   -> ZDSecMgrTclkReq
      0     33   ZDSecMgrRestoreFromNV
        0     20   -> osal_mem_alloc
        0     20   -> osal_mem_free
        0     20   -> osal_memset
        0     24   -> osal_nv_read
        0     24   -> osal_nv_write
      0     22   ZDSecMgrSaveApsLinkKey
        0     18   -> osal_mem_alloc
        0     18   -> osal_mem_free
        0     18   -> osal_memset
        0     22   -> osal_nv_read
        0     22   -> osal_nv_write
      0     22   ZDSecMgrSaveTCLinkKey
        0     18   -> osal_mem_alloc
        0     18   -> osal_mem_free
        0     22   -> osal_nv_read
        0     22   -> osal_nv_write
      1     80   ZDSecMgrSendNwkKey
        0     46   -> APSME_TransportKeyReq
        0     46   -> NLME_GetShortAddr
        0     50   -> NLME_ReadNwkKeyInfo
        0     46   -> osal_memset
      0     23   ZDSecMgrSetDefaultNV
        0     19   -> osal_mem_alloc
        0     19   -> osal_mem_free
        0     19   -> osal_memset
        0     23   -> osal_nv_write
      0     25   ZDSecMgrSetupPartner
        0     25   -> AddrMgrEntryUpdate
        0     25   -> AddrMgrExtAddrSet
        0     25   -> AddrMgrExtAddrValid
        0     25   -> ZDP_IEEEAddrReq
        0     25   -> ZDP_NwkAddrReq
      2      0   ZDSecMgrSwitchKeyInd
        2      0   -> SSP_SwitchNwkKey
        2      0   -> ZDApp_NVUpdate
      0     81   ZDSecMgrTCDataLoad
        0     25   -> APSME_IsDistributedSecurity
        0     25   -> AddrMgrEntryLookupExt
        0     27   -> ZDSecMgrAddrStore
        0     25   -> sAddrExtCpy
      0     17   ZDSecMgrTCExtAddrCheck
        0     17   -> APSME_GetRequest
        0     17   -> sAddrExtCmp
      0     71   ZDSecMgrTclkReq
        0     69   -> APSME_LookupExtAddr
        0     69   -> APSME_LookupNwkAddr
        0     71   -> APSME_SearchTCLinkKeyEntry
        0     69   -> APSME_TransportKeyReq
        0     69   -> ZDSecMgrGenerateKeyFromSeed
        0     69   -> osal_memset
      0     58   ZDSecMgrTransportKeyInd
        0     54   -> APSME_EraseICEntry
        0     54   -> APSME_LinkKeySet
        0     56   -> APSME_SearchTCLinkKeyEntry
        0     54   -> SSP_SwitchNwkKey
        0     54   -> SSP_UpdateNwkKey
        0     54   -> ZDP_NwkAddrReq
        0     56   -> ZDSecMgrAddrStore
        0     54   -> ZDSecMgrAuthNwkKey
        0     54   -> ZDSecMgrEntryLookupAMI
        0     54   -> ZDSecMgrEntryNew
        0     54   -> ZDSecMgrExtAddrLookup
        0     54   -> ZDSecMgrReadKeyFromNv
        0     54   -> ZDSecMgrTCDataLoad
        0     54   -> ZDSecMgrUpdateTCAddress
        0     54   -> ZDSecMgrWriteNV
        0     54   -> bdb_tcLinkKeyExchangeAttempt
        0     54   -> osal_memset
        0     56   -> osal_nv_item_init
        0     58   -> osal_nv_write
      2      8   ZDSecMgrUpdateDeviceInd
        2      8   -> ZDSecMgrDeviceJoin
      0     76   ZDSecMgrUpdateTCAddress
        0     18   -> APSME_SetRequest
        0     22   -> osal_nv_write
        0     18   -> sAddrExtCpy
      0      0   ZDSecMgrVerifyKeyInd
      0     72   ZDSecMgrWriteNV
        0     18   -> osal_nv_write


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       8  ?<Constant {255, 255, 255, 255, 255, 255, 255,
       1  ?<Initializer for ZDSecMgrAppKeyType>
       4  ?<Initializer for requestLinkKeyTimeout>
       1  ?<Initializer for requestNewTrustCenterLinkKey
       5  ??Subroutine57_0
       8  ??Subroutine58_0
       6  ??Subroutine59_0
       9  ??Subroutine60_0
       2  ??Subroutine61_0
       6  ??Subroutine62_0
       3  ??Subroutine63_0
       7  ??Subroutine64_0
       6  ??Subroutine65_0
       4  ??Subroutine66_0
       5  ??Subroutine67_0
       3  ??Subroutine68_0
       5  ??Subroutine69_0
       5  ??Subroutine70_0
       5  ??Subroutine71_0
       5  ??Subroutine72_0
       6  ??Subroutine73_0
       2  ??Subroutine74_0
       1  ??Subroutine75_0
       4  ??Subroutine76_0
       5  ??Subroutine77_0
       8  ??Subroutine78_0
       2  ?Subroutine0
       8  ?Subroutine1
       4  ?Subroutine10
      13  ?Subroutine11
      21  ?Subroutine12
       6  ?Subroutine13
      10  ?Subroutine14
      13  ?Subroutine15
       4  ?Subroutine16
       9  ?Subroutine17
      15  ?Subroutine18
       8  ?Subroutine19
       2  ?Subroutine2
       3  ?Subroutine20
       6  ?Subroutine21
       5  ?Subroutine22
       5  ?Subroutine23
       3  ?Subroutine24
       6  ?Subroutine25
      10  ?Subroutine26
      11  ?Subroutine27
       6  ?Subroutine28
      14  ?Subroutine29
       3  ?Subroutine3
       4  ?Subroutine30
       8  ?Subroutine31
       6  ?Subroutine32
      14  ?Subroutine33
       4  ?Subroutine34
       9  ?Subroutine35
       9  ?Subroutine36
      16  ?Subroutine37
      22  ?Subroutine38
       1  ?Subroutine39
       3  ?Subroutine4
       7  ?Subroutine40
      17  ?Subroutine41
      12  ?Subroutine42
      27  ?Subroutine43
      15  ?Subroutine44
      18  ?Subroutine45
      10  ?Subroutine46
       1  ?Subroutine47
       6  ?Subroutine48
       6  ?Subroutine49
       3  ?Subroutine5
       6  ?Subroutine50
       9  ?Subroutine51
       7  ?Subroutine52
       6  ?Subroutine53
       9  ?Subroutine54
      30  ?Subroutine55
      13  ?Subroutine56
       3  ?Subroutine6
       5  ?Subroutine7
       5  ?Subroutine8
       3  ?Subroutine9
      14  APSME_IsDefaultTCLK
       6  APSME_IsDefaultTCLK::?relay
     176  APSME_IsLinkKeyValid
       6  APSME_IsLinkKeyValid::?relay
      58  APSME_KeyFwdToChild
       6  APSME_KeyFwdToChild::?relay
      55  APSME_LinkKeyNVIdGet
       6  APSME_LinkKeyNVIdGet::?relay
     293  APSME_LinkKeySet
       6  APSME_LinkKeySet::?relay
     357  APSME_TCLinkKeyInit
       6  APSME_TCLinkKeyInit::?relay
     573  APSME_TCLinkKeyLoad
       6  APSME_TCLinkKeyLoad::?relay
     512  APSME_TCLinkKeySync
       6  APSME_TCLinkKeySync::?relay
      27  ApsLinkKeyFrmCntr
      27  TCLinkKeyFrmCntr
      19  TrustCenterLinkKey
      84  ZDSecMgrAPSRemove
       6  ZDSecMgrAPSRemove::?relay
     122  ZDSecMgrAddLinkKey
       6  ZDSecMgrAddLinkKey::?relay
      62  ZDSecMgrAddrClear
       6  ZDSecMgrAddrClear::?relay
      73  ZDSecMgrAddrStore
       6  ZDSecMgrAddrStore::?relay
       3  ZDSecMgrAppConfKeyReq
       6  ZDSecMgrAppConfKeyReq::?relay
      42  ZDSecMgrAppKeyGet
       6  ZDSecMgrAppKeyGet::?relay
     270  ZDSecMgrAppKeyReq
       6  ZDSecMgrAppKeyReq::?relay
       1  ZDSecMgrAppKeyType
     120  ZDSecMgrApsLinkKeyInit
       6  ZDSecMgrApsLinkKeyInit::?relay
      23  ZDSecMgrAssocDeviceAuth
       6  ZDSecMgrAssocDeviceAuth::?relay
      26  ZDSecMgrAuthNwkKey
       6  ZDSecMgrAuthNwkKey::?relay
     113  ZDSecMgrAuthenticationCheck
       6  ZDSecMgrAuthenticationCheck::?relay
      31  ZDSecMgrAuthenticationSet
       6  ZDSecMgrAuthenticationSet::?relay
     163  ZDSecMgrClearNVKeyValues
       6  ZDSecMgrClearNVKeyValues::?relay
      12  ZDSecMgrConfig
       6  ZDSecMgrConfig::?relay
     251  ZDSecMgrDeviceJoin
       6  ZDSecMgrDeviceJoin::?relay
     210  ZDSecMgrDeviceJoinDirect
       6  ZDSecMgrDeviceJoinDirect::?relay
     247  ZDSecMgrDeviceJoinFwd
       6  ZDSecMgrDeviceJoinFwd::?relay
       9  ZDSecMgrDeviceNew
       6  ZDSecMgrDeviceNew::?relay
     312  ZDSecMgrDeviceRemove
       6  ZDSecMgrDeviceRemove::?relay
      35  ZDSecMgrDeviceRemoveByExtAddr
       6  ZDSecMgrDeviceRemoveByExtAddr::?relay
      24  ZDSecMgrDeviceValidate
       6  ZDSecMgrDeviceValidate::?relay
      17  ZDSecMgrDeviceValidateRM
       6  ZDSecMgrDeviceValidateRM::?relay
       2  ZDSecMgrEntries
     364  ZDSecMgrEntryFree
       6  ZDSecMgrEntryFree::?relay
      74  ZDSecMgrEntryInit
       6  ZDSecMgrEntryInit::?relay
      98  ZDSecMgrEntryLookup
       6  ZDSecMgrEntryLookup::?relay
      67  ZDSecMgrEntryLookupAMI
       6  ZDSecMgrEntryLookupAMI::?relay
      63  ZDSecMgrEntryLookupAMIGetIndex
       6  ZDSecMgrEntryLookupAMIGetIndex::?relay
      59  ZDSecMgrEntryLookupExt
       6  ZDSecMgrEntryLookupExt::?relay
      92  ZDSecMgrEntryLookupExtGetIndex
       6  ZDSecMgrEntryLookupExtGetIndex::?relay
     114  ZDSecMgrEntryNew
       6  ZDSecMgrEntryNew::?relay
      72  ZDSecMgrExtAddrLookup
       6  ZDSecMgrExtAddrLookup::?relay
      73  ZDSecMgrExtAddrStore
       6  ZDSecMgrExtAddrStore::?relay
     235  ZDSecMgrGenerateKeyFromSeed
       6  ZDSecMgrGenerateKeyFromSeed::?relay
      54  ZDSecMgrGenerateRndKey
       6  ZDSecMgrGenerateRndKey::?relay
     101  ZDSecMgrGenerateSeed
       6  ZDSecMgrGenerateSeed::?relay
      17  ZDSecMgrInit
       6  ZDSecMgrInit::?relay
     111  ZDSecMgrInitNV
       6  ZDSecMgrInitNV::?relay
      23  ZDSecMgrInitNVKeyTables
       6  ZDSecMgrInitNVKeyTables::?relay
     198  ZDSecMgrNewDeviceEvent
       6  ZDSecMgrNewDeviceEvent::?relay
     474  ZDSecMgrNwkKeyInit
       6  ZDSecMgrNwkKeyInit::?relay
      31  ZDSecMgrPermitJoining
       6  ZDSecMgrPermitJoining::?relay
       1  ZDSecMgrPermitJoiningEnabled
       1  ZDSecMgrPermitJoiningTimed
      23  ZDSecMgrPermitJoiningTimeout
       6  ZDSecMgrPermitJoiningTimeout::?relay
     193  ZDSecMgrReadKeyFromNv
       6  ZDSecMgrReadKeyFromNv::?relay
      73  ZDSecMgrRemoveDeviceInd
       6  ZDSecMgrRemoveDeviceInd::?relay
      38  ZDSecMgrRequestAppKey
       6  ZDSecMgrRequestAppKey::?relay
      40  ZDSecMgrRequestKeyInd
       6  ZDSecMgrRequestKeyInd::?relay
     459  ZDSecMgrRestoreFromNV
       6  ZDSecMgrRestoreFromNV::?relay
     250  ZDSecMgrSaveApsLinkKey
       6  ZDSecMgrSaveApsLinkKey::?relay
     214  ZDSecMgrSaveTCLinkKey
       6  ZDSecMgrSaveTCLinkKey::?relay
     268  ZDSecMgrSendNwkKey
       6  ZDSecMgrSendNwkKey::?relay
     194  ZDSecMgrSetDefaultNV
       6  ZDSecMgrSetDefaultNV::?relay
     122  ZDSecMgrSetupPartner
       6  ZDSecMgrSetupPartner::?relay
      23  ZDSecMgrSwitchKeyInd
       6  ZDSecMgrSwitchKeyInd::?relay
       1  ZDSecMgrTCAuthenticated
      90  ZDSecMgrTCDataLoad
       6  ZDSecMgrTCDataLoad::?relay
       8  ZDSecMgrTCExtAddr
      38  ZDSecMgrTCExtAddrCheck
       6  ZDSecMgrTCExtAddrCheck::?relay
     247  ZDSecMgrTclkReq
       6  ZDSecMgrTclkReq::?relay
     586  ZDSecMgrTransportKeyInd
       6  ZDSecMgrTransportKeyInd::?relay
     107  ZDSecMgrUpdateDeviceInd
       6  ZDSecMgrUpdateDeviceInd::?relay
     111  ZDSecMgrUpdateTCAddress
       6  ZDSecMgrUpdateTCAddress::?relay
       3  ZDSecMgrVerifyKeyInd
       6  ZDSecMgrVerifyKeyInd::?relay
     176  ZDSecMgrWriteNV
       6  ZDSecMgrWriteNV::?relay
       4  __Constant_1
       4  __Constant_3e9
       4  __Constant_a
       4  __Constant_b
       1  gZDSECMGR_TC_ATTEMPT_DEFAULT_KEY
       2  gZDSECMGR_TC_DEVICE_IC_MAX
       2  gZDSECMGR_TC_DEVICE_MAX
       4  requestLinkKeyTimeout
       1  requestNewTrustCenterLinkKey

 
 10 473 bytes in segment BANKED_CODE
    414 bytes in segment BANK_RELAYS
      4 bytes in segment CODE_C
      6 bytes in segment XDATA_I
      6 bytes in segment XDATA_ID
     24 bytes in segment XDATA_ROM_C
     87 bytes in segment XDATA_Z
 
    424 bytes of CODE     memory
      8 bytes of CONST    memory (+ 16 bytes shared)
 10 473 bytes of HUGECODE memory
     93 bytes of XDATA    memory

Errors: none
Warnings: none
