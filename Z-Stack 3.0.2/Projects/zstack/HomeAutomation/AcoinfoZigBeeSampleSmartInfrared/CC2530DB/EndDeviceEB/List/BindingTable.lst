###############################################################################
#
# IAR C/C++ Compiler V10.10.1.4655 for 8051               21/Jul/2021  15:47:03
# Copyright 2004-2017 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Components\stack\nwk\BindingTable.c
#    Command line       =  
#        -f C:\Users\WenHao\AppData\Local\Temp\EWBFB2.tmp
#        ("D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Components\stack\nwk\BindingTable.c" -D CSTX_BOARD -D SECURE=1
#        -D TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D xPOWER_SAVING -D
#        NWK_AUTO_POLL -D xZTOOL_P1 -D xMT_TASK -D xMT_APP_FUNC -D xMT_SYS_FUNC
#        -D xMT_ZDO_FUNC -D xMT_ZDO_MGMT -D xMT_APP_CNF_FUNC -D
#        LCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D ZCL_IDENTIFY -D
#        ZCL_READ -D ZCL_DISCOVER -D ZCL_WRITE -D ZCL_BASIC -D
#        ZCL_REPORTING_DEVICE -D HAL_LED=TRUE -D HAL_UART=TRUE -D HAL_KEY=TRUE
#        -D ISR_KEYINTERRUPT -lC "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\EndDeviceEB\List"
#        -lA "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\EndDeviceEB\List"
#        --diag_suppress Pe001,Pa010 -o
#        "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\EndDeviceEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f
#        "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f
#        "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00100000 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000 -DENABLE_LED4_DISABLE_S1)
#        -f "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\Source\"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\Source\"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\stack\gp\"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes)
#    Locale             =  Chinese (Simplified)_China.936
#    List file          =  
#        D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\EndDeviceEB\List\BindingTable.lst
#    Object file        =  
#        D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\EndDeviceEB\Obj\BindingTable.r51
#
###############################################################################

D:\work\zigbee\ti_cc2530_zstack\Z-Stack 3.0.2\Components\stack\nwk\BindingTable.c
      1          /**************************************************************************************************
      2            Filename:       BindingTable.c
      3            Revised:        $Date: 2014-10-08 08:37:03 -0700 (Wed, 08 Oct 2014) $
      4            Revision:       $Revision: 40512 $
      5          
      6            Description:    Device binding table functions.
      7          
      8          
      9            Copyright 2004-2014 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License"). You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product. Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          #include "ZComDef.h"
     44          #include "OSAL.h"
     45          #include "OSAL_Nv.h"
     46          #include "nwk_globals.h"
     47          #include "AddrMgr.h"
     48          #include "BindingTable.h"
     49          #include "nwk_util.h"
     50          #include "bdb.h"
     51          #include "bdb_interface.h"
     52          #if BDB_REPORTING  
     53          #include "bdb_Reporting.h"
     54          #endif
     55          
     56          /*********************************************************************
     57           * MACROS
     58           */
     59          
     60          /*********************************************************************
     61           * CONSTANTS
     62           */
     63          #define NV_BIND_EMPTY   0xFF
     64          #define NV_BIND_REC_SIZE (gBIND_REC_SIZE)
     65          #define NV_BIND_ITEM_SIZE  (gBIND_REC_SIZE * gNWK_MAX_BINDING_ENTRIES)
     66          
     67          /*********************************************************************
     68           * TYPEDEFS
     69           */
     70          typedef struct
     71          {
     72            uint8        srcEP;
     73            uint16       dstIndex;
     74            uint8        dstEP;
     75            uint8        dstAddrMode;
     76            uint8        clusterIDs;
     77            uint16*      clusterIDList;
     78          } bindFields_t;
     79          
     80          /*********************************************************************
     81           * GLOBAL VARIABLES
     82           */
     83          #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1) 
     84          extern bdbGCB_BindNotification_t        pfnBindNotificationCB;
     85          #endif
     86          
     87          /*********************************************************************
     88           * LOCAL FUNCTIONS
     89           */
     90          void BindAddrMgrCB( uint8 update, AddrMgrEntry_t *entryOld,
     91                              AddrMgrEntry_t *entryNew );
     92          BindingEntry_t *bindFindEmpty( void );
     93          uint16 bindingAddrMgsHelperFind( zAddrType_t *addr );
     94          uint8 bindingAddrMgsHelperConvert( uint16 idx, zAddrType_t *addr );
     95          void bindAddrMgrLocalLoad( void );
     96          
     97          #if !defined ( BINDINGTABLE_NV_SINGLES )
     98            #if !defined ( DONT_UPGRADE_BIND )
     99              static uint8 BindCopyBackupToNewNV( uint16 dupLen, uint16 newLen );
    100              static uint8 BindUpgradeTableInNV( void );
    101            #endif
    102          #endif // !BINDINGTABLE_NV_SINGLES
    103          
    104          
    105          /*********************************************************************
    106           * LOCAL VARIABLES
    107           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    108          static uint8 bindAddrMgrLocalLoaded = FALSE;
   \                     bindAddrMgrLocalLoaded:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    109          
    110          /*********************************************************************
    111           * Function Pointers
    112           */
    113          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    114          BindingEntry_t *(*pbindAddEntry)( byte srcEpInt,
   \                     pbindAddEntry:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    115                                            zAddrType_t *dstAddr, byte dstEpInt,
    116                                            byte numClusterIds, uint16 *clusterIds ) = (void*)NULL;

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    117          uint16 (*pbindNumOfEntries)( void ) = (void*)NULL;
   \                     pbindNumOfEntries:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    118          void (*pbindRemoveDev)( zAddrType_t *Addr ) = (void*)NULL;
   \                     pbindRemoveDev:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    119          byte (*pBindInitNV)( void ) = (void*)NULL;
   \                     pBindInitNV:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    120          void (*pBindSetDefaultNV)( void ) = (void*)NULL;
   \                     pBindSetDefaultNV:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    121          uint16 (*pBindRestoreFromNV)( void ) = (void*)NULL;
   \                     pBindRestoreFromNV:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    122          void (*pBindWriteNV)( void ) = (void*)NULL;
   \                     pBindWriteNV:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    123          
    124          #if ( ADDRMGR_CALLBACK_ENABLED == 1 )
    125          /*********************************************************************
    126           * @fn      BindAddrMgrCB()
    127           *
    128           * @brief   Address Manager Callback function
    129           *
    130           * @param   update -
    131           * @param   entry -
    132           *
    133           * @return  pointer to
    134           */
    135          void BindAddrMgrCB( uint8 update, AddrMgrEntry_t *entryNew,
    136                              AddrMgrEntry_t *entryOld )
    137          {
    138            // Check for either deleted items or changed Extended (Duplicate) addresses
    139          }
    140          #endif // ( ADDRMGR_CALLBACK_ENABLED == 1 )
    141          
    142          /*********************************************************************
    143           * @fn      InitBindingTable()
    144           *
    145           * @brief
    146           *
    147           *   This function is used to initialise the binding table
    148           *
    149           * @param   none
    150           *
    151           * @return  none
    152           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    153          void InitBindingTable( void )
   \                     InitBindingTable:
    154          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    155            osal_memset( BindingTable, 0xFF, gBIND_REC_SIZE * gNWK_MAX_BINDING_ENTRIES );
   \   000005                ; Setup parameters for call to function osal_memset
   \   000005   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   000008   90....       MOV       DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   00000B   E4           CLR       A
   \   00000C   93           MOVC      A,@A+DPTR
   \   00000D   F5..         MOV       ?V0,A
   \   00000F   EC           MOV       A,R4
   \   000010   85..F0       MOV       B,?V0
   \   000013   A4           MUL       AB
   \   000014   FC           MOV       R4,A
   \   000015   A8F0         MOV       R0,B
   \   000017   85..F0       MOV       B,?V0
   \   00001A   ED           MOV       A,R5
   \   00001B   A4           MUL       AB
   \   00001C   28           ADD       A,R0
   \   00001D   FD           MOV       R5,A
   \   00001E   79FF         MOV       R1,#-0x1
   \   000020   7A..         MOV       R2,#BindingTable & 0xff
   \   000022   7B..         MOV       R3,#(BindingTable >> 8) & 0xff
   \   000024   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    156          
    157            pbindAddEntry = bindAddEntry;
   \   000027   90....       MOV       DPTR,#pbindAddEntry
   \   00002A   74..         MOV       A,#`??bindAddEntry::?relay` & 0xff
   \   00002C   F0           MOVX      @DPTR,A
   \   00002D   A3           INC       DPTR
   \   00002E   74..         MOV       A,#(`??bindAddEntry::?relay` >> 8) & 0xff
   \   000030   F0           MOVX      @DPTR,A
    158            pbindNumOfEntries = bindNumOfEntries;
   \   000031   90....       MOV       DPTR,#pbindNumOfEntries
   \   000034   74..         MOV       A,#`??bindNumOfEntries::?relay` & 0xff
   \   000036   F0           MOVX      @DPTR,A
   \   000037   A3           INC       DPTR
   \   000038   74..         MOV       A,#(`??bindNumOfEntries::?relay` >> 8) & 0xff
   \   00003A   F0           MOVX      @DPTR,A
    159            pbindRemoveDev = bindRemoveDev;
   \   00003B   90....       MOV       DPTR,#pbindRemoveDev
   \   00003E   74..         MOV       A,#`??bindRemoveDev::?relay` & 0xff
   \   000040   F0           MOVX      @DPTR,A
   \   000041   A3           INC       DPTR
   \   000042   74..         MOV       A,#(`??bindRemoveDev::?relay` >> 8) & 0xff
   \   000044   F0           MOVX      @DPTR,A
    160            pBindInitNV = BindInitNV;
   \   000045   90....       MOV       DPTR,#pBindInitNV
   \   000048   74..         MOV       A,#`??BindInitNV::?relay` & 0xff
   \   00004A   F0           MOVX      @DPTR,A
   \   00004B   A3           INC       DPTR
   \   00004C   74..         MOV       A,#(`??BindInitNV::?relay` >> 8) & 0xff
   \   00004E   F0           MOVX      @DPTR,A
    161            pBindSetDefaultNV = BindSetDefaultNV;
   \   00004F   90....       MOV       DPTR,#pBindSetDefaultNV
   \   000052   74..         MOV       A,#`??BindSetDefaultNV::?relay` & 0xff
   \   000054   F0           MOVX      @DPTR,A
   \   000055   A3           INC       DPTR
   \   000056   74..         MOV       A,#(`??BindSetDefaultNV::?relay` >> 8) & 0xff
   \   000058   F0           MOVX      @DPTR,A
    162            pBindRestoreFromNV = BindRestoreFromNV;
   \   000059   90....       MOV       DPTR,#pBindRestoreFromNV
   \   00005C   74..         MOV       A,#`??BindRestoreFromNV::?relay` & 0xff
   \   00005E   F0           MOVX      @DPTR,A
   \   00005F   A3           INC       DPTR
   \   000060   74..         MOV       A,#(`??BindRestoreFromNV::?relay` >> 8) & 0xff
   \   000062   F0           MOVX      @DPTR,A
    163            pBindWriteNV = BindWriteNV;
   \   000063   90....       MOV       DPTR,#pBindWriteNV
   \   000066   74..         MOV       A,#`??BindWriteNV::?relay` & 0xff
   \   000068   F0           MOVX      @DPTR,A
   \   000069   A3           INC       DPTR
   \   00006A   74..         MOV       A,#(`??BindWriteNV::?relay` >> 8) & 0xff
   \   00006C   F0           MOVX      @DPTR,A
    164          
    165            bindAddrMgrLocalLoaded = FALSE;
   \   00006D   90....       MOV       DPTR,#bindAddrMgrLocalLoaded
   \   000070   E4           CLR       A
   \   000071   F0           MOVX      @DPTR,A
    166          
    167          #if ( ADDRMGR_CALLBACK_ENABLED == 1 )
    168            // Register with the address manager
    169            AddrMgrRegister( ADDRMGR_REG_BINDING, BindAddrMgrCB );
    170          #endif
    171          }
   \   000072   80..         SJMP      ??Subroutine29_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine29_0:
   \   000000   7F02         MOV       R7,#0x2
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   90....       MOV       DPTR,#gBIND_REC_SIZE
   \   000003   E4           CLR       A
   \   000004   93           MOVC      A,@A+DPTR
   \   000005   FC           MOV       R4,A
   \   000006   7401         MOV       A,#0x1
   \   000008   93           MOVC      A,@A+DPTR
   \   000009   FD           MOV       R5,A
   \   00000A   22           RET
    172          
    173          /*********************************************************************
    174           * @fn      bindFindEmpty()
    175           *
    176           * @brief   This function returns a pointer to an empty binding slot
    177           *
    178           * @param   none
    179           *
    180           * @return  pointer to binding table entry, NULL if not added
    181           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    182          BindingEntry_t *bindFindEmpty( void )
   \                     bindFindEmpty:
    183          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    184            bindTableIndex_t x;
    185          
    186            for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
   \   000004   7A00         MOV       R2,#0x0
   \   000006   8001         SJMP      ??bindFindEmpty_0
   \                     ??bindFindEmpty_1:
   \   000008   0A           INC       R2
   \                     ??bindFindEmpty_0:
   \   000009   90....       MOV       DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   00000C   E4           CLR       A
   \   00000D   93           MOVC      A,@A+DPTR
   \   00000E   F8           MOV       R0,A
   \   00000F   EA           MOV       A,R2
   \   000010   C3           CLR       C
   \   000011   98           SUBB      A,R0
   \   000012   500C         JNC       ??bindFindEmpty_2
    187            {
    188              // It's empty if the index is "Not Found"
    189              if ( BindingTable[x].srcEP == NV_BIND_EMPTY )
   \   000014   EA           MOV       A,R2
   \   000015   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   000018   70EE         JNZ       ??bindFindEmpty_1
    190              {
    191                return ( &BindingTable[x] );
   \   00001A   AA82         MOV       R2,DPL
   \   00001C   AB83         MOV       R3,DPH
   \   00001E   8004         SJMP      ??bindFindEmpty_3
    192              }
    193            }
    194          
    195            return ( (BindingEntry_t *)NULL );
   \                     ??bindFindEmpty_2:
   \   000020   7A00         MOV       R2,#0x0
   \   000022   7B00         MOV       R3,#0x0
   \                     ??bindFindEmpty_3:
   \   000024   02....       LJMP      ??Subroutine34_0 & 0xFFFF
    196          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   75F00E       MOV       B,#0xe
   \   000003   A4           MUL       AB
   \   000004   F8           MOV       R0,A
   \   000005   A9F0         MOV       R1,B
   \   000007                REQUIRE ??Subroutine30_0
   \   000007                ; // Fall through to label ??Subroutine30_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine30_0:
   \   000000   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   000003   F4           CPL       A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   74..         MOV       A,#BindingTable & 0xff
   \   000002   28           ADD       A,R0
   \   000003   F582         MOV       DPL,A
   \   000005   74..         MOV       A,#(BindingTable >> 8) & 0xff
   \   000007   39           ADDC      A,R1
   \   000008   F583         MOV       DPH,A
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine34_0:
   \   000000   D083         POP       DPH
   \   000002   D082         POP       DPL
   \   000004   02....       LJMP      ?BRET
    197          
    198          /*********************************************************************
    199           * @fn      bindNumOfEntries()
    200           *
    201           * @brief   This function returns the number of binding table entries.
    202           *          The return for this is the number of clusters in the
    203           *          table NOT the number of entries.
    204           *
    205           * @param   none
    206           *
    207           * @return  number of entries
    208           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    209          uint16 bindNumOfEntries( void )
   \                     bindNumOfEntries:
    210          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    211            bindTableIndex_t x;
    212            uint16 found;
    213          
    214            for ( found = 0, x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
   \   000004   7A00         MOV       R2,#0x0
   \   000006   7B00         MOV       R3,#0x0
   \   000008   7C00         MOV       R4,#0x0
   \   00000A   8014         SJMP      ??bindNumOfEntries_0
    215            {
    216              // It's empty if the index is "Not Found"
    217              if ( BindingTable[x].srcEP != NV_BIND_EMPTY )
   \                     ??bindNumOfEntries_1:
   \   00000C   EC           MOV       A,R4
   \   00000D   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   000010   600D         JZ        ??bindNumOfEntries_2
    218              {
    219                found += BindingTable[x].numClusterIds;
   \   000012   A3           INC       DPTR
   \   000013   A3           INC       DPTR
   \   000014   A3           INC       DPTR
   \   000015   A3           INC       DPTR
   \   000016   A3           INC       DPTR
   \   000017   E0           MOVX      A,@DPTR
   \   000018   F8           MOV       R0,A
   \   000019   EA           MOV       A,R2
   \   00001A   28           ADD       A,R0
   \   00001B   FA           MOV       R2,A
   \   00001C   E4           CLR       A
   \   00001D   3B           ADDC      A,R3
   \   00001E   FB           MOV       R3,A
    220              }
    221            }
   \                     ??bindNumOfEntries_2:
   \   00001F   0C           INC       R4
   \                     ??bindNumOfEntries_0:
   \   000020   90....       MOV       DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   000023   E4           CLR       A
   \   000024   93           MOVC      A,@A+DPTR
   \   000025   F8           MOV       R0,A
   \   000026   EC           MOV       A,R4
   \   000027   C3           CLR       C
   \   000028   98           SUBB      A,R0
   \   000029   40E1         JC        ??bindNumOfEntries_1
    222          
    223            return ( found );
   \   00002B   02....       LJMP      ??Subroutine34_0 & 0xFFFF
    224          }
    225          
    226          /*********************************************************************
    227           * @fn      bindCapacity()
    228           *
    229           * @brief   This function returns the number of binding entries
    230           *          possible and used.
    231           *
    232           * @param   maxEntries - pointer to a place to put the max entries
    233           * @param   usedEntries - pointer to a place to put the number
    234           *               of used entries
    235           *
    236           * @return  none
    237           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    238          void bindCapacity( uint16 *maxEntries, uint16 *usedEntries  )
   \                     bindCapacity:
    239          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    240            bindTableIndex_t x;
    241            bindTableIndex_t used;
    242          
    243            for ( used = 0, x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
   \   000005   7F00         MOV       R7,#0x0
   \   000007   7E00         MOV       R6,#0x0
   \   000009   8012         SJMP      ??bindCapacity_0
    244            {
    245              // It's empty if the index is "Not Found"
    246              if ( BindingTable[x].srcEP != NV_BIND_EMPTY )
   \                     ??bindCapacity_1:
   \   00000B   EE           MOV       A,R6
   \   00000C   75F00E       MOV       B,#0xe
   \   00000F   A4           MUL       AB
   \   000010   F8           MOV       R0,A
   \   000011   85F0..       MOV       ?V0,B
   \   000014   A9..         MOV       R1,?V0
   \   000016   12....       LCALL     ??Subroutine30_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   000019   6001         JZ        ??bindCapacity_2
    247              {
    248                used++;
   \   00001B   0F           INC       R7
    249              }
    250            }
   \                     ??bindCapacity_2:
   \   00001C   0E           INC       R6
   \                     ??bindCapacity_0:
   \   00001D   90....       MOV       DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   000020   E4           CLR       A
   \   000021   93           MOVC      A,@A+DPTR
   \   000022   F8           MOV       R0,A
   \   000023   EE           MOV       A,R6
   \   000024   C3           CLR       C
   \   000025   98           SUBB      A,R0
   \   000026   40E3         JC        ??bindCapacity_1
    251          
    252            *maxEntries = gNWK_MAX_BINDING_ENTRIES;
   \   000028   E4           CLR       A
   \   000029   93           MOVC      A,@A+DPTR
   \   00002A   8A82         MOV       DPL,R2
   \   00002C   8B83         MOV       DPH,R3
   \   00002E   F0           MOVX      @DPTR,A
   \   00002F   A3           INC       DPTR
   \   000030   E4           CLR       A
   \   000031   F0           MOVX      @DPTR,A
    253            *usedEntries = used;
   \   000032   EF           MOV       A,R7
   \   000033   8C82         MOV       DPL,R4
   \   000035   8D83         MOV       DPH,R5
   \   000037   F0           MOVX      @DPTR,A
   \   000038   A3           INC       DPTR
   \   000039   E4           CLR       A
   \   00003A   F0           MOVX      @DPTR,A
    254          }
   \   00003B   02....       LJMP      ?Subroutine2 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7F01         MOV       R7,#0x1
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    255          
    256          /*********************************************************************
    257           * @fn      bindAddEntry()
    258           *
    259           * @brief   This function is used to Add an entry to the binding table
    260           *
    261           * @param       srcEpInt - source endpoint
    262           * @param       dstAddr - destination Address
    263           * @param       dstEpInt - destination endpoint
    264           * @param       numClusterIds - number of cluster Ids in the list
    265           * @param       clusterIds - pointer to the Object ID list
    266           *
    267           * @return  pointer to binding table entry, NULL if not added
    268           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    269          BindingEntry_t *bindAddEntry( byte srcEpInt,
   \                     bindAddEntry:
    270                                        zAddrType_t *dstAddr, byte dstEpInt,
    271                                        byte numClusterIds, uint16 *clusterIds )
    272          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV       A,#-0xc
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V3,R1
   \   00000C   8A..         MOV       ?V0,R2
   \   00000E   8B..         MOV       ?V1,R3
   \   000010   8C..         MOV       ?V7,R4
   \   000012   8D..         MOV       ?V2,R5
    273            uint8            index;
    274            bindTableIndex_t bindIdx;
    275            BindingEntry_t*  entry;
    276            bindFields_t     fields;
    277            bdbBindNotificationData_t bindData;
    278          #ifdef BDB_REPORTING  
    279            uint8 bindAdded = FALSE;
    280          #endif
    281          
    282            //Zigbee Spec 2.2.4.3.1.1
    283            //Cannot create an endpoint for invalid endpoint index, neither for non-Group 
    284            //or Non-Extended IEEE Address modes
    285            if( (dstAddr->addrMode != AddrGroup) && (dstAddr->addrMode != Addr64Bit) ||
    286                (srcEpInt == 0) || (srcEpInt == 0xFF) )
   \   000014   EA           MOV       A,R2
   \   000015   2408         ADD       A,#0x8
   \   000017   F5..         MOV       ?V8,A
   \   000019   E4           CLR       A
   \   00001A   35..         ADDC      A,?V1
   \   00001C   F5..         MOV       ?V9,A
   \   00001E   85..82       MOV       DPL,?V8
   \   000021   F583         MOV       DPH,A
   \   000023   E0           MOVX      A,@DPTR
   \   000024   F8           MOV       R0,A
   \   000025   7401         MOV       A,#0x1
   \   000027   68           XRL       A,R0
   \   000028   6005         JZ        ??bindAddEntry_0
   \   00002A   7403         MOV       A,#0x3
   \   00002C   68           XRL       A,R0
   \   00002D   7011         JNZ       ??bindAddEntry_1
   \                     ??bindAddEntry_0:
   \   00002F   E9           MOV       A,R1
   \   000030   600E         JZ        ??bindAddEntry_1
   \   000032   74FF         MOV       A,#-0x1
   \   000034   65..         XRL       A,?V3
   \   000036   6008         JZ        ??bindAddEntry_1
    287            {
    288              return NULL;
    289            }
    290            //Do not accept neither binds to IEEE Addr with invalid endpoints
    291            if(( dstAddr->addrMode == Addr64Bit ) && (dstEpInt == 0))
   \   000038   7403         MOV       A,#0x3
   \   00003A   68           XRL       A,R0
   \   00003B   700A         JNZ       ??bindAddEntry_2
   \   00003D   EC           MOV       A,R4
   \   00003E   7007         JNZ       ??bindAddEntry_2
    292            {
    293              return NULL;
   \                     ??bindAddEntry_1:
   \   000040   7A00         MOV       R2,#0x0
   \   000042   7B00         MOV       R3,#0x0
   \   000044   02....       LJMP      ??bindAddEntry_3 & 0xFFFF
    294            }
    295            
    296              
    297            osal_memcpy( &bindData.dstAddr, dstAddr, sizeof( zAddrType_t) );
   \                     ??bindAddEntry_2:
   \   000047                ; Setup parameters for call to function osal_memcpy
   \   000047   8A..         MOV       ?V4,R2
   \   000049   8B..         MOV       ?V5,R3
   \   00004B   75..00       MOV       ?V6,#0x0
   \   00004E   78..         MOV       R0,#?V4
   \   000050   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000053   7C09         MOV       R4,#0x9
   \   000055   7D00         MOV       R5,#0x0
   \   000057   7403         MOV       A,#0x3
   \   000059   12....       LCALL     ?XSTACK_DISP101_8
   \   00005C   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00005F   7403         MOV       A,#0x3
   \   000061   12....       LCALL     ?DEALLOC_XSTACK8
    298            bindData.ep = dstEpInt;
   \   000064   7409         MOV       A,#0x9
   \   000066   12....       LCALL     ?XSTACK_DISP0_8
   \   000069   E5..         MOV       A,?V7
   \   00006B   F0           MOVX      @DPTR,A
    299              
    300            // initialize results
    301            entry = NULL;
   \   00006C   7E00         MOV       R6,#0x0
   \   00006E   7F00         MOV       R7,#0x0
    302          
    303            // make sure local addresses have been loaded
    304            bindAddrMgrLocalLoad();
   \   000070                ; Setup parameters for call to function bindAddrMgrLocalLoad
   \   000070   12....       LCALL     `??bindAddrMgrLocalLoad::?relay`; Banked call to: bindAddrMgrLocalLoad
    305          
    306            // setup fields
    307            fields.dstIndex = bindAddrIndexGet( dstAddr );
   \   000073                ; Setup parameters for call to function bindAddrIndexGet
   \   000073   AA..         MOV       R2,?V0
   \   000075   AB..         MOV       R3,?V1
   \   000077   12....       LCALL     `??bindAddrIndexGet::?relay`; Banked call to: bindAddrIndexGet
   \   00007A   8A..         MOV       ?V4,R2
   \   00007C   8B..         MOV       ?V5,R3
    308            fields.srcEP    = srcEpInt;
    309          
    310            if ( dstAddr->addrMode == AddrGroup )
   \   00007E   85..82       MOV       DPL,?V8
   \   000081   85..83       MOV       DPH,?V9
   \   000084   E0           MOVX      A,@DPTR
   \   000085   6401         XRL       A,#0x1
   \   000087   7008         JNZ       ??bindAddEntry_4
    311            {
    312              fields.dstAddrMode = DSTGROUPMODE_GROUP;
   \   000089   75..01       MOV       ?V1,#0x1
    313              fields.dstEP       = 0;
   \   00008C   75..00       MOV       ?V0,#0x0
   \   00008F   8006         SJMP      ??bindAddEntry_5
    314            }
    315            else
    316            {
    317              fields.dstAddrMode = DSTGROUPMODE_ADDR;
   \                     ??bindAddEntry_4:
   \   000091   75..00       MOV       ?V1,#0x0
    318              fields.dstEP       = dstEpInt;
   \   000094   85....       MOV       ?V0,?V7
    319            }
    320          
    321            if ( fields.dstIndex != INVALID_NODE_ADDR  )
   \                     ??bindAddEntry_5:
   \   000097   74FE         MOV       A,#-0x2
   \   000099   65..         XRL       A,?V4
   \   00009B   7004         JNZ       ??bindAddEntry_6
   \   00009D   74FF         MOV       A,#-0x1
   \   00009F   65..         XRL       A,?V5
   \                     ??bindAddEntry_6:
   \   0000A1   7003         JNZ       $+5
   \   0000A3   02....       LJMP      ??bindAddEntry_7 & 0xFFFF
    322            {
    323              for ( bindIdx = 0; bindIdx < gNWK_MAX_BINDING_ENTRIES; bindIdx++ )
   \   0000A6   7A00         MOV       R2,#0x0
   \   0000A8   7420         MOV       A,#0x20
   \   0000AA   12....       LCALL     ?XSTACK_DISP0_8
   \   0000AD   E0           MOVX      A,@DPTR
   \   0000AE   F5..         MOV       ?V8,A
   \   0000B0   A3           INC       DPTR
   \   0000B1   E0           MOVX      A,@DPTR
   \   0000B2   F5..         MOV       ?V9,A
   \   0000B4   8001         SJMP      ??bindAddEntry_8
   \                     ??bindAddEntry_9:
   \   0000B6   0A           INC       R2
   \                     ??bindAddEntry_8:
   \   0000B7   90....       MOV       DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   0000BA   E4           CLR       A
   \   0000BB   93           MOVC      A,@A+DPTR
   \   0000BC   F8           MOV       R0,A
   \   0000BD   EA           MOV       A,R2
   \   0000BE   C3           CLR       C
   \   0000BF   98           SUBB      A,R0
   \   0000C0   4003         JC        $+5
   \   0000C2   02....       LJMP      ??bindAddEntry_10 & 0xFFFF
    324              {
    325                if ( ( fields.srcEP       == BindingTable[bindIdx].srcEP        ) &&
    326                     ( fields.dstAddrMode == BindingTable[bindIdx].dstGroupMode ) &&
    327                     ( fields.dstIndex    == BindingTable[bindIdx].dstIdx       ) &&
    328                     ( fields.dstEP       == BindingTable[bindIdx].dstEP        )    )
   \   0000C5   EA           MOV       A,R2
   \   0000C6   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   0000C9   65..         XRL       A,?V3
   \   0000CB   70E9         JNZ       ??bindAddEntry_9
   \   0000CD   A3           INC       DPTR
   \   0000CE   E0           MOVX      A,@DPTR
   \   0000CF   65..         XRL       A,?V1
   \   0000D1   70E3         JNZ       ??bindAddEntry_9
   \   0000D3   8E82         MOV       DPL,R6
   \   0000D5   8F83         MOV       DPH,R7
   \   0000D7   A3           INC       DPTR
   \   0000D8   A3           INC       DPTR
   \   0000D9   E0           MOVX      A,@DPTR
   \   0000DA   65..         XRL       A,?V4
   \   0000DC   7004         JNZ       ??bindAddEntry_11
   \   0000DE   A3           INC       DPTR
   \   0000DF   E0           MOVX      A,@DPTR
   \   0000E0   65..         XRL       A,?V5
   \                     ??bindAddEntry_11:
   \   0000E2   70D2         JNZ       ??bindAddEntry_9
   \   0000E4   8E82         MOV       DPL,R6
   \   0000E6   8F83         MOV       DPH,R7
   \   0000E8   A3           INC       DPTR
   \   0000E9   A3           INC       DPTR
   \   0000EA   A3           INC       DPTR
   \   0000EB   A3           INC       DPTR
   \   0000EC   E0           MOVX      A,@DPTR
   \   0000ED   65..         XRL       A,?V0
   \   0000EF   70C5         JNZ       ??bindAddEntry_9
    329                {
    330                  entry = &BindingTable[bindIdx];
    331          
    332                  // break from loop
    333                  break;
    334                }
    335              }
    336          
    337              if ( entry != NULL )
    338              {
    339                // Loop through the cluster IDs
    340                for ( index = 0; index < numClusterIds; index++ )
   \   0000F1   75..00       MOV       ?V1,#0x0
   \   0000F4   8021         SJMP      ??bindAddEntry_12
    341                {
    342                  // Found - is the cluster already defined?
    343                  if ( bindIsClusterIDinList( entry, clusterIds[index] ) == FALSE )
    344                  {
    345                    // Nope, add this cluster
    346                    if ( bindAddClusterIdToList( entry, clusterIds[index] ) == FALSE )
    347                    {
    348                      // Indicate error if cluster list was full
    349                      entry = NULL;
    350                    }
    351                    else
    352                    {
    353                      // new bind added - notify application
    354                      bindData.clusterId = clusterIds[index];
   \                     ??bindAddEntry_13:
   \   0000F6   85..82       MOV       DPL,?V4
   \   0000F9   85..83       MOV       DPH,?V5
   \   0000FC   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   0000FF   740A         MOV       A,#0xa
   \   000101   12....       LCALL     ?XSTACK_DISP0_8
   \   000104   12....       LCALL     ?Subroutine16 & 0xFFFF
    355          #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1)             
    356                      if ( pfnBindNotificationCB != NULL )
   \                     ??CrossCallReturnLabel_20:
   \   000107   600C         JZ        ??bindAddEntry_14
    357                      {
    358                        pfnBindNotificationCB( &bindData );
   \   000109                ; Setup parameters for indirect call
   \   000109   AA..         MOV       R2,?XSP + 0
   \   00010B   AB..         MOV       R3,?XSP + 1
   \   00010D   E0           MOVX      A,@DPTR
   \   00010E   F583         MOV       DPH,A
   \   000110   8882         MOV       DPL,R0
   \   000112   12....       LCALL     ?CALL_IND
    359                      }
    360          #endif
    361          #ifdef BDB_REPORTING  
    362                      bdb_RepMarkHasBindingInEndpointClusterArray(srcEpInt, clusterIds[index], BDBREPORTING_FALSE, BDBREPORTING_TRUE); 
    363                      bindAdded = TRUE;
    364          #endif
    365                    }
   \                     ??bindAddEntry_14:
   \   000115   05..         INC       ?V1
   \                     ??bindAddEntry_12:
   \   000117   E5..         MOV       A,?V1
   \   000119   C3           CLR       C
   \   00011A   95..         SUBB      A,?V2
   \   00011C   4003         JC        $+5
   \   00011E   02....       LJMP      ??bindAddEntry_7 & 0xFFFF
   \   000121   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   000124   F5..         MOV       ?V4,A
   \   000126   E5..         MOV       A,?V9
   \   000128   39           ADDC      A,R1
   \   000129   F5..         MOV       ?V5,A
   \   00012B                ; Setup parameters for call to function bindIsClusterIDinList
   \   00012B   85..82       MOV       DPL,?V4
   \   00012E   F583         MOV       DPH,A
   \   000130   12....       LCALL     ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   000133   12....       LCALL     `??bindIsClusterIDinList::?relay`; Banked call to: bindIsClusterIDinList
   \   000136   E9           MOV       A,R1
   \   000137   70DC         JNZ       ??bindAddEntry_14
   \   000139                ; Setup parameters for call to function bindAddClusterIdToList
   \   000139   85..82       MOV       DPL,?V4
   \   00013C   85..83       MOV       DPH,?V5
   \   00013F   12....       LCALL     ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   000142   12....       LCALL     `??bindAddClusterIdToList::?relay`; Banked call to: bindAddClusterIdToList
   \   000145   E9           MOV       A,R1
   \   000146   70AE         JNZ       ??bindAddEntry_13
   \   000148   7E00         MOV       R6,#0x0
   \   00014A   7F00         MOV       R7,#0x0
   \   00014C   80C7         SJMP      ??bindAddEntry_14
    366                  }
    367                }
    368              }
    369              else
    370              {
    371                // Find an empty slot
    372                entry = bindFindEmpty();
   \                     ??bindAddEntry_10:
   \   00014E                ; Setup parameters for call to function bindFindEmpty
   \   00014E   12....       LCALL     `??bindFindEmpty::?relay`; Banked call to: bindFindEmpty
   \   000151   8A..         MOV       ?V10,R2
   \   000153   8B..         MOV       ?V11,R3
   \   000155   AE..         MOV       R6,?V10
   \   000157   AF..         MOV       R7,?V11
    373          
    374                // Check against the maximum number allowed
    375                if ( entry != NULL )
   \   000159   EE           MOV       A,R6
   \   00015A   4F           ORL       A,R7
   \   00015B   7003         JNZ       $+5
   \   00015D   02....       LJMP      ??bindAddEntry_7 & 0xFFFF
    376                {
    377                  // Add new entry
    378                  entry->srcEP         = fields.srcEP;
   \   000160   8E82         MOV       DPL,R6
   \   000162   8F83         MOV       DPH,R7
   \   000164   E5..         MOV       A,?V3
   \   000166   F0           MOVX      @DPTR,A
    379                  entry->dstGroupMode  = fields.dstAddrMode;
   \   000167   A3           INC       DPTR
   \   000168   E5..         MOV       A,?V1
   \   00016A   F0           MOVX      @DPTR,A
    380                  entry->dstIdx        = fields.dstIndex;
   \   00016B   8E82         MOV       DPL,R6
   \   00016D   8F83         MOV       DPH,R7
   \   00016F   A3           INC       DPTR
   \   000170   A3           INC       DPTR
   \   000171   E5..         MOV       A,?V4
   \   000173   F0           MOVX      @DPTR,A
   \   000174   A3           INC       DPTR
   \   000175   E5..         MOV       A,?V5
   \   000177   F0           MOVX      @DPTR,A
    381                  entry->dstEP         = fields.dstEP;
   \   000178   8E82         MOV       DPL,R6
   \   00017A   8F83         MOV       DPH,R7
   \   00017C   A3           INC       DPTR
   \   00017D   A3           INC       DPTR
   \   00017E   A3           INC       DPTR
   \   00017F   A3           INC       DPTR
   \   000180   E5..         MOV       A,?V0
   \   000182   F0           MOVX      @DPTR,A
    382          
    383                  if ( numClusterIds > gMAX_BINDING_CLUSTER_IDS )
   \   000183   90....       MOV       DPTR,#gMAX_BINDING_CLUSTER_IDS
   \   000186   E4           CLR       A
   \   000187   93           MOVC      A,@A+DPTR
   \   000188   C3           CLR       C
   \   000189   95..         SUBB      A,?V2
   \   00018B   5004         JNC       ??bindAddEntry_15
    384                  {
    385                    numClusterIds = gMAX_BINDING_CLUSTER_IDS;
   \   00018D   E4           CLR       A
   \   00018E   93           MOVC      A,@A+DPTR
   \   00018F   F5..         MOV       ?V2,A
    386                  }
    387                  
    388                  for(index = 0; index < numClusterIds; index++)
   \                     ??bindAddEntry_15:
   \   000191   75..00       MOV       ?V1,#0x0
   \   000194   8025         SJMP      ??bindAddEntry_16
    389                  {
    390                    // new bind added - notify application
    391                    bindData.clusterId = clusterIds[index];
   \                     ??bindAddEntry_17:
   \   000196   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   000199   F582         MOV       DPL,A
   \   00019B   E5..         MOV       A,?V9
   \   00019D   39           ADDC      A,R1
   \   00019E   F583         MOV       DPH,A
   \   0001A0   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   0001A3   740A         MOV       A,#0xa
   \   0001A5   12....       LCALL     ?XSTACK_DISP0_8
   \   0001A8   12....       LCALL     ?Subroutine16 & 0xFFFF
    392          #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1) 
    393                    if ( pfnBindNotificationCB != NULL )
   \                     ??CrossCallReturnLabel_21:
   \   0001AB   600C         JZ        ??bindAddEntry_18
    394                    {
    395                      pfnBindNotificationCB( &bindData );
   \   0001AD                ; Setup parameters for indirect call
   \   0001AD   AA..         MOV       R2,?XSP + 0
   \   0001AF   AB..         MOV       R3,?XSP + 1
   \   0001B1   E0           MOVX      A,@DPTR
   \   0001B2   F583         MOV       DPH,A
   \   0001B4   8882         MOV       DPL,R0
   \   0001B6   12....       LCALL     ?CALL_IND
    396                    }
    397          #endif
    398          #ifdef BDB_REPORTING   
    399                      bdb_RepMarkHasBindingInEndpointClusterArray(srcEpInt, clusterIds[index], BDBREPORTING_FALSE, BDBREPORTING_TRUE); 
    400                      bindAdded = TRUE;
    401          #endif
    402                  }
   \                     ??bindAddEntry_18:
   \   0001B9   05..         INC       ?V1
   \                     ??bindAddEntry_16:
   \   0001BB   E5..         MOV       A,?V1
   \   0001BD   C3           CLR       C
   \   0001BE   95..         SUBB      A,?V2
   \   0001C0   40D4         JC        ??bindAddEntry_17
    403          
    404                  entry->numClusterIds = numClusterIds;
   \   0001C2   8E82         MOV       DPL,R6
   \   0001C4   8F83         MOV       DPH,R7
   \   0001C6   A3           INC       DPTR
   \   0001C7   A3           INC       DPTR
   \   0001C8   A3           INC       DPTR
   \   0001C9   A3           INC       DPTR
   \   0001CA   A3           INC       DPTR
   \   0001CB   E5..         MOV       A,?V2
   \   0001CD   F0           MOVX      @DPTR,A
    405          
    406                  osal_memcpy( entry->clusterIdList,
    407                               clusterIds,
    408                               numClusterIds * sizeof(uint16) );
   \   0001CE                ; Setup parameters for call to function osal_memcpy
   \   0001CE   85....       MOV       ?V4,?V8
   \   0001D1   85....       MOV       ?V5,?V9
   \   0001D4   78..         MOV       R0,#?V4
   \   0001D6   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0001D9   AC..         MOV       R4,?V2
   \   0001DB   EC           MOV       A,R4
   \   0001DC   2C           ADD       A,R4
   \   0001DD   FC           MOV       R4,A
   \   0001DE   E4           CLR       A
   \   0001DF   33           RLC       A
   \   0001E0   FD           MOV       R5,A
   \   0001E1   EE           MOV       A,R6
   \   0001E2   2406         ADD       A,#0x6
   \   0001E4   FA           MOV       R2,A
   \   0001E5   E4           CLR       A
   \   0001E6   3F           ADDC      A,R7
   \   0001E7   FB           MOV       R3,A
   \   0001E8   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0001EB   7403         MOV       A,#0x3
   \   0001ED   12....       LCALL     ?DEALLOC_XSTACK8
    409                }
    410              }
    411            }
    412          #ifdef BDB_REPORTING
    413            if(bindAdded == TRUE)
    414            {
    415              bdb_RepStartOrContinueReporting( );
    416            }
    417          #endif
    418            return entry;
   \                     ??bindAddEntry_7:
   \   0001F0   EE           MOV       A,R6
   \   0001F1   FA           MOV       R2,A
   \   0001F2   EF           MOV       A,R7
   \   0001F3   FB           MOV       R3,A
   \                     ??bindAddEntry_3:
   \   0001F4   740C         MOV       A,#0xc
   \   0001F6   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001F9   7F0C         MOV       R7,#0xc
   \   0001FB   02....       LJMP      ?BANKED_LEAVE_XDATA
    419          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FC           MOV       R4,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FD           MOV       R5,A
   \   000005   EE           MOV       A,R6
   \   000006   FA           MOV       R2,A
   \   000007   EF           MOV       A,R7
   \   000008   FB           MOV       R3,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   E8           MOV       A,R0
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   E9           MOV       A,R1
   \   000004   F0           MOVX      @DPTR,A
   \   000005   90....       MOV       DPTR,#pfnBindNotificationCB
   \   000008   E0           MOVX      A,@DPTR
   \   000009   F8           MOV       R0,A
   \   00000A   A3           INC       DPTR
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   F9           MOV       R1,A
   \   00000D   E8           MOV       A,R0
   \   00000E   49           ORL       A,R1
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   A8..         MOV       R0,?V1
   \   000002   E8           MOV       A,R0
   \   000003   28           ADD       A,R0
   \   000004   F8           MOV       R0,A
   \   000005   E4           CLR       A
   \   000006   33           RLC       A
   \   000007   F9           MOV       R1,A
   \   000008   E5..         MOV       A,?V8
   \   00000A   28           ADD       A,R0
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   75F00E       MOV       B,#0xe
   \   000003   A4           MUL       AB
   \   000004   F8           MOV       R0,A
   \   000005   A9F0         MOV       R1,B
   \   000007   74..         MOV       A,#BindingTable & 0xff
   \   000009   28           ADD       A,R0
   \   00000A   FE           MOV       R6,A
   \   00000B   74..         MOV       A,#(BindingTable >> 8) & 0xff
   \   00000D   39           ADDC      A,R1
   \   00000E   FF           MOV       R7,A
   \   00000F   8E82         MOV       DPL,R6
   \   000011   8F83         MOV       DPH,R7
   \   000013   E0           MOVX      A,@DPTR
   \   000014   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   22           RET
    420          
    421          /*********************************************************************
    422           * @fn      bindRemoveEntry
    423           *
    424           * @brief   Removes a binding table entry.
    425           *
    426           * @param   pBind - pointer to binding table entry to delete
    427           *
    428           * @return  TRUE if Removed, FALSE if not
    429           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    430          byte bindRemoveEntry( BindingEntry_t *pBind )
   \                     bindRemoveEntry:
    431          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    432            osal_memset( pBind, 0xFF, gBIND_REC_SIZE );
   \   000004                ; Setup parameters for call to function osal_memset
   \   000004   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   000007   79FF         MOV       R1,#-0x1
   \   000009   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    433          #ifdef BDB_REPORTING
    434            bdb_RepUpdateMarkBindings();
    435          #endif
    436            return ( TRUE );
   \   00000C   7901         MOV       R1,#0x1
   \   00000E   02....       LJMP      ??Subroutine34_0 & 0xFFFF
    437          }
    438          
    439          /*********************************************************************
    440           * @fn      bindIsClusterIDinList()
    441           *
    442           * @brief   Is the clusterID in the clusterID list?
    443           *
    444           * @param   enter - binding table entry
    445           * @param   clusterId  - Cluster ID to look for
    446           *
    447           * @return  TRUE if found, FALSE if not found
    448           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    449          byte bindIsClusterIDinList( BindingEntry_t *entry, uint16 clusterId )
   \                     bindIsClusterIDinList:
    450          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    451            uint8 x;
    452          
    453            if ( entry != NULL )
   \   000005   EA           MOV       A,R2
   \   000006   4B           ORL       A,R3
   \   000007   6037         JZ        ??bindIsClusterIDinList_0
    454            {
    455              for ( x = 0; x < entry->numClusterIds; x++ )
   \   000009   7E00         MOV       R6,#0x0
   \   00000B   8001         SJMP      ??bindIsClusterIDinList_1
   \                     ??bindIsClusterIDinList_2:
   \   00000D   0E           INC       R6
   \                     ??bindIsClusterIDinList_1:
   \   00000E   8A82         MOV       DPL,R2
   \   000010   8B83         MOV       DPH,R3
   \   000012   A3           INC       DPTR
   \   000013   A3           INC       DPTR
   \   000014   A3           INC       DPTR
   \   000015   A3           INC       DPTR
   \   000016   A3           INC       DPTR
   \   000017   E0           MOVX      A,@DPTR
   \   000018   F8           MOV       R0,A
   \   000019   EE           MOV       A,R6
   \   00001A   C3           CLR       C
   \   00001B   98           SUBB      A,R0
   \   00001C   5022         JNC       ??bindIsClusterIDinList_0
    456              {
    457                if ( entry->clusterIdList[x] == clusterId )
   \   00001E   EE           MOV       A,R6
   \   00001F   25E0         ADD       A,0xE0 /* A   */
   \   000021   F8           MOV       R0,A
   \   000022   E4           CLR       A
   \   000023   33           RLC       A
   \   000024   F9           MOV       R1,A
   \   000025   EA           MOV       A,R2
   \   000026   28           ADD       A,R0
   \   000027   F582         MOV       DPL,A
   \   000029   EB           MOV       A,R3
   \   00002A   39           ADDC      A,R1
   \   00002B   F583         MOV       DPH,A
   \   00002D   A3           INC       DPTR
   \   00002E   A3           INC       DPTR
   \   00002F   A3           INC       DPTR
   \   000030   A3           INC       DPTR
   \   000031   A3           INC       DPTR
   \   000032   A3           INC       DPTR
   \   000033   E0           MOVX      A,@DPTR
   \   000034   6C           XRL       A,R4
   \   000035   7003         JNZ       ??bindIsClusterIDinList_3
   \   000037   A3           INC       DPTR
   \   000038   E0           MOVX      A,@DPTR
   \   000039   6D           XRL       A,R5
   \                     ??bindIsClusterIDinList_3:
   \   00003A   70D1         JNZ       ??bindIsClusterIDinList_2
    458                {
    459                  return ( TRUE );
   \   00003C   7901         MOV       R1,#0x1
   \   00003E   8002         SJMP      ??bindIsClusterIDinList_4
    460                }
    461              }
    462            }
    463          
    464            return ( FALSE );
   \                     ??bindIsClusterIDinList_0:
   \   000040   7900         MOV       R1,#0x0
   \                     ??bindIsClusterIDinList_4:
   \   000042   02....       LJMP      ?Subroutine2 & 0xFFFF
    465          }
    466          
    467          /*********************************************************************
    468           * @fn      bindRemoveClusterIdFromList()
    469           *
    470           * @brief   Removes a ClusterID from a list of ClusterIDs.
    471           *
    472           * @param   enter - binding table entry
    473           * @param   clusterId  - Cluster ID to look for
    474           *
    475           * @return  TRUE if there are at least 1 clusterID left, FALSE if none
    476           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    477          byte bindRemoveClusterIdFromList( BindingEntry_t *entry, uint16 clusterId )
   \                     bindRemoveClusterIdFromList:
    478          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000   74F3         MOV       A,#-0xd
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 0
    479            byte x;
    480            uint16 *listPtr;
    481            byte numIds;
    482          
    483          #ifdef BDB_REPORTING
    484            uint8 numRemoved = 0;
    485          #endif
    486            if ( entry )
   \   000005   EA           MOV       A,R2
   \   000006   4B           ORL       A,R3
   \   000007   6075         JZ        ??bindRemoveClusterIdFromList_0
    487            {
    488              if ( entry->numClusterIds > 0 )
   \   000009   EA           MOV       A,R2
   \   00000A   2405         ADD       A,#0x5
   \   00000C   12....       LCALL     ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   00000F   F5..         MOV       ?V0,A
   \   000011   606B         JZ        ??bindRemoveClusterIdFromList_0
    489              {
    490                listPtr = entry->clusterIdList;
   \   000013   EA           MOV       A,R2
   \   000014   2406         ADD       A,#0x6
   \   000016   08           INC       R0
   \   000017   E4           CLR       A
   \   000018   3B           ADDC      A,R3
   \   000019   F9           MOV       R1,A
    491                numIds = entry->numClusterIds;
   \   00001A   85....       MOV       ?V3,?V0
    492          
    493                // Copy the new list over
    494                for ( x = 0; x < numIds; x++ )
   \   00001D   75..00       MOV       ?V2,#0x0
   \   000020   800B         SJMP      ??bindRemoveClusterIdFromList_1
    495                {
    496                  if ( entry->clusterIdList[x] != clusterId )
    497                  {
    498                    *listPtr++ = entry->clusterIdList[x];
    499                  }
    500                  else
    501                  {
    502                    entry->numClusterIds--;
   \                     ??bindRemoveClusterIdFromList_2:
   \   000022   8E82         MOV       DPL,R6
   \   000024   8F83         MOV       DPH,R7
   \   000026   E0           MOVX      A,@DPTR
   \   000027   14           DEC       A
   \   000028   F0           MOVX      @DPTR,A
    503                    
    504          #ifdef BDB_REPORTING
    505                     numRemoved++;
    506          #endif          
    507                    if ( entry->numClusterIds == 0 )
   \   000029   6053         JZ        ??bindRemoveClusterIdFromList_0
    508                    {
    509                      break;
    510                    }
    511                  }
   \                     ??bindRemoveClusterIdFromList_3:
   \   00002B   05..         INC       ?V2
   \                     ??bindRemoveClusterIdFromList_1:
   \   00002D   E5..         MOV       A,?V2
   \   00002F   C3           CLR       C
   \   000030   95..         SUBB      A,?V3
   \   000032   503F         JNC       ??bindRemoveClusterIdFromList_4
   \   000034   E5..         MOV       A,?V2
   \   000036   25E0         ADD       A,0xE0 /* A   */
   \   000038   F5..         MOV       ?V0,A
   \   00003A   E4           CLR       A
   \   00003B   33           RLC       A
   \   00003C   F5..         MOV       ?V1,A
   \   00003E   EA           MOV       A,R2
   \   00003F   25..         ADD       A,?V0
   \   000041   F582         MOV       DPL,A
   \   000043   EB           MOV       A,R3
   \   000044   35..         ADDC      A,?V1
   \   000046   F583         MOV       DPH,A
   \   000048   A3           INC       DPTR
   \   000049   A3           INC       DPTR
   \   00004A   A3           INC       DPTR
   \   00004B   A3           INC       DPTR
   \   00004C   A3           INC       DPTR
   \   00004D   A3           INC       DPTR
   \   00004E   E0           MOVX      A,@DPTR
   \   00004F   F5..         MOV       ?V0,A
   \   000051   A3           INC       DPTR
   \   000052   E0           MOVX      A,@DPTR
   \   000053   F5..         MOV       ?V1,A
   \   000055   EC           MOV       A,R4
   \   000056   65..         XRL       A,?V0
   \   000058   7003         JNZ       ??bindRemoveClusterIdFromList_5
   \   00005A   ED           MOV       A,R5
   \   00005B   65..         XRL       A,?V1
   \                     ??bindRemoveClusterIdFromList_5:
   \   00005D   60C3         JZ        ??bindRemoveClusterIdFromList_2
   \   00005F   8882         MOV       DPL,R0
   \   000061   8983         MOV       DPH,R1
   \   000063   E5..         MOV       A,?V0
   \   000065   F0           MOVX      @DPTR,A
   \   000066   A3           INC       DPTR
   \   000067   E5..         MOV       A,?V1
   \   000069   F0           MOVX      @DPTR,A
   \   00006A   E8           MOV       A,R0
   \   00006B   2402         ADD       A,#0x2
   \   00006D   F8           MOV       R0,A
   \   00006E   50BB         JNC       ??bindRemoveClusterIdFromList_3
   \   000070   09           INC       R1
   \   000071   80B8         SJMP      ??bindRemoveClusterIdFromList_3
    512                }
    513                
    514              }
    515            }
   \                     ??bindRemoveClusterIdFromList_4:
   \   000073   8E82         MOV       DPL,R6
   \   000075   8F83         MOV       DPH,R7
   \   000077   E0           MOVX      A,@DPTR
   \   000078   6004         JZ        ??bindRemoveClusterIdFromList_0
    516          
    517          #ifdef BDB_REPORTING
    518            if(numRemoved>0)
    519              bdb_RepUpdateMarkBindings();
    520          #endif 
    521            
    522            if ( entry && (entry->numClusterIds > 0) )
    523            {
    524              return ( TRUE );
   \   00007A   7901         MOV       R1,#0x1
   \   00007C   8002         SJMP      ??bindRemoveClusterIdFromList_6
    525            }
    526            else
    527            {
    528              return ( FALSE );
   \                     ??bindRemoveClusterIdFromList_0:
   \   00007E   7900         MOV       R1,#0x0
    529            }
   \                     ??bindRemoveClusterIdFromList_6:
   \   000080                REQUIRE ?Subroutine3
   \   000080                ; // Fall through to label ?Subroutine3
    530          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   7F05         MOV       R7,#0x5
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   F8           MOV       R0,A
   \   000001   E4           CLR       A
   \   000002   3B           ADDC      A,R3
   \   000003   F9           MOV       R1,A
   \   000004   E8           MOV       A,R0
   \   000005   FE           MOV       R6,A
   \   000006   E9           MOV       A,R1
   \   000007   FF           MOV       R7,A
   \   000008   8E82         MOV       DPL,R6
   \   00000A   8F83         MOV       DPH,R7
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   22           RET
    531          
    532          /*********************************************************************
    533           * @fn      bindAddClusterIdToList()
    534           *
    535           * @brief   Adds a ClusterID to a list of ClusterIDs.
    536           *
    537           * @param   enter - binding table entry
    538           * @param   clusterId  - Cluster ID to Add
    539           *
    540           * @return  TRUE if Added, FALSE if not
    541           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    542          byte bindAddClusterIdToList( BindingEntry_t *entry, uint16 clusterId )
   \                     bindAddClusterIdToList:
    543          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    544            if ( entry && entry->numClusterIds < gMAX_BINDING_CLUSTER_IDS )
   \   000005   EA           MOV       A,R2
   \   000006   4B           ORL       A,R3
   \   000007   603C         JZ        ??bindAddClusterIdToList_0
   \   000009   EA           MOV       A,R2
   \   00000A   2405         ADD       A,#0x5
   \   00000C   F8           MOV       R0,A
   \   00000D   E4           CLR       A
   \   00000E   3B           ADDC      A,R3
   \   00000F   F9           MOV       R1,A
   \   000010   8882         MOV       DPL,R0
   \   000012   8983         MOV       DPH,R1
   \   000014   E0           MOVX      A,@DPTR
   \   000015   FE           MOV       R6,A
   \   000016   90....       MOV       DPTR,#gMAX_BINDING_CLUSTER_IDS
   \   000019   E4           CLR       A
   \   00001A   93           MOVC      A,@A+DPTR
   \   00001B   FF           MOV       R7,A
   \   00001C   EE           MOV       A,R6
   \   00001D   C3           CLR       C
   \   00001E   9F           SUBB      A,R7
   \   00001F   5024         JNC       ??bindAddClusterIdToList_0
    545            {
    546              // Add the new one
    547              entry->clusterIdList[entry->numClusterIds] = clusterId;
   \   000021   EE           MOV       A,R6
   \   000022   2E           ADD       A,R6
   \   000023   FE           MOV       R6,A
   \   000024   E4           CLR       A
   \   000025   33           RLC       A
   \   000026   FF           MOV       R7,A
   \   000027   EA           MOV       A,R2
   \   000028   2E           ADD       A,R6
   \   000029   F582         MOV       DPL,A
   \   00002B   EB           MOV       A,R3
   \   00002C   3F           ADDC      A,R7
   \   00002D   F583         MOV       DPH,A
   \   00002F   A3           INC       DPTR
   \   000030   A3           INC       DPTR
   \   000031   A3           INC       DPTR
   \   000032   A3           INC       DPTR
   \   000033   A3           INC       DPTR
   \   000034   A3           INC       DPTR
   \   000035   EC           MOV       A,R4
   \   000036   F0           MOVX      @DPTR,A
   \   000037   A3           INC       DPTR
   \   000038   ED           MOV       A,R5
   \   000039   F0           MOVX      @DPTR,A
    548              entry->numClusterIds++;
   \   00003A   8882         MOV       DPL,R0
   \   00003C   8983         MOV       DPH,R1
   \   00003E   E0           MOVX      A,@DPTR
   \   00003F   04           INC       A
   \   000040   F0           MOVX      @DPTR,A
    549              return ( TRUE );
   \   000041   7901         MOV       R1,#0x1
   \   000043   8002         SJMP      ??bindAddClusterIdToList_1
    550            }
    551            return ( FALSE );
   \                     ??bindAddClusterIdToList_0:
   \   000045   7900         MOV       R1,#0x0
   \                     ??bindAddClusterIdToList_1:
   \   000047                REQUIRE ?Subroutine2
   \   000047                ; // Fall through to label ?Subroutine2
    552          }
    553          
    554          /*********************************************************************
    555           * @fn      bindFindExisting
    556           *
    557           * @brief   Finds an existing src/epint to dst/epint bind record
    558           *
    559           * @param   srcEpInt - Source Endpoint/Interface
    560           * @param   dstAddr - Destination address
    561           * @param   dstEpInt - Destination Endpoint/Interface
    562           *
    563           * @return  pointer to existing entry or NULL
    564           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    565          BindingEntry_t *bindFindExisting( byte srcEpInt,
   \                     bindFindExisting:
    566                                            zAddrType_t *dstAddr, byte dstEpInt )
    567          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000   74F3         MOV       A,#-0xd
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V0,R1
   \   000007   8C..         MOV       ?V1,R4
    568            uint16 dstIdx;
    569            bindTableIndex_t x;
    570          
    571            // Find the records in the assoc list
    572            if ( dstAddr->addrMode == AddrGroup )
   \   000009   12....       LCALL     ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   00000C   700B         JNZ       ??bindFindExisting_0
    573            {
    574              dstIdx = dstAddr->addr.shortAddr;
   \   00000E   8A82         MOV       DPL,R2
   \   000010   8B83         MOV       DPH,R3
   \   000012   E0           MOVX      A,@DPTR
   \   000013   FC           MOV       R4,A
   \   000014   A3           INC       DPTR
   \   000015   E0           MOVX      A,@DPTR
   \   000016   FD           MOV       R5,A
   \   000017   800B         SJMP      ??bindFindExisting_1
    575            }
    576            else
    577            {
    578              dstIdx = bindingAddrMgsHelperFind( dstAddr );
   \                     ??bindFindExisting_0:
   \   000019                ; Setup parameters for call to function bindingAddrMgsHelperFind
   \   000019   12....       LCALL     `??bindingAddrMgsHelperFind::?relay`; Banked call to: bindingAddrMgsHelperFind
   \   00001C   8A..         MOV       ?V2,R2
   \   00001E   8B..         MOV       ?V3,R3
   \   000020   AC..         MOV       R4,?V2
   \   000022   AD..         MOV       R5,?V3
    579            }
    580          
    581            if ( dstIdx == INVALID_NODE_ADDR )
   \                     ??bindFindExisting_1:
   \   000024   74FE         MOV       A,#-0x2
   \   000026   6C           XRL       A,R4
   \   000027   7003         JNZ       ??bindFindExisting_2
   \   000029   74FF         MOV       A,#-0x1
   \   00002B   6D           XRL       A,R5
   \                     ??bindFindExisting_2:
   \   00002C   605B         JZ        ??bindFindExisting_3
    582            {
    583              return ( (BindingEntry_t *)NULL );
    584            }
    585          
    586            // Start at the beginning
    587            for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
   \   00002E   75..00       MOV       ?V2,#0x0
   \   000031   8015         SJMP      ??bindFindExisting_4
    588            {
    589              if ( (BindingTable[x].srcEP == srcEpInt) )
   \                     ??bindFindExisting_5:
   \   000033   7401         MOV       A,#0x1
   \   000035   65..         XRL       A,?V3
   \   000037   700D         JNZ       ??bindFindExisting_6
   \   000039   8882         MOV       DPL,R0
   \   00003B   8983         MOV       DPH,R1
   \   00003D   E0           MOVX      A,@DPTR
   \   00003E   6C           XRL       A,R4
   \   00003F   7003         JNZ       ??bindFindExisting_7
   \   000041   A3           INC       DPTR
   \   000042   E0           MOVX      A,@DPTR
   \   000043   6D           XRL       A,R5
   \                     ??bindFindExisting_7:
   \   000044   6047         JZ        ??bindFindExisting_8
   \                     ??bindFindExisting_6:
   \   000046   05..         INC       ?V2
   \                     ??bindFindExisting_4:
   \   000048   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   00004B   503C         JNC       ??bindFindExisting_3
   \   00004D   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   000050   E0           MOVX      A,@DPTR
   \   000051   65..         XRL       A,?V0
   \   000053   70F1         JNZ       ??bindFindExisting_6
   \   000055   A3           INC       DPTR
   \   000056   E0           MOVX      A,@DPTR
   \   000057   F5..         MOV       ?V3,A
   \   000059   EA           MOV       A,R2
   \   00005A   2402         ADD       A,#0x2
   \   00005C   F8           MOV       R0,A
   \   00005D   E4           CLR       A
   \   00005E   3B           ADDC      A,R3
   \   00005F   F9           MOV       R1,A
   \   000060   8E82         MOV       DPL,R6
   \   000062   8F83         MOV       DPH,R7
   \   000064   E0           MOVX      A,@DPTR
   \   000065   6401         XRL       A,#0x1
   \   000067   60CA         JZ        ??bindFindExisting_5
   \   000069   E5..         MOV       A,?V3
   \   00006B   70D9         JNZ       ??bindFindExisting_6
   \   00006D   8882         MOV       DPL,R0
   \   00006F   8983         MOV       DPH,R1
   \   000071   E0           MOVX      A,@DPTR
   \   000072   6C           XRL       A,R4
   \   000073   7003         JNZ       ??bindFindExisting_9
   \   000075   A3           INC       DPTR
   \   000076   E0           MOVX      A,@DPTR
   \   000077   6D           XRL       A,R5
   \                     ??bindFindExisting_9:
   \   000078   70CC         JNZ       ??bindFindExisting_6
   \   00007A   8A82         MOV       DPL,R2
   \   00007C   8B83         MOV       DPH,R3
   \   00007E   A3           INC       DPTR
   \   00007F   A3           INC       DPTR
   \   000080   A3           INC       DPTR
   \   000081   A3           INC       DPTR
   \   000082   E0           MOVX      A,@DPTR
   \   000083   65..         XRL       A,?V1
   \   000085   70BF         JNZ       ??bindFindExisting_6
    590              {
    591                if ( ((dstAddr->addrMode == AddrGroup)
    592                        && (BindingTable[x].dstGroupMode == DSTGROUPMODE_GROUP)
    593                        && (dstIdx == BindingTable[x].dstIdx))
    594                   || ((dstAddr->addrMode != AddrGroup)
    595                       && (BindingTable[x].dstGroupMode == DSTGROUPMODE_ADDR)
    596                       && (dstIdx == BindingTable[x].dstIdx) && (BindingTable[x].dstEP == dstEpInt)) )
    597                {
    598                  return ( &BindingTable[x] );
   \   000087   8004         SJMP      ??bindFindExisting_8
    599                }
    600              }
    601            }
    602          
    603            return ( (BindingEntry_t *)NULL );
   \                     ??bindFindExisting_3:
   \   000089   7A00         MOV       R2,#0x0
   \   00008B   7B00         MOV       R3,#0x0
   \                     ??bindFindExisting_8:
   \   00008D   02....       LJMP      ?Subroutine3 & 0xFFFF
    604          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   90....       MOV       DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   000003   E4           CLR       A
   \   000004   93           MOVC      A,@A+DPTR
   \   000005   F8           MOV       R0,A
   \   000006   E5..         MOV       A,?V2
   \   000008   C3           CLR       C
   \   000009   98           SUBB      A,R0
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   E5..         MOV       A,?V2
   \   000002   75F00E       MOV       B,#0xe
   \   000005   A4           MUL       AB
   \   000006   F8           MOV       R0,A
   \   000007   A9F0         MOV       R1,B
   \   000009   74..         MOV       A,#BindingTable & 0xff
   \   00000B   28           ADD       A,R0
   \   00000C   FA           MOV       R2,A
   \   00000D   74..         MOV       A,#(BindingTable >> 8) & 0xff
   \   00000F   39           ADDC      A,R1
   \   000010   FB           MOV       R3,A
   \   000011   8A82         MOV       DPL,R2
   \   000013   8B83         MOV       DPH,R3
   \   000015   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   EA           MOV       A,R2
   \   000001   2408         ADD       A,#0x8
   \   000003   12....       LCALL     ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   000006   6401         XRL       A,#0x1
   \   000008   22           RET
    605          
    606          /*********************************************************************
    607           * @fn       bindRemoveDev()
    608           *
    609           * @brief
    610           *
    611           *   Remove all bind(s) entries associated to a device address (destination).
    612           *   Updates binding table.
    613           *
    614           * @param   Addr - address of device to be removed from Binding Table
    615           *
    616           * @return  none
    617           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    618          void bindRemoveDev( zAddrType_t *Addr )
   \                     bindRemoveDev:
    619          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
    620            uint16 idx;
    621            bindTableIndex_t x;
    622          
    623            if ( Addr->addrMode == AddrGroup )
   \   000005   EA           MOV       A,R2
   \   000006   2408         ADD       A,#0x8
   \   000008   F8           MOV       R0,A
   \   000009   E4           CLR       A
   \   00000A   3B           ADDC      A,R3
   \   00000B   F9           MOV       R1,A
   \   00000C   88..         MOV       ?V0,R0
   \   00000E   89..         MOV       ?V1,R1
   \   000010   8882         MOV       DPL,R0
   \   000012   F583         MOV       DPH,A
   \   000014   E0           MOVX      A,@DPTR
   \   000015   6401         XRL       A,#0x1
   \   000017   700B         JNZ       ??bindRemoveDev_0
    624            {
    625              idx = Addr->addr.shortAddr;
   \   000019   8A82         MOV       DPL,R2
   \   00001B   8B83         MOV       DPH,R3
   \   00001D   E0           MOVX      A,@DPTR
   \   00001E   FE           MOV       R6,A
   \   00001F   A3           INC       DPTR
   \   000020   E0           MOVX      A,@DPTR
   \   000021   FF           MOV       R7,A
   \   000022   800B         SJMP      ??bindRemoveDev_1
    626            }
    627            else
    628            {
    629              idx = bindingAddrMgsHelperFind( Addr );
   \                     ??bindRemoveDev_0:
   \   000024                ; Setup parameters for call to function bindingAddrMgsHelperFind
   \   000024   12....       LCALL     `??bindingAddrMgsHelperFind::?relay`; Banked call to: bindingAddrMgsHelperFind
   \   000027   8A..         MOV       ?V2,R2
   \   000029   8B..         MOV       ?V3,R3
   \   00002B   AE..         MOV       R6,?V2
   \   00002D   AF..         MOV       R7,?V3
    630            }
    631          
    632            if ( idx == INVALID_NODE_ADDR )
   \                     ??bindRemoveDev_1:
   \   00002F   74FE         MOV       A,#-0x2
   \   000031   6E           XRL       A,R6
   \   000032   7003         JNZ       ??bindRemoveDev_2
   \   000034   74FF         MOV       A,#-0x1
   \   000036   6F           XRL       A,R7
   \                     ??bindRemoveDev_2:
   \   000037   6052         JZ        ??bindRemoveDev_3
    633            {
    634              return;
    635            }
    636          
    637            // Removes all the entries that match the destination Address/Index
    638            for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
   \   000039   75..00       MOV       ?V2,#0x0
   \   00003C   8015         SJMP      ??bindRemoveDev_4
    639            {
    640              if ( ( (Addr->addrMode == AddrGroup) && (BindingTable[x].dstGroupMode == DSTGROUPMODE_GROUP)
    641                                                   && (BindingTable[x].dstIdx == idx) ) ||
    642                   ( (Addr->addrMode != AddrGroup) && (BindingTable[x].dstGroupMode == DSTGROUPMODE_ADDR)
    643                                                   && (BindingTable[x].dstIdx == idx) ) )
   \                     ??bindRemoveDev_5:
   \   00003E   EC           MOV       A,R4
   \   00003F   7010         JNZ       ??bindRemoveDev_6
   \   000041   8882         MOV       DPL,R0
   \   000043   8983         MOV       DPH,R1
   \   000045   E0           MOVX      A,@DPTR
   \   000046   6E           XRL       A,R6
   \   000047   7003         JNZ       ??bindRemoveDev_7
   \   000049   A3           INC       DPTR
   \   00004A   E0           MOVX      A,@DPTR
   \   00004B   6F           XRL       A,R7
   \                     ??bindRemoveDev_7:
   \   00004C   7003         JNZ       ??bindRemoveDev_6
    644              {
    645                bindRemoveEntry( &BindingTable[x] );
   \                     ??bindRemoveDev_8:
   \   00004E                ; Setup parameters for call to function bindRemoveEntry
   \   00004E   12....       LCALL     `??bindRemoveEntry::?relay`; Banked call to: bindRemoveEntry
    646              }
   \                     ??bindRemoveDev_6:
   \   000051   05..         INC       ?V2
   \                     ??bindRemoveDev_4:
   \   000053   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   000056   502C         JNC       ??bindRemoveDev_9
   \   000058   12....       LCALL     ?Subroutine10 & 0xFFFF
    647            }
   \                     ??CrossCallReturnLabel_7:
   \   00005B   A3           INC       DPTR
   \   00005C   E0           MOVX      A,@DPTR
   \   00005D   FC           MOV       R4,A
   \   00005E   EA           MOV       A,R2
   \   00005F   2402         ADD       A,#0x2
   \   000061   F8           MOV       R0,A
   \   000062   E4           CLR       A
   \   000063   3B           ADDC      A,R3
   \   000064   F9           MOV       R1,A
   \   000065   85..82       MOV       DPL,?V0
   \   000068   85..83       MOV       DPH,?V1
   \   00006B   E0           MOVX      A,@DPTR
   \   00006C   6401         XRL       A,#0x1
   \   00006E   70CE         JNZ       ??bindRemoveDev_5
   \   000070   7401         MOV       A,#0x1
   \   000072   6C           XRL       A,R4
   \   000073   70DC         JNZ       ??bindRemoveDev_6
   \   000075   8882         MOV       DPL,R0
   \   000077   8983         MOV       DPH,R1
   \   000079   E0           MOVX      A,@DPTR
   \   00007A   6E           XRL       A,R6
   \   00007B   7003         JNZ       ??bindRemoveDev_10
   \   00007D   A3           INC       DPTR
   \   00007E   E0           MOVX      A,@DPTR
   \   00007F   6F           XRL       A,R7
   \                     ??bindRemoveDev_10:
   \   000080   60CC         JZ        ??bindRemoveDev_8
   \   000082   80CD         SJMP      ??bindRemoveDev_6
    648          
    649            // If this is the last Bind Entry for that idx then clear BINDING
    650            // user from Address Manager
    651            bindAddressClear( idx );
   \                     ??bindRemoveDev_9:
   \   000084                ; Setup parameters for call to function bindAddressClear
   \   000084   EE           MOV       A,R6
   \   000085   FA           MOV       R2,A
   \   000086   EF           MOV       A,R7
   \   000087   FB           MOV       R3,A
   \   000088   12....       LCALL     `??bindAddressClear::?relay`; Banked call to: bindAddressClear
    652          }
   \                     ??bindRemoveDev_3:
   \   00008B                REQUIRE ?Subroutine4
   \   00008B                ; // Fall through to label ?Subroutine4

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   7F04         MOV       R7,#0x4
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    653          
    654          /*********************************************************************
    655           * @fn       bindRemoveSrcDev()
    656           *
    657           * @brief
    658           *
    659           *   Remove binds(s) associated to device address (source).
    660           *   Updates binding table.
    661           *
    662           * @param   ep - endpoint to remove, 0xFF is all endpoints
    663           *
    664           * @return  none
    665           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    666          void bindRemoveSrcDev( uint8 ep )
   \                     bindRemoveSrcDev:
    667          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V1,R1
    668            bindTableIndex_t x;
    669          
    670            for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
   \   000007   75..00       MOV       ?V0,#0x0
   \   00000A   8037         SJMP      ??bindRemoveSrcDev_0
    671            {
    672              if ( (ep == 0xFF) || (ep == BindingTable[x].srcEP) )
   \                     ??bindRemoveSrcDev_1:
   \   00000C   E5..         MOV       A,?V0
   \   00000E   75F00E       MOV       B,#0xe
   \   000011   A4           MUL       AB
   \   000012   F8           MOV       R0,A
   \   000013   A9F0         MOV       R1,B
   \   000015   74..         MOV       A,#BindingTable & 0xff
   \   000017   28           ADD       A,R0
   \   000018   FA           MOV       R2,A
   \   000019   74..         MOV       A,#(BindingTable >> 8) & 0xff
   \   00001B   39           ADDC      A,R1
   \   00001C   FB           MOV       R3,A
   \   00001D   74FF         MOV       A,#-0x1
   \   00001F   65..         XRL       A,?V1
   \   000021   6009         JZ        ??bindRemoveSrcDev_2
   \   000023   8A82         MOV       DPL,R2
   \   000025   8B83         MOV       DPH,R3
   \   000027   E0           MOVX      A,@DPTR
   \   000028   65..         XRL       A,?V1
   \   00002A   7015         JNZ       ??bindRemoveSrcDev_3
    673              {
    674                uint16 idx = BindingTable[x].dstIdx;
   \                     ??bindRemoveSrcDev_2:
   \   00002C   8A82         MOV       DPL,R2
   \   00002E   8B83         MOV       DPH,R3
   \   000030   A3           INC       DPTR
   \   000031   A3           INC       DPTR
   \   000032   E0           MOVX      A,@DPTR
   \   000033   FE           MOV       R6,A
   \   000034   A3           INC       DPTR
   \   000035   E0           MOVX      A,@DPTR
   \   000036   FF           MOV       R7,A
    675          
    676                bindRemoveEntry( &BindingTable[x] );
   \   000037                ; Setup parameters for call to function bindRemoveEntry
   \   000037   12....       LCALL     `??bindRemoveEntry::?relay`; Banked call to: bindRemoveEntry
    677          
    678                // If this is the last Bind Entry for that idx then clear BINDING
    679                // user from Address Manager
    680                bindAddressClear( idx );
   \   00003A                ; Setup parameters for call to function bindAddressClear
   \   00003A   EE           MOV       A,R6
   \   00003B   FA           MOV       R2,A
   \   00003C   EF           MOV       A,R7
   \   00003D   FB           MOV       R3,A
   \   00003E   12....       LCALL     `??bindAddressClear::?relay`; Banked call to: bindAddressClear
    681              }
    682            }
   \                     ??bindRemoveSrcDev_3:
   \   000041   05..         INC       ?V0
   \                     ??bindRemoveSrcDev_0:
   \   000043   90....       MOV       DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   000046   E4           CLR       A
   \   000047   93           MOVC      A,@A+DPTR
   \   000048   F8           MOV       R0,A
   \   000049   E5..         MOV       A,?V0
   \   00004B   C3           CLR       C
   \   00004C   98           SUBB      A,R0
   \   00004D   40BD         JC        ??bindRemoveSrcDev_1
    683          }
   \   00004F   02....       LJMP      ??Subroutine29_0 & 0xFFFF
    684          
    685          /*********************************************************************
    686           * @fn          bindNumBoundTo
    687           *
    688           * @brief       Calculate the number items this device is bound to.
    689           *              When srcMode is set to TRUE, discard what value devAddr
    690           *              has, it returns number count bound to the local dev.
    691           *
    692           * @param       devAddr - device Address
    693           * @param       devEP - endpoint
    694           * @param       srcMode - TRUE - assume devHandle is a source address
    695           *                        FALSE - destination address
    696           *
    697           * @return      status
    698           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    699          byte bindNumBoundTo( zAddrType_t *devAddr, byte devEpInt, byte srcMode )
   \                     bindNumBoundTo:
    700          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V1,R1
   \   000007   8C..         MOV       ?V2,R4
    701            BindingEntry_t *pBind;
    702            uint16 idx;
    703            byte   num;
    704            bindTableIndex_t x;
    705          
    706            // Init
    707            num = 0;
   \   000009   75..00       MOV       ?V0,#0x0
    708          
    709            if ( devAddr->addrMode == AddrGroup )
   \   00000C   12....       LCALL     ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   00000F   7009         JNZ       ??bindNumBoundTo_0
    710            {
    711              idx = devAddr->addr.shortAddr;
   \   000011   8A82         MOV       DPL,R2
   \   000013   8B83         MOV       DPH,R3
   \   000015   12....       LCALL     ??Subroutine39_0 & 0xFFFF
    712            }
   \                     ??CrossCallReturnLabel_56:
   \   000018   8003         SJMP      ??bindNumBoundTo_1
    713            else
    714            {
    715              idx = bindingAddrMgsHelperFind( devAddr );
   \                     ??bindNumBoundTo_0:
   \   00001A                ; Setup parameters for call to function bindingAddrMgsHelperFind
   \   00001A   12....       LCALL     `??bindingAddrMgsHelperFind::?relay`; Banked call to: bindingAddrMgsHelperFind
    716            }
    717          
    718            for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
   \                     ??bindNumBoundTo_1:
   \   00001D   7C00         MOV       R4,#0x0
   \   00001F   8022         SJMP      ??bindNumBoundTo_2
    719            {
    720              pBind = &BindingTable[x];
    721              if ( srcMode )
    722              {
    723                if ( pBind->srcEP == devEpInt )
    724                {
    725                  num++;
    726                }
    727              }
    728              else
    729              {
    730                if ( ((devAddr->addrMode == AddrGroup)
    731                        && (pBind->dstGroupMode == DSTGROUPMODE_GROUP) && (pBind->dstIdx == idx))
    732                    || ((devAddr->addrMode != AddrGroup) && (pBind->dstGroupMode == DSTGROUPMODE_ADDR)
    733                                          && (pBind->dstIdx == idx) && (pBind->dstEP == devEpInt)) )
   \                     ??bindNumBoundTo_3:
   \   000021   ED           MOV       A,R5
   \   000022   701E         JNZ       ??bindNumBoundTo_4
   \   000024   8882         MOV       DPL,R0
   \   000026   8983         MOV       DPH,R1
   \   000028   A3           INC       DPTR
   \   000029   A3           INC       DPTR
   \   00002A   E0           MOVX      A,@DPTR
   \   00002B   6A           XRL       A,R2
   \   00002C   7003         JNZ       ??bindNumBoundTo_5
   \   00002E   A3           INC       DPTR
   \   00002F   E0           MOVX      A,@DPTR
   \   000030   6B           XRL       A,R3
   \                     ??bindNumBoundTo_5:
   \   000031   700F         JNZ       ??bindNumBoundTo_4
   \   000033   8882         MOV       DPL,R0
   \   000035   8983         MOV       DPH,R1
   \   000037   A3           INC       DPTR
   \   000038   A3           INC       DPTR
   \   000039   A3           INC       DPTR
   \   00003A   A3           INC       DPTR
   \   00003B   E0           MOVX      A,@DPTR
   \   00003C   65..         XRL       A,?V1
   \   00003E   7002         JNZ       ??bindNumBoundTo_4
    734                {
    735                  num++;
   \                     ??bindNumBoundTo_6:
   \   000040   05..         INC       ?V0
    736                }
   \                     ??bindNumBoundTo_4:
   \   000042   0C           INC       R4
   \                     ??bindNumBoundTo_2:
   \   000043   90....       MOV       DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   000046   E4           CLR       A
   \   000047   93           MOVC      A,@A+DPTR
   \   000048   F8           MOV       R0,A
   \   000049   EC           MOV       A,R4
   \   00004A   C3           CLR       C
   \   00004B   98           SUBB      A,R0
   \   00004C   5034         JNC       ??bindNumBoundTo_7
   \   00004E   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   000051   E5..         MOV       A,?V2
   \   000053   8882         MOV       DPL,R0
   \   000055   8983         MOV       DPH,R1
   \   000057   6007         JZ        ??bindNumBoundTo_8
   \   000059   E0           MOVX      A,@DPTR
   \   00005A   65..         XRL       A,?V1
   \   00005C   70E4         JNZ       ??bindNumBoundTo_4
   \   00005E   80E0         SJMP      ??bindNumBoundTo_6
   \                     ??bindNumBoundTo_8:
   \   000060   A3           INC       DPTR
   \   000061   E0           MOVX      A,@DPTR
   \   000062   FD           MOV       R5,A
   \   000063   8E82         MOV       DPL,R6
   \   000065   8F83         MOV       DPH,R7
   \   000067   E0           MOVX      A,@DPTR
   \   000068   6401         XRL       A,#0x1
   \   00006A   70B5         JNZ       ??bindNumBoundTo_3
   \   00006C   7401         MOV       A,#0x1
   \   00006E   6D           XRL       A,R5
   \   00006F   70D1         JNZ       ??bindNumBoundTo_4
   \   000071   8882         MOV       DPL,R0
   \   000073   8983         MOV       DPH,R1
   \   000075   A3           INC       DPTR
   \   000076   A3           INC       DPTR
   \   000077   E0           MOVX      A,@DPTR
   \   000078   6A           XRL       A,R2
   \   000079   7003         JNZ       ??bindNumBoundTo_9
   \   00007B   A3           INC       DPTR
   \   00007C   E0           MOVX      A,@DPTR
   \   00007D   6B           XRL       A,R3
   \                     ??bindNumBoundTo_9:
   \   00007E   60C0         JZ        ??bindNumBoundTo_6
   \   000080   80C0         SJMP      ??bindNumBoundTo_4
    737              }
    738            }
    739          
    740            return num;
   \                     ??bindNumBoundTo_7:
   \   000082   A9..         MOV       R1,?V0
   \   000084   02....       LJMP      ??Subroutine38_0 & 0xFFFF
    741          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   EC           MOV       A,R4
   \   000001                REQUIRE ??Subroutine31_0
   \   000001                ; // Fall through to label ??Subroutine31_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine31_0:
   \   000000   75F00E       MOV       B,#0xe
   \   000003   A4           MUL       AB
   \   000004   F8           MOV       R0,A
   \   000005   A9F0         MOV       R1,B
   \   000007   74..         MOV       A,#BindingTable & 0xff
   \   000009   28           ADD       A,R0
   \   00000A   F8           MOV       R0,A
   \   00000B   74..         MOV       A,#(BindingTable >> 8) & 0xff
   \   00000D   39           ADDC      A,R1
   \   00000E   F9           MOV       R1,A
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine38_0:
   \   000000   7F06         MOV       R7,#0x6
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine39_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FB           MOV       R3,A
   \   000005   22           RET
    742          
    743          /*********************************************************************
    744           * @fn          bindNumReflections
    745           *
    746           * @brief       Counts the number of reflections needed for a
    747           *              endpoint and cluster ID combo.
    748           *
    749           * @param       ep - source endpoint
    750           * @param       clusterID - matching clusterID
    751           *
    752           * @return      number of reflections needed.
    753           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    754          uint16 bindNumReflections( uint8 ep, uint16 clusterID )
   \                     bindNumReflections:
    755          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V3,R1
   \   000007   8A..         MOV       ?V0,R2
   \   000009   8B..         MOV       ?V1,R3
    756            bindTableIndex_t x;
    757            BindingEntry_t *pBind;
    758            uint16 cnt = 0;
   \   00000B   7E00         MOV       R6,#0x0
   \   00000D   7F00         MOV       R7,#0x0
    759            uint8 bindEP;
    760          
    761            for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
   \   00000F   75..00       MOV       ?V2,#0x0
   \   000012   8025         SJMP      ??bindNumReflections_0
    762            {
    763              pBind = &BindingTable[x];
   \                     ??bindNumReflections_1:
   \   000014   E5..         MOV       A,?V2
   \   000016   75F00E       MOV       B,#0xe
   \   000019   A4           MUL       AB
   \   00001A   F8           MOV       R0,A
   \   00001B   A9F0         MOV       R1,B
   \   00001D   12....       LCALL     ?Subroutine27 & 0xFFFF
    764              bindEP = pBind->srcEP;
    765          
    766              if ( (bindEP == ep) && (bindIsClusterIDinList( pBind, clusterID )) )
   \                     ??CrossCallReturnLabel_45:
   \   000020   65..         XRL       A,?V3
   \   000022   7013         JNZ       ??bindNumReflections_2
   \   000024                ; Setup parameters for call to function bindIsClusterIDinList
   \   000024   AC..         MOV       R4,?V0
   \   000026   AD..         MOV       R5,?V1
   \   000028   AA82         MOV       R2,DPL
   \   00002A   AB83         MOV       R3,DPH
   \   00002C   12....       LCALL     `??bindIsClusterIDinList::?relay`; Banked call to: bindIsClusterIDinList
   \   00002F   E9           MOV       A,R1
   \   000030   6005         JZ        ??bindNumReflections_2
    767              {
    768                cnt++;
   \   000032   0E           INC       R6
   \   000033   EE           MOV       A,R6
   \   000034   7001         JNZ       ??bindNumReflections_2
   \   000036   0F           INC       R7
    769              }
    770            }
   \                     ??bindNumReflections_2:
   \   000037   05..         INC       ?V2
   \                     ??bindNumReflections_0:
   \   000039   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   00003C   40D6         JC        ??bindNumReflections_1
    771          
    772            return ( cnt );
   \   00003E   EE           MOV       A,R6
   \   00003F   FA           MOV       R2,A
   \   000040   EF           MOV       A,R7
   \   000041   FB           MOV       R3,A
   \   000042   02....       LJMP      ?Subroutine4 & 0xFFFF
    773          }
    774          
    775          /*********************************************************************
    776           * @fn          bindFind
    777           *
    778           * @brief       Finds the binding entry for the source address, endpoint
    779           *              and cluster ID passed in as a parameter.
    780           *
    781           * @param       ep - source endpoint
    782           * @param       clusterID - matching clusterID
    783           * @param       skip - number of matches to skip before returning
    784           *
    785           * @return      pointer to the binding table entry, NULL if not found
    786           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    787          BindingEntry_t *bindFind( uint8 ep, uint16 clusterID, uint8 skipping )
   \                     bindFind:
    788          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V4,R1
   \   000007   8A..         MOV       ?V0,R2
   \   000009   8B..         MOV       ?V1,R3
   \   00000B   8C..         MOV       ?V5,R4
    789            BindingEntry_t *pBind;
    790            byte skipped = 0;
   \   00000D   75..00       MOV       ?V2,#0x0
    791            bindTableIndex_t x;
    792          
    793            for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
   \   000010   75..00       MOV       ?V3,#0x0
   \   000013   8004         SJMP      ??bindFind_0
    794            {
    795              pBind = &BindingTable[x];
    796          
    797              if ( ( pBind->srcEP == ep) && bindIsClusterIDinList( pBind, clusterID ))
    798              {
    799                if ( skipped < skipping )
    800                {
    801                  skipped++;
   \                     ??bindFind_1:
   \   000015   05..         INC       ?V2
    802                }
   \                     ??bindFind_2:
   \   000017   05..         INC       ?V3
   \                     ??bindFind_0:
   \   000019   90....       MOV       DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   00001C   E4           CLR       A
   \   00001D   93           MOVC      A,@A+DPTR
   \   00001E   F8           MOV       R0,A
   \   00001F   E5..         MOV       A,?V3
   \   000021   C3           CLR       C
   \   000022   98           SUBB      A,R0
   \   000023   5024         JNC       ??bindFind_3
   \   000025   E5..         MOV       A,?V3
   \   000027   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   00002A   65..         XRL       A,?V4
   \   00002C   70E9         JNZ       ??bindFind_2
   \   00002E                ; Setup parameters for call to function bindIsClusterIDinList
   \   00002E   AC..         MOV       R4,?V0
   \   000030   AD..         MOV       R5,?V1
   \   000032   EE           MOV       A,R6
   \   000033   FA           MOV       R2,A
   \   000034   EF           MOV       A,R7
   \   000035   FB           MOV       R3,A
   \   000036   12....       LCALL     `??bindIsClusterIDinList::?relay`; Banked call to: bindIsClusterIDinList
   \   000039   E9           MOV       A,R1
   \   00003A   60DB         JZ        ??bindFind_2
   \   00003C   E5..         MOV       A,?V2
   \   00003E   C3           CLR       C
   \   00003F   95..         SUBB      A,?V5
   \   000041   40D2         JC        ??bindFind_1
    803                else
    804                {
    805                  return ( pBind );
   \   000043   EE           MOV       A,R6
   \   000044   FA           MOV       R2,A
   \   000045   EF           MOV       A,R7
   \   000046   FB           MOV       R3,A
   \   000047   8004         SJMP      ??bindFind_4
    806                }
    807              }
    808            }
    809          
    810            return ( (BindingEntry_t *)NULL );
   \                     ??bindFind_3:
   \   000049   7A00         MOV       R2,#0x0
   \   00004B   7B00         MOV       R3,#0x0
   \                     ??bindFind_4:
   \   00004D   02....       LJMP      ??Subroutine38_0 & 0xFFFF
    811          }
    812          
    813          /*********************************************************************
    814           * @fn      bindAddressClear
    815           *
    816           * @brief   Lookup a binding entry by specific Idx, if none is found
    817           *          clears the BINDING user from Address Manager.
    818           *
    819           * @param   dstIdx - Source Address Manager Index
    820           *
    821           * @return  none
    822           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    823          void bindAddressClear( uint16 dstIdx )
   \                     bindAddressClear:
    824          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 13
   \   000004   74F3         MOV       A,#-0xd
   \   000006   12....       LCALL     ?ALLOC_XSTACK8
    825            bindTableIndex_t i;
    826          
    827            if ( dstIdx != INVALID_NODE_ADDR )
   \   000009   74FE         MOV       A,#-0x2
   \   00000B   6A           XRL       A,R2
   \   00000C   7003         JNZ       ??bindAddressClear_0
   \   00000E   74FF         MOV       A,#-0x1
   \   000010   6B           XRL       A,R3
   \                     ??bindAddressClear_0:
   \   000011   604A         JZ        ??bindAddressClear_1
    828            {
    829              // Looks for a specific Idx
    830              for ( i = 0; i < gNWK_MAX_BINDING_ENTRIES; i++ )
   \   000013   7C00         MOV       R4,#0x0
   \   000015   8022         SJMP      ??bindAddressClear_2
    831              {
    832                if ( ( BindingTable[i].dstGroupMode != AddrGroup ) &&
    833                     ( BindingTable[i].dstGroupMode == DSTGROUPMODE_ADDR ) &&
    834                     ( BindingTable[i].dstIdx == dstIdx ) )
   \                     ??bindAddressClear_3:
   \   000017   12....       LCALL     ?Subroutine13 & 0xFFFF
    835                {
    836                  break;  // found at least one
    837                }
    838              }
   \                     ??CrossCallReturnLabel_49:
   \   00001A   8882         MOV       DPL,R0
   \   00001C   8983         MOV       DPH,R1
   \   00001E   A3           INC       DPTR
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   FD           MOV       R5,A
   \   000021   7401         MOV       A,#0x1
   \   000023   6D           XRL       A,R5
   \   000024   6012         JZ        ??bindAddressClear_4
   \   000026   ED           MOV       A,R5
   \   000027   700F         JNZ       ??bindAddressClear_4
   \   000029   8882         MOV       DPL,R0
   \   00002B   8983         MOV       DPH,R1
   \   00002D   A3           INC       DPTR
   \   00002E   A3           INC       DPTR
   \   00002F   E0           MOVX      A,@DPTR
   \   000030   6A           XRL       A,R2
   \   000031   7003         JNZ       ??bindAddressClear_5
   \   000033   A3           INC       DPTR
   \   000034   E0           MOVX      A,@DPTR
   \   000035   6B           XRL       A,R3
   \                     ??bindAddressClear_5:
   \   000036   6025         JZ        ??bindAddressClear_1
   \                     ??bindAddressClear_4:
   \   000038   0C           INC       R4
   \                     ??bindAddressClear_2:
   \   000039   90....       MOV       DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   00003C   E4           CLR       A
   \   00003D   93           MOVC      A,@A+DPTR
   \   00003E   F8           MOV       R0,A
   \   00003F   EC           MOV       A,R4
   \   000040   C3           CLR       C
   \   000041   98           SUBB      A,R0
   \   000042   40D3         JC        ??bindAddressClear_3
    839          
    840              if ( i == gNWK_MAX_BINDING_ENTRIES )
   \   000044   E4           CLR       A
   \   000045   93           MOVC      A,@A+DPTR
   \   000046   6C           XRL       A,R4
   \   000047   7014         JNZ       ??bindAddressClear_1
    841              {
    842                // No binding entry is associated with dstIdx.
    843                // Remove user binding bit from the address manager entry corresponding to dstIdx.
    844                AddrMgrEntry_t addrEntry;
    845          
    846                addrEntry.user = ADDRMGR_USER_BINDING;
   \   000049   85..82       MOV       DPL,?XSP + 0
   \   00004C   85..83       MOV       DPH,?XSP + 1
   \   00004F   7404         MOV       A,#0x4
   \   000051   F0           MOVX      @DPTR,A
    847                addrEntry.index = dstIdx;
   \   000052   740B         MOV       A,#0xb
   \   000054   12....       LCALL     ?XSTACK_DISP0_8
   \   000057   12....       LCALL     ?Subroutine15 & 0xFFFF
    848          
    849                AddrMgrEntryRelease( &addrEntry );
    850              }
    851            }
   \                     ??CrossCallReturnLabel_16:
   \   00005A   12....       LCALL     `??AddrMgrEntryRelease::?relay`; Banked call to: AddrMgrEntryRelease
    852          }
   \                     ??bindAddressClear_1:
   \   00005D   80..         SJMP      ??Subroutine33_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine33_0:
   \   000000   740D         MOV       A,#0xd
   \   000002   12....       LCALL     ?DEALLOC_XSTACK8
   \   000005                REQUIRE ??Subroutine34_0
   \   000005                ; // Fall through to label ??Subroutine34_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   EA           MOV       A,R2
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   EB           MOV       A,R3
   \   000004   F0           MOVX      @DPTR,A
   \   000005                ; Setup parameters for call to function AddrMgrEntryRelease
   \   000005                ; Setup parameters for call to function bindingAddrMgsHelperFind
   \   000005                ; Setup parameters for call to function AddrMgrEntryGet
   \   000005                ; Setup parameters for call to function AddrMgrEntryGet
   \   000005   AA..         MOV       R2,?XSP + 0
   \   000007   AB..         MOV       R3,?XSP + 1
   \   000009   22           RET
    853          
    854          /*********************************************************************
    855           * @fn          bindUpdateAddr
    856           *
    857           * @brief       Update the network address in the binding table.
    858           *
    859           * @param       oldAddr - old network address
    860           * @param       newAddr - new network address
    861           *
    862           * @return      none
    863           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    864          void bindUpdateAddr( uint16 oldAddr, uint16 newAddr )
   \                     bindUpdateAddr:
    865          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV       A,#-0x9
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EC           MOV       A,R4
   \   00000B   FE           MOV       R6,A
   \   00000C   ED           MOV       A,R5
   \   00000D   FF           MOV       R7,A
    866            uint16 oldIdx;
    867            uint16 newIdx;
    868            zAddrType_t addr;
    869            bindTableIndex_t x;
    870            BindingEntry_t *pBind;
    871          
    872            addr.addrMode = Addr16Bit;
   \   00000E   7408         MOV       A,#0x8
   \   000010   12....       LCALL     ?XSTACK_DISP0_8
   \   000013   7402         MOV       A,#0x2
   \   000015   F0           MOVX      @DPTR,A
    873            addr.addr.shortAddr = oldAddr;
   \   000016   85..82       MOV       DPL,?XSP + 0
   \   000019   85..83       MOV       DPH,?XSP + 1
   \   00001C   12....       LCALL     ?Subroutine15 & 0xFFFF
    874            oldIdx = bindingAddrMgsHelperFind( &addr );
   \                     ??CrossCallReturnLabel_17:
   \   00001F   12....       LCALL     `??bindingAddrMgsHelperFind::?relay`; Banked call to: bindingAddrMgsHelperFind
   \   000022   8A..         MOV       ?V0,R2
   \   000024   8B..         MOV       ?V1,R3
    875            addr.addr.shortAddr = newAddr;
   \   000026   85..82       MOV       DPL,?XSP + 0
   \   000029   85..83       MOV       DPH,?XSP + 1
   \   00002C   EE           MOV       A,R6
   \   00002D   F0           MOVX      @DPTR,A
   \   00002E   A3           INC       DPTR
   \   00002F   EF           MOV       A,R7
   \   000030   F0           MOVX      @DPTR,A
    876            newIdx = bindingAddrMgsHelperFind( &addr );
   \   000031                ; Setup parameters for call to function bindingAddrMgsHelperFind
   \   000031   AA..         MOV       R2,?XSP + 0
   \   000033   AB..         MOV       R3,?XSP + 1
   \   000035   12....       LCALL     `??bindingAddrMgsHelperFind::?relay`; Banked call to: bindingAddrMgsHelperFind
   \   000038   8A..         MOV       ?V2,R2
    877          
    878            for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
   \   00003A   7A00         MOV       R2,#0x0
   \   00003C   8025         SJMP      ??bindUpdateAddr_0
    879            {
    880              pBind = &BindingTable[x];
   \                     ??bindUpdateAddr_1:
   \   00003E   EA           MOV       A,R2
   \   00003F   12....       LCALL     ??Subroutine31_0 & 0xFFFF
    881          
    882              if ( pBind->dstIdx == oldIdx )
   \                     ??CrossCallReturnLabel_47:
   \   000042   E8           MOV       A,R0
   \   000043   2402         ADD       A,#0x2
   \   000045   F8           MOV       R0,A
   \   000046   5001         JNC       ??bindUpdateAddr_2
   \   000048   09           INC       R1
   \                     ??bindUpdateAddr_2:
   \   000049   8882         MOV       DPL,R0
   \   00004B   8983         MOV       DPH,R1
   \   00004D   E0           MOVX      A,@DPTR
   \   00004E   65..         XRL       A,?V0
   \   000050   7004         JNZ       ??bindUpdateAddr_3
   \   000052   A3           INC       DPTR
   \   000053   E0           MOVX      A,@DPTR
   \   000054   65..         XRL       A,?V1
   \                     ??bindUpdateAddr_3:
   \   000056   700A         JNZ       ??bindUpdateAddr_4
    883              {
    884                pBind->dstIdx = newIdx;
   \   000058   8882         MOV       DPL,R0
   \   00005A   8983         MOV       DPH,R1
   \   00005C   E5..         MOV       A,?V2
   \   00005E   F0           MOVX      @DPTR,A
   \   00005F   A3           INC       DPTR
   \   000060   EB           MOV       A,R3
   \   000061   F0           MOVX      @DPTR,A
    885              }
    886            }
   \                     ??bindUpdateAddr_4:
   \   000062   0A           INC       R2
   \                     ??bindUpdateAddr_0:
   \   000063   90....       MOV       DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   000066   E4           CLR       A
   \   000067   93           MOVC      A,@A+DPTR
   \   000068   F8           MOV       R0,A
   \   000069   EA           MOV       A,R2
   \   00006A   C3           CLR       C
   \   00006B   98           SUBB      A,R0
   \   00006C   40D0         JC        ??bindUpdateAddr_1
    887          }
   \   00006E   7409         MOV       A,#0x9
   \   000070   12....       LCALL     ?DEALLOC_XSTACK8
   \   000073   02....       LJMP      ?Subroutine4 & 0xFFFF
    888          
    889          /*********************************************************************
    890           * @fn      bindingAddrMgsHelperFind
    891           *
    892           * @brief   Turns an zAddrType_t to an Addr Manager index
    893           *
    894           * @param   addr - zAddrType_t
    895           *
    896           * @return  INVALID_NODE_ADDR if not found, otherwise an index
    897           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   740B         MOV       A,#0xb
   \   000002                REQUIRE ??Subroutine32_0
   \   000002                ; // Fall through to label ??Subroutine32_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine32_0:
   \   000000   12....       LCALL     ?XSTACK_DISP0_8
   \   000003   12....       LCALL     ??Subroutine39_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   000006                REQUIRE ??Subroutine33_0
   \   000006                ; // Fall through to label ??Subroutine33_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    898          uint16 bindingAddrMgsHelperFind( zAddrType_t *addr )
   \                     bindingAddrMgsHelperFind:
    899          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 13
   \   000004   74F3         MOV       A,#-0xd
   \   000006   12....       LCALL     ?ALLOC_XSTACK8
    900            AddrMgrEntry_t entry;
    901          
    902            // Resolve addresses with the address manager
    903            entry.user = ADDRMGR_USER_BINDING;
   \   000009   12....       LCALL     ?Subroutine17 & 0xFFFF
    904            if ( addr->addrMode == Addr16Bit )
   \                     ??CrossCallReturnLabel_22:
   \   00000C   6402         XRL       A,#0x2
   \   00000E   700E         JNZ       ??bindingAddrMgsHelperFind_0
    905            {
    906              entry.nwkAddr = addr->addr.shortAddr;
   \   000010   12....       LCALL     ?Subroutine20 & 0xFFFF
    907              AddrMgrEntryLookupNwk( &entry );
    908            }
   \                     ??CrossCallReturnLabel_51:
   \   000013   12....       LCALL     ?XSTACK_DISP0_8
   \   000016   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   000019   12....       LCALL     `??AddrMgrEntryLookupNwk::?relay`; Banked call to: AddrMgrEntryLookupNwk
   \   00001C   8017         SJMP      ??bindingAddrMgsHelperFind_1
    909            else
    910            {
    911              AddrMgrExtAddrSet( entry.extAddr, addr->addr.extAddr );
   \                     ??bindingAddrMgsHelperFind_0:
   \   00001E                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   00001E   EA           MOV       A,R2
   \   00001F   FC           MOV       R4,A
   \   000020   EB           MOV       A,R3
   \   000021   FD           MOV       R5,A
   \   000022   7403         MOV       A,#0x3
   \   000024   12....       LCALL     ?XSTACK_DISP0_8
   \   000027   AA82         MOV       R2,DPL
   \   000029   AB83         MOV       R3,DPH
   \   00002B   12....       LCALL     `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
    912              AddrMgrEntryLookupExt( &entry );
   \   00002E                ; Setup parameters for call to function AddrMgrEntryLookupExt
   \   00002E   AA..         MOV       R2,?XSP + 0
   \   000030   AB..         MOV       R3,?XSP + 1
   \   000032   12....       LCALL     `??AddrMgrEntryLookupExt::?relay`; Banked call to: AddrMgrEntryLookupExt
    913            }
    914          
    915            return ( entry.index );
   \                     ??bindingAddrMgsHelperFind_1:
   \   000035   02....       LJMP      ?Subroutine1 & 0xFFFF
    916          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   8A82         MOV       DPL,R2
   \   000002   8B83         MOV       DPH,R3
   \   000004                REQUIRE ??Subroutine35_0
   \   000004                ; // Fall through to label ??Subroutine35_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine35_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   7401         MOV       A,#0x1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   E8           MOV       A,R0
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   E9           MOV       A,R1
   \   000004   F0           MOVX      @DPTR,A
   \   000005                ; Setup parameters for call to function AddrMgrEntryLookupNwk
   \   000005                ; Setup parameters for call to function AddrMgrEntryLookupNwk
   \   000005   AA..         MOV       R2,?XSP + 0
   \   000007   AB..         MOV       R3,?XSP + 1
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006   7404         MOV       A,#0x4
   \   000008   F0           MOVX      @DPTR,A
   \   000009   8A82         MOV       DPL,R2
   \   00000B   8B83         MOV       DPH,R3
   \   00000D   A3           INC       DPTR
   \   00000E   A3           INC       DPTR
   \   00000F   A3           INC       DPTR
   \   000010   A3           INC       DPTR
   \   000011   A3           INC       DPTR
   \   000012   A3           INC       DPTR
   \   000013   A3           INC       DPTR
   \   000014   A3           INC       DPTR
   \   000015   E0           MOVX      A,@DPTR
   \   000016   22           RET
    917          
    918          /*********************************************************************
    919           * @fn      bindingAddrMgsHelperConvert
    920           *
    921           * @brief   Convert an index into an zAddrType_t
    922           *
    923           * @param   idx -
    924           * @param   addr - zAddrType_t
    925           *
    926           * @return  TRUE if found, FALSE if not
    927           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    928          uint8 bindingAddrMgsHelperConvert( uint16 idx, zAddrType_t *addr )
   \                     bindingAddrMgsHelperConvert:
    929          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV       A,#-0xd
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EC           MOV       A,R4
   \   00000B   FE           MOV       R6,A
   \   00000C   ED           MOV       A,R5
   \   00000D   FF           MOV       R7,A
    930            AddrMgrEntry_t entry;
    931            uint8 stat;
    932          
    933            // Resolve addresses with the address manager
    934            entry.user = ADDRMGR_USER_BINDING;
   \   00000E   85..82       MOV       DPL,?XSP + 0
   \   000011   85..83       MOV       DPH,?XSP + 1
   \   000014   7404         MOV       A,#0x4
   \   000016   F0           MOVX      @DPTR,A
    935            entry.index = idx;
   \   000017   740B         MOV       A,#0xb
   \   000019   12....       LCALL     ?XSTACK_DISP0_8
   \   00001C   12....       LCALL     ?Subroutine15 & 0xFFFF
    936            stat = AddrMgrEntryGet( &entry );
   \                     ??CrossCallReturnLabel_18:
   \   00001F   12....       LCALL     `??AddrMgrEntryGet::?relay`; Banked call to: AddrMgrEntryGet
   \   000022   E9           MOV       A,R1
   \   000023   F5..         MOV       ?V0,A
    937            if ( stat )
   \   000025   601D         JZ        ??bindingAddrMgsHelperConvert_0
    938            {
    939              addr->addrMode = Addr64Bit;
   \   000027   8E82         MOV       DPL,R6
   \   000029   8F83         MOV       DPH,R7
   \   00002B   A3           INC       DPTR
   \   00002C   A3           INC       DPTR
   \   00002D   A3           INC       DPTR
   \   00002E   A3           INC       DPTR
   \   00002F   A3           INC       DPTR
   \   000030   A3           INC       DPTR
   \   000031   A3           INC       DPTR
   \   000032   A3           INC       DPTR
   \   000033   7403         MOV       A,#0x3
   \   000035   F0           MOVX      @DPTR,A
    940              osal_cpyExtAddr( addr->addr.extAddr, entry.extAddr );
   \   000036                ; Setup parameters for call to function sAddrExtCpy
   \   000036   12....       LCALL     ?XSTACK_DISP0_8
   \   000039   AC82         MOV       R4,DPL
   \   00003B   AD83         MOV       R5,DPH
   \   00003D   EE           MOV       A,R6
   \   00003E   FA           MOV       R2,A
   \   00003F   EF           MOV       A,R7
   \   000040   FB           MOV       R3,A
   \   000041   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
    941            }
    942          
    943            return ( stat );
   \                     ??bindingAddrMgsHelperConvert_0:
   \   000044   A9..         MOV       R1,?V0
   \   000046   740D         MOV       A,#0xd
   \   000048   12....       LCALL     ?DEALLOC_XSTACK8
   \   00004B   02....       LJMP      ?Subroutine2 & 0xFFFF
    944          }
    945          
    946          /*********************************************************************
    947           * @fn      bindingAddrMgsHelperConvertShort
    948           *
    949           * @brief   Convert an index into a short address
    950           *
    951           * @param   idx -
    952           *
    953           * @return  INVALID_NODE_ADDR if not available, otherwise the short address
    954           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    955          uint16 bindingAddrMgsHelperConvertShort( uint16 idx )
   \                     bindingAddrMgsHelperConvertShort:
    956          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 13
   \   000004   74F3         MOV       A,#-0xd
   \   000006   12....       LCALL     ?ALLOC_XSTACK8
    957            AddrMgrEntry_t entry;
    958          
    959            // Resolve addresses with the address manager
    960            entry.user = ADDRMGR_USER_BINDING;
   \   000009   85..82       MOV       DPL,?XSP + 0
   \   00000C   85..83       MOV       DPH,?XSP + 1
   \   00000F   7404         MOV       A,#0x4
   \   000011   F0           MOVX      @DPTR,A
    961            entry.index = idx;
   \   000012   740B         MOV       A,#0xb
   \   000014   12....       LCALL     ?XSTACK_DISP0_8
   \   000017   12....       LCALL     ?Subroutine15 & 0xFFFF
    962            AddrMgrEntryGet( &entry );
   \                     ??CrossCallReturnLabel_19:
   \   00001A   12....       LCALL     `??AddrMgrEntryGet::?relay`; Banked call to: AddrMgrEntryGet
    963          
    964            return ( entry.nwkAddr );
   \   00001D   7401         MOV       A,#0x1
   \   00001F   02....       LJMP      ??Subroutine32_0 & 0xFFFF
    965          }
    966          
    967          /*********************************************************************
    968           * @fn      bindAddrMgrLocalLoad
    969           *
    970           * @brief   Load local(self and parent) address information into
    971           *          Address Manager
    972           *
    973           * @param   none
    974           *
    975           * @return  none
    976           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine29_0
   \   000003                ; // Fall through to label ??Subroutine29_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    977          void bindAddrMgrLocalLoad( void )
   \                     bindAddrMgrLocalLoad:
    978          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV       A,#-0xd
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    979            AddrMgrEntry_t entry;
    980            uint16         parent;
    981          
    982            // add "local"(self and parent) address informtion into the Address
    983            // Manager
    984            if ( bindAddrMgrLocalLoaded == FALSE )
   \   00000A   90....       MOV       DPTR,#bindAddrMgrLocalLoaded
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   707B         JNZ       ??bindAddrMgrLocalLoad_0
    985            {
    986              // add the device's address information
    987              entry.user    = ADDRMGR_USER_BINDING;
   \   000010   85..82       MOV       DPL,?XSP + 0
   \   000013   85..83       MOV       DPH,?XSP + 1
   \   000016   7404         MOV       A,#0x4
   \   000018   F0           MOVX      @DPTR,A
    988              entry.nwkAddr = _NIB.nwkDevAddress;
   \   000019   90....       MOV       DPTR,#_NIB + 20
   \   00001C   12....       LCALL     ??Subroutine35_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   00001F   12....       LCALL     ?XSTACK_DISP0_8
   \   000022   E8           MOV       A,R0
   \   000023   F0           MOVX      @DPTR,A
   \   000024   A3           INC       DPTR
   \   000025   E9           MOV       A,R1
   \   000026   F0           MOVX      @DPTR,A
    989              AddrMgrExtAddrSet( entry.extAddr, NLME_GetExtAddr() );
   \   000027                ; Setup parameters for call to function NLME_GetExtAddr
   \   000027   12....       LCALL     `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   00002A   8A..         MOV       ?V0,R2
   \   00002C   8B..         MOV       ?V1,R3
   \   00002E   AC..         MOV       R4,?V0
   \   000030   AD..         MOV       R5,?V1
   \   000032                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   000032   7403         MOV       A,#0x3
   \   000034   12....       LCALL     ?XSTACK_DISP0_8
   \   000037   AA82         MOV       R2,DPL
   \   000039   AB83         MOV       R3,DPH
   \   00003B   12....       LCALL     `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
    990              AddrMgrEntryUpdate( &entry );
   \   00003E                ; Setup parameters for call to function AddrMgrEntryUpdate
   \   00003E   AA..         MOV       R2,?XSP + 0
   \   000040   AB..         MOV       R3,?XSP + 1
   \   000042   12....       LCALL     `??AddrMgrEntryUpdate::?relay`; Banked call to: AddrMgrEntryUpdate
    991          
    992              // make sure parent address is valid
    993              parent = NLME_GetCoordShortAddr();
   \   000045                ; Setup parameters for call to function NLME_GetCoordShortAddr
   \   000045   12....       LCALL     `??NLME_GetCoordShortAddr::?relay`; Banked call to: NLME_GetCoordShortAddr
   \   000048   8A..         MOV       ?V0,R2
   \   00004A   8B..         MOV       ?V1,R3
   \   00004C   A8..         MOV       R0,?V0
   \   00004E   A9..         MOV       R1,?V1
    994              if ( ( parent != entry.nwkAddr     ) &&
    995                   ( parent != INVALID_NODE_ADDR )    )
   \   000050   7401         MOV       A,#0x1
   \   000052   12....       LCALL     ?XSTACK_DISP0_8
   \   000055   E0           MOVX      A,@DPTR
   \   000056   68           XRL       A,R0
   \   000057   7003         JNZ       ??bindAddrMgrLocalLoad_1
   \   000059   A3           INC       DPTR
   \   00005A   E0           MOVX      A,@DPTR
   \   00005B   69           XRL       A,R1
   \                     ??bindAddrMgrLocalLoad_1:
   \   00005C   6027         JZ        ??bindAddrMgrLocalLoad_2
   \   00005E   74FE         MOV       A,#-0x2
   \   000060   68           XRL       A,R0
   \   000061   7003         JNZ       ??bindAddrMgrLocalLoad_3
   \   000063   74FF         MOV       A,#-0x1
   \   000065   69           XRL       A,R1
   \                     ??bindAddrMgrLocalLoad_3:
   \   000066   601D         JZ        ??bindAddrMgrLocalLoad_2
    996              {
    997                // add the parent's address information
    998                entry.nwkAddr = parent;
   \   000068   7401         MOV       A,#0x1
   \   00006A   12....       LCALL     ?XSTACK_DISP0_8
   \   00006D   E8           MOV       A,R0
   \   00006E   F0           MOVX      @DPTR,A
   \   00006F   A3           INC       DPTR
   \   000070   E9           MOV       A,R1
   \   000071   F0           MOVX      @DPTR,A
    999                NLME_GetCoordExtAddr( entry.extAddr );
   \   000072                ; Setup parameters for call to function NLME_GetCoordExtAddr
   \   000072   7403         MOV       A,#0x3
   \   000074   12....       LCALL     ?XSTACK_DISP0_8
   \   000077   AA82         MOV       R2,DPL
   \   000079   AB83         MOV       R3,DPH
   \   00007B   12....       LCALL     `??NLME_GetCoordExtAddr::?relay`; Banked call to: NLME_GetCoordExtAddr
   1000                AddrMgrEntryUpdate( &entry );
   \   00007E                ; Setup parameters for call to function AddrMgrEntryUpdate
   \   00007E   AA..         MOV       R2,?XSP + 0
   \   000080   AB..         MOV       R3,?XSP + 1
   \   000082   12....       LCALL     `??AddrMgrEntryUpdate::?relay`; Banked call to: AddrMgrEntryUpdate
   1001              }
   1002          
   1003              bindAddrMgrLocalLoaded = TRUE;
   \                     ??bindAddrMgrLocalLoad_2:
   \   000085   90....       MOV       DPTR,#bindAddrMgrLocalLoaded
   \   000088   7401         MOV       A,#0x1
   \   00008A   F0           MOVX      @DPTR,A
   1004            }
   1005          }
   \                     ??bindAddrMgrLocalLoad_0:
   \   00008B   740D         MOV       A,#0xd
   \   00008D   02....       LJMP      ?Subroutine0 & 0xFFFF
   1006          
   1007          /*********************************************************************
   1008           * @fn      bindAddrIndexGet
   1009           *
   1010           * @brief   Get bind address index.
   1011           *
   1012           * @param   addr - <zAddrType_t>
   1013           *
   1014           * @return  (uint16) address index
   1015           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1016          uint16 bindAddrIndexGet( zAddrType_t* addr )
   \                     bindAddrIndexGet:
   1017          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 13
   \   000004   74F3         MOV       A,#-0xd
   \   000006   12....       LCALL     ?ALLOC_XSTACK8
   1018            AddrMgrEntry_t entry;
   1019            uint8          update;
   1020          
   1021            update = FALSE;
   1022          
   1023            // sync binding addresses with the address manager
   1024            entry.user = ADDRMGR_USER_BINDING;
   \   000009   12....       LCALL     ?Subroutine17 & 0xFFFF
   1025          
   1026            if ( addr->addrMode == Addr16Bit )
   \                     ??CrossCallReturnLabel_23:
   \   00000C   F8           MOV       R0,A
   \   00000D   7402         MOV       A,#0x2
   \   00000F   68           XRL       A,R0
   \   000010   7011         JNZ       ??bindAddrIndexGet_0
   1027            {
   1028              entry.nwkAddr = addr->addr.shortAddr;
   \   000012   12....       LCALL     ?Subroutine20 & 0xFFFF
   1029          
   1030              if ( AddrMgrEntryLookupNwk( &entry ) == FALSE )
   1031              {
   1032                update = TRUE;
   1033              }
   1034            }
   \                     ??CrossCallReturnLabel_52:
   \   000015   12....       LCALL     ?XSTACK_DISP0_8
   \   000018   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   00001B   12....       LCALL     `??AddrMgrEntryLookupNwk::?relay`; Banked call to: AddrMgrEntryLookupNwk
   \   00001E   E9           MOV       A,R1
   \   00001F   704C         JNZ       ??bindAddrIndexGet_1
   \   000021   801F         SJMP      ??bindAddrIndexGet_2
   1035            else if ( addr->addrMode == Addr64Bit )
   \                     ??bindAddrIndexGet_0:
   \   000023   7403         MOV       A,#0x3
   \   000025   68           XRL       A,R0
   \   000026   7023         JNZ       ??bindAddrIndexGet_3
   1036            {
   1037              AddrMgrExtAddrSet( entry.extAddr, addr->addr.extAddr );
   \   000028                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   000028   EA           MOV       A,R2
   \   000029   FC           MOV       R4,A
   \   00002A   EB           MOV       A,R3
   \   00002B   FD           MOV       R5,A
   \   00002C   7403         MOV       A,#0x3
   \   00002E   12....       LCALL     ?XSTACK_DISP0_8
   \   000031   AA82         MOV       R2,DPL
   \   000033   AB83         MOV       R3,DPH
   \   000035   12....       LCALL     `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
   1038          
   1039              if ( AddrMgrEntryLookupExt( &entry ) == FALSE )
   \   000038                ; Setup parameters for call to function AddrMgrEntryLookupExt
   \   000038   AA..         MOV       R2,?XSP + 0
   \   00003A   AB..         MOV       R3,?XSP + 1
   \   00003C   12....       LCALL     `??AddrMgrEntryLookupExt::?relay`; Banked call to: AddrMgrEntryLookupExt
   \   00003F   E9           MOV       A,R1
   \   000040   702B         JNZ       ??bindAddrIndexGet_1
   1040              {
   1041                update = TRUE;
   1042              }
   1043            }
   1044            else if ( addr->addrMode == AddrGroup )
   1045            {
   1046              entry.index = addr->addr.shortAddr;
   1047            }
   1048            else
   1049            {
   1050              entry.index = INVALID_NODE_ADDR;
   1051            }
   1052          
   1053            if ( update )
   1054            {
   1055              AddrMgrEntryUpdate( &entry );
   \                     ??bindAddrIndexGet_2:
   \   000042                ; Setup parameters for call to function AddrMgrEntryUpdate
   \   000042   AA..         MOV       R2,?XSP + 0
   \   000044   AB..         MOV       R3,?XSP + 1
   \   000046   12....       LCALL     `??AddrMgrEntryUpdate::?relay`; Banked call to: AddrMgrEntryUpdate
   \   000049   8022         SJMP      ??bindAddrIndexGet_1
   1056            }
   \                     ??bindAddrIndexGet_3:
   \   00004B   7401         MOV       A,#0x1
   \   00004D   68           XRL       A,R0
   \   00004E   7012         JNZ       ??bindAddrIndexGet_4
   \   000050   8A82         MOV       DPL,R2
   \   000052   8B83         MOV       DPH,R3
   \   000054   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   000057   740B         MOV       A,#0xb
   \   000059   12....       LCALL     ?XSTACK_DISP0_8
   \   00005C   E8           MOV       A,R0
   \   00005D   F0           MOVX      @DPTR,A
   \   00005E   A3           INC       DPTR
   \   00005F   E9           MOV       A,R1
   \   000060   800A         SJMP      ??bindAddrIndexGet_5
   \                     ??bindAddrIndexGet_4:
   \   000062   740B         MOV       A,#0xb
   \   000064   12....       LCALL     ?XSTACK_DISP0_8
   \   000067   74FE         MOV       A,#-0x2
   \   000069   F0           MOVX      @DPTR,A
   \   00006A   A3           INC       DPTR
   \   00006B   04           INC       A
   \                     ??bindAddrIndexGet_5:
   \   00006C   F0           MOVX      @DPTR,A
   1057          
   1058            return entry.index;
   \                     ??bindAddrIndexGet_1:
   \   00006D   02....       LJMP      ?Subroutine1 & 0xFFFF
   1059          }
   1060          
   1061          /*********************************************************************
   1062           * @fn      GetBindingTableEntry
   1063           *
   1064           * @brief   Get a pointer to the Nth valid binding table entry.
   1065           *
   1066           * @param   Nth valid entry being requested.
   1067           *
   1068           * @return  The Nth valid binding table entry.
   1069           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1070          BindingEntry_t *GetBindingTableEntry( uint16 Nth )
   \                     GetBindingTableEntry:
   1071          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   1072            BindingEntry_t *rtrn = NULL;
   \   000005   7800         MOV       R0,#0x0
   \   000007   7900         MOV       R1,#0x0
   1073          
   1074          #if defined ( REFLECTOR )
   1075            bindTableIndex_t idx, cnt = 0;
   \   000009   7C00         MOV       R4,#0x0
   1076          
   1077            for ( idx = 0; idx < gNWK_MAX_BINDING_ENTRIES; idx++ )
   \   00000B   7D00         MOV       R5,#0x0
   \   00000D   8001         SJMP      ??GetBindingTableEntry_0
   \                     ??GetBindingTableEntry_1:
   \   00000F   0D           INC       R5
   \                     ??GetBindingTableEntry_0:
   \   000010   90....       MOV       DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   000013   E4           CLR       A
   \   000014   93           MOVC      A,@A+DPTR
   \   000015   FE           MOV       R6,A
   \   000016   ED           MOV       A,R5
   \   000017   C3           CLR       C
   \   000018   9E           SUBB      A,R6
   \   000019   502A         JNC       ??GetBindingTableEntry_2
   1078            {
   1079              if ( BindingTable[idx].srcEP != NV_BIND_EMPTY )
   \   00001B   ED           MOV       A,R5
   \   00001C   75F00E       MOV       B,#0xe
   \   00001F   A4           MUL       AB
   \   000020   FE           MOV       R6,A
   \   000021   85F0..       MOV       ?V0,B
   \   000024   AF..         MOV       R7,?V0
   \   000026   74..         MOV       A,#BindingTable & 0xff
   \   000028   2E           ADD       A,R6
   \   000029   F582         MOV       DPL,A
   \   00002B   74..         MOV       A,#(BindingTable >> 8) & 0xff
   \   00002D   3F           ADDC      A,R7
   \   00002E   F583         MOV       DPH,A
   \   000030   E0           MOVX      A,@DPTR
   \   000031   F4           CPL       A
   \   000032   60DB         JZ        ??GetBindingTableEntry_1
   1080              {
   1081                if ( cnt++ == Nth )
   \   000034   8C..         MOV       ?V0,R4
   \   000036   7401         MOV       A,#0x1
   \   000038   2C           ADD       A,R4
   \   000039   FC           MOV       R4,A
   \   00003A   AE..         MOV       R6,?V0
   \   00003C   EA           MOV       A,R2
   \   00003D   6E           XRL       A,R6
   \   00003E   4B           ORL       A,R3
   \   00003F   70CE         JNZ       ??GetBindingTableEntry_1
   1082                {
   1083                  rtrn = BindingTable+idx;
   \   000041   A882         MOV       R0,DPL
   \   000043   A983         MOV       R1,DPH
   1084                  break;
   1085                }
   1086              }
   1087            }
   1088          #else
   1089            (void)Nth;
   1090          #endif
   1091          
   1092            return rtrn;
   \                     ??GetBindingTableEntry_2:
   \   000045   E8           MOV       A,R0
   \   000046   FA           MOV       R2,A
   \   000047   E9           MOV       A,R1
   \   000048   FB           MOV       R3,A
   \   000049   02....       LJMP      ?Subroutine2 & 0xFFFF
   1093          }
   1094          
   1095          #if !defined ( BINDINGTABLE_NV_SINGLES )
   1096          /*********************************************************************
   1097           * @fn          BindInitNV
   1098           *
   1099           * @brief       Initialize the Binding NV Item
   1100           *
   1101           * @param       none
   1102           *
   1103           * @return      ZSUCCESS if successful, NV_ITEM_UNINIT if item did not
   1104           *              exist in NV, NV_OPER_FAILED if failure.
   1105           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1106          byte BindInitNV( void )
   \                     BindInitNV:
   1107          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1108            byte ret;
   1109          
   1110            // Initialize the device list
   1111            ret = osal_nv_item_init( ZCD_NV_BINDING_TABLE,
   1112                            (uint16)( sizeof( nvBindingHdr_t ) + NV_BIND_ITEM_SIZE ), NULL );
   \   000005                ; Setup parameters for call to function osal_nv_item_init
   \   000005   E4           CLR       A
   \   000006   F5..         MOV       ?V0,A
   \   000008   F5..         MOV       ?V1,A
   \   00000A   78..         MOV       R0,#?V0
   \   00000C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00000F   12....       LCALL     ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   000012   12....       LCALL     ??Subroutine36_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   000015   12....       LCALL     `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   000018   7402         MOV       A,#0x2
   \   00001A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00001D   E9           MOV       A,R1
   \   00001E   FE           MOV       R6,A
   1113          
   1114            if (ret == NV_ITEM_UNINIT) 
   \   00001F   7409         MOV       A,#0x9
   \   000021   6E           XRL       A,R6
   \   000022   7003         JNZ       ??BindInitNV_0
   1115            {
   1116              BindSetDefaultNV();
   \   000024                ; Setup parameters for call to function BindSetDefaultNV
   \   000024   12....       LCALL     `??BindSetDefaultNV::?relay`; Banked call to: BindSetDefaultNV
   1117            }
   1118          
   1119            return ( ret );
   \                     ??BindInitNV_0:
   \   000027   EE           MOV       A,R6
   \   000028   F9           MOV       R1,A
   \   000029   02....       LJMP      ??Subroutine29_0 & 0xFFFF
   1120          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine36_0:
   \   000000   FC           MOV       R4,A
   \   000001   E4           CLR       A
   \   000002   39           ADDC      A,R1
   \   000003   FD           MOV       R5,A
   \   000004   7A41         MOV       R2,#0x41
   \   000006   7B00         MOV       R3,#0x0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   90....       MOV       DPTR,#gBIND_REC_SIZE
   \   000003   E4           CLR       A
   \   000004   93           MOVC      A,@A+DPTR
   \   000005   F8           MOV       R0,A
   \   000006   7401         MOV       A,#0x1
   \   000008   93           MOVC      A,@A+DPTR
   \   000009   F9           MOV       R1,A
   \   00000A   90....       MOV       DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   00000D   E4           CLR       A
   \   00000E   93           MOVC      A,@A+DPTR
   \   00000F   F5..         MOV       ?V0,A
   \   000011   E8           MOV       A,R0
   \   000012   85..F0       MOV       B,?V0
   \   000015   A4           MUL       AB
   \   000016   F8           MOV       R0,A
   \   000017   AAF0         MOV       R2,B
   \   000019   85..F0       MOV       B,?V0
   \   00001C   E9           MOV       A,R1
   \   00001D   A4           MUL       AB
   \   00001E   2A           ADD       A,R2
   \   00001F   F9           MOV       R1,A
   \   000020   E8           MOV       A,R0
   \   000021   2402         ADD       A,#0x2
   \   000023   22           RET
   1121          
   1122          /*********************************************************************
   1123           * @fn          BindSetDefaultNV
   1124           *
   1125           * @brief       Write the defaults to NV
   1126           *
   1127           * @param       none
   1128           *
   1129           * @return      none
   1130           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1131          void BindSetDefaultNV( void )
   \                     BindSetDefaultNV:
   1132          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1133            nvBindingHdr_t hdr;
   1134          
   1135            // Initialize the header
   1136            hdr.numRecs = 0;
   \   00000A   85..82       MOV       DPL,?XSP + 0
   \   00000D   85..83       MOV       DPH,?XSP + 1
   \   000010   E4           CLR       A
   \   000011   F0           MOVX      @DPTR,A
   \   000012   A3           INC       DPTR
   \   000013   F0           MOVX      @DPTR,A
   1137          
   1138            // Save off the header
   1139            osal_nv_write( ZCD_NV_BINDING_TABLE, 0, sizeof( nvBindingHdr_t ), &hdr );
   \   000014                ; Setup parameters for call to function osal_nv_write
   \   000014   A8..         MOV       R0,?XSP + 0
   \   000016   A9..         MOV       R1,?XSP + 1
   \   000018   88..         MOV       ?V0,R0
   \   00001A   89..         MOV       ?V1,R1
   \   00001C   78..         MOV       R0,#?V0
   \   00001E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000021   75..02       MOV       ?V0,#0x2
   \   000024   75..00       MOV       ?V1,#0x0
   \   000027   78..         MOV       R0,#?V0
   \   000029   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002C   7C00         MOV       R4,#0x0
   \   00002E   7D00         MOV       R5,#0x0
   \   000030   7A41         MOV       R2,#0x41
   \   000032   7B00         MOV       R3,#0x0
   \   000034   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000037   7404         MOV       A,#0x4
   \   000039   12....       LCALL     ?DEALLOC_XSTACK8
   1140          }
   \   00003C   7402         MOV       A,#0x2
   \   00003E   02....       LJMP      ?Subroutine0 & 0xFFFF
   1141          
   1142          #if !defined ( DONT_UPGRADE_BIND )
   1143          /*********************************************************************
   1144           * @fn          BindCopyBackupToNewNV
   1145           *
   1146           * @brief       Creates the New NV item, copies the backup data into
   1147           *              the New NV ID, and Deletes the duplicate NV item.
   1148           *
   1149           * @param       dupLen - NV item length of the old Binding table.
   1150           * @param       newLen - NV item length of the new Binding table to be created.
   1151           *
   1152           * @return      ZSuccess - All the actions were successful.
   1153           *              ZFailure - Any of the actions failed.
   1154           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1155          static uint8 BindCopyBackupToNewNV( uint16 dupLen, uint16 newLen )
   \                     BindCopyBackupToNewNV:
   1156          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 18
   \   000005   74EE         MOV       A,#-0x12
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   \   00000E   8C..         MOV       ?V0,R4
   \   000010   8D..         MOV       ?V1,R5
   1157            uint8 status = ZSuccess;
   \   000012   75..00       MOV       ?V2,#0x0
   1158            uint16 bindLen;
   1159          
   1160            bindLen = osal_nv_item_len( ZCD_NV_BINDING_TABLE );
   \   000015                ; Setup parameters for call to function osal_nv_item_len
   \   000015   7A41         MOV       R2,#0x41
   \   000017   7B00         MOV       R3,#0x0
   \   000019   12....       LCALL     `??osal_nv_item_len::?relay`; Banked call to: osal_nv_item_len
   \   00001C   8A..         MOV       ?V4,R2
   \   00001E   8B..         MOV       ?V5,R3
   \   000020   AC..         MOV       R4,?V4
   \   000022   AD..         MOV       R5,?V5
   1161          
   1162          
   1163            if ( ( bindLen > 0 ) && ( bindLen != newLen ) )
   \   000024   EC           MOV       A,R4
   \   000025   4D           ORL       A,R5
   \   000026   6011         JZ        ??BindCopyBackupToNewNV_0
   \   000028   E5..         MOV       A,?V0
   \   00002A   6C           XRL       A,R4
   \   00002B   7003         JNZ       ??BindCopyBackupToNewNV_1
   \   00002D   E5..         MOV       A,?V1
   \   00002F   6D           XRL       A,R5
   \                     ??BindCopyBackupToNewNV_1:
   \   000030   6007         JZ        ??BindCopyBackupToNewNV_0
   1164            {
   1165              // The existing item does not match the New length
   1166              osal_nv_delete( ZCD_NV_BINDING_TABLE, bindLen );
   \   000032                ; Setup parameters for call to function osal_nv_delete
   \   000032   7A41         MOV       R2,#0x41
   \   000034   7B00         MOV       R3,#0x0
   \   000036   12....       LCALL     `??osal_nv_delete::?relay`; Banked call to: osal_nv_delete
   1167            }
   1168          
   1169            // Create Binding Table NV item with the NEW legth
   1170            if ( osal_nv_item_init( ZCD_NV_BINDING_TABLE, newLen, NULL ) != NV_OPER_FAILED )
   \                     ??BindCopyBackupToNewNV_0:
   \   000039                ; Setup parameters for call to function osal_nv_item_init
   \   000039   E4           CLR       A
   \   00003A   F5..         MOV       ?V4,A
   \   00003C   F5..         MOV       ?V5,A
   \   00003E   78..         MOV       R0,#?V4
   \   000040   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000043   AC..         MOV       R4,?V0
   \   000045   AD..         MOV       R5,?V1
   \   000047   7A41         MOV       R2,#0x41
   \   000049   7B00         MOV       R3,#0x0
   \   00004B   12....       LCALL     `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   00004E   7402         MOV       A,#0x2
   \   000050   12....       LCALL     ?DEALLOC_XSTACK8
   \   000053   E9           MOV       A,R1
   \   000054   640A         XRL       A,#0xa
   \   000056   7003         JNZ       $+5
   \   000058   02....       LJMP      ??BindCopyBackupToNewNV_2 & 0xFFFF
   1171            {
   1172              nvBindingHdr_t hdrBackup;
   1173          
   1174              // Copy ONLY the valid records from the duplicate NV table into the new table
   1175              // at the end of this process the table content will be compacted
   1176              if ( osal_nv_read( ZCD_NV_DUPLICATE_BINDING_TABLE, 0, sizeof(nvBindingHdr_t), &hdrBackup ) == ZSuccess )
   \   00005B                ; Setup parameters for call to function osal_nv_read
   \   00005B   7402         MOV       A,#0x2
   \   00005D   12....       LCALL     ?XSTACK_DISP100_8
   \   000060   88..         MOV       ?V0,R0
   \   000062   89..         MOV       ?V1,R1
   \   000064   78..         MOV       R0,#?V0
   \   000066   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000069   75..02       MOV       ?V0,#0x2
   \   00006C   75..00       MOV       ?V1,#0x0
   \   00006F   78..         MOV       R0,#?V0
   \   000071   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000074   7C00         MOV       R4,#0x0
   \   000076   7D00         MOV       R5,#0x0
   \   000078   7A00         MOV       R2,#0x0
   \   00007A   7B03         MOV       R3,#0x3
   \   00007C   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   00007F   7404         MOV       A,#0x4
   \   000081   12....       LCALL     ?DEALLOC_XSTACK8
   \   000084   E9           MOV       A,R1
   \   000085   6003         JZ        $+5
   \   000087   02....       LJMP      ??BindCopyBackupToNewNV_2 & 0xFFFF
   1177              {
   1178                bindTableIndex_t i;
   1179                uint16 validBackupRecs = 0;
   \   00008A   85..82       MOV       DPL,?XSP + 0
   \   00008D   85..83       MOV       DPH,?XSP + 1
   \   000090   E4           CLR       A
   \   000091   F0           MOVX      @DPTR,A
   \   000092   A3           INC       DPTR
   \   000093   F0           MOVX      @DPTR,A
   1180                BindingEntry_t backupRec;
   1181          
   1182                // Read in the device list. This loop will stop when:
   1183                // The total number of valid records has been reached either because:
   1184                //          The new table is full of valid records OR
   1185                //          The old table has less valid records than the size of the table
   1186                for ( i = 0; ( validBackupRecs < gNWK_MAX_BINDING_ENTRIES ) && ( validBackupRecs < hdrBackup.numRecs ); i++ )
   \   000094   75..00       MOV       ?V0,#0x0
   \   000097   8069         SJMP      ??BindCopyBackupToNewNV_3
   1187                {
   1188                  if ( osal_nv_read( ZCD_NV_DUPLICATE_BINDING_TABLE,
   1189                                    (uint16)(sizeof(nvBindingHdr_t) + (i * NV_BIND_REC_SIZE)),
   1190                                    NV_BIND_REC_SIZE, &backupRec ) == ZSuccess )
   \                     ??BindCopyBackupToNewNV_4:
   \   000099                ; Setup parameters for call to function osal_nv_read
   \   000099   7404         MOV       A,#0x4
   \   00009B   12....       LCALL     ?XSTACK_DISP100_8
   \   00009E   88..         MOV       ?V4,R0
   \   0000A0   89..         MOV       ?V5,R1
   \   0000A2   78..         MOV       R0,#?V4
   \   0000A4   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000A7   90....       MOV       DPTR,#gBIND_REC_SIZE
   \   0000AA   12....       LCALL     ?PUSH_XSTACK8_C_TWO
   \   0000AD   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   0000B0   7A00         MOV       R2,#0x0
   \   0000B2   7B03         MOV       R3,#0x3
   \   0000B4   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   0000B7   7404         MOV       A,#0x4
   \   0000B9   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000BC   E9           MOV       A,R1
   \   0000BD   6003         JZ        $+5
   \   0000BF   02....       LJMP      ??BindCopyBackupToNewNV_2 & 0xFFFF
   1191                  {
   1192                    if ( backupRec.srcEP != NV_BIND_EMPTY )
   \   0000C2   7404         MOV       A,#0x4
   \   0000C4   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C7   E0           MOVX      A,@DPTR
   \   0000C8   F4           CPL       A
   \   0000C9   6035         JZ        ??CrossCallReturnLabel_34
   1193                    {
   1194                      // Save the valid record into the NEW NV table.
   1195                      if ( osal_nv_write( ZCD_NV_BINDING_TABLE,
   1196                                          (uint16)((sizeof(nvBindingHdr_t)) + (validBackupRecs * NV_BIND_REC_SIZE)),
   1197                                          NV_BIND_REC_SIZE, &backupRec ) != ZSuccess )
   \   0000CB                ; Setup parameters for call to function osal_nv_write
   \   0000CB   7404         MOV       A,#0x4
   \   0000CD   12....       LCALL     ?XSTACK_DISP100_8
   \   0000D0   88..         MOV       ?V4,R0
   \   0000D2   89..         MOV       ?V5,R1
   \   0000D4   78..         MOV       R0,#?V4
   \   0000D6   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000D9   90....       MOV       DPTR,#gBIND_REC_SIZE
   \   0000DC   12....       LCALL     ?PUSH_XSTACK8_C_TWO
   \   0000DF   7404         MOV       A,#0x4
   \   0000E1   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E4   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   0000E7   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   0000EA   FA           MOV       R2,A
   \   0000EB   85..F0       MOV       B,?V4
   \   0000EE   E9           MOV       A,R1
   \   0000EF   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   0000F2   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   0000F5   7404         MOV       A,#0x4
   \   0000F7   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000FA   E9           MOV       A,R1
   \   0000FB   707C         JNZ       ??BindCopyBackupToNewNV_2
   1198                      {
   1199                         status = ZFailure;
   1200                         break; // Terminate the loop as soon as a problem with NV is detected
   1201                      }
   1202          
   1203                      validBackupRecs++;
   \   0000FD   12....       LCALL     ?Subroutine24 & 0xFFFF
   1204                    }
   1205                  }
   1206                  else
   1207                  {
   1208                     status = ZFailure;
   1209                     break; // Terminate the loop as soon as a problem with NV is detected
   1210                  }
   1211                }
   \                     ??CrossCallReturnLabel_34:
   \   000100   05..         INC       ?V0
   \                     ??BindCopyBackupToNewNV_3:
   \   000102   85..82       MOV       DPL,?XSP + 0
   \   000105   85..83       MOV       DPH,?XSP + 1
   \   000108   C082         PUSH      DPL
   \   00010A   C083         PUSH      DPH
   \   00010C   90....       MOV       DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   00010F   E4           CLR       A
   \   000110   93           MOVC      A,@A+DPTR
   \   000111   F8           MOV       R0,A
   \   000112   D083         POP       DPH
   \   000114   D082         POP       DPL
   \   000116   C3           CLR       C
   \   000117   E0           MOVX      A,@DPTR
   \   000118   98           SUBB      A,R0
   \   000119   A3           INC       DPTR
   \   00011A   E0           MOVX      A,@DPTR
   \   00011B   9400         SUBB      A,#0x0
   \   00011D   5021         JNC       ??BindCopyBackupToNewNV_5
   \   00011F   85..82       MOV       DPL,?XSP + 0
   \   000122   85..83       MOV       DPH,?XSP + 1
   \   000125   C082         PUSH      DPL
   \   000127   C083         PUSH      DPH
   \   000129   7402         MOV       A,#0x2
   \   00012B   12....       LCALL     ?XSTACK_DISP0_8
   \   00012E   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   000131   D083         POP       DPH
   \   000133   D082         POP       DPL
   \   000135   C3           CLR       C
   \   000136   E0           MOVX      A,@DPTR
   \   000137   98           SUBB      A,R0
   \   000138   A3           INC       DPTR
   \   000139   E0           MOVX      A,@DPTR
   \   00013A   99           SUBB      A,R1
   \   00013B   5003         JNC       $+5
   \   00013D   02....       LJMP      ??BindCopyBackupToNewNV_4 & 0xFFFF
   1212          
   1213                // Only save the header and delete the duplicate element if the previous
   1214                // process was successful
   1215                if ( status == ZSuccess )
   1216                {
   1217                  // Save off the header
   1218                  if ( osal_nv_write( ZCD_NV_BINDING_TABLE, 0,
   1219                                      sizeof(nvBindingHdr_t), &validBackupRecs ) == ZSuccess )
   \                     ??BindCopyBackupToNewNV_5:
   \   000140                ; Setup parameters for call to function osal_nv_write
   \   000140   A8..         MOV       R0,?XSP + 0
   \   000142   A9..         MOV       R1,?XSP + 1
   \   000144   88..         MOV       ?V0,R0
   \   000146   89..         MOV       ?V1,R1
   \   000148   78..         MOV       R0,#?V0
   \   00014A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00014D   75..02       MOV       ?V0,#0x2
   \   000150   75..00       MOV       ?V1,#0x0
   \   000153   78..         MOV       R0,#?V0
   \   000155   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000158   7C00         MOV       R4,#0x0
   \   00015A   7D00         MOV       R5,#0x0
   \   00015C   7A41         MOV       R2,#0x41
   \   00015E   7B00         MOV       R3,#0x0
   \   000160   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000163   7404         MOV       A,#0x4
   \   000165   12....       LCALL     ?DEALLOC_XSTACK8
   \   000168   E9           MOV       A,R1
   \   000169   700E         JNZ       ??BindCopyBackupToNewNV_2
   1220                  {
   1221                    // Delete the duplicate NV Item, once the data has been stored in the NEW table
   1222                    if ( osal_nv_delete( ZCD_NV_DUPLICATE_BINDING_TABLE, dupLen ) != ZSuccess )
   \   00016B                ; Setup parameters for call to function osal_nv_delete
   \   00016B   EE           MOV       A,R6
   \   00016C   FC           MOV       R4,A
   \   00016D   EF           MOV       A,R7
   \   00016E   FD           MOV       R5,A
   \   00016F   7A00         MOV       R2,#0x0
   \   000171   7B03         MOV       R3,#0x3
   \   000173   12....       LCALL     `??osal_nv_delete::?relay`; Banked call to: osal_nv_delete
   \   000176   E9           MOV       A,R1
   \   000177   6003         JZ        ??BindCopyBackupToNewNV_6
   1223                    {
   1224                      status = ZFailure;
   1225                    }
   1226                  }
   1227                  else
   1228                  {
   1229                    status = ZFailure;
   1230                  }
   1231                }
   1232              }
   1233              else
   1234              {
   1235                status = ZFailure;
   1236              }
   1237            }
   1238            else
   1239            {
   1240              status = ZFailure;
   \                     ??BindCopyBackupToNewNV_2:
   \   000179   75..01       MOV       ?V2,#0x1
   1241            }
   1242          
   1243            return ( status );
   \                     ??BindCopyBackupToNewNV_6:
   \   00017C   A9..         MOV       R1,?V2
   \   00017E   7412         MOV       A,#0x12
   \   000180   80..         SJMP      ??Subroutine37_0
   1244          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   A4           MUL       AB
   \   000001   2A           ADD       A,R2
   \   000002   F9           MOV       R1,A
   \   000003   E8           MOV       A,R0
   \   000004   2402         ADD       A,#0x2
   \   000006                REQUIRE ??Subroutine36_0
   \   000006                ; // Fall through to label ??Subroutine36_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine37_0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine38_0
   \   000003                ; // Fall through to label ??Subroutine38_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   A8..         MOV       R0,?V0
   \   000002   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   000005   F9           MOV       R1,A
   \   000006   E8           MOV       A,R0
   \   000007   2402         ADD       A,#0x2
   \   000009   FC           MOV       R4,A
   \   00000A   E4           CLR       A
   \   00000B   39           ADDC      A,R1
   \   00000C   FD           MOV       R5,A
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   90....       MOV       DPTR,#gBIND_REC_SIZE
   \   000003   E4           CLR       A
   \   000004   93           MOVC      A,@A+DPTR
   \   000005   F5..         MOV       ?V4,A
   \   000007   7401         MOV       A,#0x1
   \   000009   93           MOVC      A,@A+DPTR
   \   00000A   F5..         MOV       ?V5,A
   \   00000C   E8           MOV       A,R0
   \   00000D   85..F0       MOV       B,?V4
   \   000010   A4           MUL       AB
   \   000011   C8           XCH       A,R0
   \   000012   AAF0         MOV       R2,B
   \   000014   85..F0       MOV       B,?V5
   \   000017   A4           MUL       AB
   \   000018   2A           ADD       A,R2
   \   000019   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006   E0           MOVX      A,@DPTR
   \   000007   2401         ADD       A,#0x1
   \   000009   F0           MOVX      @DPTR,A
   \   00000A   A3           INC       DPTR
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   3400         ADDC      A,#0x0
   \   00000E   F0           MOVX      @DPTR,A
   \   00000F   22           RET
   1245          #endif // !DONT_UPGRADE_BIND
   1246          
   1247          #if !defined ( DONT_UPGRADE_BIND )
   1248          /*********************************************************************
   1249           * @fn          BindUpgradeTableInNV
   1250           *
   1251           * @brief       Verifies if the existing table in NV has different size
   1252           *              than the table defined by parameters in the current code.
   1253           *              If different, creates a backup table, deletes the existing
   1254           *              table and creates the new table with the new size. After
   1255           *              this process is done ZCD_NV_BINDING_TABLE NV item contains
   1256           *              only valid records retrieved from the original table, up to
   1257           *              the maximum number of records defined by gNWK_MAX_BINDING_ENTRIES
   1258           *
   1259           * @param       none
   1260           *
   1261           * @return      ZSuccess - the Update process was sucessful.
   1262           *              ZFailure - otherwise.
   1263           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   7402         MOV       A,#0x2
   \   000002                REQUIRE ??Subroutine37_0
   \   000002                ; // Fall through to label ??Subroutine37_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1264          static uint8 BindUpgradeTableInNV( void )
   \                     BindUpgradeTableInNV:
   1265          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1266            uint8 status = ZSuccess;
   \   00000A   75..00       MOV       ?V2,#0x0
   1267            nvBindingHdr_t hdr;
   1268            uint16 dupLen;
   1269            uint16 bindLen;
   1270            uint16 newLen;
   1271            bool duplicateReady = FALSE;
   1272          
   1273            // Size of the Binding table based on current paramenters in the code
   1274            newLen = sizeof(nvBindingHdr_t) + NV_BIND_ITEM_SIZE;
   \   00000D   12....       LCALL     ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   000010   F5..         MOV       ?V0,A
   \   000012   E4           CLR       A
   \   000013   39           ADDC      A,R1
   \   000014   F5..         MOV       ?V1,A
   1275          
   1276            // Size of the Binding table NV item, this is the whole size of the item,
   1277            // it could inculde invalid records also
   1278            bindLen = osal_nv_item_len( ZCD_NV_BINDING_TABLE );
   \   000016                ; Setup parameters for call to function osal_nv_item_len
   \   000016   7A41         MOV       R2,#0x41
   \   000018   7B00         MOV       R3,#0x0
   \   00001A   12....       LCALL     `??osal_nv_item_len::?relay`; Banked call to: osal_nv_item_len
   \   00001D   8A..         MOV       ?V4,R2
   \   00001F   8B..         MOV       ?V5,R3
   \   000021   AE..         MOV       R6,?V4
   \   000023   AF..         MOV       R7,?V5
   1279          
   1280            // Get the number of valid records from the Binding table
   1281            osal_nv_read( ZCD_NV_BINDING_TABLE, 0, sizeof(nvBindingHdr_t), &hdr );
   \   000025                ; Setup parameters for call to function osal_nv_read
   \   000025   A8..         MOV       R0,?XSP + 0
   \   000027   A9..         MOV       R1,?XSP + 1
   \   000029   88..         MOV       ?V4,R0
   \   00002B   89..         MOV       ?V5,R1
   \   00002D   78..         MOV       R0,#?V4
   \   00002F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000032   75..02       MOV       ?V4,#0x2
   \   000035   75..00       MOV       ?V5,#0x0
   \   000038   78..         MOV       R0,#?V4
   \   00003A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003D   7C00         MOV       R4,#0x0
   \   00003F   7D00         MOV       R5,#0x0
   \   000041   7A41         MOV       R2,#0x41
   \   000043   7B00         MOV       R3,#0x0
   \   000045   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000048   7404         MOV       A,#0x4
   \   00004A   12....       LCALL     ?DEALLOC_XSTACK8
   1282          
   1283            // Identify if there is a duplicate NV item, if it is there, that means an
   1284            // Upgrade process did not finish properly last time
   1285            // The length function will return 0 if the Backup NV ID does not exist.
   1286            dupLen = osal_nv_item_len( ZCD_NV_DUPLICATE_BINDING_TABLE );
   \   00004D                ; Setup parameters for call to function osal_nv_item_len
   \   00004D   7A00         MOV       R2,#0x0
   \   00004F   7B03         MOV       R3,#0x3
   \   000051   12....       LCALL     `??osal_nv_item_len::?relay`; Banked call to: osal_nv_item_len
   \   000054   8A..         MOV       ?V4,R2
   \   000056   8B..         MOV       ?V5,R3
   \   000058   A8..         MOV       R0,?V4
   \   00005A   A9..         MOV       R1,?V5
   1287          
   1288            // A duplicate of the original Binding item will be done if:
   1289            // 1) A duplicate NV item DOES NOT exist AND the size of the original Binding
   1290            //    item in NV is different (larger/smaller) than the the length calculated
   1291            //    from the parameters in the code. If they are the same there is no need
   1292            //    to do the Upgrade process.
   1293            // 2) A duplicate NV item exists (probably because the previous upgrade
   1294            //    process was interrupted) and [the original Binding NV items exists AND
   1295            //    has valid recods (it is important to make sure that valid records exist
   1296            //    in the binding table because it is possible that the item was created
   1297            //    but the data was not copied in the previous upgrade process).
   1298            if ( ( ( dupLen == 0 ) && ( bindLen != newLen ) ) ||
   1299                 ( ( dupLen > 0 ) && ( bindLen > 0 ) && ( hdr.numRecs > 0 ) ) )
   \   00005C   E8           MOV       A,R0
   \   00005D   49           ORL       A,R1
   \   00005E   700C         JNZ       ??BindUpgradeTableInNV_0
   \   000060   E5..         MOV       A,?V0
   \   000062   6E           XRL       A,R6
   \   000063   7003         JNZ       ??BindUpgradeTableInNV_1
   \   000065   E5..         MOV       A,?V1
   \   000067   6F           XRL       A,R7
   \                     ??BindUpgradeTableInNV_1:
   \   000068   700D         JNZ       ??BindUpgradeTableInNV_2
   \   00006A   8041         SJMP      ??BindUpgradeTableInNV_3
   \                     ??BindUpgradeTableInNV_0:
   \   00006C   EE           MOV       A,R6
   \   00006D   4F           ORL       A,R7
   \   00006E   602B         JZ        ??BindUpgradeTableInNV_4
   \   000070   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   000073   EA           MOV       A,R2
   \   000074   4B           ORL       A,R3
   \   000075   6024         JZ        ??BindUpgradeTableInNV_4
   1300            {
   1301              // Create a copy from original NV item into a duplicate NV item
   1302              if ( ( status = nwkCreateDuplicateNV( ZCD_NV_BINDING_TABLE,
   1303                                                    ZCD_NV_DUPLICATE_BINDING_TABLE ) ) == ZSuccess )
   \                     ??BindUpgradeTableInNV_2:
   \   000077                ; Setup parameters for call to function nwkCreateDuplicateNV
   \   000077   7C00         MOV       R4,#0x0
   \   000079   7D03         MOV       R5,#0x3
   \   00007B   7A41         MOV       R2,#0x41
   \   00007D   7B00         MOV       R3,#0x0
   \   00007F   12....       LCALL     `??nwkCreateDuplicateNV::?relay`; Banked call to: nwkCreateDuplicateNV
   \   000082   E9           MOV       A,R1
   \   000083   F8           MOV       R0,A
   \   000084   88..         MOV       ?V2,R0
   \   000086   7025         JNZ       ??BindUpgradeTableInNV_3
   1304              {
   1305                // Delete the original NV item once the duplicate is ready
   1306                if ( osal_nv_delete( ZCD_NV_BINDING_TABLE, bindLen ) != ZSuccess )
   \   000088                ; Setup parameters for call to function osal_nv_delete
   \   000088   EE           MOV       A,R6
   \   000089   FC           MOV       R4,A
   \   00008A   EF           MOV       A,R7
   \   00008B   FD           MOV       R5,A
   \   00008C   7A41         MOV       R2,#0x41
   \   00008E   7B00         MOV       R3,#0x0
   \   000090   12....       LCALL     `??osal_nv_delete::?relay`; Banked call to: osal_nv_delete
   \   000093   E9           MOV       A,R1
   \   000094   6009         JZ        ??BindUpgradeTableInNV_5
   1307                {
   1308                  status = ZFailure;
   \   000096   75..01       MOV       ?V2,#0x1
   \   000099   8012         SJMP      ??BindUpgradeTableInNV_3
   1309                }
   1310                else
   1311                {
   1312                  duplicateReady = TRUE;
   1313                }
   1314              }
   1315            }
   1316            else if ( ( ( dupLen > 0 ) && ( bindLen == 0 ) ) ||
   1317                      ( ( dupLen > 0 ) && ( bindLen > 0 ) && ( hdr.numRecs == 0 ) ) )
   1318            {
   1319              // If for some reason a duplicate NV item was left in the system from a
   1320              // previous upgrade process and:
   1321              // 1) The original Binding NV item DOES NOT exist OR
   1322              // 2) The original Binding NV item exist, but has no valid records.
   1323              // it is necessary to rely in the data in the Duplicate item to create
   1324              // the Binding table
   1325              bindLen = dupLen;
   \                     ??BindUpgradeTableInNV_4:
   \   00009B   E8           MOV       A,R0
   \   00009C   FE           MOV       R6,A
   \   00009D   E9           MOV       A,R1
   \   00009E   FF           MOV       R7,A
   1326          
   1327              duplicateReady = TRUE;
   1328            }
   1329          
   1330            if ( duplicateReady == TRUE )
   1331            {
   1332              // Creates the New Binding table, Copy data from backup and Delete backup NV ID
   1333              status = BindCopyBackupToNewNV( bindLen, newLen );
   \                     ??BindUpgradeTableInNV_5:
   \   00009F                ; Setup parameters for call to function BindCopyBackupToNewNV
   \   00009F   AC..         MOV       R4,?V0
   \   0000A1   AD..         MOV       R5,?V1
   \   0000A3   EE           MOV       A,R6
   \   0000A4   FA           MOV       R2,A
   \   0000A5   EF           MOV       A,R7
   \   0000A6   FB           MOV       R3,A
   \   0000A7   12....       LCALL     `??BindCopyBackupToNewNV::?relay`; Banked call to: BindCopyBackupToNewNV
   \   0000AA   E9           MOV       A,R1
   \   0000AB   F5..         MOV       ?V2,A
   1334            }
   1335            return ( status );
   \                     ??BindUpgradeTableInNV_3:
   \   0000AD   A9..         MOV       R1,?V2
   \   0000AF   02....       LJMP      ?Subroutine5 & 0xFFFF
   1336          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine39_0
   \   000006                ; // Fall through to label ??Subroutine39_0
   1337          #endif // !DONT_UPGRADE_BIND
   1338          
   1339          /*********************************************************************
   1340           * @fn          BindRestoreFromNV
   1341           *
   1342           * @brief       Restore the binding table from NV
   1343           *
   1344           * @param       none
   1345           *
   1346           * @return      Number of entries restored
   1347           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1348          uint16 BindRestoreFromNV( void )
   \                     BindRestoreFromNV:
   1349          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1350            nvBindingHdr_t hdr;
   1351          
   1352            hdr.numRecs = 0;
   \   00000A   85..82       MOV       DPL,?XSP + 0
   \   00000D   85..83       MOV       DPH,?XSP + 1
   \   000010   E4           CLR       A
   \   000011   F0           MOVX      @DPTR,A
   \   000012   A3           INC       DPTR
   \   000013   F0           MOVX      @DPTR,A
   1353          
   1354          #if !defined ( DONT_UPGRADE_BIND )
   1355            if ( BindUpgradeTableInNV() == ZSuccess )
   \   000014                ; Setup parameters for call to function BindUpgradeTableInNV
   \   000014   12....       LCALL     `??BindUpgradeTableInNV::?relay`; Banked call to: BindUpgradeTableInNV
   \   000017   E9           MOV       A,R1
   \   000018   6003         JZ        $+5
   \   00001A   02....       LJMP      ??BindRestoreFromNV_0 & 0xFFFF
   1356          #endif
   1357            {
   1358              if ( osal_nv_read( ZCD_NV_BINDING_TABLE, 0, sizeof(nvBindingHdr_t), &hdr ) == ZSuccess )
   \   00001D                ; Setup parameters for call to function osal_nv_read
   \   00001D   A8..         MOV       R0,?XSP + 0
   \   00001F   A9..         MOV       R1,?XSP + 1
   \   000021   88..         MOV       ?V0,R0
   \   000023   89..         MOV       ?V1,R1
   \   000025   78..         MOV       R0,#?V0
   \   000027   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002A   75..02       MOV       ?V0,#0x2
   \   00002D   75..00       MOV       ?V1,#0x0
   \   000030   78..         MOV       R0,#?V0
   \   000032   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000035   7C00         MOV       R4,#0x0
   \   000037   7D00         MOV       R5,#0x0
   \   000039   7A41         MOV       R2,#0x41
   \   00003B   7B00         MOV       R3,#0x0
   \   00003D   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000040   7404         MOV       A,#0x4
   \   000042   12....       LCALL     ?DEALLOC_XSTACK8
   \   000045   E9           MOV       A,R1
   \   000046   7066         JNZ       ??BindRestoreFromNV_0
   1359              {
   1360                bindTableIndex_t x;
   1361                uint16 validRecsCount = 0;
   \   000048   7E00         MOV       R6,#0x0
   \   00004A   7F00         MOV       R7,#0x0
   1362          
   1363                // Read in the device list
   1364                for ( x = 0; ( x < gNWK_MAX_BINDING_ENTRIES ) && ( validRecsCount < hdr.numRecs ); x++ )
   \   00004C   75..00       MOV       ?V0,#0x0
   \   00004F   8041         SJMP      ??BindRestoreFromNV_1
   1365                {
   1366                  if ( osal_nv_read( ZCD_NV_BINDING_TABLE,
   1367                                     (uint16)(sizeof(nvBindingHdr_t) + (x * NV_BIND_REC_SIZE)),
   1368                                     NV_BIND_REC_SIZE, &BindingTable[x] ) == ZSUCCESS )
   \                     ??BindRestoreFromNV_2:
   \   000051   E5..         MOV       A,?V0
   \   000053   75F00E       MOV       B,#0xe
   \   000056   A4           MUL       AB
   \   000057   F8           MOV       R0,A
   \   000058   A9F0         MOV       R1,B
   \   00005A   74..         MOV       A,#BindingTable & 0xff
   \   00005C   28           ADD       A,R0
   \   00005D   F5..         MOV       ?V2,A
   \   00005F   74..         MOV       A,#(BindingTable >> 8) & 0xff
   \   000061   39           ADDC      A,R1
   \   000062   F5..         MOV       ?V3,A
   \   000064                ; Setup parameters for call to function osal_nv_read
   \   000064   78..         MOV       R0,#?V2
   \   000066   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000069   90....       MOV       DPTR,#gBIND_REC_SIZE
   \   00006C   12....       LCALL     ?PUSH_XSTACK8_C_TWO
   \   00006F   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   000072   7A41         MOV       R2,#0x41
   \   000074   7B00         MOV       R3,#0x0
   \   000076   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000079   7404         MOV       A,#0x4
   \   00007B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00007E   E9           MOV       A,R1
   \   00007F   700F         JNZ       ??BindRestoreFromNV_3
   1369                  {
   1370                    if ( BindingTable[x].srcEP != NV_BIND_EMPTY )
   \   000081   85..82       MOV       DPL,?V2
   \   000084   85..83       MOV       DPH,?V3
   \   000087   E0           MOVX      A,@DPTR
   \   000088   F4           CPL       A
   \   000089   6005         JZ        ??BindRestoreFromNV_3
   1371                    {
   1372                      validRecsCount++;
   \   00008B   0E           INC       R6
   \   00008C   EE           MOV       A,R6
   \   00008D   7001         JNZ       ??BindRestoreFromNV_3
   \   00008F   0F           INC       R7
   1373                    }
   1374                  }
   1375                }
   \                     ??BindRestoreFromNV_3:
   \   000090   05..         INC       ?V0
   \                     ??BindRestoreFromNV_1:
   \   000092   90....       MOV       DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   000095   E4           CLR       A
   \   000096   93           MOVC      A,@A+DPTR
   \   000097   F8           MOV       R0,A
   \   000098   E5..         MOV       A,?V0
   \   00009A   C3           CLR       C
   \   00009B   98           SUBB      A,R0
   \   00009C   5010         JNC       ??BindRestoreFromNV_0
   \   00009E   85..82       MOV       DPL,?XSP + 0
   \   0000A1   85..83       MOV       DPH,?XSP + 1
   \   0000A4   12....       LCALL     ?Subroutine21 & 0xFFFF
   1376              }
   1377            }
   \                     ??CrossCallReturnLabel_31:
   \   0000A7   C3           CLR       C
   \   0000A8   EE           MOV       A,R6
   \   0000A9   98           SUBB      A,R0
   \   0000AA   EF           MOV       A,R7
   \   0000AB   99           SUBB      A,R1
   \   0000AC   40A3         JC        ??BindRestoreFromNV_2
   1378            return ( hdr.numRecs );
   \                     ??BindRestoreFromNV_0:
   \   0000AE   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   0000B1   02....       LJMP      ?Subroutine5 & 0xFFFF
   1379          }
   1380          
   1381          /*********************************************************************
   1382           * @fn          BindWriteNV
   1383           *
   1384           * @brief       Save the Binding Table in NV
   1385           *
   1386           * @param       none
   1387           *
   1388           * @return      none
   1389           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1390          void BindWriteNV( void )
   \                     BindWriteNV:
   1391          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 16
   \   000005   74F0         MOV       A,#-0x10
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1392            BindingEntry_t *pBind;
   1393            BindingEntry_t bind;
   1394            nvBindingHdr_t hdr;
   1395            bindTableIndex_t x;
   1396          
   1397            hdr.numRecs = 0;
   \   00000A   85..82       MOV       DPL,?XSP + 0
   \   00000D   85..83       MOV       DPH,?XSP + 1
   \   000010   E4           CLR       A
   \   000011   F0           MOVX      @DPTR,A
   \   000012   A3           INC       DPTR
   \   000013   F0           MOVX      @DPTR,A
   1398          
   1399            for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
   \   000014   7E00         MOV       R6,#0x0
   \   000016   8075         SJMP      ??BindWriteNV_0
   1400            {
   1401              pBind = &BindingTable[x];
   \                     ??BindWriteNV_1:
   \   000018   EE           MOV       A,R6
   \   000019   75F00E       MOV       B,#0xe
   \   00001C   A4           MUL       AB
   \   00001D   F8           MOV       R0,A
   \   00001E   A9F0         MOV       R1,B
   \   000020   74..         MOV       A,#BindingTable & 0xff
   \   000022   28           ADD       A,R0
   \   000023   F5..         MOV       ?V0,A
   \   000025   74..         MOV       A,#(BindingTable >> 8) & 0xff
   \   000027   39           ADDC      A,R1
   \   000028   F5..         MOV       ?V1,A
   1402          
   1403              osal_memcpy( &bind, pBind, gBIND_REC_SIZE );
   \   00002A                ; Setup parameters for call to function osal_memcpy
   \   00002A   85....       MOV       ?V4,?V0
   \   00002D   F5..         MOV       ?V5,A
   \   00002F   75..00       MOV       ?V6,#0x0
   \   000032   78..         MOV       R0,#?V4
   \   000034   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000037   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   00003A   7405         MOV       A,#0x5
   \   00003C   12....       LCALL     ?XSTACK_DISP101_8
   \   00003F   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000042   7403         MOV       A,#0x3
   \   000044   12....       LCALL     ?DEALLOC_XSTACK8
   1404          
   1405              // Save the record to NV
   1406              osal_nv_write( ZCD_NV_BINDING_TABLE,
   1407                             (uint16)((sizeof(nvBindingHdr_t)) + (x * NV_BIND_REC_SIZE)),
   1408                             NV_BIND_REC_SIZE, &bind );
   \   000047                ; Setup parameters for call to function osal_nv_write
   \   000047   7402         MOV       A,#0x2
   \   000049   12....       LCALL     ?XSTACK_DISP100_8
   \   00004C   88..         MOV       ?V2,R0
   \   00004E   89..         MOV       ?V3,R1
   \   000050   78..         MOV       R0,#?V2
   \   000052   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000055   90....       MOV       DPTR,#gBIND_REC_SIZE
   \   000058   12....       LCALL     ?PUSH_XSTACK8_C_TWO
   \   00005B   EE           MOV       A,R6
   \   00005C   F8           MOV       R0,A
   \   00005D   90....       MOV       DPTR,#gBIND_REC_SIZE
   \   000060   E4           CLR       A
   \   000061   93           MOVC      A,@A+DPTR
   \   000062   F5..         MOV       ?V2,A
   \   000064   7401         MOV       A,#0x1
   \   000066   93           MOVC      A,@A+DPTR
   \   000067   F5..         MOV       ?V3,A
   \   000069   E8           MOV       A,R0
   \   00006A   85..F0       MOV       B,?V2
   \   00006D   A4           MUL       AB
   \   00006E   C8           XCH       A,R0
   \   00006F   AAF0         MOV       R2,B
   \   000071   85..F0       MOV       B,?V3
   \   000074   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   000077   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   00007A   7404         MOV       A,#0x4
   \   00007C   12....       LCALL     ?DEALLOC_XSTACK8
   1409          
   1410              if ( pBind->srcEP != NV_BIND_EMPTY )
   \   00007F   85..82       MOV       DPL,?V0
   \   000082   85..83       MOV       DPH,?V1
   \   000085   E0           MOVX      A,@DPTR
   \   000086   F4           CPL       A
   \   000087   6003         JZ        ??CrossCallReturnLabel_35
   1411              {
   1412                hdr.numRecs++;
   \   000089   12....       LCALL     ?Subroutine24 & 0xFFFF
   1413              }
   1414            }
   \                     ??CrossCallReturnLabel_35:
   \   00008C   0E           INC       R6
   \                     ??BindWriteNV_0:
   \   00008D   90....       MOV       DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   000090   E4           CLR       A
   \   000091   93           MOVC      A,@A+DPTR
   \   000092   F8           MOV       R0,A
   \   000093   EE           MOV       A,R6
   \   000094   C3           CLR       C
   \   000095   98           SUBB      A,R0
   \   000096   4080         JC        ??BindWriteNV_1
   1415          
   1416            // Save off the header
   1417            osal_nv_write( ZCD_NV_BINDING_TABLE, 0, sizeof(nvBindingHdr_t), &hdr );
   \   000098                ; Setup parameters for call to function osal_nv_write
   \   000098   A8..         MOV       R0,?XSP + 0
   \   00009A   A9..         MOV       R1,?XSP + 1
   \   00009C   88..         MOV       ?V0,R0
   \   00009E   89..         MOV       ?V1,R1
   \   0000A0   78..         MOV       R0,#?V0
   \   0000A2   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000A5   75..02       MOV       ?V0,#0x2
   \   0000A8   75..00       MOV       ?V1,#0x0
   \   0000AB   78..         MOV       R0,#?V0
   \   0000AD   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000B0   7C00         MOV       R4,#0x0
   \   0000B2   7D00         MOV       R5,#0x0
   \   0000B4   7A41         MOV       R2,#0x41
   \   0000B6   7B00         MOV       R3,#0x0
   \   0000B8   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   0000BB   7404         MOV       A,#0x4
   \   0000BD   12....       LCALL     ?DEALLOC_XSTACK8
   1418          }
   \   0000C0   7410         MOV       A,#0x10
   \   0000C2   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000C5   7F07         MOV       R7,#0x7
   \   0000C7   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??InitBindingTable::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    InitBindingTable

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bindFindEmpty::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindFindEmpty

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bindNumOfEntries::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindNumOfEntries

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bindCapacity::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindCapacity

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bindAddEntry::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindAddEntry

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bindRemoveEntry::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindRemoveEntry

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bindIsClusterIDinList::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindIsClusterIDinList

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bindRemoveClusterIdFromList::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindRemoveClusterIdFromList

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bindAddClusterIdToList::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindAddClusterIdToList

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bindFindExisting::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindFindExisting

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bindRemoveDev::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindRemoveDev

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bindRemoveSrcDev::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindRemoveSrcDev

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bindNumBoundTo::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindNumBoundTo

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bindNumReflections::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindNumReflections

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bindFind::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindFind

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bindAddressClear::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindAddressClear

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bindUpdateAddr::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindUpdateAddr

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bindingAddrMgsHelperFind::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindingAddrMgsHelperFind

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bindingAddrMgsHelperConvert::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindingAddrMgsHelperConvert

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bindingAddrMgsHelperConvertShort::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindingAddrMgsHelperConvertShort

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bindAddrMgrLocalLoad::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindAddrMgrLocalLoad

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bindAddrIndexGet::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindAddrIndexGet

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??GetBindingTableEntry::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GetBindingTableEntry

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??BindInitNV::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    BindInitNV

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??BindSetDefaultNV::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    BindSetDefaultNV

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??BindCopyBackupToNewNV::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    BindCopyBackupToNewNV

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??BindUpgradeTableInNV::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    BindUpgradeTableInNV

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??BindRestoreFromNV::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    BindRestoreFromNV

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??BindWriteNV::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    BindWriteNV
   1419          
   1420          #else // !BINDINGTABLE_NV_SINGLES
   1421          /*********************************************************************
   1422           * @fn          BindInitNV
   1423           *
   1424           * @brief       Initialize the Binding NV Item
   1425           *
   1426           * @param       none
   1427           *
   1428           * @return      ZSUCCESS if successful, NV_ITEM_UNINIT if item did not
   1429           *              exist in NV, NV_OPER_FAILED if failure.
   1430           */
   1431          byte BindInitNV( void )
   1432          {
   1433            bindTableIndex_t x;
   1434          
   1435            for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
   1436            {
   1437              // Initialize each binding record
   1438              osal_nv_item_init_ex( ZCD_NV_EX_BINDING_TABLE, x, NV_BIND_REC_SIZE, NULL );
   1439            }
   1440            return ( ZSUCCESS );
   1441          }
   1442          
   1443          /*********************************************************************
   1444           * @fn          BindSetDefaultNV
   1445           *
   1446           * @brief       Write the defaults to NV
   1447           *
   1448           * @param       none
   1449           *
   1450           * @return      none
   1451           */
   1452          void BindSetDefaultNV( void )
   1453          {
   1454            BindingEntry_t bind;
   1455            bindTableIndex_t x;
   1456          
   1457            // Initialize a binding record
   1458            osal_memset( &bind, 0xFF, sizeof ( BindingEntry_t ) );
   1459          
   1460            for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
   1461            {
   1462              // Over write each binding record with an "empty" record
   1463              osal_nv_write_ex( ZCD_NV_EX_BINDING_TABLE, x, 0, NV_BIND_REC_SIZE, &bind );
   1464            }
   1465          }
   1466          
   1467          /*********************************************************************
   1468           * @fn          BindRestoreFromNV
   1469           *
   1470           * @brief       Restore the binding table from NV
   1471           *
   1472           * @param       none
   1473           *
   1474           * @return      Number of entries restored (non-emtpy)
   1475           */
   1476          uint16 BindRestoreFromNV( void )
   1477          {
   1478            bindTableIndex_t x;
   1479            uint16 validRecsCount = 0;
   1480          
   1481            // Read in the device list
   1482            for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
   1483            {
   1484              if ( osal_nv_read_ex( ZCD_NV_EX_BINDING_TABLE, x, 0,
   1485                               (uint16)NV_BIND_REC_SIZE, &BindingTable[x] ) == ZSUCCESS )
   1486              {
   1487                // Check for non-empty record
   1488                if ( BindingTable[x].srcEP != NV_BIND_EMPTY )
   1489                {
   1490                  // Count non-empty records
   1491                  validRecsCount++;
   1492                }
   1493              }
   1494            }
   1495            return ( validRecsCount );
   1496          }
   1497          
   1498          /*********************************************************************
   1499           * @fn          BindWriteNV
   1500           *
   1501           * @brief       Copy the Binding Table in NV
   1502           *
   1503           * @param       none
   1504           *
   1505           * @return      none
   1506           */
   1507          void BindWriteNV( void )
   1508          {
   1509            bindTableIndex_t x;
   1510          
   1511            for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
   1512            {
   1513              // Save the record to NV
   1514              osal_nv_write_ex( ZCD_NV_EX_BINDING_TABLE, x, 0,
   1515                               (uint16)NV_BIND_REC_SIZE, &BindingTable[x] );
   1516            }
   1517          }
   1518          #endif // BINDINGTABLE_NV_SINGLES
   1519          
   1520          /*********************************************************************
   1521          *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      2     52   BindCopyBackupToNewNV
        0     32   -> osal_nv_delete
        0     34   -> osal_nv_item_init
        0     32   -> osal_nv_item_len
        0     36   -> osal_nv_read
        0     36   -> osal_nv_write
      0     12   BindInitNV
        0     10   -> BindSetDefaultNV
        0     12   -> osal_nv_item_init
      0     20   BindRestoreFromNV
        0     16   -> BindUpgradeTableInNV
        0     20   -> osal_nv_read
      0     26   BindSetDefaultNV
        0     16   -> osal_nv_write
      0     36   BindUpgradeTableInNV
        0     16   -> BindCopyBackupToNewNV
        0     16   -> nwkCreateDuplicateNV
        0     16   -> osal_nv_delete
        0     16   -> osal_nv_item_len
        0     20   -> osal_nv_read
      0     35   BindWriteNV
        0     34   -> osal_memcpy
        0     35   -> osal_nv_write
      0      9   GetBindingTableEntry
      0     10   InitBindingTable
        0     10   -> osal_memset
      0     41   bindAddClusterIdToList
      1     37   bindAddEntry
        0     32   -> bindAddClusterIdToList
        0     32   -> bindAddrIndexGet
        0     32   -> bindAddrMgrLocalLoad
        0     32   -> bindFindEmpty
        0     32   -> bindIsClusterIDinList
        0     35   -> osal_memcpy
      2     45   bindAddrIndexGet
        2     13   -> AddrMgrEntryLookupExt
        2     13   -> AddrMgrEntryLookupNwk
        2     13   -> AddrMgrEntryUpdate
        2     13   -> AddrMgrExtAddrSet
      0     55   bindAddrMgrLocalLoad
        0     23   -> AddrMgrEntryUpdate
        0     23   -> AddrMgrExtAddrSet
        0     23   -> NLME_GetCoordExtAddr
        0     23   -> NLME_GetCoordShortAddr
        0     23   -> NLME_GetExtAddr
      2     25   bindAddressClear
        2     13   -> AddrMgrEntryRelease
      0      9   bindCapacity
      0     14   bindFind
        0     14   -> bindIsClusterIDinList
      2     32   bindFindEmpty
      0     13   bindFindExisting
        0     13   -> bindingAddrMgsHelperFind
      0     41   bindIsClusterIDinList
      0     14   bindNumBoundTo
        0     14   -> bindingAddrMgsHelperFind
      2      0   bindNumOfEntries
      0     12   bindNumReflections
        0     12   -> bindIsClusterIDinList
      0     13   bindRemoveClusterIdFromList
      0     12   bindRemoveDev
        0     12   -> bindAddressClear
        0     12   -> bindRemoveEntry
        0     12   -> bindingAddrMgsHelperFind
      2     12   bindRemoveEntry
        2      0   -> osal_memset
      0     10   bindRemoveSrcDev
        0     10   -> bindAddressClear
        0     10   -> bindRemoveEntry
      0     21   bindUpdateAddr
        0     21   -> bindingAddrMgsHelperFind
      0     22   bindingAddrMgsHelperConvert
        0     22   -> AddrMgrEntryGet
        0     22   -> sAddrExtCpy
      2     13   bindingAddrMgsHelperConvertShort
        2     13   -> AddrMgrEntryGet
      2     34   bindingAddrMgsHelperFind
        2     13   -> AddrMgrEntryLookupExt
        2     13   -> AddrMgrEntryLookupNwk
        2     13   -> AddrMgrExtAddrSet


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       5  ??Subroutine29_0
       5  ??Subroutine30_0
      16  ??Subroutine31_0
       6  ??Subroutine32_0
       5  ??Subroutine33_0
       7  ??Subroutine34_0
       8  ??Subroutine35_0
       9  ??Subroutine36_0
       3  ??Subroutine37_0
       5  ??Subroutine38_0
       6  ??Subroutine39_0
       3  ?Subroutine0
       2  ?Subroutine1
      22  ?Subroutine10
      11  ?Subroutine11
      11  ?Subroutine12
       1  ?Subroutine13
      12  ?Subroutine14
      10  ?Subroutine15
      16  ?Subroutine16
      23  ?Subroutine17
      10  ?Subroutine18
       6  ?Subroutine19
       5  ?Subroutine2
       4  ?Subroutine20
       6  ?Subroutine21
      10  ?Subroutine22
       6  ?Subroutine23
      16  ?Subroutine24
       9  ?Subroutine25
      26  ?Subroutine26
      12  ?Subroutine27
      14  ?Subroutine28
       5  ?Subroutine3
       5  ?Subroutine4
       2  ?Subroutine5
      36  ?Subroutine6
      14  ?Subroutine7
       7  ?Subroutine8
      21  ?Subroutine9
     386  BindCopyBackupToNewNV
       6  BindCopyBackupToNewNV::?relay
      44  BindInitNV
       6  BindInitNV::?relay
     180  BindRestoreFromNV
       6  BindRestoreFromNV::?relay
      65  BindSetDefaultNV
       6  BindSetDefaultNV::?relay
     178  BindUpgradeTableInNV
       6  BindUpgradeTableInNV::?relay
     202  BindWriteNV
       6  BindWriteNV::?relay
      76  GetBindingTableEntry
       6  GetBindingTableEntry::?relay
     116  InitBindingTable
       6  InitBindingTable::?relay
      71  bindAddClusterIdToList
       6  bindAddClusterIdToList::?relay
     510  bindAddEntry
       6  bindAddEntry::?relay
     112  bindAddrIndexGet
       6  bindAddrIndexGet::?relay
     144  bindAddrMgrLocalLoad
       6  bindAddrMgrLocalLoad::?relay
       1  bindAddrMgrLocalLoaded
      95  bindAddressClear
       6  bindAddressClear::?relay
      62  bindCapacity
       6  bindCapacity::?relay
      80  bindFind
       6  bindFind::?relay
      39  bindFindEmpty
       6  bindFindEmpty::?relay
     144  bindFindExisting
       6  bindFindExisting::?relay
      69  bindIsClusterIDinList
       6  bindIsClusterIDinList::?relay
     135  bindNumBoundTo
       6  bindNumBoundTo::?relay
      46  bindNumOfEntries
       6  bindNumOfEntries::?relay
      69  bindNumReflections
       6  bindNumReflections::?relay
     128  bindRemoveClusterIdFromList
       6  bindRemoveClusterIdFromList::?relay
     139  bindRemoveDev
       6  bindRemoveDev::?relay
      17  bindRemoveEntry
       6  bindRemoveEntry::?relay
      82  bindRemoveSrcDev
       6  bindRemoveSrcDev::?relay
     118  bindUpdateAddr
       6  bindUpdateAddr::?relay
      78  bindingAddrMgsHelperConvert
       6  bindingAddrMgsHelperConvert::?relay
      34  bindingAddrMgsHelperConvertShort
       6  bindingAddrMgsHelperConvertShort::?relay
      56  bindingAddrMgsHelperFind
       6  bindingAddrMgsHelperFind::?relay
       2  pBindInitNV
       2  pBindRestoreFromNV
       2  pBindSetDefaultNV
       2  pBindWriteNV
       2  pbindAddEntry
       2  pbindNumOfEntries
       2  pbindRemoveDev

 
 3 875 bytes in segment BANKED_CODE
   174 bytes in segment BANK_RELAYS
    15 bytes in segment XDATA_Z
 
   174 bytes of CODE     memory
 3 875 bytes of HUGECODE memory
    15 bytes of XDATA    memory

Errors: none
Warnings: none
