###############################################################################
#
# IAR C/C++ Compiler V10.10.1.4655 for 8051               21/Jul/2021  15:47:01
# Copyright 2004-2017 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        D:\work\zigbee\ti_cc2530_zstack\Z-Stack 3.0.2\Components\stack\af\AF.c
#    Command line       =  
#        -f C:\Users\WenHao\AppData\Local\Temp\EWBB13.tmp
#        ("D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Components\stack\af\AF.c" -D CSTX_BOARD -D SECURE=1 -D
#        TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D xPOWER_SAVING -D
#        NWK_AUTO_POLL -D xZTOOL_P1 -D xMT_TASK -D xMT_APP_FUNC -D xMT_SYS_FUNC
#        -D xMT_ZDO_FUNC -D xMT_ZDO_MGMT -D xMT_APP_CNF_FUNC -D
#        LCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D ZCL_IDENTIFY -D
#        ZCL_READ -D ZCL_DISCOVER -D ZCL_WRITE -D ZCL_BASIC -D
#        ZCL_REPORTING_DEVICE -D HAL_LED=TRUE -D HAL_UART=TRUE -D HAL_KEY=TRUE
#        -D ISR_KEYINTERRUPT -lC "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\EndDeviceEB\List"
#        -lA "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\EndDeviceEB\List"
#        --diag_suppress Pe001,Pa010 -o
#        "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\EndDeviceEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f
#        "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f
#        "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00100000 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000 -DENABLE_LED4_DISABLE_S1)
#        -f "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\Source\"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\Source\"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\stack\gp\"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes)
#    Locale             =  Chinese (Simplified)_China.936
#    List file          =  
#        D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\EndDeviceEB\List\AF.lst
#    Object file        =  
#        D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\EndDeviceEB\Obj\AF.r51
#
###############################################################################

D:\work\zigbee\ti_cc2530_zstack\Z-Stack 3.0.2\Components\stack\af\AF.c
      1          /**************************************************************************************************
      2            Filename:       AF.c
      3            Revised:        $Date: 2014-11-04 10:53:36 -0800 (Tue, 04 Nov 2014) $
      4            Revision:       $Revision: 40974 $
      5          
      6            Description:    Application Framework - Device Description helper functions
      7          
      8          
      9            Copyright 2004-2014 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          
     44          #include "OSAL.h"
     45          #include "AF.h"
     46          #include "nwk_globals.h"
     47          #include "nwk_util.h"
     48          #include "aps_groups.h"
     49          #include "ZDProfile.h"
     50          #include "aps_frag.h"
     51          #include "rtg.h"
     52          
     53          #if defined ( MT_AF_CB_FUNC )
     54            #include "MT_AF.h"
     55          #endif
     56          
     57          #if defined ( INTER_PAN )
     58            #include "stub_aps.h"
     59          #endif
     60          
     61          #include "bdb.h" 
     62          #if (BDB_TOUCHLINK_CAPABILITY_ENABLED==1)
     63            #include "bdb_tlCommissioning.h"
     64          #endif
     65          
     66          /*********************************************************************
     67           * MACROS
     68           */
     69          
     70          /*********************************************************************
     71           * @fn      afSend
     72           *
     73           * @brief   Helper macro for V1 API to invoke V2 API.
     74           *
     75           * input parameters
     76           *
     77           * @param  *dstAddr - Full ZB destination address: Nwk Addr + End Point.
     78           * @param   srcEP - Origination (i.e. respond to or ack to) End Point.
     79           * @param   cID - A valid cluster ID as specified by the Profile.
     80           * @param   len - Number of bytes of data pointed to by next param.
     81           * @param  *buf - A pointer to the data bytes to send.
     82           * @param   options - Valid bit mask of AF Tx Options as defined in AF.h.
     83           * @param  *transID - A pointer to a byte which can be modified and which will
     84           *                    be used as the transaction sequence number of the msg.
     85           *
     86           * output parameters
     87           *
     88           * @param  *transID - Incremented by one if the return value is success.
     89           *
     90           * @return  afStatus_t - See previous definition of afStatus_... types.
     91           */
     92          #define afSend( dstAddr, srcEP, cID, len, buf, transID, options, radius ) \
     93                  AF_DataRequest( (dstAddr), afFindEndPointDesc( (srcEP) ), \
     94                                    (cID), (len), (buf), (transID), (options), (radius) )
     95          
     96          /*********************************************************************
     97           * GLOBAL VARIABLES
     98           */
     99          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    100          epList_t *epList;
   \                     epList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    101          
    102          /*********************************************************************
    103           * LOCAL FUNCTIONS
    104           */
    105          
    106          static void afBuildMSGIncoming( aps_FrameFormat_t *aff, endPointDesc_t *epDesc,
    107                          zAddrType_t *SrcAddress, uint16 SrcPanId, NLDE_Signal_t *sig,
    108                          uint8 nwkSeqNum, uint8 SecurityUse, uint32 timestamp, uint8 radius );
    109          
    110          static epList_t *afFindEndPointDescList( uint8 EndPoint );
    111          
    112          static pDescCB afGetDescCB( endPointDesc_t *epDesc );
    113          
    114          /*********************************************************************
    115           * PUBLIC FUNCTIONS
    116           */
    117          
    118          /*********************************************************************
    119           * @fn      afInit
    120           *
    121           * @brief   Initialization function for the AF.
    122           *
    123           * @param   none
    124           *
    125           * @return  none
    126          void afInit( void )
    127          {
    128          }
    129           */
    130          
    131          /*********************************************************************
    132           * @fn      afRegisterExtended
    133           *
    134           * @brief   Register an Application's EndPoint description.
    135           *
    136           * @param   epDesc - pointer to the Application's endpoint descriptor.
    137           * @param   descFn - pointer to descriptor callback function
    138           * @param   applFn - pointer to the Application callback function
    139           *
    140           * NOTE:  The memory that epDesc is pointing to must exist after this call.
    141           *
    142           * @return  Pointer to epList_t on success, NULL otherwise.
    143           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    144          epList_t *afRegisterExtended( endPointDesc_t *epDesc, pDescCB descFn, pApplCB applFn )
   \                     afRegisterExtended:
    145          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   8C..         MOV       ?V2,R4
   \   00000B   8D..         MOV       ?V3,R5
    146            epList_t *ep = osal_mem_alloc(sizeof(epList_t));
   \   00000D                ; Setup parameters for call to function osal_mem_alloc
   \   00000D   7A0B         MOV       R2,#0xb
   \   00000F   7B00         MOV       R3,#0x0
   \   000011   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000014   8A..         MOV       ?V4,R2
   \   000016   8B..         MOV       ?V5,R3
   \   000018   AE..         MOV       R6,?V4
   \   00001A   AF..         MOV       R7,?V5
    147          
    148            if (ep != NULL)
   \   00001C   EE           MOV       A,R6
   \   00001D   4F           ORL       A,R7
   \   00001E   606A         JZ        ??afRegisterExtended_0
    149            {
    150              ep->nextDesc = epList;
   \   000020   90....       MOV       DPTR,#epList
   \   000023   12....       LCALL     ?Subroutine9 & 0xFFFF
    151              epList = ep;
   \                     ??CrossCallReturnLabel_8:
   \   000026   90....       MOV       DPTR,#epList
   \   000029   EE           MOV       A,R6
   \   00002A   F0           MOVX      @DPTR,A
   \   00002B   A3           INC       DPTR
   \   00002C   EF           MOV       A,R7
   \   00002D   F0           MOVX      @DPTR,A
    152              ep->epDesc = epDesc;
   \   00002E   EE           MOV       A,R6
   \   00002F   2402         ADD       A,#0x2
   \   000031   F5..         MOV       ?V4,A
   \   000033   E4           CLR       A
   \   000034   3F           ADDC      A,R7
   \   000035   F5..         MOV       ?V5,A
   \   000037   85..82       MOV       DPL,?V4
   \   00003A   F583         MOV       DPH,A
   \   00003C   E5..         MOV       A,?V0
   \   00003E   F0           MOVX      @DPTR,A
   \   00003F   A3           INC       DPTR
   \   000040   E5..         MOV       A,?V1
   \   000042   12....       LCALL     ?Subroutine26 & 0xFFFF
    153              ep->pfnDescCB = descFn;
   \                     ??CrossCallReturnLabel_37:
   \   000045   E5..         MOV       A,?V2
   \   000047   F0           MOVX      @DPTR,A
   \   000048   A3           INC       DPTR
   \   000049   E5..         MOV       A,?V3
   \   00004B   12....       LCALL     ?Subroutine26 & 0xFFFF
    154              ep->apsfCfg.frameDelay = APSF_DEFAULT_INTERFRAME_DELAY;
   \                     ??CrossCallReturnLabel_38:
   \   00004E   A3           INC       DPTR
   \   00004F   A3           INC       DPTR
   \   000050   7432         MOV       A,#0x32
   \   000052   12....       LCALL     ?Subroutine23 & 0xFFFF
    155              ep->apsfCfg.windowSize = APSF_DEFAULT_WINDOW_SIZE;
   \                     ??CrossCallReturnLabel_32:
   \   000055   7401         MOV       A,#0x1
   \   000057   12....       LCALL     ?Subroutine23 & 0xFFFF
    156              ep->flags = eEP_AllowMatch;  // Default to allow Match Descriptor.
   \                     ??CrossCallReturnLabel_33:
   \   00005A   A3           INC       DPTR
   \   00005B   F0           MOVX      @DPTR,A
    157              ep->pfnApplCB = applFn;
   \   00005C   740E         MOV       A,#0xe
   \   00005E   12....       LCALL     ?XSTACK_DISP0_8
   \   000061   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   000064   A3           INC       DPTR
   \   000065   A3           INC       DPTR
   \   000066   A3           INC       DPTR
   \   000067   A3           INC       DPTR
   \   000068   A3           INC       DPTR
   \   000069   12....       LCALL     ??Subroutine37_0 & 0xFFFF
    158              
    159            #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1) 
    160              //Make sure we add at least one application endpoint
    161              if ((epDesc->endPoint != 0)  || (epDesc->endPoint < BDB_ZIGBEE_RESERVED_ENDPOINTS_START))
    162              {
    163                bdb_HeadEpDescriptorList = epList;
   \                     ??CrossCallReturnLabel_67:
   \   00006C   90....       MOV       DPTR,#epList
   \   00006F   12....       LCALL     ??Subroutine35_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   000072   90....       MOV       DPTR,#bdb_HeadEpDescriptorList
   \   000075   12....       LCALL     ??Subroutine37_0 & 0xFFFF
    164                ep->epDesc->epType = bdb_zclFindingBindingEpType(ep->epDesc);
   \                     ??CrossCallReturnLabel_68:
   \   000078                ; Setup parameters for call to function bdb_zclFindingBindingEpType
   \   000078   12....       LCALL     ?Subroutine19 & 0xFFFF
    165              }
    166          
    167            #endif
    168          #if defined ( BDB_TL_INITIATOR ) || defined ( BDB_TL_TARGET )
    169              // find the first empty entry in the device info table
    170              for ( uint8 i = 0; i < 5; i++ )
    171              {
    172                if ( touchLinkSubDevicesTbl[i] == NULL )
    173                {
    174                  touchLinkSubDevicesTbl[i] = osal_mem_alloc(sizeof(bdbTLDeviceInfo_t));
    175                  if ( touchLinkSubDevicesTbl[i] != NULL )
    176                  {
    177                    touchLinkSubDevicesTbl[i]->deviceID = epDesc->simpleDesc->AppDeviceId;
    178                    touchLinkSubDevicesTbl[i]->endpoint = epDesc->simpleDesc->EndPoint;
    179                    touchLinkSubDevicesTbl[i]->profileID = epDesc->simpleDesc->AppProfId;
    180                    touchLinkSubDevicesTbl[i]->version = epDesc->simpleDesc->AppDevVer;
    181                    break;
    182                  }
    183                }
    184              }
    185          #endif  // BDB_TL_INITIATOR || BDB_TL_TARGET
    186            }
   \                     ??CrossCallReturnLabel_88:
   \   00007B   12....       LCALL     `??bdb_zclFindingBindingEpType::?relay`; Banked call to: bdb_zclFindingBindingEpType
   \   00007E   85..82       MOV       DPL,?V4
   \   000081   85..83       MOV       DPH,?V5
   \   000084   12....       LCALL     ??Subroutine41_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_92:
   \   000087   A3           INC       DPTR
   \   000088   E9           MOV       A,R1
   \   000089   F0           MOVX      @DPTR,A
    187           
    188            return ep;
   \                     ??afRegisterExtended_0:
   \   00008A   EE           MOV       A,R6
   \   00008B   FA           MOV       R2,A
   \   00008C   EF           MOV       A,R7
   \   00008D   FB           MOV       R3,A
   \   00008E                REQUIRE ?Subroutine0
   \   00008E                ; // Fall through to label ?Subroutine0
    189          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F06         MOV       R7,#0x6
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   12....       LCALL     ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   12....       LCALL     ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   12....       LCALL     ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function osal_msg_send
   \   000001                ; Setup parameters for call to function afFindEndPointDescList
   \   000001   8E82         MOV       DPL,R6
   \   000003   8F83         MOV       DPH,R7
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine35_0:
   \   000000   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine37_0:
   \   000000   E8           MOV       A,R0
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   E9           MOV       A,R1
   \   000004   F0           MOVX      @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003                REQUIRE ??Subroutine38_0
   \   000003                ; // Fall through to label ??Subroutine38_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine38_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F9           MOV       R1,A
   \   000002   8E82         MOV       DPL,R6
   \   000004   8F83         MOV       DPH,R7
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   85..82       MOV       DPL,?V4
   \   000003   85..83       MOV       DPH,?V5
   \   000006                REQUIRE ??Subroutine39_0
   \   000006                ; // Fall through to label ??Subroutine39_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine39_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FB           MOV       R3,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine41_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003                REQUIRE ??Subroutine42_0
   \   000003                ; // Fall through to label ??Subroutine42_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine42_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F583         MOV       DPH,A
   \   000003   8882         MOV       DPL,R0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   000003   E8           MOV       A,R0
   \   000004   F0           MOVX      @DPTR,A
   \   000005   A3           INC       DPTR
   \   000006   E9           MOV       A,R1
   \   000007   F0           MOVX      @DPTR,A
   \   000008   22           RET
    190          
    191          /*********************************************************************
    192           * @fn      afRegister
    193           *
    194           * @brief   Register an Application's EndPoint description.
    195           *
    196           * @param   epDesc - pointer to the Application's endpoint descriptor.
    197           *
    198           * NOTE:  The memory that epDesc is pointing to must exist after this call.
    199           *
    200           * @return  afStatus_SUCCESS - Registered
    201           *          afStatus_MEM_FAIL - not enough memory to add descriptor
    202           *          afStatus_INVALID_PARAMETER - duplicate endpoint
    203           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    204          afStatus_t afRegister( endPointDesc_t *epDesc )
   \                     afRegister:
    205          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    206            if (afFindEndPointDescList(epDesc->endPoint))  // Look for duplicate endpoint.
   \   000009                ; Setup parameters for call to function afFindEndPointDescList
   \   000009   8E82         MOV       DPL,R6
   \   00000B   8F83         MOV       DPH,R7
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   F9           MOV       R1,A
   \   00000F   12....       LCALL     `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   000012   8B..         MOV       ?V1,R3
   \   000014   EA           MOV       A,R2
   \   000015   45..         ORL       A,?V1
   \   000017   6004         JZ        ??afRegister_0
    207            {
    208              return afStatus_INVALID_PARAMETER;
   \   000019   7902         MOV       R1,#0x2
   \   00001B   8027         SJMP      ??afRegister_1
    209            }
    210          
    211            return ((NULL == afRegisterExtended(epDesc, NULL, NULL)) ? afStatus_MEM_FAIL : afStatus_SUCCESS);
   \                     ??afRegister_0:
   \   00001D                ; Setup parameters for call to function afRegisterExtended
   \   00001D   E4           CLR       A
   \   00001E   F5..         MOV       ?V0,A
   \   000020   F5..         MOV       ?V1,A
   \   000022   78..         MOV       R0,#?V0
   \   000024   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000027   7C00         MOV       R4,#0x0
   \   000029   7D00         MOV       R5,#0x0
   \   00002B   EE           MOV       A,R6
   \   00002C   FA           MOV       R2,A
   \   00002D   EF           MOV       A,R7
   \   00002E   FB           MOV       R3,A
   \   00002F   12....       LCALL     `??afRegisterExtended::?relay`; Banked call to: afRegisterExtended
   \   000032   7402         MOV       A,#0x2
   \   000034   12....       LCALL     ?DEALLOC_XSTACK8
   \   000037   8B..         MOV       ?V1,R3
   \   000039   EA           MOV       A,R2
   \   00003A   45..         ORL       A,?V1
   \   00003C   7004         JNZ       ??afRegister_2
   \   00003E   7910         MOV       R1,#0x10
   \   000040   8002         SJMP      ??afRegister_1
   \                     ??afRegister_2:
   \   000042   7900         MOV       R1,#0x0
   \                     ??afRegister_1:
   \   000044   02....       LJMP      ?Subroutine1 & 0xFFFF
    212          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F02         MOV       R7,#0x2
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    213          
    214          /*********************************************************************
    215           * @fn      afDelete
    216           *
    217           * @brief   Delete an Application's EndPoint descriptor and frees the memory
    218           *
    219           * @param   EndPoint - Application Endpoint to delete
    220           *
    221           * @return  afStatus_SUCCESS - endpoint deleted
    222           *          afStatus_INVALID_PARAMETER - endpoint not found
    223           *          afStatus_FAILED - endpoint list empty
    224           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    225          afStatus_t afDelete( uint8 EndPoint )
   \                     afDelete:
    226          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
    227            epList_t *epCurrent;
    228            epList_t *epPrevious;
    229          
    230            if ( epList != NULL )
   \   000007   90....       MOV       DPTR,#epList
   \   00000A   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   00000D   6035         JZ        ??afDelete_0
    231            {
    232              epPrevious = epCurrent = epList;
   \   00000F   90....       MOV       DPTR,#epList
   \   000012   12....       LCALL     ??Subroutine39_0 & 0xFFFF
    233          
    234              // first element of the list matches
    235              if ( epCurrent->epDesc->endPoint == EndPoint )
   \                     ??CrossCallReturnLabel_79:
   \   000015   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   000018   7009         JNZ       ??afDelete_1
    236              {
    237                epList = epCurrent->nextDesc;
   \   00001A   90....       MOV       DPTR,#epList
   \   00001D   8015         SJMP      ??afDelete_2
    238                osal_mem_free( epCurrent );
    239          
    240                return ( afStatus_SUCCESS );
    241              }
    242              else
    243              {
    244                // search the list
    245                for ( epCurrent = epPrevious->nextDesc;
    246                      epCurrent != NULL;
    247                      epCurrent = epCurrent->nextDesc )
    248                {
    249                  if ( epCurrent->epDesc->endPoint == EndPoint )
    250                  {
    251                    epPrevious->nextDesc = epCurrent->nextDesc;
    252                    osal_mem_free( epCurrent );
    253          
    254                    // delete the entry and free the memory
    255                    return ( afStatus_SUCCESS );
    256                  }
    257                  epPrevious = epCurrent;
   \                     ??afDelete_3:
   \   00001F   EA           MOV       A,R2
   \   000020   F8           MOV       R0,A
   \   000021   EB           MOV       A,R3
   \   000022   F9           MOV       R1,A
   \                     ??afDelete_1:
   \   000023   EC           MOV       A,R4
   \   000024   FA           MOV       R2,A
   \   000025   ED           MOV       A,R5
   \   000026   FB           MOV       R3,A
   \   000027   EA           MOV       A,R2
   \   000028   4B           ORL       A,R3
   \   000029   6015         JZ        ??afDelete_4
   \   00002B   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   00002E   70EF         JNZ       ??afDelete_3
   \   000030   8882         MOV       DPL,R0
   \   000032   8983         MOV       DPH,R1
   \                     ??afDelete_2:
   \   000034   EC           MOV       A,R4
   \   000035   F0           MOVX      @DPTR,A
   \   000036   A3           INC       DPTR
   \   000037   ED           MOV       A,R5
   \   000038   F0           MOVX      @DPTR,A
   \   000039                ; Setup parameters for call to function osal_mem_free
   \   000039   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   00003C   7900         MOV       R1,#0x0
   \   00003E   8006         SJMP      ??afDelete_5
    258                }
    259              }
    260          
    261              // no endpoint found
    262              return ( afStatus_INVALID_PARAMETER );
   \                     ??afDelete_4:
   \   000040   7902         MOV       R1,#0x2
   \   000042   8002         SJMP      ??afDelete_5
    263            }
    264            else
    265            {
    266              // epList is empty
    267              return ( afStatus_FAILED );
   \                     ??afDelete_0:
   \   000044   7901         MOV       R1,#0x1
    268            }
   \                     ??afDelete_5:
   \   000046                REQUIRE ?Subroutine2
   \   000046                ; // Fall through to label ?Subroutine2
    269          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7F01         MOV       R7,#0x1
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   8A82         MOV       DPL,R2
   \   000002   8B83         MOV       DPH,R3
   \   000004   E0           MOVX      A,@DPTR
   \   000005   FC           MOV       R4,A
   \   000006   A3           INC       DPTR
   \   000007   E0           MOVX      A,@DPTR
   \   000008   FD           MOV       R5,A
   \   000009   8A82         MOV       DPL,R2
   \   00000B   8B83         MOV       DPH,R3
   \   00000D   A3           INC       DPTR
   \   00000E   A3           INC       DPTR
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   FF           MOV       R7,A
   \   000011   A3           INC       DPTR
   \   000012   E0           MOVX      A,@DPTR
   \   000013   F583         MOV       DPH,A
   \   000015   8F82         MOV       DPL,R7
   \   000017   E0           MOVX      A,@DPTR
   \   000018   6E           XRL       A,R6
   \   000019   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   000003   E8           MOV       A,R0
   \   000004   49           ORL       A,R1
   \   000005   22           RET
    270          
    271          /*********************************************************************
    272           * @fn          afDataConfirm
    273           *
    274           * @brief       This function will generate the Data Confirm back to
    275           *              the application.
    276           *
    277           * @param       endPoint - confirm end point
    278           * @param       transID - transaction ID from APSDE_DATA_REQUEST
    279           * @param       status - status of APSDE_DATA_REQUEST
    280           *
    281           * @return      none
    282           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    283          void afDataConfirm( uint8 endPoint, uint8 transID, ZStatus_t status )
   \                     afDataConfirm:
    284          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V0,R1
   \   000007   8A..         MOV       ?V1,R2
   \   000009   8B..         MOV       ?V2,R3
    285            endPointDesc_t *epDesc;
    286            afDataConfirm_t *msgPtr;
    287          
    288            // Find the endpoint description
    289            epDesc = afFindEndPointDesc( endPoint );
   \   00000B                ; Setup parameters for call to function afFindEndPointDesc
   \   00000B   12....       LCALL     `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   00000E   8A..         MOV       ?V4,R2
   \   000010   8B..         MOV       ?V5,R3
   \   000012   AE..         MOV       R6,?V4
   \   000014   AF..         MOV       R7,?V5
    290            if ( epDesc == NULL )
   \   000016   EE           MOV       A,R6
   \   000017   4F           ORL       A,R7
   \   000018   6029         JZ        ??afDataConfirm_0
    291              return;
    292          
    293            // Determine the incoming command type
    294            msgPtr = (afDataConfirm_t *)osal_msg_allocate( sizeof(afDataConfirm_t) );
   \   00001A                ; Setup parameters for call to function osal_msg_allocate
   \   00001A   7A04         MOV       R2,#0x4
   \   00001C   7B00         MOV       R3,#0x0
   \   00001E   12....       LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
    295            if ( msgPtr )
   \   000021   EA           MOV       A,R2
   \   000022   4B           ORL       A,R3
   \   000023   601E         JZ        ??afDataConfirm_0
    296            {
    297              // Build the Data Confirm message
    298              msgPtr->hdr.event = AF_DATA_CONFIRM_CMD;
   \   000025   8A82         MOV       DPL,R2
   \   000027   8B83         MOV       DPH,R3
   \   000029   74FD         MOV       A,#-0x3
   \   00002B   F0           MOVX      @DPTR,A
    299              msgPtr->hdr.status = status;
   \   00002C   A3           INC       DPTR
   \   00002D   E5..         MOV       A,?V2
   \   00002F   12....       LCALL     ?Subroutine28 & 0xFFFF
    300              msgPtr->endpoint = endPoint;
    301              msgPtr->transID = transID;
    302          
    303          #if defined ( MT_AF_CB_FUNC )
    304              /* If MT has subscribed for this callback, don't send as a message. */
    305              if ( AFCB_CHECK(CB_ID_AF_DATA_CNF,*(epDesc->task_id)) )
    306              {
    307                /* Send callback if it's subscribed */
    308                MT_AfDataConfirm ((void *)msgPtr);
    309                /* Release the memory. */
    310                osal_msg_deallocate( (void *)msgPtr );
    311              }
    312              else
    313          #endif
    314              {
    315                /* send message through task message */
    316                osal_msg_send( *(epDesc->task_id), (uint8 *)msgPtr );
    317              }
    318            }
   \                     ??CrossCallReturnLabel_41:
   \   000032   E5..         MOV       A,?V0
   \   000034   12....       LCALL     ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   000037   A3           INC       DPTR
   \   000038   E5..         MOV       A,?V1
   \   00003A   12....       LCALL     ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   00003D   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000040   12....       LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
    319          }
   \                     ??afDataConfirm_0:
   \   000043   02....       LJMP      ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   E0           MOVX      A,@DPTR
   \   000003   F8           MOV       R0,A
   \   000004   A3           INC       DPTR
   \   000005   E0           MOVX      A,@DPTR
   \   000006   F583         MOV       DPH,A
   \   000008   8882         MOV       DPL,R0
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   F9           MOV       R1,A
   \   00000C   22           RET
    320          
    321          /*********************************************************************
    322           * @fn          afReflectError
    323           *
    324           * @brief       This function will generate the Reflect Error message to
    325           *              the application.
    326           *
    327           * @param       srcEP - Source Endpoint
    328           * @param       dstAddrMode - mode of dstAdd - 0 - normal short addr, 1 - group Address
    329           * @param       dstAddr - intended destination
    330           * @param       dstEP - Destination Endpoint
    331           * @param       transID - transaction ID from APSDE_DATA_REQUEST
    332           * @param       status - status of APSDE_DATA_REQUEST
    333           *
    334           * @return      none
    335           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    336          void afReflectError( uint8 srcEP, uint8 dstAddrMode, uint16 dstAddr, uint8 dstEP,
   \                     afReflectError:
    337                               uint8 transID, ZStatus_t status )
    338          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V3,R2
   \   000007   EC           MOV       A,R4
   \   000008   FE           MOV       R6,A
   \   000009   ED           MOV       A,R5
   \   00000A   FF           MOV       R7,A
   \   00000B   8B..         MOV       ?V4,R3
    339            endPointDesc_t *epDesc;
    340            afReflectError_t *msgPtr;
    341          
    342            // Find the endpoint description
    343            epDesc = afFindEndPointDesc( srcEP );
   \   00000D                ; Setup parameters for call to function afFindEndPointDesc
   \   00000D   12....       LCALL     `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   000010   8A..         MOV       ?V0,R2
   \   000012   8B..         MOV       ?V1,R3
    344            if ( epDesc == NULL )
   \   000014   EA           MOV       A,R2
   \   000015   45..         ORL       A,?V1
   \   000017   6046         JZ        ??afReflectError_0
    345              return;
    346          
    347            // Determine the incoming command type
    348            msgPtr = (afReflectError_t *)osal_msg_allocate( sizeof(afReflectError_t) );
   \   000019                ; Setup parameters for call to function osal_msg_allocate
   \   000019   7A07         MOV       R2,#0x7
   \   00001B   7B00         MOV       R3,#0x0
   \   00001D   12....       LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
    349            if ( msgPtr )
   \   000020   EA           MOV       A,R2
   \   000021   4B           ORL       A,R3
   \   000022   603B         JZ        ??afReflectError_0
    350            {
    351              // Build the Data Confirm message
    352              msgPtr->hdr.event = AF_REFLECT_ERROR_CMD;
   \   000024   8A82         MOV       DPL,R2
   \   000026   8B83         MOV       DPH,R3
   \   000028   74FE         MOV       A,#-0x2
   \   00002A   F0           MOVX      @DPTR,A
    353              msgPtr->hdr.status = status;
   \   00002B   7411         MOV       A,#0x11
   \   00002D   12....       LCALL     ?XSTACK_DISP0_8
   \   000030   E0           MOVX      A,@DPTR
   \   000031   8A82         MOV       DPL,R2
   \   000033   8B83         MOV       DPH,R3
   \   000035   A3           INC       DPTR
   \   000036   12....       LCALL     ?Subroutine28 & 0xFFFF
    354              msgPtr->endpoint = dstEP;
   \                     ??CrossCallReturnLabel_43:
   \   000039   E5..         MOV       A,?V4
   \   00003B   F0           MOVX      @DPTR,A
    355              msgPtr->transID = transID;
   \   00003C   7410         MOV       A,#0x10
   \   00003E   12....       LCALL     ?XSTACK_DISP0_8
   \   000041   E0           MOVX      A,@DPTR
   \   000042   8A82         MOV       DPL,R2
   \   000044   8B83         MOV       DPH,R3
   \   000046   A3           INC       DPTR
   \   000047   A3           INC       DPTR
   \   000048   A3           INC       DPTR
   \   000049   12....       LCALL     ?Subroutine27 & 0xFFFF
    356              msgPtr->dstAddrMode = dstAddrMode;
    357              msgPtr->dstAddr = dstAddr;
    358          
    359          #if defined ( MT_AF_CB_FUNC )
    360              /* If MT has subscribed for this callback, don't send as a message. */
    361              if ( AFCB_CHECK( CB_ID_AF_REFLECT_ERROR, *(epDesc->task_id) ) )
    362              {
    363                /* Send callback if it's subscribed */
    364                MT_AfReflectError( (void *)msgPtr );
    365                /* Release the memory. */
    366                osal_msg_deallocate( (void *)msgPtr );
    367              }
    368              else
    369          #endif
    370              {
    371                /* send message through task message */
    372                osal_msg_send( *(epDesc->task_id), (uint8 *)msgPtr );
    373              }
    374            }
   \                     ??CrossCallReturnLabel_39:
   \   00004C   E5..         MOV       A,?V3
   \   00004E   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   000051   A3           INC       DPTR
   \   000052   EE           MOV       A,R6
   \   000053   F0           MOVX      @DPTR,A
   \   000054   A3           INC       DPTR
   \   000055   EF           MOV       A,R7
   \   000056   12....       LCALL     ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   000059   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   00005C   12....       LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
    375          }
   \                     ??afReflectError_0:
   \   00005F                REQUIRE ?Subroutine3
   \   00005F                ; // Fall through to label ?Subroutine3

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   7F08         MOV       R7,#0x8
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function osal_msg_send
   \   000001   85..82       MOV       DPL,?V0
   \   000004   85..83       MOV       DPH,?V1
   \   000007   22           RET
    376          
    377          /*********************************************************************
    378           * @fn          afIncomingData
    379           *
    380           * @brief       Transfer a data PDU (ASDU) from the APS sub-layer to the AF.
    381           *
    382           * @param       aff  - pointer to APS frame format
    383           * @param       SrcAddress  - Source address
    384           * @param       SrcPanId  - Source PAN ID
    385           * @param       sig - incoming message's link quality
    386           * @param       nwkSeqNum - incoming network sequence number (from nwk header frame)
    387           * @param       SecurityUse - Security enable/disable
    388           * @param       timestamp - the MAC Timer2 timestamp at Rx.
    389           * @param       radius - incoming messages received radius
    390           *
    391           * @return      none
    392           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    393          void afIncomingData( aps_FrameFormat_t *aff, zAddrType_t *SrcAddress, uint16 SrcPanId,
   \                     afIncomingData:
    394                               NLDE_Signal_t *sig, uint8 nwkSeqNum, uint8 SecurityUse,
    395                               uint32 timestamp, uint8 radius )
    396          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV       A,#-0x18
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV       A,#-0x3
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   7401         MOV       A,#0x1
   \   00000C   12....       LCALL     ?XSTACK_DISP0_8
   \   00000F   EC           MOV       A,R4
   \   000010   F0           MOVX      @DPTR,A
   \   000011   A3           INC       DPTR
   \   000012   ED           MOV       A,R5
   \   000013   F0           MOVX      @DPTR,A
   \   000014   E9           MOV       A,R1
   \   000015   85..82       MOV       DPL,?XSP + 0
   \   000018   85..83       MOV       DPH,?XSP + 1
   \   00001B   F0           MOVX      @DPTR,A
   \   00001C   8A..         MOV       ?V8,R2
   \   00001E   8B..         MOV       ?V9,R3
    397            endPointDesc_t *epDesc = NULL;
    398            epList_t *pList = epList;
   \   000020   90....       MOV       DPTR,#epList
   \   000023   E0           MOVX      A,@DPTR
   \   000024   F5..         MOV       ?V2,A
   \   000026   A3           INC       DPTR
   \   000027   E0           MOVX      A,@DPTR
   \   000028   F5..         MOV       ?V3,A
    399          #if !defined ( APS_NO_GROUPS )
    400            uint8 grpEp = APS_GROUPS_EP_NOT_FOUND;
   \   00002A   7EFE         MOV       R6,#-0x2
   \   00002C   8A82         MOV       DPL,R2
   \   00002E   8B83         MOV       DPH,R3
   \   000030   E0           MOVX      A,@DPTR
   \   000031   540C         ANL       A,#0xc
   \   000033   640C         XRL       A,#0xc
   \   000035   7025         JNZ       ??afIncomingData_0
    401          #endif
    402          
    403            if ( ((aff->FrmCtrl & APS_DELIVERYMODE_MASK) == APS_FC_DM_GROUP) )
    404            {
    405          #if !defined ( APS_NO_GROUPS )
    406              // Find the first endpoint for this group
    407              grpEp = aps_FindGroupForEndpoint( aff->GroupID, APS_GROUPS_FIND_FIRST );
   \   000037                ; Setup parameters for call to function aps_FindGroupForEndpoint
   \   000037   79FE         MOV       R1,#-0x2
   \   000039   A3           INC       DPTR
   \   00003A   A3           INC       DPTR
   \   00003B   A3           INC       DPTR
   \   00003C   A3           INC       DPTR
   \   00003D   12....       LCALL     ??Subroutine39_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   000040   12....       LCALL     `??aps_FindGroupForEndpoint::?relay`; Banked call to: aps_FindGroupForEndpoint
   \   000043   E9           MOV       A,R1
   \   000044   FE           MOV       R6,A
    408              if ( grpEp == APS_GROUPS_EP_NOT_FOUND )
   \   000045   74FE         MOV       A,#-0x2
   \   000047   6E           XRL       A,R6
   \   000048   7003         JNZ       $+5
   \   00004A   02....       LJMP      ??afIncomingData_1 & 0xFFFF
    409                return;   // No endpoint found
    410          
    411              epDesc = afFindEndPointDesc( grpEp );
   \   00004D                ; Setup parameters for call to function afFindEndPointDesc
   \   00004D   12....       LCALL     `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   000050   8A..         MOV       ?V0,R2
   \   000052   8B..         MOV       ?V1,R3
    412              if ( epDesc == NULL )
   \   000054   EA           MOV       A,R2
   \   000055   45..         ORL       A,?V1
   \   000057   703D         JNZ       ??afIncomingData_2
    413                return;   // Endpoint descriptor not found
   \   000059   02....       LJMP      ??afIncomingData_1 & 0xFFFF
    414          
    415              pList = afFindEndPointDescList( epDesc->endPoint );
    416          #else
    417              return; // Not supported
    418          #endif
    419            }
    420            else if ( aff->DstEndPoint == AF_BROADCAST_ENDPOINT )
   \                     ??afIncomingData_0:
   \   00005C   A3           INC       DPTR
   \   00005D   A3           INC       DPTR
   \   00005E   E0           MOVX      A,@DPTR
   \   00005F   F9           MOV       R1,A
   \   000060   74FF         MOV       A,#-0x1
   \   000062   69           XRL       A,R1
   \   000063   7024         JNZ       ??afIncomingData_3
    421            {
    422              // Set the list
    423              if ( pList != NULL )
   \   000065   E5..         MOV       A,?V2
   \   000067   45..         ORL       A,?V3
   \   000069   7003         JNZ       $+5
   \   00006B   02....       LJMP      ??afIncomingData_1 & 0xFFFF
    424              {
    425                epDesc = pList->epDesc;
   \   00006E   12....       LCALL     ?Subroutine14 & 0xFFFF
    426              }
    427            }
   \                     ??CrossCallReturnLabel_65:
   \   000071   741B         MOV       A,#0x1b
   \   000073   12....       LCALL     ?XSTACK_DISP0_8
   \   000076   E0           MOVX      A,@DPTR
   \   000077   F5..         MOV       ?V14,A
   \   000079   A3           INC       DPTR
   \   00007A   E0           MOVX      A,@DPTR
   \   00007B   F5..         MOV       ?V15,A
   \   00007D   7420         MOV       A,#0x20
   \   00007F   12....       LCALL     ?XSTACK_DISP0_8
   \   000082   78..         MOV       R0,#?V4
   \   000084   12....       LCALL     ?L_MOV_X
   \   000087   8021         SJMP      ??CrossCallReturnLabel_66
    428            else if ( (epDesc = afFindEndPointDesc( aff->DstEndPoint )) )
   \                     ??afIncomingData_3:
   \   000089                ; Setup parameters for call to function afFindEndPointDesc
   \   000089   12....       LCALL     `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   00008C   8A..         MOV       ?V0,R2
   \   00008E   8B..         MOV       ?V1,R3
   \   000090   A9..         MOV       R1,?V1
   \   000092   EA           MOV       A,R2
   \   000093   49           ORL       A,R1
   \   000094   60DB         JZ        ??CrossCallReturnLabel_65
    429            {
    430              pList = afFindEndPointDescList( epDesc->endPoint );
   \                     ??afIncomingData_2:
   \   000096                ; Setup parameters for call to function afFindEndPointDescList
   \   000096   85..82       MOV       DPL,?V0
   \   000099   85..83       MOV       DPH,?V1
   \   00009C   E0           MOVX      A,@DPTR
   \   00009D   F9           MOV       R1,A
   \   00009E   12....       LCALL     `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   0000A1   8A..         MOV       ?V2,R2
   \   0000A3   8B..         MOV       ?V3,R3
   \   0000A5   80CA         SJMP      ??CrossCallReturnLabel_65
    431            }
    432          
    433            while ( epDesc )
    434            {
    435              uint16 epProfileID = 0xFFFE;  // Invalid Profile ID
    436          
    437              if ( pList->pfnDescCB )
    438              {
    439                uint16 *pID = (uint16 *)(pList->pfnDescCB(
    440                                           AF_DESCRIPTOR_PROFILE_ID, epDesc->endPoint ));
    441                if ( pID )
    442                {
    443                  epProfileID = *pID;
    444                  osal_mem_free( pID );
    445                }
    446              }
    447              else if ( epDesc->simpleDesc )
    448              {
    449                epProfileID = epDesc->simpleDesc->AppProfId;
    450              }
    451          
    452              // First part of verification is to make sure that:
    453              // the local Endpoint ProfileID matches the received ProfileID OR
    454              // the message is specifically send to ZDO (this excludes the broadcast endpoint) OR
    455              // if the Wildcard ProfileID is received the message should not be sent to ZDO endpoint
    456              if ( (aff->ProfileID == epProfileID) ||
    457                   ((epDesc->endPoint == ZDO_EP) && (aff->ProfileID == ZDO_PROFILE_ID)) ||
    458                   ((epDesc->endPoint != ZDO_EP) && ( aff->ProfileID == ZDO_WILDCARD_PROFILE_ID )) )
    459              {
    460                // Save original endpoint
    461                uint8 endpoint = aff->DstEndPoint;
    462          
    463                // overwrite with descriptor's endpoint
    464                aff->DstEndPoint = epDesc->endPoint;
    465          
    466                afBuildMSGIncoming( aff, epDesc, SrcAddress, SrcPanId, sig,
    467                                   nwkSeqNum, SecurityUse, timestamp, radius );
    468          
    469                // Restore with original endpoint
    470                aff->DstEndPoint = endpoint;
    471              }
    472          
    473              if ( ((aff->FrmCtrl & APS_DELIVERYMODE_MASK) == APS_FC_DM_GROUP) )
    474              {
    475          #if !defined ( APS_NO_GROUPS )
    476                // Find the next endpoint for this group
    477                grpEp = aps_FindGroupForEndpoint( aff->GroupID, grpEp );
    478                if ( grpEp == APS_GROUPS_EP_NOT_FOUND )
    479                  return;   // No endpoint found
    480          
    481                epDesc = afFindEndPointDesc( grpEp );
    482                if ( epDesc == NULL )
    483                  return;   // Endpoint descriptor not found
    484          
    485                pList = afFindEndPointDescList( epDesc->endPoint );
    486          #else
    487                return;
    488          #endif
    489              }
    490              else if ( aff->DstEndPoint == AF_BROADCAST_ENDPOINT )
    491              {
    492                pList = pList->nextDesc;
    493                if ( pList )
    494                  epDesc = pList->epDesc;
   \                     ??afIncomingData_4:
   \   0000A7   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   0000AA   E5..         MOV       A,?V0
   \   0000AC   45..         ORL       A,?V1
   \   0000AE   7003         JNZ       $+5
   \   0000B0   02....       LJMP      ??afIncomingData_1 & 0xFFFF
   \   0000B3   800D         SJMP      ??afIncomingData_5
   \                     ??afIncomingData_6:
   \   0000B5                ; Setup parameters for call to function afFindEndPointDescList
   \   0000B5   8A82         MOV       DPL,R2
   \   0000B7   8B83         MOV       DPH,R3
   \   0000B9   E0           MOVX      A,@DPTR
   \   0000BA   F9           MOV       R1,A
   \   0000BB   12....       LCALL     `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   0000BE   8A..         MOV       ?V2,R2
   \   0000C0   8B..         MOV       ?V3,R3
   \                     ??afIncomingData_5:
   \   0000C2   75..FE       MOV       ?V10,#-0x2
   \   0000C5   75..FF       MOV       ?V11,#-0x1
   \   0000C8   85..82       MOV       DPL,?V2
   \   0000CB   85..83       MOV       DPH,?V3
   \   0000CE   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   0000D1   85..82       MOV       DPL,?V0
   \   0000D4   85..83       MOV       DPH,?V1
   \   0000D7   601A         JZ        ??afIncomingData_7
   \   0000D9                ; Setup parameters for indirect call
   \   0000D9   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   0000DC   12....       LCALL     ?CALL_IND
   \   0000DF   EA           MOV       A,R2
   \   0000E0   4B           ORL       A,R3
   \   0000E1   601D         JZ        ??afIncomingData_8
   \   0000E3   8A82         MOV       DPL,R2
   \   0000E5   8B83         MOV       DPH,R3
   \   0000E7   E0           MOVX      A,@DPTR
   \   0000E8   F5..         MOV       ?V10,A
   \   0000EA   A3           INC       DPTR
   \   0000EB   E0           MOVX      A,@DPTR
   \   0000EC   F5..         MOV       ?V11,A
   \   0000EE                ; Setup parameters for call to function osal_mem_free
   \   0000EE   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0000F1   800D         SJMP      ??afIncomingData_8
   \                     ??afIncomingData_7:
   \   0000F3   12....       LCALL     ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   0000F6   6008         JZ        ??afIncomingData_8
   \   0000F8   A3           INC       DPTR
   \   0000F9   E0           MOVX      A,@DPTR
   \   0000FA   F5..         MOV       ?V10,A
   \   0000FC   A3           INC       DPTR
   \   0000FD   E0           MOVX      A,@DPTR
   \   0000FE   F5..         MOV       ?V11,A
   \                     ??afIncomingData_8:
   \   000100   85..82       MOV       DPL,?V8
   \   000103   85..83       MOV       DPH,?V9
   \   000106   A3           INC       DPTR
   \   000107   A3           INC       DPTR
   \   000108   A3           INC       DPTR
   \   000109   A3           INC       DPTR
   \   00010A   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   00010D   85..82       MOV       DPL,?V0
   \   000110   85..83       MOV       DPH,?V1
   \   000113   E0           MOVX      A,@DPTR
   \   000114   FA           MOV       R2,A
   \   000115   E5..         MOV       A,?V10
   \   000117   68           XRL       A,R0
   \   000118   7003         JNZ       ??afIncomingData_9
   \   00011A   E5..         MOV       A,?V11
   \   00011C   69           XRL       A,R1
   \                     ??afIncomingData_9:
   \   00011D   6013         JZ        ??afIncomingData_10
   \   00011F   EA           MOV       A,R2
   \   000120   7006         JNZ       ??afIncomingData_11
   \   000122   E8           MOV       A,R0
   \   000123   49           ORL       A,R1
   \   000124   7075         JNZ       ??afIncomingData_12
   \   000126   800A         SJMP      ??afIncomingData_10
   \                     ??afIncomingData_11:
   \   000128   74FF         MOV       A,#-0x1
   \   00012A   68           XRL       A,R0
   \   00012B   7003         JNZ       ??afIncomingData_13
   \   00012D   74FF         MOV       A,#-0x1
   \   00012F   69           XRL       A,R1
   \                     ??afIncomingData_13:
   \   000130   7069         JNZ       ??afIncomingData_12
   \                     ??afIncomingData_10:
   \   000132   85..82       MOV       DPL,?V8
   \   000135   85..83       MOV       DPH,?V9
   \   000138   A3           INC       DPTR
   \   000139   A3           INC       DPTR
   \   00013A   E0           MOVX      A,@DPTR
   \   00013B   FF           MOV       R7,A
   \   00013C   EA           MOV       A,R2
   \   00013D   85..82       MOV       DPL,?V8
   \   000140   85..83       MOV       DPH,?V9
   \   000143   A3           INC       DPTR
   \   000144   A3           INC       DPTR
   \   000145   F0           MOVX      @DPTR,A
   \   000146                ; Setup parameters for call to function afBuildMSGIncoming
   \   000146   7424         MOV       A,#0x24
   \   000148   12....       LCALL     ?XSTACK_DISP0_8
   \   00014B   E0           MOVX      A,@DPTR
   \   00014C   F5..         MOV       ?V10,A
   \   00014E   78..         MOV       R0,#?V10
   \   000150   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000153   78..         MOV       R0,#?V4
   \   000155   12....       LCALL     ?PUSH_XSTACK_I_FOUR
   \   000158   7424         MOV       A,#0x24
   \   00015A   12....       LCALL     ?XSTACK_DISP0_8
   \   00015D   E0           MOVX      A,@DPTR
   \   00015E   F5..         MOV       ?V10,A
   \   000160   78..         MOV       R0,#?V10
   \   000162   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000165   7423         MOV       A,#0x23
   \   000167   12....       LCALL     ?XSTACK_DISP0_8
   \   00016A   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   00016D   78..         MOV       R0,#?V14
   \   00016F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000172   740B         MOV       A,#0xb
   \   000174   12....       LCALL     ?XSTACK_DISP0_8
   \   000177   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   00017A   740C         MOV       A,#0xc
   \   00017C   12....       LCALL     ?XSTACK_DISP0_8
   \   00017F   E0           MOVX      A,@DPTR
   \   000180   F9           MOV       R1,A
   \   000181   AC..         MOV       R4,?V0
   \   000183   AD..         MOV       R5,?V1
   \   000185   AA..         MOV       R2,?V8
   \   000187   AB..         MOV       R3,?V9
   \   000189   12....       LCALL     `??afBuildMSGIncoming::?relay`; Banked call to: afBuildMSGIncoming
   \   00018C   740C         MOV       A,#0xc
   \   00018E   12....       LCALL     ?DEALLOC_XSTACK8
   \   000191   EF           MOV       A,R7
   \   000192   85..82       MOV       DPL,?V8
   \   000195   85..83       MOV       DPH,?V9
   \   000198   A3           INC       DPTR
   \   000199   A3           INC       DPTR
   \   00019A   F0           MOVX      @DPTR,A
   \                     ??afIncomingData_12:
   \   00019B   85..82       MOV       DPL,?V8
   \   00019E   85..83       MOV       DPH,?V9
   \   0001A1   E0           MOVX      A,@DPTR
   \   0001A2   540C         ANL       A,#0xc
   \   0001A4   640C         XRL       A,#0xc
   \   0001A6   7024         JNZ       ??afIncomingData_14
   \   0001A8                ; Setup parameters for call to function aps_FindGroupForEndpoint
   \   0001A8   EE           MOV       A,R6
   \   0001A9   F9           MOV       R1,A
   \   0001AA   A3           INC       DPTR
   \   0001AB   A3           INC       DPTR
   \   0001AC   A3           INC       DPTR
   \   0001AD   A3           INC       DPTR
   \   0001AE   12....       LCALL     ??Subroutine39_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_81:
   \   0001B1   12....       LCALL     `??aps_FindGroupForEndpoint::?relay`; Banked call to: aps_FindGroupForEndpoint
   \   0001B4   E9           MOV       A,R1
   \   0001B5   FE           MOV       R6,A
   \   0001B6   74FE         MOV       A,#-0x2
   \   0001B8   6E           XRL       A,R6
   \   0001B9   602D         JZ        ??afIncomingData_1
   \   0001BB                ; Setup parameters for call to function afFindEndPointDesc
   \   0001BB   12....       LCALL     `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   0001BE   8A..         MOV       ?V0,R2
   \   0001C0   8B..         MOV       ?V1,R3
   \   0001C2   EA           MOV       A,R2
   \   0001C3   45..         ORL       A,?V1
   \   0001C5   6003         JZ        $+5
   \   0001C7   02....       LJMP      ??afIncomingData_6 & 0xFFFF
   \   0001CA   801C         SJMP      ??afIncomingData_1
   \                     ??afIncomingData_14:
   \   0001CC   A3           INC       DPTR
   \   0001CD   A3           INC       DPTR
   \   0001CE   E0           MOVX      A,@DPTR
   \   0001CF   F4           CPL       A
   \   0001D0   7016         JNZ       ??afIncomingData_1
   \   0001D2   85..82       MOV       DPL,?V2
   \   0001D5   85..83       MOV       DPH,?V3
   \   0001D8   E0           MOVX      A,@DPTR
   \   0001D9   F5..         MOV       ?V2,A
   \   0001DB   A3           INC       DPTR
   \   0001DC   E0           MOVX      A,@DPTR
   \   0001DD   F5..         MOV       ?V3,A
   \   0001DF   E5..         MOV       A,?V2
   \   0001E1   45..         ORL       A,?V3
   \   0001E3   6003         JZ        $+5
   \   0001E5   02....       LJMP      ??afIncomingData_4 & 0xFFFF
    495                else
    496                  epDesc = NULL;
    497              }
    498              else
    499                epDesc = NULL;
    500            }
    501          }
   \                     ??afIncomingData_1:
   \   0001E8   7403         MOV       A,#0x3
   \   0001EA   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001ED   7F10         MOV       R7,#0x10
   \   0001EF   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003                REQUIRE ??Subroutine34_0
   \   000003                ; // Fall through to label ??Subroutine34_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine34_0:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine35_0
   \   000001                ; // Fall through to label ??Subroutine35_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   85..82       MOV       DPL,?V2
   \   000003   85..83       MOV       DPH,?V3
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008                REQUIRE ??Subroutine36_0
   \   000008                ; // Fall through to label ??Subroutine36_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine36_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V0,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F5..         MOV       ?V1,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   7902         MOV       R1,#0x2
   \   000004   8C82         MOV       DPL,R4
   \   000006   8D83         MOV       DPH,R5
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   000007   E8           MOV       A,R0
   \   000008   FC           MOV       R4,A
   \   000009   E9           MOV       A,R1
   \   00000A   FD           MOV       R5,A
   \   00000B   EC           MOV       A,R4
   \   00000C   4D           ORL       A,R5
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004   12....       LCALL     ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   000007   E582         MOV       A,DPL
   \   000009   4583         ORL       A,DPH
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   8882         MOV       DPL,R0
   \   000007   8983         MOV       DPH,R1
   \   000009   22           RET
    502          
    503          /*********************************************************************
    504           * @fn          afBuildMSGIncoming
    505           *
    506           * @brief       Build the message for the app
    507           *
    508           * @param
    509           *
    510           * @return      pointer to next in data buffer
    511           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    512          static void afBuildMSGIncoming( aps_FrameFormat_t *aff, endPointDesc_t *epDesc,
   \                     afBuildMSGIncoming:
    513                           zAddrType_t *SrcAddress, uint16 SrcPanId, NLDE_Signal_t *sig,
    514                           uint8 nwkSeqNum, uint8 SecurityUse, uint32 timestamp, uint8 radius )
    515          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   8C..         MOV       ?V4,R4
   \   00000B   8D..         MOV       ?V5,R5
   \   00000D   89..         MOV       ?V6,R1
    516            afIncomingMSGPacket_t *MSGpkt;
    517            const uint8 len = sizeof( afIncomingMSGPacket_t ) + aff->asduLength;
    518            uint8 *asdu = aff->asdu;
   \   00000F   EA           MOV       A,R2
   \   000010   240E         ADD       A,#0xe
   \   000012   F582         MOV       DPL,A
   \   000014   E4           CLR       A
   \   000015   35..         ADDC      A,?V1
   \   000017   F583         MOV       DPH,A
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   F5..         MOV       ?V8,A
   \   00001C   A3           INC       DPTR
   \   00001D   E0           MOVX      A,@DPTR
   \   00001E   F5..         MOV       ?V9,A
    519            MSGpkt = (afIncomingMSGPacket_t *)osal_msg_allocate( len );
   \   000020   EA           MOV       A,R2
   \   000021   2410         ADD       A,#0x10
   \   000023   F5..         MOV       ?V2,A
   \   000025   E4           CLR       A
   \   000026   35..         ADDC      A,?V1
   \   000028   F5..         MOV       ?V3,A
   \   00002A                ; Setup parameters for call to function osal_msg_allocate
   \   00002A   85..82       MOV       DPL,?V2
   \   00002D   F583         MOV       DPH,A
   \   00002F   E0           MOVX      A,@DPTR
   \   000030   2427         ADD       A,#0x27
   \   000032   FA           MOV       R2,A
   \   000033   7B00         MOV       R3,#0x0
   \   000035   12....       LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   000038   8A..         MOV       ?V10,R2
   \   00003A   8B..         MOV       ?V11,R3
   \   00003C   AE..         MOV       R6,?V10
   \   00003E   AF..         MOV       R7,?V11
    520          
    521            if ( MSGpkt == NULL )
   \   000040   EE           MOV       A,R6
   \   000041   4F           ORL       A,R7
   \   000042   7003         JNZ       $+5
   \   000044   02....       LJMP      ??afBuildMSGIncoming_0 & 0xFFFF
    522            {
    523              return;
    524            }
    525          
    526            MSGpkt->hdr.event = AF_INCOMING_MSG_CMD;
   \   000047   8E82         MOV       DPL,R6
   \   000049   8F83         MOV       DPH,R7
   \   00004B   741A         MOV       A,#0x1a
   \   00004D   12....       LCALL     ?Subroutine25 & 0xFFFF
    527            MSGpkt->groupId = aff->GroupID;
   \                     ??CrossCallReturnLabel_35:
   \   000050   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   000053   8E82         MOV       DPL,R6
   \   000055   8F83         MOV       DPH,R7
   \   000057   A3           INC       DPTR
   \   000058   A3           INC       DPTR
   \   000059   12....       LCALL     ?Subroutine22 & 0xFFFF
    528            MSGpkt->clusterId = aff->ClusterID;
   \                     ??CrossCallReturnLabel_30:
   \   00005C   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   00005F   12....       LCALL     ??Subroutine37_0 & 0xFFFF
    529            afCopyAddress( &MSGpkt->srcAddr, SrcAddress );
   \                     ??CrossCallReturnLabel_69:
   \   000062                ; Setup parameters for call to function afCopyAddress
   \   000062   7414         MOV       A,#0x14
   \   000064   12....       LCALL     ?XSTACK_DISP0_8
   \   000067   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   00006A   EE           MOV       A,R6
   \   00006B   2406         ADD       A,#0x6
   \   00006D   FA           MOV       R2,A
   \   00006E   E4           CLR       A
   \   00006F   3F           ADDC      A,R7
   \   000070   FB           MOV       R3,A
   \   000071   12....       LCALL     `??afCopyAddress::?relay`; Banked call to: afCopyAddress
    530            MSGpkt->srcAddr.endPoint = aff->SrcEndPoint;
   \   000074   85..82       MOV       DPL,?V0
   \   000077   85..83       MOV       DPH,?V1
   \   00007A   A3           INC       DPTR
   \   00007B   A3           INC       DPTR
   \   00007C   A3           INC       DPTR
   \   00007D   E0           MOVX      A,@DPTR
   \   00007E   C0E0         PUSH      A
   \   000080   EE           MOV       A,R6
   \   000081   240F         ADD       A,#0xf
   \   000083   F582         MOV       DPL,A
   \   000085   E4           CLR       A
   \   000086   3F           ADDC      A,R7
   \   000087   F583         MOV       DPH,A
   \   000089   D0E0         POP       A
   \   00008B   F0           MOVX      @DPTR,A
    531            MSGpkt->endPoint = epDesc->endPoint;
   \   00008C   85..82       MOV       DPL,?V4
   \   00008F   85..83       MOV       DPH,?V5
   \   000092   E0           MOVX      A,@DPTR
   \   000093   C0E0         PUSH      A
   \   000095   EE           MOV       A,R6
   \   000096   2414         ADD       A,#0x14
   \   000098   F582         MOV       DPL,A
   \   00009A   E4           CLR       A
   \   00009B   3F           ADDC      A,R7
   \   00009C   F583         MOV       DPH,A
   \   00009E   D0E0         POP       A
   \   0000A0   F0           MOVX      @DPTR,A
    532            MSGpkt->wasBroadcast = aff->wasBroadcast;
   \   0000A1   E5..         MOV       A,?V0
   \   0000A3   240C         ADD       A,#0xc
   \   0000A5   F582         MOV       DPL,A
   \   0000A7   E4           CLR       A
   \   0000A8   35..         ADDC      A,?V1
   \   0000AA   F583         MOV       DPH,A
   \   0000AC   E0           MOVX      A,@DPTR
   \   0000AD   C0E0         PUSH      A
   \   0000AF   EE           MOV       A,R6
   \   0000B0   2415         ADD       A,#0x15
   \   0000B2   F582         MOV       DPL,A
   \   0000B4   E4           CLR       A
   \   0000B5   3F           ADDC      A,R7
   \   0000B6   F583         MOV       DPH,A
   \   0000B8   D0E0         POP       A
   \   0000BA   F0           MOVX      @DPTR,A
   \   0000BB   7418         MOV       A,#0x18
   \   0000BD   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C0   12....       LCALL     ?Subroutine15 & 0xFFFF
    533            MSGpkt->LinkQuality = sig->LinkQuality;
   \                     ??CrossCallReturnLabel_17:
   \   0000C3   E0           MOVX      A,@DPTR
   \   0000C4   C0E0         PUSH      A
   \   0000C6   EE           MOV       A,R6
   \   0000C7   2416         ADD       A,#0x16
   \   0000C9   F582         MOV       DPL,A
   \   0000CB   E4           CLR       A
   \   0000CC   3F           ADDC      A,R7
   \   0000CD   F583         MOV       DPH,A
   \   0000CF   D0E0         POP       A
   \   0000D1   F0           MOVX      @DPTR,A
    534            MSGpkt->correlation = sig->correlation;
   \   0000D2   8882         MOV       DPL,R0
   \   0000D4   8983         MOV       DPH,R1
   \   0000D6   A3           INC       DPTR
   \   0000D7   E0           MOVX      A,@DPTR
   \   0000D8   C0E0         PUSH      A
   \   0000DA   EE           MOV       A,R6
   \   0000DB   2417         ADD       A,#0x17
   \   0000DD   F582         MOV       DPL,A
   \   0000DF   E4           CLR       A
   \   0000E0   3F           ADDC      A,R7
   \   0000E1   F583         MOV       DPH,A
   \   0000E3   D0E0         POP       A
   \   0000E5   F0           MOVX      @DPTR,A
    535            MSGpkt->rssi = sig->rssi;
   \   0000E6   8882         MOV       DPL,R0
   \   0000E8   8983         MOV       DPH,R1
   \   0000EA   A3           INC       DPTR
   \   0000EB   A3           INC       DPTR
   \   0000EC   E0           MOVX      A,@DPTR
   \   0000ED   C0E0         PUSH      A
   \   0000EF   EE           MOV       A,R6
   \   0000F0   2418         ADD       A,#0x18
   \   0000F2   F582         MOV       DPL,A
   \   0000F4   E4           CLR       A
   \   0000F5   3F           ADDC      A,R7
   \   0000F6   F583         MOV       DPH,A
   \   0000F8   D0E0         POP       A
   \   0000FA   F0           MOVX      @DPTR,A
    536            MSGpkt->SecurityUse = SecurityUse;
   \   0000FB   741A         MOV       A,#0x1a
   \   0000FD   12....       LCALL     ?XSTACK_DISP0_8
   \   000100   E0           MOVX      A,@DPTR
   \   000101   C0E0         PUSH      A
   \   000103   EE           MOV       A,R6
   \   000104   2419         ADD       A,#0x19
   \   000106   F582         MOV       DPL,A
   \   000108   E4           CLR       A
   \   000109   3F           ADDC      A,R7
   \   00010A   F583         MOV       DPH,A
   \   00010C   D0E0         POP       A
   \   00010E   F0           MOVX      @DPTR,A
    537            MSGpkt->timestamp = timestamp;
   \   00010F   741B         MOV       A,#0x1b
   \   000111   12....       LCALL     ?XSTACK_DISP0_8
   \   000114   12....       LCALL     ?XLOAD_R0123
   \   000117   EE           MOV       A,R6
   \   000118   241A         ADD       A,#0x1a
   \   00011A   F582         MOV       DPL,A
   \   00011C   E4           CLR       A
   \   00011D   3F           ADDC      A,R7
   \   00011E   F583         MOV       DPH,A
   \   000120   12....       LCALL     ?XSTORE_R0123
    538            MSGpkt->nwkSeqNum = nwkSeqNum;
   \   000123   EE           MOV       A,R6
   \   000124   241E         ADD       A,#0x1e
   \   000126   F582         MOV       DPL,A
   \   000128   E4           CLR       A
   \   000129   3F           ADDC      A,R7
   \   00012A   F583         MOV       DPH,A
   \   00012C   E5..         MOV       A,?V6
   \   00012E   F0           MOVX      @DPTR,A
    539            MSGpkt->macSrcAddr = aff->macSrcAddr;
   \   00012F   E5..         MOV       A,?V0
   \   000131   2415         ADD       A,#0x15
   \   000133   F582         MOV       DPL,A
   \   000135   E4           CLR       A
   \   000136   35..         ADDC      A,?V1
   \   000138   F583         MOV       DPH,A
   \   00013A   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   00013D   2424         ADD       A,#0x24
   \   00013F   F582         MOV       DPL,A
   \   000141   E4           CLR       A
   \   000142   3F           ADDC      A,R7
   \   000143   F583         MOV       DPH,A
   \   000145   12....       LCALL     ?Subroutine22 & 0xFFFF
    540            MSGpkt->macDestAddr = aff->macDestAddr;
   \                     ??CrossCallReturnLabel_31:
   \   000148   A3           INC       DPTR
   \   000149   A3           INC       DPTR
   \   00014A   A3           INC       DPTR
   \   00014B   A3           INC       DPTR
   \   00014C   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   00014F   2412         ADD       A,#0x12
   \   000151   12....       LCALL     ?Subroutine24 & 0xFFFF
    541            MSGpkt->srcAddr.panId = SrcPanId;
   \                     ??CrossCallReturnLabel_74:
   \   000154   7416         MOV       A,#0x16
   \   000156   12....       LCALL     ?XSTACK_DISP0_8
   \   000159   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   00015C   2410         ADD       A,#0x10
   \   00015E   12....       LCALL     ?Subroutine24 & 0xFFFF
    542            MSGpkt->cmd.TransSeqNumber = 0;
   \                     ??CrossCallReturnLabel_75:
   \   000161   EE           MOV       A,R6
   \   000162   241F         ADD       A,#0x1f
   \   000164   F582         MOV       DPL,A
   \   000166   E4           CLR       A
   \   000167   3F           ADDC      A,R7
   \   000168   F583         MOV       DPH,A
   \   00016A   E4           CLR       A
   \   00016B   F0           MOVX      @DPTR,A
    543            MSGpkt->cmd.DataLength = aff->asduLength;
   \   00016C   EE           MOV       A,R6
   \   00016D   2420         ADD       A,#0x20
   \   00016F   FC           MOV       R4,A
   \   000170   E4           CLR       A
   \   000171   3F           ADDC      A,R7
   \   000172   FD           MOV       R5,A
   \   000173   85..82       MOV       DPL,?V2
   \   000176   85..83       MOV       DPH,?V3
   \   000179   E0           MOVX      A,@DPTR
   \   00017A   8C82         MOV       DPL,R4
   \   00017C   8D83         MOV       DPH,R5
   \   00017E   F0           MOVX      @DPTR,A
   \   00017F   A3           INC       DPTR
   \   000180   E4           CLR       A
   \   000181   F0           MOVX      @DPTR,A
    544            MSGpkt->radius = radius;
   \   000182   741F         MOV       A,#0x1f
   \   000184   12....       LCALL     ?XSTACK_DISP0_8
   \   000187   E0           MOVX      A,@DPTR
   \   000188   C0E0         PUSH      A
   \   00018A   EE           MOV       A,R6
   \   00018B   2426         ADD       A,#0x26
   \   00018D   F582         MOV       DPL,A
   \   00018F   E4           CLR       A
   \   000190   3F           ADDC      A,R7
   \   000191   F583         MOV       DPH,A
   \   000193   D0E0         POP       A
   \   000195   F0           MOVX      @DPTR,A
    545          
    546            if ( MSGpkt->cmd.DataLength )
   \   000196   EE           MOV       A,R6
   \   000197   2422         ADD       A,#0x22
   \   000199   F8           MOV       R0,A
   \   00019A   E4           CLR       A
   \   00019B   3F           ADDC      A,R7
   \   00019C   F9           MOV       R1,A
   \   00019D   8C82         MOV       DPL,R4
   \   00019F   8D83         MOV       DPH,R5
   \   0001A1   12....       LCALL     ??Subroutine39_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_82:
   \   0001A4   EA           MOV       A,R2
   \   0001A5   4B           ORL       A,R3
   \   0001A6   6029         JZ        ??afBuildMSGIncoming_1
    547            {
    548              MSGpkt->cmd.Data = (uint8 *)(MSGpkt + 1);
   \   0001A8   EE           MOV       A,R6
   \   0001A9   2427         ADD       A,#0x27
   \   0001AB   FA           MOV       R2,A
   \   0001AC   E4           CLR       A
   \   0001AD   3F           ADDC      A,R7
   \   0001AE   FB           MOV       R3,A
   \   0001AF   8882         MOV       DPL,R0
   \   0001B1   8983         MOV       DPH,R1
   \   0001B3   EA           MOV       A,R2
   \   0001B4   F0           MOVX      @DPTR,A
   \   0001B5   A3           INC       DPTR
   \   0001B6   EB           MOV       A,R3
   \   0001B7   F0           MOVX      @DPTR,A
    549              osal_memcpy( MSGpkt->cmd.Data, asdu, MSGpkt->cmd.DataLength );
   \   0001B8                ; Setup parameters for call to function osal_memcpy
   \   0001B8   75..00       MOV       ?V10,#0x0
   \   0001BB   78..         MOV       R0,#?V8
   \   0001BD   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0001C0   8C82         MOV       DPL,R4
   \   0001C2   8D83         MOV       DPH,R5
   \   0001C4   12....       LCALL     ?Subroutine20 & 0xFFFF
    550            }
   \                     ??CrossCallReturnLabel_25:
   \   0001C7   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0001CA   7403         MOV       A,#0x3
   \   0001CC   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001CF   8008         SJMP      ??afBuildMSGIncoming_2
    551            else
    552            {
    553              MSGpkt->cmd.Data = NULL;
   \                     ??afBuildMSGIncoming_1:
   \   0001D1   8882         MOV       DPL,R0
   \   0001D3   8983         MOV       DPH,R1
   \   0001D5   E4           CLR       A
   \   0001D6   F0           MOVX      @DPTR,A
   \   0001D7   A3           INC       DPTR
   \   0001D8   F0           MOVX      @DPTR,A
    554            }
    555          
    556          #if defined ( MT_AF_CB_FUNC )
    557            // If ZDO or SAPI have registered for this endpoint, dont intercept it here
    558            if (AFCB_CHECK(CB_ID_AF_DATA_IND, *(epDesc->task_id)))
    559            {
    560              MT_AfIncomingMsg( (void *)MSGpkt );
    561              // Release the memory.
    562              osal_msg_deallocate( (void *)MSGpkt );
    563            }
    564            else
    565          #endif
    566            {
    567              // Send message through task message.
    568              osal_msg_send( *(epDesc->task_id), (uint8 *)MSGpkt );
   \                     ??afBuildMSGIncoming_2:
   \   0001D9                ; Setup parameters for call to function osal_msg_send
   \   0001D9   EE           MOV       A,R6
   \   0001DA   FA           MOV       R2,A
   \   0001DB   EF           MOV       A,R7
   \   0001DC   FB           MOV       R3,A
   \   0001DD   85..82       MOV       DPL,?V4
   \   0001E0   85..83       MOV       DPH,?V5
   \   0001E3   12....       LCALL     ?Subroutine8 & 0xFFFF
    569            }
   \                     ??CrossCallReturnLabel_7:
   \   0001E6   12....       LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
    570          }
   \                     ??afBuildMSGIncoming_0:
   \   0001E9   7F0C         MOV       R7,#0xc
   \   0001EB   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   3F           ADDC      A,R7
   \   000004   F583         MOV       DPH,A
   \   000006                REQUIRE ??Subroutine37_0
   \   000006                ; // Fall through to label ??Subroutine37_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   E8           MOV       A,R0
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   E9           MOV       A,R1
   \   000004   F0           MOVX      @DPTR,A
   \   000005   85..82       MOV       DPL,?V0
   \   000008   85..83       MOV       DPH,?V1
   \   00000B   A3           INC       DPTR
   \   00000C   A3           INC       DPTR
   \   00000D   A3           INC       DPTR
   \   00000E   A3           INC       DPTR
   \   00000F   A3           INC       DPTR
   \   000010   A3           INC       DPTR
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   000003   EE           MOV       A,R6
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FC           MOV       R4,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FD           MOV       R5,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   12....       LCALL     ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   000003   22           RET
    571          
    572          /*********************************************************************
    573           * @fn      AF_DataRequest
    574           *
    575           * @brief   Common functionality for invoking APSDE_DataReq() for both
    576           *          SendMulti and MSG-Send.
    577           *
    578           * input parameters
    579           *
    580           * @param  *dstAddr - Full ZB destination address: Nwk Addr + End Point.
    581           * @param  *srcEP - Origination (i.e. respond to or ack to) End Point Descr.
    582           * @param   cID - A valid cluster ID as specified by the Profile.
    583           * @param   len - Number of bytes of data pointed to by next param.
    584           * @param  *buf - A pointer to the data bytes to send.
    585           * @param  *transID - A pointer to a byte which can be modified and which will
    586           *                    be used as the transaction sequence number of the msg.
    587           * @param   options - Valid bit mask of Tx options.
    588           * @param   radius - Normally set to AF_DEFAULT_RADIUS.
    589           *
    590           * output parameters
    591           *
    592           * @param  *transID - Incremented by one if the return value is success.
    593           *
    594           * @return  afStatus_t - See previous definition of afStatus_... types.
    595           */

   \                                 In  segment XDATA_I, align 1, keep-with-next
    596          uint8 AF_DataRequestDiscoverRoute = DISC_ROUTE_NETWORK;
   \                     AF_DataRequestDiscoverRoute:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for AF_DataRequestDiscoverRoute>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    597          afStatus_t AF_DataRequest( afAddrType_t *dstAddr, endPointDesc_t *srcEP,
   \                     AF_DataRequest:
    598                                     uint16 cID, uint16 len, uint8 *buf, uint8 *transID,
    599                                     uint8 options, uint8 radius )
    600          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 33
   \   000005   74DF         MOV       A,#-0x21
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V4,R2
   \   00000C   8B..         MOV       ?V5,R3
   \   00000E   EC           MOV       A,R4
   \   00000F   FE           MOV       R6,A
   \   000010   ED           MOV       A,R5
   \   000011   FF           MOV       R7,A
   \   000012   89..         MOV       ?V2,R1
    601            pDescCB pfnDescCB;
    602            ZStatus_t stat;
    603            APSDE_DataReq_t req;
    604            afDataReqMTU_t mtu;
    605            epList_t *pList;
    606          
    607            // Verify source end point
    608            if ( srcEP == NULL )
   \   000014   EE           MOV       A,R6
   \   000015   4F           ORL       A,R7
   \   000016   7003         JNZ       $+5
   \   000018   02....       LJMP      ??AF_DataRequest_0 & 0xFFFF
    609            {
    610              return afStatus_INVALID_PARAMETER;
    611            }
    612          
    613          #if !defined( REFLECTOR )
    614            if ( dstAddr->addrMode == afAddrNotPresent )
    615            {
    616              return afStatus_INVALID_PARAMETER;
    617            }
    618          #endif
    619            
    620            // copy the addressing mode, to get the length of the packet
    621            mtu.aps.addressingMode = dstAddr->addrMode; 
   \   00001B   EA           MOV       A,R2
   \   00001C   2408         ADD       A,#0x8
   \   00001E   F5..         MOV       ?V0,A
   \   000020   E4           CLR       A
   \   000021   35..         ADDC      A,?V5
   \   000023   F5..         MOV       ?V1,A
   \   000025   85..82       MOV       DPL,?V0
   \   000028   F583         MOV       DPH,A
   \   00002A   E0           MOVX      A,@DPTR
   \   00002B   C0E0         PUSH      A
   \   00002D   7402         MOV       A,#0x2
   \   00002F   12....       LCALL     ?XSTACK_DISP0_8
   \   000032   D0E0         POP       A
   \   000034   F0           MOVX      @DPTR,A
    622          
    623            // Check if route is available before sending data
    624            if ( options & AF_LIMIT_CONCENTRATOR  )
   \   000035   E9           MOV       A,R1
   \   000036   A2E3         MOV       C,0xE0 /* A   */.3
   \   000038   502E         JNC       ??AF_DataRequest_1
    625            {
    626              if ( dstAddr->addrMode != afAddr16Bit )
   \   00003A   85..82       MOV       DPL,?V0
   \   00003D   85..83       MOV       DPH,?V1
   \   000040   E0           MOVX      A,@DPTR
   \   000041   6402         XRL       A,#0x2
   \   000043   707B         JNZ       ??AF_DataRequest_0
    627              {
    628                return ( afStatus_INVALID_PARAMETER );
    629              }
    630          
    631              // First, make sure the destination is not its self, then check for an existing route.
    632              if ( (dstAddr->addr.shortAddr != NLME_GetShortAddr())
    633                  && (RTG_CheckRtStatus( dstAddr->addr.shortAddr, RT_ACTIVE, (MTO_ROUTE | NO_ROUTE_CACHE) ) != RTG_SUCCESS) )
   \   000045                ; Setup parameters for call to function NLME_GetShortAddr
   \   000045   12....       LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000048   8A..         MOV       ?V6,R2
   \   00004A   8B..         MOV       ?V7,R3
   \   00004C   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_89:
   \   00004F   E5..         MOV       A,?V6
   \   000051   6A           XRL       A,R2
   \   000052   7003         JNZ       ??AF_DataRequest_2
   \   000054   E5..         MOV       A,?V7
   \   000056   6B           XRL       A,R3
   \                     ??AF_DataRequest_2:
   \   000057   600F         JZ        ??AF_DataRequest_1
   \   000059                ; Setup parameters for call to function RTG_CheckRtStatus
   \   000059   7C03         MOV       R4,#0x3
   \   00005B   7901         MOV       R1,#0x1
   \   00005D   12....       LCALL     `??RTG_CheckRtStatus::?relay`; Banked call to: RTG_CheckRtStatus
   \   000060   E9           MOV       A,R1
   \   000061   6005         JZ        ??AF_DataRequest_1
    634              {
    635                // A valid route to a concentrator wasn't found
    636                return ( afStatus_NO_ROUTE );
   \   000063   79CD         MOV       R1,#-0x33
   \   000065   02....       LJMP      ??AF_DataRequest_3 & 0xFFFF
    637              }
    638            }
    639          
    640            // Validate broadcasting
    641            if ( ( dstAddr->addrMode == afAddr16Bit     ) ||
    642                 ( dstAddr->addrMode == afAddrBroadcast )    )
   \                     ??AF_DataRequest_1:
   \   000068   85..82       MOV       DPL,?V0
   \   00006B   85..83       MOV       DPH,?V1
   \   00006E   E0           MOVX      A,@DPTR
   \   00006F   F8           MOV       R0,A
   \   000070   7402         MOV       A,#0x2
   \   000072   68           XRL       A,R0
   \   000073   6005         JZ        ??AF_DataRequest_4
   \   000075   740F         MOV       A,#0xf
   \   000077   68           XRL       A,R0
   \   000078   7039         JNZ       ??AF_DataRequest_5
    643            {
    644              // Check for valid broadcast values
    645              if( ADDR_NOT_BCAST != NLME_IsAddressBroadcast( dstAddr->addr.shortAddr )  )
   \                     ??AF_DataRequest_4:
   \   00007A                ; Setup parameters for call to function NLME_IsAddressBroadcast
   \   00007A   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_90:
   \   00007D   12....       LCALL     `??NLME_IsAddressBroadcast::?relay`; Banked call to: NLME_IsAddressBroadcast
   \   000080   E9           MOV       A,R1
   \   000081   85..82       MOV       DPL,?V0
   \   000084   85..83       MOV       DPH,?V1
   \   000087   6023         JZ        ??AF_DataRequest_6
    646              {
    647                // Force mode to broadcast
    648                dstAddr->addrMode = afAddrBroadcast;
   \   000089   740F         MOV       A,#0xf
   \   00008B   F0           MOVX      @DPTR,A
    649              }
    650              else
    651              {
    652                // Address is not a valid broadcast type
    653                if ( dstAddr->addrMode == afAddrBroadcast )
    654                {
    655                  return afStatus_INVALID_PARAMETER;
    656                }
    657              }
    658            }
    659            else if ( dstAddr->addrMode != afAddr64Bit &&
    660                      dstAddr->addrMode != afAddrGroup &&
    661                      dstAddr->addrMode != afAddrNotPresent )
    662            {
    663              return afStatus_INVALID_PARAMETER;
    664            }
    665          
    666            // Set destination address
    667            req.dstAddr.addrMode = dstAddr->addrMode;
   \                     ??AF_DataRequest_7:
   \   00008C   E0           MOVX      A,@DPTR
   \   00008D   C0E0         PUSH      A
   \   00008F   740B         MOV       A,#0xb
   \   000091   12....       LCALL     ?XSTACK_DISP0_8
   \   000094   D0E0         POP       A
   \   000096   12....       LCALL     ?Subroutine25 & 0xFFFF
    668            if ( dstAddr->addrMode == afAddr64Bit )
   \                     ??CrossCallReturnLabel_36:
   \   000099   E0           MOVX      A,@DPTR
   \   00009A   6403         XRL       A,#0x3
   \   00009C   7027         JNZ       ??AF_DataRequest_8
    669            {
    670              osal_cpyExtAddr( req.dstAddr.addr.extAddr, dstAddr->addr.extAddr );
   \   00009E                ; Setup parameters for call to function sAddrExtCpy
   \   00009E   AC..         MOV       R4,?V4
   \   0000A0   AD..         MOV       R5,?V5
   \   0000A2   7403         MOV       A,#0x3
   \   0000A4   12....       LCALL     ?XSTACK_DISP101_8
   \   0000A7   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   0000AA   802A         SJMP      ??CrossCallReturnLabel_70
    671            }
   \                     ??AF_DataRequest_6:
   \   0000AC   E0           MOVX      A,@DPTR
   \   0000AD   640F         XRL       A,#0xf
   \   0000AF   70DB         JNZ       ??AF_DataRequest_7
   \   0000B1   800D         SJMP      ??AF_DataRequest_0
   \                     ??AF_DataRequest_5:
   \   0000B3   7403         MOV       A,#0x3
   \   0000B5   68           XRL       A,R0
   \   0000B6   60D4         JZ        ??AF_DataRequest_7
   \   0000B8   7401         MOV       A,#0x1
   \   0000BA   68           XRL       A,R0
   \   0000BB   60CF         JZ        ??AF_DataRequest_7
   \   0000BD   E8           MOV       A,R0
   \   0000BE   60CC         JZ        ??AF_DataRequest_7
   \                     ??AF_DataRequest_0:
   \   0000C0   7902         MOV       R1,#0x2
   \   0000C2   02....       LJMP      ??AF_DataRequest_3 & 0xFFFF
    672            else
    673            {
    674              req.dstAddr.addr.shortAddr = dstAddr->addr.shortAddr;
   \                     ??AF_DataRequest_8:
   \   0000C5   85..82       MOV       DPL,?V4
   \   0000C8   85..83       MOV       DPH,?V5
   \   0000CB   12....       LCALL     ??Subroutine35_0 & 0xFFFF
    675            }
   \                     ??CrossCallReturnLabel_53:
   \   0000CE   7403         MOV       A,#0x3
   \   0000D0   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D3   12....       LCALL     ??Subroutine37_0 & 0xFFFF
    676          
    677            // This option is to use Wildcard ProfileID in outgoing packets
    678            if ( options & AF_WILDCARD_PROFILEID )
   \                     ??CrossCallReturnLabel_70:
   \   0000D6   E5..         MOV       A,?V2
   \   0000D8   A2E1         MOV       C,0xE0 /* A   */.1
   \   0000DA   7412         MOV       A,#0x12
   \   0000DC   5009         JNC       ??AF_DataRequest_9
    679            {
    680              req.profileID = ZDO_WILDCARD_PROFILE_ID;
   \   0000DE   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E1   74FF         MOV       A,#-0x1
   \   0000E3   F0           MOVX      @DPTR,A
   \   0000E4   A3           INC       DPTR
   \   0000E5   8060         SJMP      ??AF_DataRequest_10
    681            }
    682            else
    683            {
    684              req.profileID = ZDO_PROFILE_ID;
   \                     ??AF_DataRequest_9:
   \   0000E7   12....       LCALL     ?XSTACK_DISP0_8
   \   0000EA   E4           CLR       A
   \   0000EB   F0           MOVX      @DPTR,A
   \   0000EC   A3           INC       DPTR
   \   0000ED   F0           MOVX      @DPTR,A
    685          
    686              if ( (pfnDescCB = afGetDescCB( srcEP )) )
   \   0000EE   90....       MOV       DPTR,#epList
   \                     ??AF_DataRequest_11:
   \   0000F1   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   0000F4   603C         JZ        ??AF_DataRequest_12
   \   0000F6   8882         MOV       DPL,R0
   \   0000F8   8983         MOV       DPH,R1
   \   0000FA   A3           INC       DPTR
   \   0000FB   A3           INC       DPTR
   \   0000FC   12....       LCALL     ??Subroutine39_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   0000FF   EE           MOV       A,R6
   \   000100   6A           XRL       A,R2
   \   000101   7002         JNZ       ??AF_DataRequest_13
   \   000103   EF           MOV       A,R7
   \   000104   6B           XRL       A,R3
   \                     ??AF_DataRequest_13:
   \   000105   8882         MOV       DPL,R0
   \   000107   8983         MOV       DPH,R1
   \   000109   70E6         JNZ       ??AF_DataRequest_11
   \   00010B   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   00010E   6022         JZ        ??AF_DataRequest_12
    687              {
    688                uint16 *pID = (uint16 *)(pfnDescCB(
    689                                             AF_DESCRIPTOR_PROFILE_ID, srcEP->endPoint ));
   \   000110                ; Setup parameters for indirect call
   \   000110   8E82         MOV       DPL,R6
   \   000112   8F83         MOV       DPH,R7
   \   000114   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   000117   12....       LCALL     ?CALL_IND
    690                if ( pID )
   \   00011A   EA           MOV       A,R2
   \   00011B   4B           ORL       A,R3
   \   00011C   602A         JZ        ??AF_DataRequest_14
    691                {
    692                  req.profileID = *pID;
   \   00011E   8A82         MOV       DPL,R2
   \   000120   8B83         MOV       DPH,R3
   \   000122   12....       LCALL     ??Subroutine35_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   000125   7412         MOV       A,#0x12
   \   000127   12....       LCALL     ?XSTACK_DISP0_8
   \   00012A   12....       LCALL     ??Subroutine37_0 & 0xFFFF
    693                  osal_mem_free( pID );
   \                     ??CrossCallReturnLabel_71:
   \   00012D                ; Setup parameters for call to function osal_mem_free
   \   00012D   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000130   8016         SJMP      ??AF_DataRequest_14
    694                }
    695              }
    696              else if ( srcEP->simpleDesc )
   \                     ??AF_DataRequest_12:
   \   000132   8E82         MOV       DPL,R6
   \   000134   8F83         MOV       DPH,R7
   \   000136   12....       LCALL     ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   000139   600D         JZ        ??AF_DataRequest_14
    697              {
    698                req.profileID = srcEP->simpleDesc->AppProfId;
   \   00013B   12....       LCALL     ??Subroutine34_0 & 0xFFFF
    699              }
    700            }
   \                     ??CrossCallReturnLabel_57:
   \   00013E   7412         MOV       A,#0x12
   \   000140   12....       LCALL     ?XSTACK_DISP0_8
   \   000143   E8           MOV       A,R0
   \   000144   F0           MOVX      @DPTR,A
   \   000145   A3           INC       DPTR
   \   000146   E9           MOV       A,R1
   \                     ??AF_DataRequest_10:
   \   000147   F0           MOVX      @DPTR,A
    701          
    702            req.txOptions = 0;
   \                     ??AF_DataRequest_14:
   \   000148   7418         MOV       A,#0x18
   \   00014A   12....       LCALL     ?XSTACK_DISP0_8
   \   00014D   E4           CLR       A
   \   00014E   F0           MOVX      @DPTR,A
   \   00014F   A3           INC       DPTR
   \   000150   F0           MOVX      @DPTR,A
    703          
    704            if ( ( options & AF_ACK_REQUEST              ) &&
    705                 ( req.dstAddr.addrMode != AddrBroadcast ) &&
    706                 ( req.dstAddr.addrMode != AddrGroup     )    )
   \   000151   E5..         MOV       A,?V2
   \   000153   A2E4         MOV       C,0xE0 /* A   */.4
   \   000155   501C         JNC       ??AF_DataRequest_15
   \   000157   740B         MOV       A,#0xb
   \   000159   12....       LCALL     ?XSTACK_DISP0_8
   \   00015C   E0           MOVX      A,@DPTR
   \   00015D   F8           MOV       R0,A
   \   00015E   740F         MOV       A,#0xf
   \   000160   68           XRL       A,R0
   \   000161   6010         JZ        ??AF_DataRequest_15
   \   000163   7401         MOV       A,#0x1
   \   000165   68           XRL       A,R0
   \   000166   600B         JZ        ??AF_DataRequest_15
    707            {
    708              req.txOptions |=  APS_TX_OPTIONS_ACK;
   \   000168   7418         MOV       A,#0x18
   \   00016A   12....       LCALL     ?XSTACK_DISP0_8
   \   00016D   7404         MOV       A,#0x4
   \   00016F   F0           MOVX      @DPTR,A
   \   000170   A3           INC       DPTR
   \   000171   E4           CLR       A
   \   000172   F0           MOVX      @DPTR,A
    709            }
    710          
    711            if ( options & AF_SKIP_ROUTING )
   \                     ??AF_DataRequest_15:
   \   000173   E5..         MOV       A,?V2
   \   000175   A2E7         MOV       C,0xE0 /* A   */.7
   \   000177   5009         JNC       ??AF_DataRequest_16
    712            {
    713              req.txOptions |=  APS_TX_OPTIONS_SKIP_ROUTING;
   \   000179   7418         MOV       A,#0x18
   \   00017B   12....       LCALL     ?XSTACK_DISP0_8
   \   00017E   E0           MOVX      A,@DPTR
   \   00017F   4410         ORL       A,#0x10
   \   000181   F0           MOVX      @DPTR,A
    714            }
    715          
    716            if ( options & AF_EN_SECURITY )
   \                     ??AF_DataRequest_16:
   \   000182   E5..         MOV       A,?V2
   \   000184   A2E6         MOV       C,0xE0 /* A   */.6
   \   000186   5012         JNC       ??AF_DataRequest_17
    717            {
    718              req.txOptions |= APS_TX_OPTIONS_SECURITY_ENABLE;
   \   000188   7418         MOV       A,#0x18
   \   00018A   12....       LCALL     ?XSTACK_DISP0_8
   \   00018D   E0           MOVX      A,@DPTR
   \   00018E   4401         ORL       A,#0x1
   \   000190   F0           MOVX      @DPTR,A
    719              mtu.aps.secure = TRUE;
   \   000191   7401         MOV       A,#0x1
   \   000193   12....       LCALL     ?XSTACK_DISP0_8
   \   000196   7401         MOV       A,#0x1
   \   000198   8006         SJMP      ??AF_DataRequest_18
    720            }
    721            else
    722            {
    723              mtu.aps.secure = FALSE;
   \                     ??AF_DataRequest_17:
   \   00019A   7401         MOV       A,#0x1
   \   00019C   12....       LCALL     ?XSTACK_DISP0_8
   \   00019F   E4           CLR       A
   \                     ??AF_DataRequest_18:
   \   0001A0   F0           MOVX      @DPTR,A
    724            }
    725          
    726            if ( options & AF_PREPROCESS )
   \   0001A1   E5..         MOV       A,?V2
   \   0001A3   A2E2         MOV       C,0xE0 /* A   */.2
   \   0001A5   5009         JNC       ??AF_DataRequest_19
    727            {
    728              req.txOptions |=  APS_TX_OPTIONS_PREPROCESS;
   \   0001A7   7418         MOV       A,#0x18
   \   0001A9   12....       LCALL     ?XSTACK_DISP0_8
   \   0001AC   E0           MOVX      A,@DPTR
   \   0001AD   4440         ORL       A,#0x40
   \   0001AF   F0           MOVX      @DPTR,A
    729            }
    730          
    731            mtu.kvp = FALSE;
   \                     ??AF_DataRequest_19:
   \   0001B0   85..82       MOV       DPL,?XSP + 0
   \   0001B3   85..83       MOV       DPH,?XSP + 1
   \   0001B6   E4           CLR       A
   \   0001B7   F0           MOVX      @DPTR,A
    732          
    733            if ( options & AF_SUPRESS_ROUTE_DISC_NETWORK )
   \   0001B8   E5..         MOV       A,?V2
   \   0001BA   A2E5         MOV       C,0xE0 /* A   */.5
   \   0001BC   5009         JNC       ??AF_DataRequest_20
    734            {
    735              req.discoverRoute = DISC_ROUTE_INITIATE;
   \   0001BE   741B         MOV       A,#0x1b
   \   0001C0   12....       LCALL     ?XSTACK_DISP0_8
   \   0001C3   7404         MOV       A,#0x4
   \   0001C5   800D         SJMP      ??AF_DataRequest_21
    736            }
    737            else
    738            {
    739              req.discoverRoute = AF_DataRequestDiscoverRoute;
   \                     ??AF_DataRequest_20:
   \   0001C7   90....       MOV       DPTR,#AF_DataRequestDiscoverRoute
   \   0001CA   E0           MOVX      A,@DPTR
   \   0001CB   C0E0         PUSH      A
   \   0001CD   741B         MOV       A,#0x1b
   \   0001CF   12....       LCALL     ?XSTACK_DISP0_8
   \   0001D2   D0E0         POP       A
   \                     ??AF_DataRequest_21:
   \   0001D4   F0           MOVX      @DPTR,A
   \   0001D5   7437         MOV       A,#0x37
   \   0001D7   12....       LCALL     ?XSTACK_DISP0_8
    740            }
   \   0001DA   12....       LCALL     ??Subroutine36_0 & 0xFFFF
    741          
    742            req.transID       = *transID;
   \                     ??CrossCallReturnLabel_64:
   \   0001DD   85..82       MOV       DPL,?V0
   \   0001E0   F583         MOV       DPH,A
   \   0001E2   E0           MOVX      A,@DPTR
   \   0001E3   C0E0         PUSH      A
   \   0001E5   741A         MOV       A,#0x1a
   \   0001E7   12....       LCALL     ?XSTACK_DISP0_8
   \   0001EA   D0E0         POP       A
   \   0001EC   12....       LCALL     ?Subroutine33 & 0xFFFF
    743            req.srcEP         = srcEP->endPoint;
   \                     ??CrossCallReturnLabel_50:
   \   0001EF   E0           MOVX      A,@DPTR
   \   0001F0   C0E0         PUSH      A
   \   0001F2   740C         MOV       A,#0xc
   \   0001F4   12....       LCALL     ?XSTACK_DISP0_8
   \   0001F7   D0E0         POP       A
   \   0001F9   F0           MOVX      @DPTR,A
    744            req.dstEP         = dstAddr->endPoint;
   \   0001FA   85..82       MOV       DPL,?V4
   \   0001FD   85..83       MOV       DPH,?V5
   \   000200   A3           INC       DPTR
   \   000201   A3           INC       DPTR
   \   000202   A3           INC       DPTR
   \   000203   A3           INC       DPTR
   \   000204   A3           INC       DPTR
   \   000205   A3           INC       DPTR
   \   000206   A3           INC       DPTR
   \   000207   A3           INC       DPTR
   \   000208   A3           INC       DPTR
   \   000209   E0           MOVX      A,@DPTR
   \   00020A   C0E0         PUSH      A
   \   00020C   740D         MOV       A,#0xd
   \   00020E   12....       LCALL     ?XSTACK_DISP0_8
   \   000211   D0E0         POP       A
   \   000213   F0           MOVX      @DPTR,A
    745            req.clusterID     = cID;
   \   000214   7431         MOV       A,#0x31
   \   000216   12....       LCALL     ?XSTACK_DISP0_8
   \   000219   12....       LCALL     ??Subroutine35_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   00021C   7410         MOV       A,#0x10
   \   00021E   12....       LCALL     ?XSTACK_DISP0_8
   \   000221   12....       LCALL     ??Subroutine37_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   000224   7433         MOV       A,#0x33
   \   000226   12....       LCALL     ?XSTACK_DISP0_8
   \   000229   E0           MOVX      A,@DPTR
   \   00022A   F5..         MOV       ?V4,A
   \   00022C   A3           INC       DPTR
   \   00022D   E0           MOVX      A,@DPTR
   \   00022E   F5..         MOV       ?V5,A
    746            req.asduLen       = len;
   \   000230   7414         MOV       A,#0x14
   \   000232   12....       LCALL     ?XSTACK_DISP0_8
   \   000235   E5..         MOV       A,?V4
   \   000237   F0           MOVX      @DPTR,A
   \   000238   A3           INC       DPTR
   \   000239   E5..         MOV       A,?V5
   \   00023B   F0           MOVX      @DPTR,A
    747            req.asdu          = buf;
   \   00023C   7435         MOV       A,#0x35
   \   00023E   12....       LCALL     ?XSTACK_DISP0_8
   \   000241   12....       LCALL     ??Subroutine35_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   000244   7416         MOV       A,#0x16
   \   000246   12....       LCALL     ?XSTACK_DISP0_8
   \   000249   12....       LCALL     ??Subroutine37_0 & 0xFFFF
    748            req.radiusCounter = radius;
   \                     ??CrossCallReturnLabel_73:
   \   00024C   7439         MOV       A,#0x39
   \   00024E   12....       LCALL     ?XSTACK_DISP0_8
   \   000251   E0           MOVX      A,@DPTR
   \   000252   C0E0         PUSH      A
   \   000254   741C         MOV       A,#0x1c
   \   000256   12....       LCALL     ?XSTACK_DISP0_8
   \   000259   D0E0         POP       A
   \   00025B   12....       LCALL     ?Subroutine33 & 0xFFFF
    749          #if defined ( INTER_PAN )
    750            req.dstPanId      = dstAddr->panId;
    751          #endif // INTER_PAN
    752          
    753            // Look if there is a Callback function registered for this endpoint
    754            // The callback is used to control the AF Transaction ID used when sending messages
    755            pList = afFindEndPointDescList( srcEP->endPoint );
   \                     ??CrossCallReturnLabel_51:
   \   00025E   E0           MOVX      A,@DPTR
   \   00025F   F9           MOV       R1,A
   \   000260   12....       LCALL     `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   000263   8A82         MOV       DPL,R2
   \   000265   8B83         MOV       DPH,R3
    756          
    757            if ( ( pList != NULL ) && ( pList->pfnApplCB != NULL ) )
   \   000267   E582         MOV       A,DPL
   \   000269   4583         ORL       A,DPH
   \   00026B   6012         JZ        ??AF_DataRequest_22
   \   00026D   A3           INC       DPTR
   \   00026E   A3           INC       DPTR
   \   00026F   A3           INC       DPTR
   \   000270   A3           INC       DPTR
   \   000271   A3           INC       DPTR
   \   000272   12....       LCALL     ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   000275   6008         JZ        ??AF_DataRequest_22
    758            {
    759              pList->pfnApplCB( &req );
   \   000277                ; Setup parameters for indirect call
   \   000277   7403         MOV       A,#0x3
   \   000279   12....       LCALL     ?XSTACK_DISP101_8
   \   00027C   12....       LCALL     ?CALL_IND
    760            }
    761          
    762          #if defined ( INTER_PAN )
    763            if ( StubAPS_InterPan( dstAddr->panId, dstAddr->endPoint ) )
    764            {
    765              if ( len > INTERP_DataReqMTU() )
    766              {
    767                stat = afStatus_INVALID_PARAMETER;
    768              }
    769              else
    770              {
    771                stat = INTERP_DataReq( &req );
    772              }
    773            }
    774            else
    775          #endif // INTER_PAN
    776            {
    777              if (len > afDataReqMTU( &mtu ) )
   \                     ??AF_DataRequest_22:
   \   00027F                ; Setup parameters for call to function afDataReqMTU
   \   00027F   AA..         MOV       R2,?XSP + 0
   \   000281   AB..         MOV       R3,?XSP + 1
   \   000283   12....       LCALL     `??afDataReqMTU::?relay`; Banked call to: afDataReqMTU
   \   000286   E9           MOV       A,R1
   \   000287   C3           CLR       C
   \   000288   95..         SUBB      A,?V4
   \   00028A   E4           CLR       A
   \   00028B   95..         SUBB      A,?V5
   \   00028D   501A         JNC       ??AF_DataRequest_23
    778              {
    779                if (apsfSendFragmented)
   \   00028F   90....       MOV       DPTR,#apsfSendFragmented
   \   000292   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   000295   600D         JZ        ??AF_DataRequest_24
    780                {
    781                  stat = (*apsfSendFragmented)( &req );
   \   000297                ; Setup parameters for indirect call
   \   000297   7403         MOV       A,#0x3
   \   000299   12....       LCALL     ?XSTACK_DISP101_8
   \   00029C   12....       LCALL     ??Subroutine42_0 & 0xFFFF
    782                }
   \                     ??CrossCallReturnLabel_91:
   \   00029F   12....       LCALL     ?CALL_IND
   \   0002A2   800D         SJMP      ??AF_DataRequest_25
    783                else
    784                {
    785                  stat = afStatus_INVALID_PARAMETER;
   \                     ??AF_DataRequest_24:
   \   0002A4   75..02       MOV       ?V3,#0x2
   \   0002A7   800B         SJMP      ??AF_DataRequest_26
    786                }
    787              }
    788              else
    789              {
    790                stat = APSDE_DataReq( &req );
   \                     ??AF_DataRequest_23:
   \   0002A9                ; Setup parameters for call to function APSDE_DataReq
   \   0002A9   7403         MOV       A,#0x3
   \   0002AB   12....       LCALL     ?XSTACK_DISP101_8
   \   0002AE   12....       LCALL     `??APSDE_DataReq::?relay`; Banked call to: APSDE_DataReq
   \                     ??AF_DataRequest_25:
   \   0002B1   E9           MOV       A,R1
   \   0002B2   F5..         MOV       ?V3,A
    791              }
    792            }
    793          
    794            /*
    795             * If this is an EndPoint-to-EndPoint message on the same device, it will not
    796             * get added to the NWK databufs. So it will not go OTA and it will not get
    797             * a MACCB_DATA_CONFIRM_CMD callback. Thus it is necessary to generate the
    798             * AF_DATA_CONFIRM_CMD here. Note that APSDE_DataConfirm() only generates one
    799             * message with the first in line TransSeqNumber, even on a multi message.
    800             * Also note that a reflected msg will not have its confirmation generated
    801             * here.
    802             */
    803            if ( (req.dstAddr.addrMode == Addr16Bit) &&
    804                 (req.dstAddr.addr.shortAddr == NLME_GetShortAddr()) )
   \                     ??AF_DataRequest_26:
   \   0002B4   740B         MOV       A,#0xb
   \   0002B6   12....       LCALL     ?XSTACK_DISP0_8
   \   0002B9   E0           MOVX      A,@DPTR
   \   0002BA   6402         XRL       A,#0x2
   \   0002BC   702C         JNZ       ??AF_DataRequest_27
   \   0002BE                ; Setup parameters for call to function NLME_GetShortAddr
   \   0002BE   12....       LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   0002C1   8A..         MOV       ?V4,R2
   \   0002C3   8B..         MOV       ?V5,R3
   \   0002C5   A8..         MOV       R0,?V4
   \   0002C7   A9..         MOV       R1,?V5
   \   0002C9   7403         MOV       A,#0x3
   \   0002CB   12....       LCALL     ?XSTACK_DISP0_8
   \   0002CE   E0           MOVX      A,@DPTR
   \   0002CF   68           XRL       A,R0
   \   0002D0   7003         JNZ       ??AF_DataRequest_28
   \   0002D2   A3           INC       DPTR
   \   0002D3   E0           MOVX      A,@DPTR
   \   0002D4   69           XRL       A,R1
   \                     ??AF_DataRequest_28:
   \   0002D5   7013         JNZ       ??AF_DataRequest_27
    805            {
    806              afDataConfirm( srcEP->endPoint, *transID, stat );
   \   0002D7                ; Setup parameters for call to function afDataConfirm
   \   0002D7   AB..         MOV       R3,?V3
   \   0002D9   85..82       MOV       DPL,?V0
   \   0002DC   85..83       MOV       DPH,?V1
   \   0002DF   E0           MOVX      A,@DPTR
   \   0002E0   FA           MOV       R2,A
   \   0002E1   8E82         MOV       DPL,R6
   \   0002E3   8F83         MOV       DPH,R7
   \   0002E5   E0           MOVX      A,@DPTR
   \   0002E6   F9           MOV       R1,A
   \   0002E7   12....       LCALL     `??afDataConfirm::?relay`; Banked call to: afDataConfirm
    807            }
    808          
    809            if ( stat == afStatus_SUCCESS )
   \                     ??AF_DataRequest_27:
   \   0002EA   E5..         MOV       A,?V3
   \   0002EC   7009         JNZ       ??AF_DataRequest_29
    810            {
    811              (*transID)++;
   \   0002EE   85..82       MOV       DPL,?V0
   \   0002F1   85..83       MOV       DPH,?V1
   \   0002F4   E0           MOVX      A,@DPTR
   \   0002F5   04           INC       A
   \   0002F6   F0           MOVX      @DPTR,A
    812            }
    813          
    814            return (afStatus_t)stat;
   \                     ??AF_DataRequest_29:
   \   0002F7   A9..         MOV       R1,?V3
   \                     ??AF_DataRequest_3:
   \   0002F9   7421         MOV       A,#0x21
   \   0002FB   12....       LCALL     ?DEALLOC_XSTACK8
   \   0002FE   02....       LJMP      ?Subroutine3 & 0xFFFF
    815          }
    816          
    817          #if defined ( ZIGBEEPRO )
    818          /*********************************************************************
    819           * @fn      AF_DataRequestSrcRtg
    820           *
    821           * @brief   Common functionality for invoking APSDE_DataReq() for both
    822           *          SendMulti and MSG-Send.
    823           *
    824           * input parameters
    825           *
    826           * @param  *dstAddr - Full ZB destination address: Nwk Addr + End Point.
    827           * @param  *srcEP - Origination (i.e. respond to or ack to) End Point Descr.
    828           * @param   cID - A valid cluster ID as specified by the Profile.
    829           * @param   len - Number of bytes of data pointed to by next param.
    830           * @param  *buf - A pointer to the data bytes to send.
    831           * @param  *transID - A pointer to a byte which can be modified and which will
    832           *                    be used as the transaction sequence number of the msg.
    833           * @param   options - Valid bit mask of Tx options.
    834           * @param   radius - Normally set to AF_DEFAULT_RADIUS.
    835           * @param   relayCnt - Number of devices in the relay list
    836           * @param   pRelayList - Pointer to the relay list
    837           *
    838           * output parameters
    839           *
    840           * @param  *transID - Incremented by one if the return value is success.
    841           *
    842           * @return  afStatus_t - See previous definition of afStatus_... types.
    843           */
    844          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    845          afStatus_t AF_DataRequestSrcRtg( afAddrType_t *dstAddr, endPointDesc_t *srcEP,
   \                     AF_DataRequestSrcRtg:
    846                                     uint16 cID, uint16 len, uint8 *buf, uint8 *transID,
    847                                     uint8 options, uint8 radius, uint8 relayCnt, uint16* pRelayList )
    848          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   8C..         MOV       ?V0,R4
   \   00000B   8D..         MOV       ?V1,R5
   \   00000D   89..         MOV       ?V2,R1
    849            uint8 status;
    850          
    851            /* Add the source route to the source routing table */
    852            status = RTG_AddSrcRtgEntry_Guaranteed( dstAddr->addr.shortAddr, relayCnt,
    853                                                   pRelayList );
   \   00000F                ; Setup parameters for call to function RTG_AddSrcRtgEntry_Guaranteed
   \   00000F   7416         MOV       A,#0x16
   \   000011   12....       LCALL     ?XSTACK_DISP0_8
   \   000014   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   000017   7415         MOV       A,#0x15
   \   000019   12....       LCALL     ?XSTACK_DISP0_8
   \   00001C   12....       LCALL     ??Subroutine38_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   00001F   12....       LCALL     ??Subroutine39_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_84:
   \   000022   12....       LCALL     `??RTG_AddSrcRtgEntry_Guaranteed::?relay`; Banked call to: RTG_AddSrcRtgEntry_Guaranteed
   \   000025   E9           MOV       A,R1
   \   000026   F9           MOV       R1,A
    854          
    855            if( status == RTG_SUCCESS)
   \   000027   7043         JNZ       ??AF_DataRequestSrcRtg_0
    856            {
    857              /* Call AF_DataRequest to send the data */
    858              status = AF_DataRequest( dstAddr, srcEP, cID, len, buf, transID, options, radius );
   \   000029                ; Setup parameters for call to function AF_DataRequest
   \   000029   7414         MOV       A,#0x14
   \   00002B   12....       LCALL     ?XSTACK_DISP0_8
   \   00002E   E0           MOVX      A,@DPTR
   \   00002F   F5..         MOV       ?V3,A
   \   000031   78..         MOV       R0,#?V3
   \   000033   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000036   7413         MOV       A,#0x13
   \   000038   12....       LCALL     ?XSTACK_DISP0_8
   \   00003B   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   00003E   7413         MOV       A,#0x13
   \   000040   12....       LCALL     ?XSTACK_DISP0_8
   \   000043   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000046   7413         MOV       A,#0x13
   \   000048   12....       LCALL     ?XSTACK_DISP0_8
   \   00004B   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   00004E   7413         MOV       A,#0x13
   \   000050   12....       LCALL     ?XSTACK_DISP0_8
   \   000053   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000056   A9..         MOV       R1,?V2
   \   000058   AC..         MOV       R4,?V0
   \   00005A   AD..         MOV       R5,?V1
   \   00005C   EE           MOV       A,R6
   \   00005D   FA           MOV       R2,A
   \   00005E   EF           MOV       A,R7
   \   00005F   FB           MOV       R3,A
   \   000060   12....       LCALL     `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
   \   000063   7409         MOV       A,#0x9
   \   000065   12....       LCALL     ?DEALLOC_XSTACK8
   \   000068   E9           MOV       A,R1
   \   000069   F9           MOV       R1,A
   \   00006A   800B         SJMP      ??AF_DataRequestSrcRtg_1
    859            }
    860            else if( status == RTG_INVALID_PATH )
   \                     ??AF_DataRequestSrcRtg_0:
   \   00006C   7405         MOV       A,#0x5
   \   00006E   69           XRL       A,R1
   \   00006F   7004         JNZ       ??AF_DataRequestSrcRtg_2
    861            {
    862              /* The source route relay count is exceeding the network limit */
    863              status = afStatus_INVALID_PARAMETER;
   \   000071   7902         MOV       R1,#0x2
   \   000073   8002         SJMP      ??AF_DataRequestSrcRtg_1
    864            }
    865            else
    866            {
    867              /* The guaranteed adding entry fails due to memory failure */
    868              status = afStatus_MEM_FAIL;
   \                     ??AF_DataRequestSrcRtg_2:
   \   000075   7910         MOV       R1,#0x10
    869            }
    870            return status;
   \                     ??AF_DataRequestSrcRtg_1:
   \   000077   02....       LJMP      ?Subroutine4 & 0xFFFF
    871          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   7F04         MOV       R7,#0x4
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    872          
    873          #endif // ZIGBEEPRO
    874          
    875          /*********************************************************************
    876           * @fn      afFindEndPointDescList
    877           *
    878           * @brief   Find the endpoint description entry from the endpoint
    879           *          number.
    880           *
    881           * @param   EndPoint - Application Endpoint to look for
    882           *
    883           * @return  the address to the endpoint/interface description entry
    884           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    885          static epList_t *afFindEndPointDescList( uint8 EndPoint )
   \                     afFindEndPointDescList:
    886          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    887            epList_t *epSearch;
    888          
    889            for (epSearch = epList; epSearch != NULL; epSearch = epSearch->nextDesc)
   \   000004   90....       MOV       DPTR,#epList
   \   000007   8004         SJMP      ??afFindEndPointDescList_0
   \                     ??afFindEndPointDescList_1:
   \   000009   8A82         MOV       DPL,R2
   \   00000B   8B83         MOV       DPH,R3
   \                     ??afFindEndPointDescList_0:
   \   00000D   12....       LCALL     ??Subroutine39_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   000010   EA           MOV       A,R2
   \   000011   4B           ORL       A,R3
   \   000012   600B         JZ        ??afFindEndPointDescList_2
    890            {
    891              if (epSearch->epDesc->endPoint == EndPoint)
   \   000014   8A82         MOV       DPL,R2
   \   000016   8B83         MOV       DPH,R3
   \   000018   12....       LCALL     ??Subroutine40_0 & 0xFFFF
    892              {
    893                break;
    894              }
    895            }
   \                     ??CrossCallReturnLabel_93:
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   69           XRL       A,R1
   \   00001D   70EA         JNZ       ??afFindEndPointDescList_1
    896          
    897            return epSearch;
   \                     ??afFindEndPointDescList_2:
   \   00001F                REQUIRE ?Subroutine5
   \   00001F                ; // Fall through to label ?Subroutine5
    898          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   D083         POP       DPH
   \   000002   D082         POP       DPL
   \   000004   02....       LJMP      ?BRET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine40_0:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002                REQUIRE ??Subroutine41_0
   \   000002                ; // Fall through to label ??Subroutine41_0
    899          
    900          /*********************************************************************
    901           * @fn      afFindEndPointDesc
    902           *
    903           * @brief   Find the endpoint description entry from the endpoint
    904           *          number.
    905           *
    906           * @param   EndPoint - Application Endpoint to look for
    907           *
    908           * @return  the address to the endpoint/interface description entry
    909           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    910          endPointDesc_t *afFindEndPointDesc( uint8 EndPoint )
   \                     afFindEndPointDesc:
    911          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    912            epList_t *epSearch;
    913          
    914            // Look for the endpoint
    915            epSearch = afFindEndPointDescList( EndPoint );
   \   000005                ; Setup parameters for call to function afFindEndPointDescList
   \   000005   12....       LCALL     `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   000008   8A82         MOV       DPL,R2
   \   00000A   8B83         MOV       DPH,R3
    916          
    917            if ( epSearch )
   \   00000C   E582         MOV       A,DPL
   \   00000E   4583         ORL       A,DPH
   \   000010   6007         JZ        ??afFindEndPointDesc_0
    918              return ( epSearch->epDesc );
   \   000012   A3           INC       DPTR
   \   000013   A3           INC       DPTR
   \   000014   12....       LCALL     ??Subroutine39_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_86:
   \   000017   8004         SJMP      ??afFindEndPointDesc_1
    919            else
    920              return ( (endPointDesc_t *)NULL );
   \                     ??afFindEndPointDesc_0:
   \   000019   7A00         MOV       R2,#0x0
   \   00001B   7B00         MOV       R3,#0x0
   \                     ??afFindEndPointDesc_1:
   \   00001D   02....       LJMP      ?Subroutine1 & 0xFFFF
    921          }
    922          
    923          /*********************************************************************
    924           * @fn      afFindSimpleDesc
    925           *
    926           * @brief   Find the Simple Descriptor from the endpoint number.
    927           *
    928           * @param   EP - Application Endpoint to look for.
    929           *
    930           * @return  Non-zero to indicate that the descriptor memory must be freed.
    931           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   8C82         MOV       DPL,R4
   \   000002   8D83         MOV       DPH,R5
   \   000004                REQUIRE ??Subroutine40_0
   \   000004                ; // Fall through to label ??Subroutine40_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    932          uint8 afFindSimpleDesc( SimpleDescriptionFormat_t **ppDesc, uint8 EP )
   \                     afFindSimpleDesc:
    933          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   89..         MOV       ?V0,R1
    934            epList_t *epItem = afFindEndPointDescList( EP );
   \   00000B                ; Setup parameters for call to function afFindEndPointDescList
   \   00000B   12....       LCALL     `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   00000E   8A..         MOV       ?V2,R2
   \   000010   8B..         MOV       ?V3,R3
   \   000012   AC..         MOV       R4,?V2
   \   000014   AD..         MOV       R5,?V3
    935            uint8 rtrn = FALSE;
   \   000016   7900         MOV       R1,#0x0
    936          
    937            if ( epItem )
   \   000018   EC           MOV       A,R4
   \   000019   4D           ORL       A,R5
   \   00001A   6038         JZ        ??afFindSimpleDesc_0
    938            {
    939              if ( epItem->pfnDescCB )
   \   00001C   8C82         MOV       DPL,R4
   \   00001E   8D83         MOV       DPH,R5
   \   000020   A3           INC       DPTR
   \   000021   A3           INC       DPTR
   \   000022   A3           INC       DPTR
   \   000023   A3           INC       DPTR
   \   000024   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   000027   E582         MOV       A,DPL
   \   000029   4583         ORL       A,DPH
   \   00002B   6013         JZ        ??afFindSimpleDesc_1
    940              {
    941                *ppDesc = epItem->pfnDescCB( AF_DESCRIPTOR_SIMPLE, EP );
   \   00002D                ; Setup parameters for indirect call
   \   00002D   AA..         MOV       R2,?V0
   \   00002F   09           INC       R1
   \   000030   12....       LCALL     ?CALL_IND
   \   000033   8E82         MOV       DPL,R6
   \   000035   8F83         MOV       DPH,R7
   \   000037   EA           MOV       A,R2
   \   000038   F0           MOVX      @DPTR,A
   \   000039   A3           INC       DPTR
   \   00003A   EB           MOV       A,R3
   \   00003B   F0           MOVX      @DPTR,A
    942                rtrn = TRUE;
   \   00003C   7901         MOV       R1,#0x1
   \   00003E   801C         SJMP      ??afFindSimpleDesc_2
    943              }
    944              else
    945              {
    946                *ppDesc = epItem->epDesc->simpleDesc;
   \                     ??afFindSimpleDesc_1:
   \   000040   12....       LCALL     ?Subroutine13 & 0xFFFF
    947              }
    948            }
   \                     ??CrossCallReturnLabel_94:
   \   000043   A3           INC       DPTR
   \   000044   A3           INC       DPTR
   \   000045   A3           INC       DPTR
   \   000046   A3           INC       DPTR
   \   000047   12....       LCALL     ??Subroutine39_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_87:
   \   00004A   8E82         MOV       DPL,R6
   \   00004C   8F83         MOV       DPH,R7
   \   00004E   EA           MOV       A,R2
   \   00004F   F0           MOVX      @DPTR,A
   \   000050   A3           INC       DPTR
   \   000051   EB           MOV       A,R3
   \   000052   8007         SJMP      ??afFindSimpleDesc_3
    949            else
    950            {
    951              *ppDesc = NULL;
   \                     ??afFindSimpleDesc_0:
   \   000054   8E82         MOV       DPL,R6
   \   000056   8F83         MOV       DPH,R7
   \   000058   E4           CLR       A
   \   000059   F0           MOVX      @DPTR,A
   \   00005A   A3           INC       DPTR
   \                     ??afFindSimpleDesc_3:
   \   00005B   F0           MOVX      @DPTR,A
    952            }
    953          
    954            return rtrn;
   \                     ??afFindSimpleDesc_2:
   \   00005C   02....       LJMP      ?Subroutine4 & 0xFFFF
    955          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FB           MOV       R3,A
   \   000005   8A82         MOV       DPL,R2
   \   000007   8B83         MOV       DPH,R3
   \   000009   22           RET
    956          
    957          /*********************************************************************
    958           * @fn      afGetDescCB
    959           *
    960           * @brief   Get the Descriptor callback function.
    961           *
    962           * @param   epDesc - pointer to the endpoint descriptor
    963           *
    964           * @return  function pointer or NULL
    965           */
    966          static pDescCB afGetDescCB( endPointDesc_t *epDesc )
    967          {
    968            epList_t *epSearch;
    969          
    970            // Start at the beginning
    971            epSearch = epList;
    972          
    973            // Look through the list until the end
    974            while ( epSearch )
    975            {
    976              // Is there a match?
    977              if ( epSearch->epDesc == epDesc )
    978              {
    979                return ( epSearch->pfnDescCB );
    980              }
    981              else
    982                epSearch = epSearch->nextDesc;  // Next entry
    983            }
    984          
    985            return ( (pDescCB)NULL );
    986          }
    987          
    988          /*********************************************************************
    989           * @fn      afDataReqMTU
    990           *
    991           * @brief   Get the Data Request MTU(Max Transport Unit).
    992           *
    993           * @param   fields - afDataReqMTU_t
    994           *
    995           * @return  uint8(MTU)
    996           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    997          uint8 afDataReqMTU( afDataReqMTU_t* fields )
   \                     afDataReqMTU:
    998          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    999            uint8 len;
   1000            uint8 hdr;
   1001          
   1002            if ( fields->kvp == TRUE )
   \   000005   8A82         MOV       DPL,R2
   \   000007   8B83         MOV       DPH,R3
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   6401         XRL       A,#0x1
   \   00000C   7004         JNZ       ??afDataReqMTU_0
   1003            {
   1004              hdr = AF_HDR_KVP_MAX_LEN;
   \   00000E   7E08         MOV       R6,#0x8
   \   000010   8002         SJMP      ??afDataReqMTU_1
   1005            }
   1006            else
   1007            {
   1008              hdr = AF_HDR_V1_1_MAX_LEN;
   \                     ??afDataReqMTU_0:
   \   000012   7E00         MOV       R6,#0x0
   1009            }
   1010          
   1011            len = (uint8)(APSDE_DataReqMTU(&fields->aps) - hdr);
   1012          
   1013            return len;
   \                     ??afDataReqMTU_1:
   \   000014                ; Setup parameters for call to function APSDE_DataReqMTU
   \   000014   A3           INC       DPTR
   \   000015   AA82         MOV       R2,DPL
   \   000017   AB83         MOV       R3,DPH
   \   000019   12....       LCALL     `??APSDE_DataReqMTU::?relay`; Banked call to: APSDE_DataReqMTU
   \   00001C   E9           MOV       A,R1
   \   00001D   C3           CLR       C
   \   00001E   9E           SUBB      A,R6
   \   00001F   F9           MOV       R1,A
   \   000020   02....       LJMP      ?Subroutine2 & 0xFFFF
   1014          }
   1015          
   1016          /*********************************************************************
   1017           * @fn      afGetMatch
   1018           *
   1019           * @brief   Set the allow response flag.
   1020           *
   1021           * @param   ep - Application Endpoint to look for
   1022           * @param   action - true - allow response, false - no response
   1023           *
   1024           * @return  TRUE allow responses, FALSE no response
   1025           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1026          uint8 afGetMatch( uint8 ep )
   \                     afGetMatch:
   1027          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1028            epList_t *epSearch;
   1029          
   1030            // Look for the endpoint
   1031            epSearch = afFindEndPointDescList( ep );
   \   000005                ; Setup parameters for call to function afFindEndPointDescList
   \   000005   12....       LCALL     `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   000008   8A82         MOV       DPL,R2
   \   00000A   8B83         MOV       DPH,R3
   1032          
   1033            if ( epSearch )
   \   00000C   E582         MOV       A,DPL
   \   00000E   4583         ORL       A,DPH
   \   000010   6011         JZ        ??afGetMatch_0
   1034            {
   1035              if ( epSearch->flags & eEP_AllowMatch )
   \   000012   A3           INC       DPTR
   \   000013   A3           INC       DPTR
   \   000014   A3           INC       DPTR
   \   000015   A3           INC       DPTR
   \   000016   A3           INC       DPTR
   \   000017   A3           INC       DPTR
   \   000018   A3           INC       DPTR
   \   000019   A3           INC       DPTR
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   A2E0         MOV       C,0xE0 /* A   */.0
   \   00001D   5004         JNC       ??afGetMatch_0
   1036                return ( TRUE );
   \   00001F   7901         MOV       R1,#0x1
   \   000021   8002         SJMP      ??afGetMatch_1
   1037              else
   1038                return ( FALSE );
   1039            }
   1040            else
   1041              return ( FALSE );
   \                     ??afGetMatch_0:
   \   000023   7900         MOV       R1,#0x0
   \                     ??afGetMatch_1:
   \   000025                REQUIRE ?Subroutine1
   \   000025                ; // Fall through to label ?Subroutine1
   1042          }
   1043          
   1044          /*********************************************************************
   1045           * @fn      afSetMatch
   1046           *
   1047           * @brief   Set the allow response flag.
   1048           *
   1049           * @param   ep - Application Endpoint to look for
   1050           * @param   action - true - allow response, false - no response
   1051           *
   1052           * @return  TRUE if success, FALSE if endpoint not found
   1053           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1054          uint8 afSetMatch( uint8 ep, uint8 action )
   \                     afSetMatch:
   1055          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FF           MOV       R7,A
   1056            epList_t *epSearch;
   1057          
   1058            // Look for the endpoint
   1059            epSearch = afFindEndPointDescList( ep );
   \   000007                ; Setup parameters for call to function afFindEndPointDescList
   \   000007   12....       LCALL     `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   00000A   8A..         MOV       ?V0,R2
   \   00000C   8B..         MOV       ?V1,R3
   \   00000E   A8..         MOV       R0,?V0
   \   000010   A9..         MOV       R1,?V1
   1060          
   1061            if ( epSearch )
   \   000012   E8           MOV       A,R0
   \   000013   49           ORL       A,R1
   \   000014   6019         JZ        ??afSetMatch_0
   1062            {
   1063              if ( action )
   \   000016   E8           MOV       A,R0
   \   000017   2408         ADD       A,#0x8
   \   000019   F582         MOV       DPL,A
   \   00001B   E4           CLR       A
   \   00001C   39           ADDC      A,R1
   \   00001D   F583         MOV       DPH,A
   \   00001F   EF           MOV       A,R7
   \   000020   6005         JZ        ??afSetMatch_1
   1064              {
   1065                epSearch->flags |= eEP_AllowMatch;
   \   000022   E0           MOVX      A,@DPTR
   \   000023   D2E0         SETB      0xE0 /* A   */.0
   \   000025   8003         SJMP      ??afSetMatch_2
   1066              }
   1067              else
   1068              {
   1069                epSearch->flags &= (eEP_AllowMatch ^ 0xFFFF);
   \                     ??afSetMatch_1:
   \   000027   E0           MOVX      A,@DPTR
   \   000028   C2E0         CLR       0xE0 /* A   */.0
   \                     ??afSetMatch_2:
   \   00002A   F0           MOVX      @DPTR,A
   1070              }
   1071              return ( TRUE );
   \   00002B   7901         MOV       R1,#0x1
   \   00002D   8002         SJMP      ??afSetMatch_3
   1072            }
   1073            else
   1074              return ( FALSE );
   \                     ??afSetMatch_0:
   \   00002F   7900         MOV       R1,#0x0
   \                     ??afSetMatch_3:
   \   000031   80..         SJMP      ?Subroutine1
   1075          }
   1076          
   1077          /*********************************************************************
   1078           * @fn      afNumEndPoints
   1079           *
   1080           * @brief   Returns the number of endpoints defined (including 0)
   1081           *
   1082           * @param   none
   1083           *
   1084           * @return  number of endpoints
   1085           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1086          uint8 afNumEndPoints( void )
   \                     afNumEndPoints:
   1087          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1088            epList_t *epSearch;
   1089            uint8 endpoints;
   1090          
   1091            // Start at the beginning
   1092            epSearch = epList;
   \   000004   90....       MOV       DPTR,#epList
   \   000007   12....       LCALL     ?Subroutine15 & 0xFFFF
   1093            endpoints = 0;
   \                     ??CrossCallReturnLabel_18:
   \   00000A   7900         MOV       R1,#0x0
   \   00000C   8004         SJMP      ??CrossCallReturnLabel_23
   1094          
   1095            while ( epSearch )
   1096            {
   1097              endpoints++;
   \                     ??afNumEndPoints_0:
   \   00000E   09           INC       R1
   1098              epSearch = epSearch->nextDesc;
   \   00000F   12....       LCALL     ?Subroutine18 & 0xFFFF
   1099            }
   \                     ??CrossCallReturnLabel_23:
   \   000012   E582         MOV       A,DPL
   \   000014   4583         ORL       A,DPH
   \   000016   70F6         JNZ       ??afNumEndPoints_0
   1100          
   1101            return ( endpoints );
   \   000018   02....       LJMP      ?Subroutine5 & 0xFFFF
   1102          }
   1103          
   1104          /*********************************************************************
   1105           * @fn      afEndPoints
   1106           *
   1107           * @brief   Fills in the passed in buffer with the endpoint (numbers).
   1108           *          Use afNumEndPoints to find out how big a buffer to supply.
   1109           *
   1110           * @param   epBuf - pointer to mem used
   1111           *
   1112           * @return  void
   1113           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1114          void afEndPoints( uint8 *epBuf, uint8 skipZDO )
   \                     afEndPoints:
   1115          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1116            epList_t *epSearch;
   1117            uint8 endPoint;
   1118          
   1119            // Start at the beginning
   1120            epSearch = epList;
   \   000004   90....       MOV       DPTR,#epList
   \   000007   801A         SJMP      ??afEndPoints_0
   1121          
   1122            while ( epSearch )
   1123            {
   1124              endPoint = epSearch->epDesc->endPoint;
   \                     ??afEndPoints_1:
   \   000009   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   F8           MOV       R0,A
   1125          
   1126              if ( !skipZDO || endPoint != 0 )
   \   00000E   E9           MOV       A,R1
   \   00000F   6003         JZ        ??afEndPoints_2
   \   000011   E8           MOV       A,R0
   \   000012   600B         JZ        ??afEndPoints_3
   1127                *epBuf++ = endPoint;
   \                     ??afEndPoints_2:
   \   000014   E8           MOV       A,R0
   \   000015   8A82         MOV       DPL,R2
   \   000017   8B83         MOV       DPH,R3
   \   000019   F0           MOVX      @DPTR,A
   \   00001A   A3           INC       DPTR
   \   00001B   AA82         MOV       R2,DPL
   \   00001D   AB83         MOV       R3,DPH
   1128          
   1129              epSearch = epSearch->nextDesc;
   \                     ??afEndPoints_3:
   \   00001F   8C82         MOV       DPL,R4
   \   000021   8D83         MOV       DPH,R5
   1130            }
   \                     ??afEndPoints_0:
   \   000023   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   000026   EC           MOV       A,R4
   \   000027   4D           ORL       A,R5
   \   000028   70DF         JNZ       ??afEndPoints_1
   1131          }
   \   00002A   02....       LJMP      ?Subroutine5 & 0xFFFF
   1132          
   1133          /*********************************************************************
   1134           * @fn      afCopyAddress
   1135           *
   1136           * @brief   Fills in the passed in afAddrType_t parameter with the corresponding information
   1137           *          from the zAddrType_t parameter.
   1138           *
   1139           * @param   epBuf - pointer to mem used
   1140           *
   1141           * @return  void
   1142           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1143          void afCopyAddress( afAddrType_t *afAddr, zAddrType_t *zAddr )
   \                     afCopyAddress:
   1144          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   1145            afAddr->addrMode = (afAddrMode_t)zAddr->addrMode;
   \   000009   EC           MOV       A,R4
   \   00000A   2408         ADD       A,#0x8
   \   00000C   F8           MOV       R0,A
   \   00000D   E4           CLR       A
   \   00000E   3D           ADDC      A,R5
   \   00000F   F9           MOV       R1,A
   \   000010   8882         MOV       DPL,R0
   \   000012   8983         MOV       DPH,R1
   \   000014   E0           MOVX      A,@DPTR
   \   000015   8E82         MOV       DPL,R6
   \   000017   8F83         MOV       DPH,R7
   \   000019   A3           INC       DPTR
   \   00001A   A3           INC       DPTR
   \   00001B   A3           INC       DPTR
   \   00001C   A3           INC       DPTR
   \   00001D   A3           INC       DPTR
   \   00001E   A3           INC       DPTR
   \   00001F   A3           INC       DPTR
   \   000020   A3           INC       DPTR
   \   000021   F0           MOVX      @DPTR,A
   1146            if ( zAddr->addrMode == Addr64Bit )
   \   000022   8882         MOV       DPL,R0
   \   000024   8983         MOV       DPH,R1
   \   000026   E0           MOVX      A,@DPTR
   \   000027   6403         XRL       A,#0x3
   \   000029   7005         JNZ       ??afCopyAddress_0
   1147            {
   1148              (void)osal_cpyExtAddr( afAddr->addr.extAddr, zAddr->addr.extAddr );
   \   00002B                ; Setup parameters for call to function sAddrExtCpy
   \   00002B   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   00002E   8007         SJMP      ??CrossCallReturnLabel_9
   1149            }
   1150            else
   1151            {
   1152              afAddr->addr.shortAddr = zAddr->addr.shortAddr;
   \                     ??afCopyAddress_0:
   \   000030   8C82         MOV       DPL,R4
   \   000032   8D83         MOV       DPH,R5
   \   000034   12....       LCALL     ?Subroutine9 & 0xFFFF
   1153            }
   1154          
   1155            // Since zAddrType_t has no INTER-PAN information, set the panId member to zero.
   1156            afAddr->panId = 0;
   \                     ??CrossCallReturnLabel_9:
   \   000037   8E82         MOV       DPL,R6
   \   000039   8F83         MOV       DPH,R7
   \   00003B   A3           INC       DPTR
   \   00003C   A3           INC       DPTR
   \   00003D   A3           INC       DPTR
   \   00003E   A3           INC       DPTR
   \   00003F   A3           INC       DPTR
   \   000040   A3           INC       DPTR
   \   000041   A3           INC       DPTR
   \   000042   A3           INC       DPTR
   \   000043   A3           INC       DPTR
   \   000044   A3           INC       DPTR
   \   000045   E4           CLR       A
   \   000046   F0           MOVX      @DPTR,A
   \   000047   A3           INC       DPTR
   \   000048   F0           MOVX      @DPTR,A
   1157          }
   \   000049   02....       LJMP      ?Subroutine2 & 0xFFFF
   1158          
   1159          /**************************************************************************************************
   1160           * @fn          afAPSF_ConfigGet
   1161           *
   1162           * @brief       This function ascertains the fragmentation configuration that corresponds to
   1163           *              the specified EndPoint.
   1164           *
   1165           * input parameters
   1166           *
   1167           * @param       endPoint - The source EP of a Tx or destination EP of a Rx fragmented message.
   1168           *
   1169           * output parameters
   1170           *
   1171           * @param       pCfg - A pointer to an APSF configuration structure to fill with values.
   1172           *
   1173           * @return      None.
   1174           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1175          void afAPSF_ConfigGet(uint8 endPoint, afAPSF_Config_t *pCfg)
   \                     afAPSF_ConfigGet:
   1176          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   1177            epList_t *pList = afFindEndPointDescList(endPoint);
   \   000009                ; Setup parameters for call to function afFindEndPointDescList
   \   000009   12....       LCALL     `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   00000C   8A..         MOV       ?V0,R2
   \   00000E   8B..         MOV       ?V1,R3
   \   000010   A8..         MOV       R0,?V0
   \   000012   A9..         MOV       R1,?V1
   1178          
   1179            if (pList == NULL)
   \   000014   E8           MOV       A,R0
   \   000015   49           ORL       A,R1
   \   000016   700D         JNZ       ??afAPSF_ConfigGet_0
   1180            {
   1181              pCfg->frameDelay = APSF_DEFAULT_INTERFRAME_DELAY;
   \   000018   8E82         MOV       DPL,R6
   \   00001A   8F83         MOV       DPH,R7
   \   00001C   7432         MOV       A,#0x32
   \   00001E   F0           MOVX      @DPTR,A
   1182              pCfg->windowSize = APSF_DEFAULT_WINDOW_SIZE;
   \   00001F   A3           INC       DPTR
   \   000020   7401         MOV       A,#0x1
   \   000022   F0           MOVX      @DPTR,A
   \   000023   8021         SJMP      ??afAPSF_ConfigGet_1
   1183            }
   1184            else
   1185            {
   1186              (void)osal_memcpy(pCfg, &pList->apsfCfg, sizeof(afAPSF_Config_t));
   \                     ??afAPSF_ConfigGet_0:
   \   000025                ; Setup parameters for call to function osal_memcpy
   \   000025   E8           MOV       A,R0
   \   000026   2406         ADD       A,#0x6
   \   000028   F5..         MOV       ?V0,A
   \   00002A   E4           CLR       A
   \   00002B   39           ADDC      A,R1
   \   00002C   F5..         MOV       ?V1,A
   \   00002E   75..00       MOV       ?V2,#0x0
   \   000031   78..         MOV       R0,#?V0
   \   000033   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000036   7C02         MOV       R4,#0x2
   \   000038   7D00         MOV       R5,#0x0
   \   00003A   EE           MOV       A,R6
   \   00003B   FA           MOV       R2,A
   \   00003C   EF           MOV       A,R7
   \   00003D   FB           MOV       R3,A
   \   00003E   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000041   7403         MOV       A,#0x3
   \   000043   12....       LCALL     ?DEALLOC_XSTACK8
   1187            }
   1188          }
   \                     ??afAPSF_ConfigGet_1:
   \   000046                REQUIRE ?Subroutine4
   \   000046                ; // Fall through to label ?Subroutine4
   1189          
   1190          /**************************************************************************************************
   1191           * @fn          afAPSF_ConfigSet
   1192           *
   1193           * @brief       This function attempts to set the fragmentation configuration that corresponds to
   1194           *              the specified EndPoint.
   1195           *
   1196           * input parameters
   1197           *
   1198           * @param       endPoint - The specific EndPoint for which to set the fragmentation configuration.
   1199           * @param       pCfg - A pointer to an APSF configuration structure to fill with values.
   1200           *
   1201           * output parameters
   1202           *
   1203           * None.
   1204           *
   1205           * @return      afStatus_SUCCESS for success.
   1206           *              afStatus_INVALID_PARAMETER if the specified EndPoint is not registered.
   1207           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1208          afStatus_t afAPSF_ConfigSet(uint8 endPoint, afAPSF_Config_t *pCfg)
   \                     afAPSF_ConfigSet:
   1209          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   1210            epList_t *pList = afFindEndPointDescList(endPoint);
   \   000009                ; Setup parameters for call to function afFindEndPointDescList
   \   000009   12....       LCALL     `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   1211          
   1212            if (pList == NULL)
   \   00000C   EA           MOV       A,R2
   \   00000D   4B           ORL       A,R3
   \   00000E   7004         JNZ       ??afAPSF_ConfigSet_0
   1213            {
   1214              return afStatus_INVALID_PARAMETER;
   \   000010   7902         MOV       R1,#0x2
   \   000012   8021         SJMP      ??afAPSF_ConfigSet_1
   1215            }
   1216          
   1217            (void)osal_memcpy(&pList->apsfCfg, pCfg, sizeof(afAPSF_Config_t));
   \                     ??afAPSF_ConfigSet_0:
   \   000014                ; Setup parameters for call to function osal_memcpy
   \   000014   8E..         MOV       ?V0,R6
   \   000016   8F..         MOV       ?V1,R7
   \   000018   75..00       MOV       ?V2,#0x0
   \   00001B   78..         MOV       R0,#?V0
   \   00001D   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000020   7C02         MOV       R4,#0x2
   \   000022   7D00         MOV       R5,#0x0
   \   000024   EA           MOV       A,R2
   \   000025   2406         ADD       A,#0x6
   \   000027   FA           MOV       R2,A
   \   000028   5001         JNC       ??afAPSF_ConfigSet_2
   \   00002A   0B           INC       R3
   \                     ??afAPSF_ConfigSet_2:
   \   00002B   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00002E   7403         MOV       A,#0x3
   \   000030   12....       LCALL     ?DEALLOC_XSTACK8
   1218            return afStatus_SUCCESS;
   \   000033   7900         MOV       R1,#0x0
   \                     ??afAPSF_ConfigSet_1:
   \   000035   80..         SJMP      ?Subroutine4
   1219          }
   1220          
   1221          /**************************************************************************************************
   1222           * @fn          afSetApplCB
   1223           *
   1224           * @brief       Sets the pointer to the Application Callback function for a
   1225           *              specific EndPoint.
   1226           *
   1227           * input parameters
   1228           *
   1229           * @param       endPoint - The specific EndPoint for which to set Application Callback.
   1230           * @param       pApplFn - A pointer to the Application Callback function.
   1231           *
   1232           * output parameters
   1233           *
   1234           * None.
   1235           *
   1236           * @return      TRUE if success, FALSE if endpoint not found
   1237           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1238          uint8 afSetApplCB( uint8 endPoint, pApplCB pApplFn )
   \                     afSetApplCB:
   1239          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   1240            if ( pApplFn != NULL )
   \   000009   EE           MOV       A,R6
   \   00000A   4F           ORL       A,R7
   \   00000B   601F         JZ        ??afSetApplCB_0
   1241            {
   1242              epList_t *epSearch;
   1243          
   1244              // Look for the endpoint
   1245              epSearch = afFindEndPointDescList( endPoint );
   \   00000D                ; Setup parameters for call to function afFindEndPointDescList
   \   00000D   12....       LCALL     `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   000010   8A82         MOV       DPL,R2
   \   000012   8B83         MOV       DPH,R3
   1246          
   1247              if ( epSearch )
   \   000014   E582         MOV       A,DPL
   \   000016   4583         ORL       A,DPH
   \   000018   6012         JZ        ??afSetApplCB_0
   1248              {
   1249                epSearch->pfnApplCB = pApplFn;
   \   00001A   A3           INC       DPTR
   \   00001B   A3           INC       DPTR
   \   00001C   A3           INC       DPTR
   \   00001D   A3           INC       DPTR
   \   00001E   A3           INC       DPTR
   \   00001F   A3           INC       DPTR
   \   000020   A3           INC       DPTR
   \   000021   A3           INC       DPTR
   \   000022   A3           INC       DPTR
   \   000023   EE           MOV       A,R6
   \   000024   F0           MOVX      @DPTR,A
   \   000025   A3           INC       DPTR
   \   000026   EF           MOV       A,R7
   \   000027   F0           MOVX      @DPTR,A
   1250          
   1251                return ( TRUE );
   \   000028   7901         MOV       R1,#0x1
   \   00002A   8002         SJMP      ??afSetApplCB_1
   1252              }
   1253            }
   1254          
   1255            return ( FALSE );
   \                     ??afSetApplCB_0:
   \   00002C   7900         MOV       R1,#0x0
   \                     ??afSetApplCB_1:
   \   00002E   80..         SJMP      ?Subroutine4
   1256          }

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for AF_DataRequestDiscoverRoute>`:
   \   000000   01           DB 1

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afRegisterExtended::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afRegisterExtended

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afRegister::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afRegister

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afDelete::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afDelete

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afDataConfirm::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afDataConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afReflectError::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afReflectError

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afIncomingData::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afIncomingData

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afBuildMSGIncoming::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afBuildMSGIncoming

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??AF_DataRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    AF_DataRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??AF_DataRequestSrcRtg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    AF_DataRequestSrcRtg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afFindEndPointDescList::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afFindEndPointDescList

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afFindEndPointDesc::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afFindEndPointDesc

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afFindSimpleDesc::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afFindSimpleDesc

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afDataReqMTU::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afDataReqMTU

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afGetMatch::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afGetMatch

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afSetMatch::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afSetMatch

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afNumEndPoints::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afNumEndPoints

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afEndPoints::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afEndPoints

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afCopyAddress::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afCopyAddress

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afAPSF_ConfigGet::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afAPSF_ConfigGet

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afAPSF_ConfigSet::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afAPSF_ConfigSet

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afSetApplCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afSetApplCB
   1257          
   1258          /**************************************************************************************************
   1259          */

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      1     70   AF_DataRequest
        0     49   -> APSDE_DataReq
        0     49   -> NLME_GetShortAddr
        0     49   -> NLME_IsAddressBroadcast
        0     49   -> RTG_CheckRtStatus
        0     49   -> afDataConfirm
        0     49   -> afDataReqMTU
        0     49   -> afFindEndPointDescList
        0     49   -> osal_mem_free
        0     49   -> sAddrExtCpy
      0     33   AF_DataRequestSrcRtg
        0     21   -> AF_DataRequest
        0     12   -> RTG_AddSrcRtgEntry_Guaranteed
      0     15   afAPSF_ConfigGet
        0     12   -> afFindEndPointDescList
        0     15   -> osal_memcpy
      0     15   afAPSF_ConfigSet
        0     12   -> afFindEndPointDescList
        0     15   -> osal_memcpy
      1     62   afBuildMSGIncoming
        0     20   -> afCopyAddress
        0     23   -> osal_memcpy
        0     20   -> osal_msg_allocate
        0     20   -> osal_msg_send
      1     29   afCopyAddress
        0      9   -> sAddrExtCpy
      1     63   afDataConfirm
        0     14   -> afFindEndPointDesc
        0     14   -> osal_msg_allocate
        0     14   -> osal_msg_send
      0     58   afDataReqMTU
        0      9   -> APSDE_DataReqMTU
      0      9   afDelete
        0      9   -> osal_mem_free
      3      0   afEndPoints
      0     37   afFindEndPointDesc
        0     10   -> afFindEndPointDescList
      2     49   afFindEndPointDescList
      0     12   afFindSimpleDesc
        0     12   -> afFindEndPointDescList
      0     10   afGetMatch
        0     10   -> afFindEndPointDescList
      1     49   afIncomingData
        0     39   -> afBuildMSGIncoming
        0     27   -> afFindEndPointDesc
        0     27   -> afFindEndPointDescList
        0     27   -> aps_FindGroupForEndpoint
        0     27   -> osal_mem_free
      2      0   afNumEndPoints
      1     18   afReflectError
        0     16   -> afFindEndPointDesc
        0     16   -> osal_msg_allocate
        0     16   -> osal_msg_send
      0     12   afRegister
        0     10   -> afFindEndPointDescList
        0     12   -> afRegisterExtended
      1     26   afRegisterExtended
        0     14   -> bdb_zclFindingBindingEpType
        0     14   -> osal_mem_alloc
      0     12   afSetApplCB
        0     12   -> afFindEndPointDescList
      0     10   afSetMatch
        0     10   -> afFindEndPointDescList


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  ?<Initializer for AF_DataRequestDiscoverRoute>
       1  ??Subroutine34_0
       4  ??Subroutine35_0
       8  ??Subroutine36_0
       6  ??Subroutine37_0
       7  ??Subroutine38_0
       6  ??Subroutine39_0
       2  ??Subroutine40_0
       3  ??Subroutine41_0
       6  ??Subroutine42_0
       5  ?Subroutine0
       5  ?Subroutine1
       8  ?Subroutine10
       6  ?Subroutine11
      14  ?Subroutine12
       4  ?Subroutine13
       8  ?Subroutine14
       4  ?Subroutine15
       5  ?Subroutine16
       3  ?Subroutine17
      10  ?Subroutine18
       6  ?Subroutine19
       5  ?Subroutine2
       6  ?Subroutine20
       9  ?Subroutine21
      18  ?Subroutine22
       7  ?Subroutine23
       6  ?Subroutine24
       8  ?Subroutine25
       4  ?Subroutine26
      10  ?Subroutine27
       8  ?Subroutine28
       8  ?Subroutine29
       5  ?Subroutine3
       3  ?Subroutine30
      10  ?Subroutine31
       6  ?Subroutine32
       6  ?Subroutine33
       5  ?Subroutine4
       7  ?Subroutine5
      12  ?Subroutine6
      26  ?Subroutine7
      13  ?Subroutine8
       9  ?Subroutine9
     769  AF_DataRequest
       6  AF_DataRequest::?relay
       1  AF_DataRequestDiscoverRoute
     122  AF_DataRequestSrcRtg
       6  AF_DataRequestSrcRtg::?relay
      70  afAPSF_ConfigGet
       6  afAPSF_ConfigGet::?relay
      55  afAPSF_ConfigSet
       6  afAPSF_ConfigSet::?relay
     494  afBuildMSGIncoming
       6  afBuildMSGIncoming::?relay
      76  afCopyAddress
       6  afCopyAddress::?relay
      70  afDataConfirm
       6  afDataConfirm::?relay
      35  afDataReqMTU
       6  afDataReqMTU::?relay
      70  afDelete
       6  afDelete::?relay
      45  afEndPoints
       6  afEndPoints::?relay
      32  afFindEndPointDesc
       6  afFindEndPointDesc::?relay
      31  afFindEndPointDescList
       6  afFindEndPointDescList::?relay
      95  afFindSimpleDesc
       6  afFindSimpleDesc::?relay
      37  afGetMatch
       6  afGetMatch::?relay
     498  afIncomingData
       6  afIncomingData::?relay
      27  afNumEndPoints
       6  afNumEndPoints::?relay
      95  afReflectError
       6  afReflectError::?relay
      71  afRegister
       6  afRegister::?relay
     142  afRegisterExtended
       6  afRegisterExtended::?relay
      48  afSetApplCB
       6  afSetApplCB::?relay
      51  afSetMatch
       6  afSetMatch::?relay
       2  epList

 
 3 245 bytes in segment BANKED_CODE
   126 bytes in segment BANK_RELAYS
     1 byte  in segment XDATA_I
     1 byte  in segment XDATA_ID
     2 bytes in segment XDATA_Z
 
   127 bytes of CODE     memory
 3 245 bytes of HUGECODE memory
     3 bytes of XDATA    memory

Errors: none
Warnings: none
