///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V10.10.1.4655 for 8051              21/Jul/2021  15:47:03
// Copyright 2004-2017 IAR Systems AB.
// Standalone license - IAR Embedded Workbench for 8051
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        D:\work\zigbee\ti_cc2530_zstack\Z-Stack
//        3.0.2\Components\hal\target\CC2530EB\hal_key.c
//    Command line       =  
//        -f C:\Users\WenHao\AppData\Local\Temp\EWC269.tmp
//        ("D:\work\zigbee\ti_cc2530_zstack\Z-Stack
//        3.0.2\Components\hal\target\CC2530EB\hal_key.c" -D CSTX_BOARD -D
//        SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D xPOWER_SAVING
//        -D NWK_AUTO_POLL -D xZTOOL_P1 -D xMT_TASK -D xMT_APP_FUNC -D
//        xMT_SYS_FUNC -D xMT_ZDO_FUNC -D xMT_ZDO_MGMT -D xMT_APP_CNF_FUNC -D
//        LCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D ZCL_IDENTIFY -D
//        ZCL_READ -D ZCL_DISCOVER -D ZCL_WRITE -D ZCL_BASIC -D
//        ZCL_REPORTING_DEVICE -D HAL_LED=TRUE -D HAL_UART=TRUE -D HAL_KEY=TRUE
//        -D ISR_KEYINTERRUPT -lC "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\EndDeviceEB\List"
//        -lA "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\EndDeviceEB\List"
//        --diag_suppress Pe001,Pa010 -o
//        "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\EndDeviceEB\Obj"
//        -e --debug --core=plain --dptr=16,1 --data_model=large
//        --code_model=banked --calling_convention=xdata_reentrant
//        --place_constants=data_rom --nr_virtual_regs 16 -f
//        "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
//        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f
//        "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
//        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x00100000 -DZDAPP_CONFIG_PAN_ID=0xFFFF
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0}
//        -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
//        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000
//        -DENABLE_LED4_DISABLE_S1) -f "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
//        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\"
//        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\Source\"
//        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\Source\"
//        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\ZMain\TI2530DB\"
//        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\hal\include\"
//        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
//        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\mac\include\"
//        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
//        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
//        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
//        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\mt\"
//        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\osal\include\"
//        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\services\saddr\"
//        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\services\sdata\"
//        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\stack\af\"
//        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
//        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\stack\gp\"
//        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
//        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
//        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\stack\sec\"
//        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\stack\sys\"
//        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
//        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
//        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\zmac\"
//        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
//        -Ohz --require_prototypes)
//    Locale             =  Chinese (Simplified)_China.936
//    List file          =  
//        D:\work\zigbee\ti_cc2530_zstack\Z-Stack
//        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\EndDeviceEB\List\hal_key.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME hal_key

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__register_banks", "*"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?CALL_IND
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?INTERRUPT_ENTER_XSP
        EXTERN ?INTERRUPT_LEAVE_XSP
        EXTERN ?PUSH_XSTACK8_X_FOUR
        EXTERN __INIT_XDATA_Z

        PUBLIC `??HalKeyConfig::?relay`
        FUNCTION `??HalKeyConfig::?relay`,0203H
        PUBLIC `??HalKeyEnterSleep::?relay`
        FUNCTION `??HalKeyEnterSleep::?relay`,0203H
        PUBLIC `??HalKeyExitSleep::?relay`
        FUNCTION `??HalKeyExitSleep::?relay`,0203H
        PUBLIC `??HalKeyInit::?relay`
        FUNCTION `??HalKeyInit::?relay`,0203H
        PUBLIC `??HalKeyPoll::?relay`
        FUNCTION `??HalKeyPoll::?relay`,0203H
        PUBLIC `??HalKeyRead::?relay`
        FUNCTION `??HalKeyRead::?relay`,0203H
        PUBLIC `??halGetJoyKeyInput::?relay`
        FUNCTION `??halGetJoyKeyInput::?relay`,0203H
        PUBWEAK `??halKeyPort0Isr::??INTVEC 107`
        PUBWEAK `??halKeyPort2Isr::??INTVEC 51`
        PUBLIC `??halProcessKeyInterrupt::?relay`
        FUNCTION `??halProcessKeyInterrupt::?relay`,0203H
        PUBLIC HalKeyConfig
        FUNCTION HalKeyConfig,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC HalKeyEnterSleep
        FUNCTION HalKeyEnterSleep,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC HalKeyExitSleep
        FUNCTION HalKeyExitSleep,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC HalKeyInit
        FUNCTION HalKeyInit,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC HalKeyPoll
        FUNCTION HalKeyPoll,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC HalKeyRead
        FUNCTION HalKeyRead,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC Hal_KeyIntEnable
        PUBWEAK IEN2
        PUBWEAK P0DIR
        PUBWEAK P0IEN
        PUBWEAK P0IFG
        PUBWEAK P0SEL
        PUBWEAK P2DIR
        PUBWEAK P2IEN
        PUBWEAK P2IFG
        PUBWEAK P2SEL
        PUBWEAK PICTL
        PUBWEAK _A_IEN0
        PUBWEAK _A_IEN1
        PUBWEAK _A_IRCON
        PUBWEAK _A_IRCON2
        PUBWEAK _A_P0
        PUBWEAK _A_P2
        PUBWEAK __Constant_19
        PUBLIC halGetJoyKeyInput
        FUNCTION halGetJoyKeyInput,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC halKeyPort0Isr
        FUNCTION halKeyPort0Isr,021233H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC halKeyPort2Isr
        FUNCTION halKeyPort2Isr,021233H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC halProcessKeyInterrupt
        FUNCTION halProcessKeyInterrupt,021203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 4, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
HalAdcRead          SYMBOL "HalAdcRead"
`??HalAdcRead::?relay` SYMBOL "?relay", HalAdcRead
osal_set_event      SYMBOL "osal_set_event"
`??osal_set_event::?relay` SYMBOL "?relay", osal_set_event
osal_start_timerEx  SYMBOL "osal_start_timerEx"
`??osal_start_timerEx::?relay` SYMBOL "?relay", osal_start_timerEx
osal_stop_timerEx   SYMBOL "osal_stop_timerEx"
`??osal_stop_timerEx::?relay` SYMBOL "?relay", osal_stop_timerEx
HalKeyConfig        SYMBOL "HalKeyConfig"
`??HalKeyConfig::?relay` SYMBOL "?relay", HalKeyConfig
HalKeyEnterSleep    SYMBOL "HalKeyEnterSleep"
`??HalKeyEnterSleep::?relay` SYMBOL "?relay", HalKeyEnterSleep
HalKeyExitSleep     SYMBOL "HalKeyExitSleep"
`??HalKeyExitSleep::?relay` SYMBOL "?relay", HalKeyExitSleep
HalKeyInit          SYMBOL "HalKeyInit"
`??HalKeyInit::?relay` SYMBOL "?relay", HalKeyInit
HalKeyPoll          SYMBOL "HalKeyPoll"
`??HalKeyPoll::?relay` SYMBOL "?relay", HalKeyPoll
HalKeyRead          SYMBOL "HalKeyRead"
`??HalKeyRead::?relay` SYMBOL "?relay", HalKeyRead
halGetJoyKeyInput   SYMBOL "halGetJoyKeyInput"
`??halGetJoyKeyInput::?relay` SYMBOL "?relay", halGetJoyKeyInput
halKeyPort0Isr      SYMBOL "halKeyPort0Isr"
`??halKeyPort0Isr::??INTVEC 107` SYMBOL "??INTVEC 107", halKeyPort0Isr
halKeyPort2Isr      SYMBOL "halKeyPort2Isr"
`??halKeyPort2Isr::??INTVEC 51` SYMBOL "??INTVEC 51", halKeyPort2Isr
halProcessKeyInterrupt SYMBOL "halProcessKeyInterrupt"
`??halProcessKeyInterrupt::?relay` SYMBOL "?relay", halProcessKeyInterrupt

        EXTERN `??HalAdcRead::?relay`
        FUNCTION `??HalAdcRead::?relay`,00H
        EXTERN `??osal_set_event::?relay`
        FUNCTION `??osal_set_event::?relay`,00H
        EXTERN `??osal_start_timerEx::?relay`
        FUNCTION `??osal_start_timerEx::?relay`,00H
        EXTERN `??osal_stop_timerEx::?relay`
        FUNCTION `??osal_stop_timerEx::?relay`,00H
        EXTERN HalAdcRead
        FUNCTION HalAdcRead,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN Hal_TaskID
        EXTERN osal_set_event
        FUNCTION osal_set_event,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 4, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_stop_timerEx
        FUNCTION osal_stop_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// D:\work\zigbee\ti_cc2530_zstack\Z-Stack 3.0.2\Components\hal\target\CC2530EB\hal_key.c
//    1 /**************************************************************************************************
//    2   Filename:       hal_key.c
//    3   Revised:        $Date: 2010-09-15 19:02:45 -0700 (Wed, 15 Sep 2010) $
//    4   Revision:       $Revision: 23815 $
//    5 
//    6   Description:    This file contains the interface to the HAL KEY Service.
//    7 
//    8 
//    9   Copyright 2006-2010 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License").  You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product.  Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED 揂S IS� WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com.
//   38 **************************************************************************************************/
//   39 /*********************************************************************
//   40  NOTE: If polling is used, the hal_driver task schedules the KeyRead()
//   41        to occur every 100ms.  This should be long enough to naturally
//   42        debounce the keys.  The KeyRead() function remembers the key
//   43        state of the previous poll and will only return a non-zero
//   44        value if the key state changes.
//   45 
//   46  NOTE: If interrupts are used, the KeyRead() function is scheduled
//   47        25ms after the interrupt occurs by the ISR.  This delay is used
//   48        for key debouncing.  The ISR disables any further Key interrupt
//   49        until KeyRead() is executed.  KeyRead() will re-enable Key
//   50        interrupts after executing.  Unlike polling, when interrupts
//   51        are enabled, the previous key state is not remembered.  This
//   52        means that KeyRead() will return the current state of the keys
//   53        (not a change in state of the keys).
//   54 
//   55  NOTE: If interrupts are used, the KeyRead() fucntion is scheduled by
//   56        the ISR.  Therefore, the joystick movements will only be detected
//   57        during a pushbutton interrupt caused by S1 or the center joystick
//   58        pushbutton.
//   59 
//   60  NOTE: When a switch like S1 is pushed, the S1 signal goes from a normally
//   61        high state to a low state.  This transition is typically clean.  The
//   62        duration of the low state is around 200ms.  When the signal returns
//   63        to the high state, there is a high likelihood of signal bounce, which
//   64        causes a unwanted interrupts.  Normally, we would set the interrupt
//   65        edge to falling edge to generate an interrupt when S1 is pushed, but
//   66        because of the signal bounce, it is better to set the edge to rising
//   67        edge to generate an interrupt when S1 is released.  The debounce logic
//   68        can then filter out the signal bounce.  The result is that we typically
//   69        get only 1 interrupt per button push.  This mechanism is not totally
//   70        foolproof because occasionally, signal bound occurs during the falling
//   71        edge as well.  A similar mechanism is used to handle the joystick
//   72        pushbutton on the DB.  For the EB, we do not have independent control
//   73        of the interrupt edge for the S1 and center joystick pushbutton.  As
//   74        a result, only one or the other pushbuttons work reasonably well with
//   75        interrupts.  The default is the make the S1 switch on the EB work more
//   76        reliably.
//   77 
//   78 *********************************************************************/
//   79 
//   80 /**************************************************************************************************
//   81  *                                            INCLUDES
//   82  **************************************************************************************************/
//   83 #include "hal_mcu.h"

        ASEGN SFR_AN:DATA:NOROOT,080H
// union <unnamed> volatile __sfr _A_P0
_A_P0:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,089H
// unsigned char volatile __sfr P0IFG
P0IFG:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,08bH
// unsigned char volatile __sfr P2IFG
P2IFG:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,08cH
// unsigned char volatile __sfr PICTL
PICTL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,09aH
// unsigned char volatile __sfr IEN2
IEN2:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0a0H
// union <unnamed> volatile __sfr _A_P2
_A_P2:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0a8H
// union <unnamed> volatile __sfr _A_IEN0
_A_IEN0:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0abH
// unsigned char volatile __sfr P0IEN
P0IEN:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0acH
// unsigned char volatile __sfr P2IEN
P2IEN:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0b8H
// union <unnamed> volatile __sfr _A_IEN1
_A_IEN1:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0c0H
// union <unnamed> volatile __sfr _A_IRCON
_A_IRCON:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0e8H
// union <unnamed> volatile __sfr _A_IRCON2
_A_IRCON2:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f3H
// unsigned char volatile __sfr P0SEL
P0SEL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f5H
// unsigned char volatile __sfr P2SEL
P2SEL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0fdH
// unsigned char volatile __sfr P0DIR
P0DIR:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0ffH
// unsigned char volatile __sfr P2DIR
P2DIR:
        DATA8
        DS 1
//   84 #include "hal_defs.h"
//   85 #include "hal_types.h"
//   86 #include "hal_board.h"
//   87 #include "hal_drivers.h"
//   88 #include "hal_adc.h"
//   89 #include "hal_key.h"
//   90 #include "osal.h"
//   91 
//   92 #if (defined HAL_KEY) && (HAL_KEY == TRUE)
//   93 
//   94 /**************************************************************************************************
//   95  *                                              MACROS
//   96  **************************************************************************************************/
//   97 
//   98 /**************************************************************************************************
//   99  *                                            CONSTANTS
//  100  **************************************************************************************************/
//  101 #define HAL_KEY_RISING_EDGE   0
//  102 #define HAL_KEY_FALLING_EDGE  1
//  103 
//  104 #define HAL_KEY_DEBOUNCE_VALUE  25
//  105 
//  106 /* CPU port interrupt */
//  107 #define HAL_KEY_CPU_PORT_0_IF P0IF
//  108 #define HAL_KEY_CPU_PORT_2_IF P2IF
//  109 
//  110 /* SW_6 is at P0.1 */
//  111 #define HAL_KEY_SW_6_PORT   P0
//  112 #define HAL_KEY_SW_6_BIT    BV(1)
//  113 #define HAL_KEY_SW_6_SEL    P0SEL
//  114 #define HAL_KEY_SW_6_DIR    P0DIR
//  115 
//  116 /* edge interrupt */
//  117 #define HAL_KEY_SW_6_EDGEBIT  BV(0)
//  118 #define HAL_KEY_SW_6_EDGE     HAL_KEY_FALLING_EDGE
//  119 
//  120 
//  121 /* SW_6 interrupts */
//  122 #define HAL_KEY_SW_6_IEN      IEN1  /* CPU interrupt mask register */
//  123 #define HAL_KEY_SW_6_IENBIT   BV(5) /* Mask bit for all of Port_0 */
//  124 #define HAL_KEY_SW_6_ICTL     P0IEN /* Port Interrupt Control register */
//  125 #define HAL_KEY_SW_6_ICTLBIT  BV(1) /* P0IEN - P0.1 enable/disable bit */
//  126 #define HAL_KEY_SW_6_PXIFG    P0IFG /* Interrupt flag at source */
//  127 
//  128 /* Joy stick move at P2.0 */
//  129 #define HAL_KEY_JOY_MOVE_PORT   P2
//  130 #define HAL_KEY_JOY_MOVE_BIT    BV(0)
//  131 #define HAL_KEY_JOY_MOVE_SEL    P2SEL
//  132 #define HAL_KEY_JOY_MOVE_DIR    P2DIR
//  133 
//  134 /* edge interrupt */
//  135 #define HAL_KEY_JOY_MOVE_EDGEBIT  BV(3)
//  136 #define HAL_KEY_JOY_MOVE_EDGE     HAL_KEY_FALLING_EDGE
//  137 
//  138 /* Joy move interrupts */
//  139 #define HAL_KEY_JOY_MOVE_IEN      IEN2  /* CPU interrupt mask register */
//  140 #define HAL_KEY_JOY_MOVE_IENBIT   BV(1) /* Mask bit for all of Port_2 */
//  141 #define HAL_KEY_JOY_MOVE_ICTL     P2IEN /* Port Interrupt Control register */
//  142 #define HAL_KEY_JOY_MOVE_ICTLBIT  BV(0) /* P2IENL - P2.0<->P2.3 enable/disable bit */
//  143 #define HAL_KEY_JOY_MOVE_PXIFG    P2IFG /* Interrupt flag at source */
//  144 
//  145 #define HAL_KEY_JOY_CHN   HAL_ADC_CHANNEL_6
//  146 
//  147 
//  148 /**************************************************************************************************
//  149  *                                            TYPEDEFS
//  150  **************************************************************************************************/
//  151 
//  152 
//  153 /**************************************************************************************************
//  154  *                                        GLOBAL VARIABLES
//  155  **************************************************************************************************/

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  156 static uint8 halKeySavedKeys;     /* used to store previous key state in polling mode */
halKeySavedKeys:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  157 static halKeyCBack_t pHalKeyProcessFunction;
pHalKeyProcessFunction:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  158 static uint8 HalKeyConfigured;
HalKeyConfigured:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  159 bool Hal_KeyIntEnable;            /* interrupt enable/disable flag */
Hal_KeyIntEnable:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  160 
//  161 /**************************************************************************************************
//  162  *                                        FUNCTIONS - Local
//  163  **************************************************************************************************/
//  164 void halProcessKeyInterrupt(void);
//  165 uint8 halGetJoyKeyInput(void);
//  166 
//  167 
//  168 
//  169 /**************************************************************************************************
//  170  *                                        FUNCTIONS - API
//  171  **************************************************************************************************/
//  172 
//  173 
//  174 /**************************************************************************************************
//  175  * @fn      HalKeyInit
//  176  *
//  177  * @brief   Initilize Key Service
//  178  *
//  179  * @param   none
//  180  *
//  181  * @return  None
//  182  **************************************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  183 void HalKeyInit( void )
HalKeyInit:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function HalKeyInit
        CODE
//  184 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  185   /* Initialize previous key to 0 */
//  186   halKeySavedKeys = 0;
        MOV       DPTR,#halKeySavedKeys
        CLR       A
        MOVX      @DPTR,A
//  187 
//  188   HAL_KEY_SW_6_SEL &= ~(HAL_KEY_SW_6_BIT);    /* Set pin function to GPIO */
        ANL       0xf3,#0xfd
//  189 
//  190 #ifndef CSTX_BOARD
//  191 
//  192 #if ! defined ENABLE_LED4_DISABLE_S1
//  193   HAL_KEY_SW_6_DIR &= ~(HAL_KEY_SW_6_BIT);    /* Set pin direction to Input */
//  194 #endif
//  195 
//  196 #else
//  197   HAL_KEY_SW_6_DIR &= ~(HAL_KEY_SW_6_BIT);    /* Set pin direction to Input */
        ANL       0xfd,#0xfd
//  198 #endif
//  199 
//  200   HAL_KEY_JOY_MOVE_SEL &= ~(HAL_KEY_JOY_MOVE_BIT); /* Set pin function to GPIO */
        ANL       0xf5,#0xfe
//  201   HAL_KEY_JOY_MOVE_DIR &= ~(HAL_KEY_JOY_MOVE_BIT); /* Set pin direction to Input */
        ANL       0xff,#0xfe
//  202 
//  203 
//  204   /* Initialize callback function */
//  205   pHalKeyProcessFunction  = NULL;
        MOV       DPTR,#pHalKeyProcessFunction
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
//  206 
//  207   /* Start with key is not configured */
//  208   HalKeyConfigured = FALSE;
        MOV       DPTR,#HalKeyConfigured
        MOVX      @DPTR,A
//  209 }
        LJMP      ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock0
        REQUIRE P0SEL
        REQUIRE P0DIR
        REQUIRE P2SEL
        REQUIRE P2DIR
//  210 
//  211 
//  212 /**************************************************************************************************
//  213  * @fn      HalKeyConfig
//  214  *
//  215  * @brief   Configure the Key serivce
//  216  *
//  217  * @param   interruptEnable - TRUE/FALSE, enable/disable interrupt
//  218  *          cback - pointer to the CallBack function
//  219  *
//  220  * @return  None
//  221  **************************************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  222 void HalKeyConfig (bool interruptEnable, halKeyCBack_t cback)
HalKeyConfig:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function HalKeyConfig
        CODE
//  223 {
        FUNCALL HalKeyConfig, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalKeyConfig, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV       A,R1
//  224   /* Enable/Disable Interrupt or */
//  225   Hal_KeyIntEnable = interruptEnable;
        MOV       DPTR,#Hal_KeyIntEnable
        MOVX      @DPTR,A
//  226 
//  227   /* Register the callback fucntion */
//  228   pHalKeyProcessFunction = cback;
        MOV       DPTR,#pHalKeyProcessFunction
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
//  229 
//  230   /* Determine if interrupt is enable or not */
//  231   if (Hal_KeyIntEnable)
        MOV       DPTR,#Hal_KeyIntEnable
        MOVX      A,@DPTR
        JZ        ??HalKeyConfig_0
//  232   {
//  233     /* Rising/Falling edge configuratinn */
//  234 
//  235     PICTL &= ~(HAL_KEY_SW_6_EDGEBIT);    /* Clear the edge bit */
        ANL       0x8c,#0xfe
//  236     /* For falling edge, the bit must be set. */
//  237   #if (HAL_KEY_SW_6_EDGE == HAL_KEY_FALLING_EDGE)
//  238     PICTL |= HAL_KEY_SW_6_EDGEBIT;
        ORL       0x8c,#0x1
//  239   #endif
//  240 
//  241 
//  242     /* Interrupt configuration:
//  243      * - Enable interrupt generation at the port
//  244      * - Enable CPU interrupt
//  245      * - Clear any pending interrupt
//  246      */
//  247     HAL_KEY_SW_6_ICTL |= HAL_KEY_SW_6_ICTLBIT;
        ORL       0xab,#0x2
//  248     HAL_KEY_SW_6_IEN |= HAL_KEY_SW_6_IENBIT;
        SETB      0xb8.5
//  249     HAL_KEY_SW_6_PXIFG = ~(HAL_KEY_SW_6_BIT);
        MOV       0x89,#-0x3
//  250 
//  251 
//  252 
//  253     /* Rising/Falling edge configuratinn */
//  254 
//  255     HAL_KEY_JOY_MOVE_ICTL &= ~(HAL_KEY_JOY_MOVE_EDGEBIT);    /* Clear the edge bit */
        ANL       0xac,#0xf7
//  256     /* For falling edge, the bit must be set. */
//  257   #if (HAL_KEY_JOY_MOVE_EDGE == HAL_KEY_FALLING_EDGE)
//  258     HAL_KEY_JOY_MOVE_ICTL |= HAL_KEY_JOY_MOVE_EDGEBIT;
        ORL       0xac,#0x8
//  259   #endif
//  260 
//  261 
//  262     /* Interrupt configuration:
//  263      * - Enable interrupt generation at the port
//  264      * - Enable CPU interrupt
//  265      * - Clear any pending interrupt
//  266      */
//  267     HAL_KEY_JOY_MOVE_ICTL |= HAL_KEY_JOY_MOVE_ICTLBIT;
        ORL       0xac,#0x1
//  268     HAL_KEY_JOY_MOVE_IEN |= HAL_KEY_JOY_MOVE_IENBIT;
        ORL       0x9a,#0x2
//  269     HAL_KEY_JOY_MOVE_PXIFG = ~(HAL_KEY_JOY_MOVE_BIT);
        MOV       0x8b,#-0x2
//  270 
//  271 
//  272     /* Do this only after the hal_key is configured - to work with sleep stuff */
//  273     if (HalKeyConfigured == TRUE)
        MOV       DPTR,#HalKeyConfigured
        MOVX      A,@DPTR
        XRL       A,#0x1
        JNZ       ??HalKeyConfig_1
//  274     {
//  275       osal_stop_timerEx(Hal_TaskID, HAL_KEY_EVENT);  /* Cancel polling if active */
        ; Setup parameters for call to function osal_stop_timerEx
        MOV       R2,#0x10
        MOV       R3,#0x0
        MOV       DPTR,#Hal_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
        SJMP      ??HalKeyConfig_1
//  276     }
//  277   }
//  278   else    /* Interrupts NOT enabled */
//  279   {
//  280     HAL_KEY_SW_6_ICTL &= ~(HAL_KEY_SW_6_ICTLBIT); /* don't generate interrupt */
??HalKeyConfig_0:
        ANL       0xab,#0xfd
//  281     HAL_KEY_SW_6_IEN &= ~(HAL_KEY_SW_6_IENBIT);   /* Clear interrupt enable bit */
        CLR       0xb8.5
//  282 
//  283     osal_set_event(Hal_TaskID, HAL_KEY_EVENT);
        ; Setup parameters for call to function osal_set_event
        MOV       R2,#0x10
        MOV       R3,#0x0
        MOV       DPTR,#Hal_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
//  284   }
//  285 
//  286   /* Key now is configured */
//  287   HalKeyConfigured = TRUE;
??HalKeyConfig_1:
        MOV       DPTR,#HalKeyConfigured
        MOV       A,#0x1
        MOVX      @DPTR,A
//  288 }
        MOV       R7,A
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock1
        REQUIRE PICTL
        REQUIRE P0IEN
        REQUIRE _A_IEN1
        REQUIRE P0IFG
        REQUIRE P2IEN
        REQUIRE IEN2
        REQUIRE P2IFG
//  289 
//  290 
//  291 /**************************************************************************************************
//  292  * @fn      HalKeyRead
//  293  *
//  294  * @brief   Read the current value of a key
//  295  *
//  296  * @param   None
//  297  *
//  298  * @return  keys - current keys status
//  299  **************************************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  300 uint8 HalKeyRead ( void )
HalKeyRead:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function HalKeyRead
        CODE
//  301 {
        FUNCALL HalKeyRead, halGetJoyKeyInput
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  302   uint8 keys = 0;
        MOV       R6,#0x0
//  303 
//  304   if (HAL_PUSH_BUTTON1())
        MOV       C,0x80.1
        JC        ??HalKeyRead_0
//  305   {
//  306     keys |= HAL_KEY_SW_6;
        MOV       R6,#0x20
//  307   }
//  308 
//  309   if ((HAL_KEY_JOY_MOVE_PORT & HAL_KEY_JOY_MOVE_BIT))  /* Key is active low */
??HalKeyRead_0:
        MOV       C,0xa0.0
        JNC       ??HalKeyRead_1
//  310   {
//  311     keys |= halGetJoyKeyInput();
        ; Setup parameters for call to function halGetJoyKeyInput
        LCALL     `??halGetJoyKeyInput::?relay`; Banked call to: halGetJoyKeyInput
        MOV       A,R1
        XCH       A,R6
        ORL       A,R6
        MOV       R6,A
//  312   }
//  313 
//  314   return keys;
??HalKeyRead_1:
          CFI EndBlock cfiBlock2
        REQUIRE ?Subroutine1
        REQUIRE _A_P0
        REQUIRE _A_P2
        ; // Fall through to label ?Subroutine1
//  315 }

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       A,R6
        MOV       R1,A
        MOV       R7,#0x1
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock3
//  316 
//  317 
//  318 /**************************************************************************************************
//  319  * @fn      HalKeyPoll
//  320  *
//  321  * @brief   Called by hal_driver to poll the keys
//  322  *
//  323  * @param   None
//  324  *
//  325  * @return  None
//  326  **************************************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  327 void HalKeyPoll (void)
HalKeyPoll:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI Function HalKeyPoll
        CODE
//  328 {
        FUNCALL HalKeyPoll, halGetJoyKeyInput
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  329   uint8 keys = 0;
        MOV       R1,#0x0
//  330 
//  331   if ((HAL_KEY_JOY_MOVE_PORT & HAL_KEY_JOY_MOVE_BIT))  /* Key is active HIGH */
        MOV       C,0xa0.0
        JNC       ??HalKeyPoll_0
//  332   {
//  333     keys = halGetJoyKeyInput();
        ; Setup parameters for call to function halGetJoyKeyInput
        LCALL     `??halGetJoyKeyInput::?relay`; Banked call to: halGetJoyKeyInput
        MOV       A,R1
        MOV       R1,A
//  334   }
//  335 
//  336   /* If interrupts are not enabled, previous key status and current key status
//  337    * are compared to find out if a key has changed status.
//  338    */
//  339   if (!Hal_KeyIntEnable)
??HalKeyPoll_0:
        MOV       DPTR,#Hal_KeyIntEnable
        MOVX      A,@DPTR
        JNZ       ??HalKeyPoll_1
//  340   {
//  341     if (keys == halKeySavedKeys)
        MOV       DPTR,#halKeySavedKeys
        MOVX      A,@DPTR
        XRL       A,R1
        JZ        ??HalKeyPoll_2
//  342     {
//  343       /* Exit - since no keys have changed */
//  344       return;
//  345     }
//  346     /* Store the current keys for comparation next time */
//  347     halKeySavedKeys = keys;
        MOV       A,R1
        MOVX      @DPTR,A
//  348   }
//  349   else
//  350   {
//  351     /* Key interrupt handled here */
//  352   }
//  353 
//  354   if (HAL_PUSH_BUTTON1())
??HalKeyPoll_1:
        MOV       C,0x80.1
        JC        ??HalKeyPoll_3
//  355   {
//  356     keys |= HAL_KEY_SW_6;
        MOV       A,R1
        SETB      0xE0 /* A   */.5
        MOV       R1,A
//  357   }
//  358 
//  359   /* Invoke Callback if new keys were depressed */
//  360   if (pHalKeyProcessFunction
//  361 #ifdef HAL_LEGACY_KEYS
//  362     && keys //in legacy modes, only report key presses and do not report when a key is released
//  363 #endif
//  364     )
??HalKeyPoll_3:
        MOV       DPTR,#pHalKeyProcessFunction
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       A,R2
        ORL       A,R3
        JZ        ??HalKeyPoll_2
//  365   {
//  366     (pHalKeyProcessFunction) (keys, HAL_KEY_STATE_NORMAL);
        ; Setup parameters for indirect call
        MOV       R2,#0x0
        MOV       DPTR,#pHalKeyProcessFunction
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        LCALL     ?CALL_IND
//  367   }
//  368 }
??HalKeyPoll_2:
        LJMP      ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock4
        REQUIRE _A_P2
        REQUIRE _A_P0
//  369 
//  370 /**************************************************************************************************
//  371  * @fn      halGetJoyKeyInput
//  372  *
//  373  * @brief   Map the ADC value to its corresponding key.
//  374  *
//  375  * @param   None
//  376  *
//  377  * @return  keys - current joy key status
//  378  **************************************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  379 uint8 halGetJoyKeyInput(void)
halGetJoyKeyInput:
          CFI Block cfiBlock5 Using cfiCommon0
          CFI Function halGetJoyKeyInput
        CODE
//  380 {
        FUNCALL halGetJoyKeyInput, HalAdcRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  381   /* The joystick control is encoded as an analog voltage.
//  382    * Read the JOY_LEVEL analog value and map it to joy movement.
//  383    */
//  384   uint8 adc;
//  385   uint8 ksave0 = 0;
        MOV       R6,#0x0
//  386   uint8 ksave1;
//  387 
//  388   /* Keep on reading the ADC until two consecutive key decisions are the same. */
//  389   do
//  390   {
//  391     ksave1 = ksave0;    /* save previouse key reading */
??halGetJoyKeyInput_0:
        MOV       A,R6
        MOV       R7,A
//  392 
//  393     adc = HalAdcRead (HAL_KEY_JOY_CHN, HAL_ADC_RESOLUTION_8);
        ; Setup parameters for call to function HalAdcRead
        MOV       R2,#0x1
        MOV       R1,#0x6
        LCALL     `??HalAdcRead::?relay`; Banked call to: HalAdcRead
        MOV       A,R2
        MOV       R0,A
//  394 
//  395     if ((adc >= 2) && (adc <= 38))
        MOV       A,#-0x2
        ADD       A,R2
        CLR       C
        SUBB      A,#0x25
        JNC       ??halGetJoyKeyInput_1
//  396     {
//  397        ksave0 |= HAL_KEY_UP;
        MOV       A,R6
        SETB      0xE0 /* A   */.0
        SJMP      ??halGetJoyKeyInput_2
//  398     }
//  399     else if ((adc >= 74) && (adc <= 88))
??halGetJoyKeyInput_1:
        MOV       A,#-0x4a
        ADD       A,R2
        CLR       C
        SUBB      A,#0xf
        JNC       ??halGetJoyKeyInput_3
//  400     {
//  401       ksave0 |= HAL_KEY_RIGHT;
        MOV       A,R6
        SETB      0xE0 /* A   */.1
        SJMP      ??halGetJoyKeyInput_2
//  402     }
//  403     else if ((adc >= 60) && (adc <= 73))
??halGetJoyKeyInput_3:
        MOV       A,#-0x3c
        ADD       A,R2
        CLR       C
        SUBB      A,#0xe
        JNC       ??halGetJoyKeyInput_4
//  404     {
//  405       ksave0 |= HAL_KEY_LEFT;
        MOV       A,R6
        SETB      0xE0 /* A   */.3
        SJMP      ??halGetJoyKeyInput_2
//  406     }
//  407     else if ((adc >= 39) && (adc <= 59))
??halGetJoyKeyInput_4:
        MOV       A,#-0x27
        ADD       A,R2
        CLR       C
        SUBB      A,#0x15
        JNC       ??halGetJoyKeyInput_5
//  408     {
//  409       ksave0 |= HAL_KEY_DOWN;
        MOV       A,R6
        SETB      0xE0 /* A   */.4
        SJMP      ??halGetJoyKeyInput_2
//  410     }
//  411     else if ((adc >= 89) && (adc <= 100))
??halGetJoyKeyInput_5:
        MOV       A,#-0x59
        ADD       A,R2
        CLR       C
        SUBB      A,#0xc
        JNC       ??halGetJoyKeyInput_6
//  412     {
//  413       ksave0 |= HAL_KEY_CENTER;
        MOV       A,R6
        SETB      0xE0 /* A   */.2
??halGetJoyKeyInput_2:
        MOV       R6,A
//  414     }
//  415   } while (ksave0 != ksave1);
??halGetJoyKeyInput_6:
        MOV       A,R7
        XRL       A,R6
        JNZ       ??halGetJoyKeyInput_0
//  416 
//  417   return ksave0;
        LJMP      ?Subroutine1 & 0xFFFF
//  418 }
          CFI EndBlock cfiBlock5
//  419 
//  420 
//  421 
//  422 
//  423 
//  424 /**************************************************************************************************
//  425  * @fn      halProcessKeyInterrupt
//  426  *
//  427  * @brief   Checks to see if it's a valid key interrupt, saves interrupt driven key states for
//  428  *          processing by HalKeyRead(), and debounces keys by scheduling HalKeyRead() 25ms later.
//  429  *
//  430  * @param
//  431  *
//  432  * @return
//  433  **************************************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  434 void halProcessKeyInterrupt (void)
halProcessKeyInterrupt:
          CFI Block cfiBlock6 Using cfiCommon0
          CFI Function halProcessKeyInterrupt
        CODE
//  435 {
        FUNCALL halProcessKeyInterrupt, osal_start_timerEx
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 4, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 4, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  436   bool valid=FALSE;
        MOV       R0,#0x0
//  437 
//  438   if (HAL_KEY_SW_6_PXIFG & HAL_KEY_SW_6_BIT)  /* Interrupt Flag has been set */
        MOV       A,0x89
        MOV       C,0xE0 /* A   */.1
        JNC       ??halProcessKeyInterrupt_0
//  439   {
//  440     HAL_KEY_SW_6_PXIFG = ~(HAL_KEY_SW_6_BIT); /* Clear Interrupt Flag */
        MOV       0x89,#-0x3
//  441     valid = TRUE;
        MOV       R0,#0x1
//  442   }
//  443 
//  444   if (HAL_KEY_JOY_MOVE_PXIFG & HAL_KEY_JOY_MOVE_BIT)  /* Interrupt Flag has been set */
??halProcessKeyInterrupt_0:
        MOV       A,0x8b
        MOV       C,0xE0 /* A   */.0
        JNC       ??halProcessKeyInterrupt_1
//  445   {
//  446     HAL_KEY_JOY_MOVE_PXIFG = ~(HAL_KEY_JOY_MOVE_BIT); /* Clear Interrupt Flag */
        MOV       0x8b,#-0x2
//  447     valid = TRUE;
        SJMP      ??halProcessKeyInterrupt_2
//  448   }
//  449 
//  450   if (valid)
??halProcessKeyInterrupt_1:
        MOV       A,R0
        MOV       C,0xE0 /* A   */.0
        JNC       ??halProcessKeyInterrupt_3
//  451   {
//  452     osal_start_timerEx (Hal_TaskID, HAL_KEY_EVENT, HAL_KEY_DEBOUNCE_VALUE);
??halProcessKeyInterrupt_2:
        ; Setup parameters for call to function osal_start_timerEx
        MOV       DPTR,#__Constant_19
        LCALL     ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 4)
        MOV       R2,#0x10
        MOV       R3,#0x0
        MOV       DPTR,#Hal_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 XSP16+0
//  453   }
//  454 }
??halProcessKeyInterrupt_3:
          CFI EndBlock cfiBlock6
        REQUIRE ?Subroutine0
        REQUIRE P0IFG
        REQUIRE P2IFG
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock7 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        POP       DPH
          CFI CFA_SP SP+-4
          CFI DPH0 SameValue
        POP       DPL
          CFI CFA_SP SP+-3
          CFI DPL0 SameValue
        LJMP      ?BRET
          CFI EndBlock cfiBlock7
//  455 
//  456 /**************************************************************************************************
//  457  * @fn      HalKeyEnterSleep
//  458  *
//  459  * @brief  - Get called to enter sleep mode
//  460  *
//  461  * @param
//  462  *
//  463  * @return
//  464  **************************************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  465 void HalKeyEnterSleep ( void )
HalKeyEnterSleep:
          CFI Block cfiBlock8 Using cfiCommon0
          CFI Function HalKeyEnterSleep
        CODE
//  466 {
        ; Saved register size: 0
        ; Auto size: 0
//  467 }
        LJMP      ?BRET
          CFI EndBlock cfiBlock8
//  468 
//  469 /**************************************************************************************************
//  470  * @fn      HalKeyExitSleep
//  471  *
//  472  * @brief   - Get called when sleep is over
//  473  *
//  474  * @param
//  475  *
//  476  * @return  - return saved keys
//  477  **************************************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  478 uint8 HalKeyExitSleep ( void )
HalKeyExitSleep:
          CFI Block cfiBlock9 Using cfiCommon0
          CFI Function HalKeyExitSleep
        CODE
//  479 {
        FUNCALL HalKeyExitSleep, HalKeyRead
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  480   /* Wake up and read keys */
//  481   return ( HalKeyRead () );
        ; Setup parameters for call to function HalKeyRead
        LCALL     `??HalKeyRead::?relay`; Banked call to: HalKeyRead
        SJMP      ?Subroutine0
//  482 }
          CFI EndBlock cfiBlock9
//  483 
//  484 /***************************************************************************************************
//  485  *                                    INTERRUPT SERVICE ROUTINE
//  486  ***************************************************************************************************/
//  487 
//  488 /**************************************************************************************************
//  489  * @fn      halKeyPort0Isr
//  490  *
//  491  * @brief   Port0 ISR
//  492  *
//  493  * @param
//  494  *
//  495  * @return
//  496  **************************************************************************************************/

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  497 HAL_ISR_FUNCTION( halKeyPort0Isr, P0INT_VECTOR )
halKeyPort0Isr:
          CFI Block cfiBlock10 Using cfiCommon1
          CFI Function halKeyPort0Isr
        CODE
//  498 {
        FUNCALL halKeyPort0Isr, halProcessKeyInterrupt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      A
          CFI A Frame(CFA_SP, 3)
          CFI CFA_SP SP+-3
        MOV       A,#-0xe
        LCALL     ?INTERRUPT_ENTER_XSP
          CFI B load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI PSW load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
//  499   HAL_ENTER_ISR();
        MOV       C,0xa8.7
        CLR       A
        RLC       A
        MOV       R6,A
        SETB      0xa8.7
//  500 
//  501   if (HAL_KEY_SW_6_PXIFG & HAL_KEY_SW_6_BIT)
        MOV       A,0x89
        MOV       C,0xE0 /* A   */.1
        JNC       ??halKeyPort0Isr_0
//  502   {
//  503     halProcessKeyInterrupt();
        ; Setup parameters for call to function halProcessKeyInterrupt
        LCALL     `??halProcessKeyInterrupt::?relay`; Banked call to: halProcessKeyInterrupt
//  504   }
//  505 
//  506   /*
//  507     Clear the CPU interrupt flag for Port_0
//  508     PxIFG has to be cleared before PxIF
//  509   */
//  510   HAL_KEY_SW_6_PXIFG = 0;
??halKeyPort0Isr_0:
        MOV       0x89,#0x0
//  511   HAL_KEY_CPU_PORT_0_IF = 0;
        CLR       0xc0.5
//  512   
//  513   CLEAR_SLEEP_MODE();
//  514   HAL_EXIT_ISR();
          CFI EndBlock cfiBlock10
        REQUIRE ?Subroutine2
        REQUIRE _A_IEN0
        REQUIRE P0IFG
        REQUIRE _A_IRCON
        ; // Fall through to label ?Subroutine2
//  515 }

        RSEG NEAR_CODE:CODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiBlock11 Using cfiCommon1
          CFI NoFunction
          CFI CFA_SP SP+-3
          CFI CFA_XSP16 add(XSP16, 14)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI B load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI A Frame(CFA_SP, 3)
          CFI PSW load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        MOV       A,R6
        MOV       C,0xE0 /* A   */.0
        MOV       0xa8.7,C
        MOV       R7,#0x1
        LJMP      ?INTERRUPT_LEAVE_XSP
          CFI EndBlock cfiBlock11
//  516 
//  517 
//  518 /**************************************************************************************************
//  519  * @fn      halKeyPort2Isr
//  520  *
//  521  * @brief   Port2 ISR
//  522  *
//  523  * @param
//  524  *
//  525  * @return
//  526  **************************************************************************************************/

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  527 HAL_ISR_FUNCTION( halKeyPort2Isr, P2INT_VECTOR )
halKeyPort2Isr:
          CFI Block cfiBlock12 Using cfiCommon1
          CFI Function halKeyPort2Isr
        CODE
//  528 {
        FUNCALL halKeyPort2Isr, halProcessKeyInterrupt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      A
          CFI A Frame(CFA_SP, 3)
          CFI CFA_SP SP+-3
        MOV       A,#-0xe
        LCALL     ?INTERRUPT_ENTER_XSP
          CFI B load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI PSW load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
//  529   HAL_ENTER_ISR();
        MOV       C,0xa8.7
        CLR       A
        RLC       A
        MOV       R6,A
        SETB      0xa8.7
//  530   
//  531   if (HAL_KEY_JOY_MOVE_PXIFG & HAL_KEY_JOY_MOVE_BIT)
        MOV       A,0x8b
        MOV       C,0xE0 /* A   */.0
        JNC       ??halKeyPort2Isr_0
//  532   {
//  533     halProcessKeyInterrupt();
        ; Setup parameters for call to function halProcessKeyInterrupt
        LCALL     `??halProcessKeyInterrupt::?relay`; Banked call to: halProcessKeyInterrupt
//  534   }
//  535 
//  536   /*
//  537     Clear the CPU interrupt flag for Port_2
//  538     PxIFG has to be cleared before PxIF
//  539     Notes: P2_1 and P2_2 are debug lines.
//  540   */
//  541   HAL_KEY_JOY_MOVE_PXIFG = 0;
??halKeyPort2Isr_0:
        MOV       0x8b,#0x0
//  542   HAL_KEY_CPU_PORT_2_IF = 0;
        CLR       0xe8.0
//  543 
//  544   CLEAR_SLEEP_MODE();
//  545   HAL_EXIT_ISR();
        SJMP      ?Subroutine2
          CFI EndBlock cfiBlock12
        REQUIRE _A_IEN0
        REQUIRE P2IFG
        REQUIRE _A_IRCON2
//  546 }

        COMMON INTVEC:CODE:ROOT(0)
        ORG 51
`??halKeyPort2Isr::??INTVEC 51`:
        LJMP       (halKeyPort2Isr)

        COMMON INTVEC:CODE:ROOT(0)
        ORG 107
`??halKeyPort0Isr::??INTVEC 107`:
        LJMP       (halKeyPort0Isr)

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_19:
        DD 25

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??HalKeyInit::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    HalKeyInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??HalKeyConfig::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    HalKeyConfig

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??HalKeyRead::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    HalKeyRead

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??HalKeyPoll::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    HalKeyPoll

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??halGetJoyKeyInput::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    halGetJoyKeyInput

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??halProcessKeyInterrupt::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    halProcessKeyInterrupt

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??HalKeyEnterSleep::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    HalKeyEnterSleep

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??HalKeyExitSleep::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    HalKeyExitSleep

        END
//  547 
//  548 #else
//  549 
//  550 
//  551 void HalKeyInit(void){}
//  552 void HalKeyConfig(bool interruptEnable, halKeyCBack_t cback){}
//  553 uint8 HalKeyRead(void){ return 0;}
//  554 void HalKeyPoll(void){}
//  555 
//  556 #endif /* HAL_KEY */
//  557 
//  558 
//  559 
//  560 
//  561 
//  562 /**************************************************************************************************
//  563 **************************************************************************************************/
//  564 
//  565 
//  566 
// 
// 400 bytes in segment BANKED_CODE
//  48 bytes in segment BANK_RELAYS
//   6 bytes in segment INTVEC
//  68 bytes in segment NEAR_CODE
//  16 bytes in segment SFR_AN
//   4 bytes in segment XDATA_ROM_C
//   5 bytes in segment XDATA_Z
// 
// 116 bytes of CODE     memory (+  6 bytes shared)
//   0 bytes of CONST    memory (+  4 bytes shared)
//   0 bytes of DATA     memory (+ 16 bytes shared)
// 400 bytes of HUGECODE memory
//   5 bytes of XDATA    memory
//
//Errors: none
//Warnings: none
