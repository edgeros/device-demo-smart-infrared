###############################################################################
#
# IAR C/C++ Compiler V10.10.1.4655 for 8051               21/Jul/2021  15:47:02
# Copyright 2004-2017 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Components\stack\bdb\bdb_FindingAndBinding.c
#    Command line       =  
#        -f C:\Users\WenHao\AppData\Local\Temp\EWBCAD.tmp
#        ("D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Components\stack\bdb\bdb_FindingAndBinding.c" -D CSTX_BOARD -D
#        SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D xPOWER_SAVING
#        -D NWK_AUTO_POLL -D xZTOOL_P1 -D xMT_TASK -D xMT_APP_FUNC -D
#        xMT_SYS_FUNC -D xMT_ZDO_FUNC -D xMT_ZDO_MGMT -D xMT_APP_CNF_FUNC -D
#        LCD_SUPPORTED=DEBUG -D MULTICAST_ENABLED=FALSE -D ZCL_IDENTIFY -D
#        ZCL_READ -D ZCL_DISCOVER -D ZCL_WRITE -D ZCL_BASIC -D
#        ZCL_REPORTING_DEVICE -D HAL_LED=TRUE -D HAL_UART=TRUE -D HAL_KEY=TRUE
#        -D ISR_KEYINTERRUPT -lC "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\EndDeviceEB\List"
#        -lA "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\EndDeviceEB\List"
#        --diag_suppress Pe001,Pa010 -o
#        "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\EndDeviceEB\Obj"
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -f
#        "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f
#        "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00100000 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 -DDEFAULT_KEY={0} -DMAC_MAX_FRAME_SIZE=116
#        -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const __code"
#        -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000
#        -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100 -DREJOIN_POLL_RATE=440
#        -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000 -DENABLE_LED4_DISABLE_S1)
#        -f "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\Source\"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\Source\"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\stack\bdb\"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\stack\gp\"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\stack\zcl\"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes)
#    Locale             =  Chinese (Simplified)_China.936
#    List file          =  
#        D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\EndDeviceEB\List\bdb_FindingAndBinding.lst
#    Object file        =  
#        D:\work\zigbee\ti_cc2530_zstack\Z-Stack
#        3.0.2\Projects\zstack\HomeAutomation\AcoinfoZigBeeSampleLight\CC2530DB\EndDeviceEB\Obj\bdb_FindingAndBinding.r51
#
###############################################################################

D:\work\zigbee\ti_cc2530_zstack\Z-Stack 3.0.2\Components\stack\bdb\bdb_FindingAndBinding.c
      1          /**************************************************************************************************
      2            Filename:       bdb_FindingAndBinding.c
      3            Revised:        $Date: 2016-02-25 11:51:49 -0700 (Thu, 25 Feb 2016) $
      4            Revision:       $Revision: - $
      5          
      6            Description:    This file contains the Base Device Behavior functions and attributes.
      7          
      8          
      9            Copyright 2006-2015 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          
     44          #include "bdb.h"
     45          #include "ZDObject.h"
     46          #include "bdb_interface.h"
     47          #include "AddrMgr.h"
     48             
     49          #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1)   
     50             
     51          /*********************************************************************
     52           * MACROS
     53           */
     54          
     55          
     56          
     57             
     58          /*********************************************************************
     59           * CONSTANTS
     60           */
     61          /*********************************************************************
     62           * TYPEDEFS
     63           */
     64           
     65           
     66          /*********************************************************************
     67           * GLOBAL VARIABLES
     68           */
     69          

   \                                 In  segment XDATA_I, align 1, keep-with-next
     70          uint8 grpName[6] = {'G','r','o','u','p','\0'};
   \                     grpName:
   \   000000                DS 6
   \   000006                REQUIRE `?<Initializer for grpName>`
   \   000006                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     71          bdbGCB_IdentifyTimeChange_t      pfnIdentifyTimeChangeCB = NULL; 
   \                     pfnIdentifyTimeChangeCB:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     72          bdbGCB_BindNotification_t        pfnBindNotificationCB = NULL;
   \                     pfnBindNotificationCB:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
     73          
     74          /*********************************************************************
     75           * EXTERNAL VARIABLES
     76           */
     77          
     78          /*********************************************************************
     79           * EXTERNAL FUNCTIONS
     80           */
     81          
     82          
     83          
     84          /*********************************************************************
     85           * LOCAL VARIABLES
     86           */
     87          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     88          SimpleDescriptionFormat_t  bdb_FindingBindingTargetSimpleDesc;
   \                     bdb_FindingBindingTargetSimpleDesc:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
     89          

   \                                 In  segment XDATA_I, align 1, keep-with-next
     90          uint8 bdbIndentifyActiveEndpoint  = 0xFF;
   \                     bdbIndentifyActiveEndpoint:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for bdbIndentifyActiveEndpoint>`
   \   000001                REQUIRE __INIT_XDATA_I
     91          
     92          //Your JOB:
     93          //Remove the clusters that your application do not use. This will save some flash and processing
     94          //when looking into matching clusters during the finding & binding procedure

   \                                 In  segment XDATA_ROM_C, align 1
     95          const cId_t bdb_ZclType1Clusters[] =
   \                     bdb_ZclType1Clusters:
   \   000000   0500         DW 5
   \   000002   0600         DW 6
   \   000004   0800         DW 8
   \   000006   0900         DW 9
   \   000008   1600         DW 22
   \   00000A   0201         DW 258
   \   00000C   0202         DW 514
   \   00000E   0302         DW 515
   \   000010   0003         DW 768
   \   000012   0103         DW 769
   \   000014   0105         DW 1281
   \   000016   0205         DW 1282
   \   000018   0006         DW 1536
   \   00001A   0106         DW 1537
   \   00001C   040B         DW 2820
   \   00001E   1406         DW 1556
   \   000020   1506         DW 1557
   \   000022   1706         DW 1559
   \   000024   0007         DW 1792
   \   000026   0107         DW 1793
   \   000028   0207         DW 1794
   \   00002A   0307         DW 1795
   \   00002C   0409         DW 2308
   \   00002E   0009         DW 2304
     96          {
     97            ZCL_CLUSTER_ID_GEN_SCENES,
     98            ZCL_CLUSTER_ID_GEN_ON_OFF,
     99            ZCL_CLUSTER_ID_GEN_LEVEL_CONTROL,
    100            ZCL_CLUSTER_ID_GEN_ALARMS,
    101            ZCL_CLUSTER_ID_GEN_PARTITION,
    102            ZCL_CLUSTER_ID_CLOSURES_WINDOW_COVERING,
    103            ZCL_CLUSTER_ID_HVAC_FAN_CONTROL,
    104            ZCL_CLUSTER_ID_HVAC_DIHUMIDIFICATION_CONTROL,
    105            ZCL_CLUSTER_ID_LIGHTING_COLOR_CONTROL,
    106            ZCL_CLUSTER_ID_LIGHTING_BALLAST_CONFIG,
    107            ZCL_CLUSTER_ID_SS_IAS_ACE,
    108            ZCL_CLUSTER_ID_SS_IAS_WD,
    109            ZCL_CLUSTER_ID_PI_GENERIC_TUNNEL,
    110            ZCL_CLUSTER_ID_PI_BACNET_PROTOCOL_TUNNEL,
    111            ZCL_CLUSTER_ID_HA_ELECTRICAL_MEASUREMENT,
    112            ZCL_CLUSTER_ID_PI_11073_PROTOCOL_TUNNEL,
    113            ZCL_CLUSTER_ID_PI_ISO7818_PROTOCOL_TUNNEL,
    114            ZCL_CLUSTER_ID_PI_RETAIL_TUNNEL,
    115            ZCL_CLUSTER_ID_SE_PRICE,
    116            ZCL_CLUSTER_ID_SE_DRLC,
    117            ZCL_CLUSTER_ID_SE_METERING,
    118            ZCL_CLUSTER_ID_SE_MESSAGING,
    119            ZCL_CLUSTER_ID_TELECOMMUNICATIONS_VOICE_OVER_ZIGBEE,
    120            ZCL_CLUSTER_ID_TELECOMMUNICATIONS_INFORMATION,
    121          };
    122          
    123          //Your JOB:
    124          //Remove the clusters that your application do not use. This will save some flash and processing
    125          //when looking into matching clusters during the finding & binding procedure

   \                                 In  segment XDATA_ROM_C, align 1
    126          const cId_t bdb_ZclType2Clusters[] =
   \                     bdb_ZclType2Clusters:
   \   000000   0700         DW 7
   \   000002   0A00         DW 10
   \   000004   0C00         DW 12
   \   000006   0D00         DW 13
   \   000008   0E00         DW 14
   \   00000A   0F00         DW 15
   \   00000C   1000         DW 16
   \   00000E   1100         DW 17
   \   000010   1200         DW 18
   \   000012   1300         DW 19
   \   000014   1400         DW 20
   \   000016   1900         DW 25
   \   000018   1B00         DW 27
   \   00001A   0001         DW 256
   \   00001C   0101         DW 257
   \   00001E   0002         DW 512
   \   000020   0102         DW 513
   \   000022   0204         DW 1026
   \   000024   0004         DW 1024
   \   000026   0104         DW 1025
   \   000028   0304         DW 1027
   \   00002A   0404         DW 1028
   \   00002C   0504         DW 1029
   \   00002E   0604         DW 1030
   \   000030   0005         DW 1280
   \   000032   0206         DW 1538
   \   000034   0306         DW 1539
   \   000036   0406         DW 1540
   \   000038   0506         DW 1541
   \   00003A   0606         DW 1542
   \   00003C   0706         DW 1543
   \   00003E   0806         DW 1544
   \   000040   0906         DW 1545
   \   000042   0A06         DW 1546
   \   000044   0B06         DW 1547
   \   000046   0C06         DW 1548
   \   000048   0D06         DW 1549
   \   00004A   0E06         DW 1550
   \   00004C   0F06         DW 1551
   \   00004E   1006         DW 1552
   \   000050   1106         DW 1553
   \   000052   1206         DW 1554
   \   000054   1306         DW 1555
   \   000056   0407         DW 1796
   \   000058   0009         DW 2304
   \   00005A   000B         DW 2816
   \   00005C   010B         DW 2817
   \   00005E   020B         DW 2818
   \   000060   030B         DW 2819
    127          {
    128            ZCL_CLUSTER_ID_GEN_ON_OFF_SWITCH_CONFIG,
    129            ZCL_CLUSTER_ID_GEN_TIME,
    130            ZCL_CLUSTER_ID_GEN_ANALOG_INPUT_BASIC,
    131            ZCL_CLUSTER_ID_GEN_ANALOG_OUTPUT_BASIC,
    132            ZCL_CLUSTER_ID_GEN_ANALOG_VALUE_BASIC,
    133            ZCL_CLUSTER_ID_GEN_BINARY_INPUT_BASIC,
    134            ZCL_CLUSTER_ID_GEN_BINARY_OUTPUT_BASIC,
    135            ZCL_CLUSTER_ID_GEN_BINARY_VALUE_BASIC,
    136            ZCL_CLUSTER_ID_GEN_MULTISTATE_INPUT_BASIC,
    137            ZCL_CLUSTER_ID_GEN_MULTISTATE_OUTPUT_BASIC,
    138            ZCL_CLUSTER_ID_GEN_MULTISTATE_VALUE_BASIC,
    139            ZCL_CLUSTER_ID_OTA,
    140            ZCL_CLUSTER_ID_GEN_APPLIANCE_CONTROL,
    141            ZCL_CLUSTER_ID_CLOSURES_SHADE_CONFIG,
    142            ZCL_CLUSTER_ID_CLOSURES_DOOR_LOCK,
    143            ZCL_CLUSTER_ID_HVAC_PUMP_CONFIG_CONTROL,
    144            ZCL_CLUSTER_ID_HVAC_THERMOSTAT,
    145            ZCL_CLUSTER_ID_MS_TEMPERATURE_MEASUREMENT,
    146            ZCL_CLUSTER_ID_MS_ILLUMINANCE_MEASUREMENT,
    147            ZCL_CLUSTER_ID_MS_ILLUMINANCE_LEVEL_SENSING_CONFIG,
    148            ZCL_CLUSTER_ID_MS_PRESSURE_MEASUREMENT,
    149            ZCL_CLUSTER_ID_MS_FLOW_MEASUREMENT,
    150            ZCL_CLUSTER_ID_MS_RELATIVE_HUMIDITY,
    151            ZCL_CLUSTER_ID_MS_OCCUPANCY_SENSING,
    152            ZCL_CLUSTER_ID_SS_IAS_ZONE,
    153            ZCL_CLUSTER_ID_PI_ANALOG_INPUT_BACNET_REG,
    154            ZCL_CLUSTER_ID_PI_ANALOG_INPUT_BACNET_EXT,
    155            ZCL_CLUSTER_ID_PI_ANALOG_OUTPUT_BACNET_REG,
    156            ZCL_CLUSTER_ID_PI_ANALOG_OUTPUT_BACNET_EXT,
    157            ZCL_CLUSTER_ID_PI_ANALOG_VALUE_BACNET_REG,
    158            ZCL_CLUSTER_ID_PI_ANALOG_VALUE_BACNET_EXT,
    159            ZCL_CLUSTER_ID_PI_BINARY_INPUT_BACNET_REG,
    160            ZCL_CLUSTER_ID_PI_BINARY_INPUT_BACNET_EXT,
    161            ZCL_CLUSTER_ID_PI_BINARY_OUTPUT_BACNET_REG,
    162            ZCL_CLUSTER_ID_PI_BINARY_OUTPUT_BACNET_EXT,
    163            ZCL_CLUSTER_ID_PI_BINARY_VALUE_BACNET_REG,
    164            ZCL_CLUSTER_ID_PI_BINARY_VALUE_BACNET_EXT,
    165            ZCL_CLUSTER_ID_PI_MULTISTATE_INPUT_BACNET_REG,
    166            ZCL_CLUSTER_ID_PI_MULTISTATE_INPUT_BACNET_EXT,
    167            ZCL_CLUSTER_ID_PI_MULTISTATE_OUTPUT_BACNET_REG,
    168            ZCL_CLUSTER_ID_PI_MULTISTATE_OUTPUT_BACNET_EXT,
    169            ZCL_CLUSTER_ID_PI_MULTISTATE_VALUE_BACNET_REG,
    170            ZCL_CLUSTER_ID_PI_MULTISTATE_VALUE_BACNET_EXT,
    171            ZCL_CLUSTER_ID_SE_TUNNELING,
    172            ZCL_CLUSTER_ID_TELECOMMUNICATIONS_INFORMATION,
    173            ZCL_CLUSTER_ID_HA_APPLIANCE_IDENTIFICATION,
    174            ZCL_CLUSTER_ID_HA_METER_IDENTIFICATION,
    175            ZCL_CLUSTER_ID_HA_APPLIANCE_EVENTS_ALERTS,
    176            ZCL_CLUSTER_ID_HA_APPLIANCE_STATISTICS,
    177          };
    178          
    179          #ifdef ZCL_GROUPS
    180          static zclOptionRec_t zcl_Groups_Options[] =
    181          {
    182            {
    183              ZCL_CLUSTER_ID_GEN_GROUPS,
    184              ( AF_ACK_REQUEST ),
    185            },
    186          };
    187          #endif
    188          
    189          
    190           /*********************************************************************
    191           * LOCAL FUNCTIONS
    192           */
    193          static ZStatus_t bdb_zclFindingBindingAddBindEntry( byte SrcEndpInt,
    194                                            uint16 BindClusterId,
    195                                            byte Cnt,                 
    196                                            uint16 * ClusterList,
    197                                            zAddrType_t *DstAddr, byte DstEndpInt, uint8 addBind, uint8 isClusterOutput );
    198          
    199          uint8 bdb_FindIfAppCluster( cId_t ClusterId, uint8 isClusterOutput );
    200          
    201          
    202          static void bdb_zclSimpleDescClusterListClean( SimpleDescriptionFormat_t *pSimpleDesc );
    203          bdbFindingBindingRespondent_t* bdb_findRespondentNode(uint8 endpoint, uint16 shortAddress);
    204          bdbFindingBindingRespondent_t* bdb_getRespondentRetry(bdbFindingBindingRespondent_t* pRespondentHead);
    205          void bdb_checkMatchingEndpoints(uint8 bindIfMatch, uint16 shortAddress, bdbFindingBindingRespondent_t **pCurr);
    206           /*********************************************************************
    207           * PUBLIC FUNCTIONS
    208           *********************************************************************/
    209          
    210          void bdb_ProcessSimpleDesc( zdoIncomingMsg_t *msgPtr );
    211          void bdb_ProcessIEEEAddrRsp(zdoIncomingMsg_t *pMsg);
    212          
    213          /*********************************************************************
    214           * @fn      bdb_SetIdentifyActiveEndpoint
    215           *
    216           * @brief   Set the endpoint which will perform the finding and binding (either Target or Initiator)
    217           *
    218           * @param   Active endpoint with which perform F&B. If set to 0xFF all endpoints with Identify will be attempted. The endpoint must be either Initiator or Target or Both
    219           *
    220           * @return  ZFailure - F&B commissioning mode already requested
    221           *          ZInvalidParameter - Endpoint specified not found or reserved by Zigbee
    222           *          ZSuccess - 
    223           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    224          ZStatus_t bdb_SetIdentifyActiveEndpoint(uint8 activeEndpoint)
   \                     bdb_SetIdentifyActiveEndpoint:
    225          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV       A,R1
   \   000005   FC           MOV       R4,A
    226            epList_t *bdb_EpDescriptorListTemp = NULL;
    227            
    228            //Cannot process the request if no endpoints or F&B is under process
    229            if(bdbAttributes.bdbCommissioningMode & BDB_COMMISSIONING_MODE_FINDING_BINDING)
   \   000006   90....       MOV       DPTR,#bdbAttributes + 11
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   A2E3         MOV       C,0xE0 /* A   */.3
   \   00000C   5004         JNC       ??bdb_SetIdentifyActiveEndpoint_0
    230            {
    231              return ZFailure;
   \   00000E   7901         MOV       R1,#0x1
   \   000010   803F         SJMP      ??bdb_SetIdentifyActiveEndpoint_1
    232            }
    233            
    234            if(activeEndpoint == 0xFF)
   \                     ??bdb_SetIdentifyActiveEndpoint_0:
   \   000012   74FF         MOV       A,#-0x1
   \   000014   6C           XRL       A,R4
   \   000015   602F         JZ        ??bdb_SetIdentifyActiveEndpoint_2
    235            {
    236              bdbIndentifyActiveEndpoint = activeEndpoint;
    237              return ZSuccess;
    238            }
    239            
    240            if((activeEndpoint != 0) && (activeEndpoint < BDB_ZIGBEE_RESERVED_ENDPOINTS_START))
   \   000017   EC           MOV       A,R4
   \   000018   6035         JZ        ??bdb_SetIdentifyActiveEndpoint_3
   \   00001A   C3           CLR       C
   \   00001B   94F1         SUBB      A,#-0xf
   \   00001D   5030         JNC       ??bdb_SetIdentifyActiveEndpoint_3
    241            {
    242              bdb_EpDescriptorListTemp = bdb_HeadEpDescriptorList;
   \   00001F   90....       MOV       DPTR,#bdb_HeadEpDescriptorList
   \   000022   E0           MOVX      A,@DPTR
   \   000023   FA           MOV       R2,A
   \   000024   A3           INC       DPTR
   \   000025   E0           MOVX      A,@DPTR
   \   000026   800A         SJMP      ??bdb_SetIdentifyActiveEndpoint_4
    243              
    244              while(bdb_EpDescriptorListTemp != NULL)
    245              {
    246                if(bdb_EpDescriptorListTemp->epDesc->endPoint == activeEndpoint)
    247                {
    248                  if(bdb_EpDescriptorListTemp->epDesc->epType)
    249                  {
    250                    bdbIndentifyActiveEndpoint = activeEndpoint;
    251                    return ZSuccess;
    252                  }
    253                  else
    254                  {
    255                    return ZInvalidParameter;
    256                  }
    257                }
    258                bdb_EpDescriptorListTemp = bdb_EpDescriptorListTemp->nextDesc;
   \                     ??bdb_SetIdentifyActiveEndpoint_5:
   \   000028   8A82         MOV       DPL,R2
   \   00002A   8B83         MOV       DPH,R3
   \   00002C   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   00002F   E8           MOV       A,R0
   \   000030   FA           MOV       R2,A
   \   000031   E9           MOV       A,R1
   \                     ??bdb_SetIdentifyActiveEndpoint_4:
   \   000032   FB           MOV       R3,A
   \   000033   EA           MOV       A,R2
   \   000034   4B           ORL       A,R3
   \   000035   6018         JZ        ??bdb_SetIdentifyActiveEndpoint_3
   \   000037   8A82         MOV       DPL,R2
   \   000039   8B83         MOV       DPH,R3
   \   00003B   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   00003E   E0           MOVX      A,@DPTR
   \   00003F   6C           XRL       A,R4
   \   000040   70E6         JNZ       ??bdb_SetIdentifyActiveEndpoint_5
   \   000042   A3           INC       DPTR
   \   000043   E0           MOVX      A,@DPTR
   \   000044   6009         JZ        ??bdb_SetIdentifyActiveEndpoint_3
   \                     ??bdb_SetIdentifyActiveEndpoint_2:
   \   000046   EC           MOV       A,R4
   \   000047   90....       MOV       DPTR,#bdbIndentifyActiveEndpoint
   \   00004A   F0           MOVX      @DPTR,A
   \   00004B   7900         MOV       R1,#0x0
   \   00004D   8002         SJMP      ??bdb_SetIdentifyActiveEndpoint_1
    259              }
    260            }
    261            
    262            return ZInvalidParameter;
   \                     ??bdb_SetIdentifyActiveEndpoint_3:
   \   00004F   7902         MOV       R1,#0x2
   \                     ??bdb_SetIdentifyActiveEndpoint_1:
   \   000051   80..         SJMP      ??Subroutine37_0
    263          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002                REQUIRE ??Subroutine36_0
   \   000002                ; // Fall through to label ??Subroutine36_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine36_0:
   \   000000   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_116:
   \   000003   8882         MOV       DPL,R0
   \   000005   8983         MOV       DPH,R1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine37_0:
   \   000000   D083         POP       DPH
   \   000002   D082         POP       DPL
   \   000004   02....       LJMP      ?BRET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_115:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   22           RET
    264          
    265          
    266          /*********************************************************************
    267           * @fn      bdb_setEpDescListToActiveEndpoint
    268           *
    269           * @brief   Set the endpoint list to the active endpoint selected by the application for F&B process
    270           *
    271           * @return  Current endpoint descriptor
    272           */
    273          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    274          endPointDesc_t* bdb_setEpDescListToActiveEndpoint(void)
   \                     bdb_setEpDescListToActiveEndpoint:
    275          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    276            bdb_CurrEpDescriptorList = bdb_HeadEpDescriptorList;
   \   000004   90....       MOV       DPTR,#bdb_HeadEpDescriptorList
   \   000007   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   00000A   12....       LCALL     ?Subroutine32 & 0xFFFF
    277           
    278            //Check which active endpoit is being requested
    279            if(bdbIndentifyActiveEndpoint != 0xFF)
   \                     ??CrossCallReturnLabel_49:
   \   00000D   90....       MOV       DPTR,#bdbIndentifyActiveEndpoint
   \   000010   E0           MOVX      A,@DPTR
   \   000011   F4           CPL       A
   \   000012   601B         JZ        ??CrossCallReturnLabel_1
    280            {
    281              //Search for an specific endpoint
    282              while(bdb_CurrEpDescriptorList != NULL)
   \                     ??bdb_setEpDescListToActiveEndpoint_0:
   \   000014   90....       MOV       DPTR,#bdb_CurrEpDescriptorList
   \   000017   12....       LCALL     ??Subroutine48_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_104:
   \   00001A   6036         JZ        ??bdb_setEpDescListToActiveEndpoint_1
    283              {
    284                if(bdb_CurrEpDescriptorList->epDesc->endPoint == bdbIndentifyActiveEndpoint)
   \   00001C   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   00001F   F8           MOV       R0,A
   \   000020   90....       MOV       DPTR,#bdbIndentifyActiveEndpoint
   \   000023   E0           MOVX      A,@DPTR
   \   000024   68           XRL       A,R0
   \   000025   6022         JZ        ??bdb_setEpDescListToActiveEndpoint_2
    285                {
    286                  return bdb_CurrEpDescriptorList->epDesc;
    287                }
    288                bdb_CurrEpDescriptorList = bdb_CurrEpDescriptorList->nextDesc;
   \   000027   12....       LCALL     ?Subroutine5 & 0xFFFF
    289              }
    290            }
   \                     ??CrossCallReturnLabel_0:
   \   00002A   80E8         SJMP      ??bdb_setEpDescListToActiveEndpoint_0
    291            else
    292            {
    293              //Look for the first endpoint that is either intiator or target to perform F&B. Is assumed that the endpoint supports Identify
    294              while(bdb_CurrEpDescriptorList != NULL)
    295              {
    296                if((bdb_CurrEpDescriptorList->epDesc->endPoint != 0) && 
    297                   (bdb_CurrEpDescriptorList->epDesc->endPoint < BDB_ZIGBEE_RESERVED_ENDPOINTS_START) && 
    298                   (bdb_CurrEpDescriptorList->epDesc->epType))
    299                {
    300                  return bdb_CurrEpDescriptorList->epDesc;
    301                }
    302                bdb_CurrEpDescriptorList = bdb_CurrEpDescriptorList->nextDesc;
   \                     ??bdb_setEpDescListToActiveEndpoint_3:
   \   00002C   12....       LCALL     ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   00002F   90....       MOV       DPTR,#bdb_CurrEpDescriptorList
   \   000032   12....       LCALL     ??Subroutine48_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_105:
   \   000035   601B         JZ        ??bdb_setEpDescListToActiveEndpoint_1
   \   000037   12....       LCALL     ??Subroutine41_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   00003A   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   00003D   E0           MOVX      A,@DPTR
   \   00003E   60EC         JZ        ??bdb_setEpDescListToActiveEndpoint_3
   \   000040   C3           CLR       C
   \   000041   94F1         SUBB      A,#-0xf
   \   000043   50E7         JNC       ??bdb_setEpDescListToActiveEndpoint_3
   \   000045   A3           INC       DPTR
   \   000046   E0           MOVX      A,@DPTR
   \   000047   60E3         JZ        ??bdb_setEpDescListToActiveEndpoint_3
   \                     ??bdb_setEpDescListToActiveEndpoint_2:
   \   000049   12....       LCALL     ?Subroutine8 & 0xFFFF
    303              }
    304            }
   \                     ??CrossCallReturnLabel_5:
   \   00004C   FA           MOV       R2,A
   \   00004D   A3           INC       DPTR
   \   00004E   E0           MOVX      A,@DPTR
   \   00004F   FB           MOV       R3,A
   \   000050   8004         SJMP      ??bdb_setEpDescListToActiveEndpoint_4
    305            //not found
    306            return NULL;
   \                     ??bdb_setEpDescListToActiveEndpoint_1:
   \   000052   7A00         MOV       R2,#0x0
   \   000054   7B00         MOV       R3,#0x0
   \                     ??bdb_setEpDescListToActiveEndpoint_4:
   \   000056   80..         SJMP      ??Subroutine37_0
    307          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   12....       LCALL     ??Subroutine38_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_90:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   12....       LCALL     ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_88:
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   90....       MOV       DPTR,#bdb_CurrEpDescriptorList
   \   000003   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_92:
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   E0           MOVX      A,@DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003                REQUIRE ??Subroutine38_0
   \   000003                ; // Fall through to label ??Subroutine38_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine38_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F583         MOV       DPH,A
   \   000003   8882         MOV       DPL,R0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   90....       MOV       DPTR,#bdb_CurrEpDescriptorList
   \   000003   12....       LCALL     ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_87:
   \   000006   F8           MOV       R0,A
   \   000007   A3           INC       DPTR
   \   000008   E0           MOVX      A,@DPTR
   \   000009   F9           MOV       R1,A
   \   00000A   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   90....       MOV       DPTR,#bdb_CurrEpDescriptorList
   \   000003                REQUIRE ??Subroutine39_0
   \   000003                ; // Fall through to label ??Subroutine39_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine39_0:
   \   000000   E8           MOV       A,R0
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   E9           MOV       A,R1
   \   000004   F0           MOVX      @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine41_0:
   \   000000   12....       LCALL     ??Subroutine38_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_91:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_93:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine48_0:
   \   000000   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_117:
   \   000003   E8           MOV       A,R0
   \   000004   49           ORL       A,R1
   \   000005   22           RET
    308          
    309          
    310          /*********************************************************************
    311           * @fn      bdb_ProcessIEEEAddrRsp
    312           *
    313           * @brief   Process IEEE addr response and mark the entry as done or remove the 
    314           *          bind if not successful.
    315           *
    316           * @param   zdoIncomingMsg_t *pMsg
    317           *
    318           * @return  none
    319           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    320          void bdb_ProcessIEEEAddrRsp(zdoIncomingMsg_t *pMsg)
   \                     bdb_ProcessIEEEAddrRsp:
    321          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 15
   \   000005   74F1         MOV       A,#-0xf
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    322            ZDO_NwkIEEEAddrResp_t *pAddrRsp = NULL;
    323            bdbFindingBindingRespondent_t *pCurr = NULL;
   \   00000A   85..82       MOV       DPL,?XSP + 0
   \   00000D   85..83       MOV       DPH,?XSP + 1
   \   000010   E4           CLR       A
   \   000011   F0           MOVX      @DPTR,A
   \   000012   A3           INC       DPTR
   \   000013   F0           MOVX      @DPTR,A
    324          
    325            pAddrRsp = ZDO_ParseAddrRsp( pMsg );
   \   000014                ; Setup parameters for call to function ZDO_ParseAddrRsp
   \   000014   12....       LCALL     `??ZDO_ParseAddrRsp::?relay`; Banked call to: ZDO_ParseAddrRsp
   \   000017   8A..         MOV       ?V0,R2
   \   000019   8B..         MOV       ?V1,R3
   \   00001B   AE..         MOV       R6,?V0
   \   00001D   AF..         MOV       R7,?V1
    326            
    327            if(pAddrRsp == NULL)
   \   00001F   EE           MOV       A,R6
   \   000020   4F           ORL       A,R7
   \   000021   7003         JNZ       $+5
   \   000023   02....       LJMP      ??bdb_ProcessIEEEAddrRsp_0 & 0xFFFF
    328            {
    329              return;
    330            }
    331            
    332            bdb_setEpDescListToActiveEndpoint();
   \   000026                ; Setup parameters for call to function bdb_setEpDescListToActiveEndpoint
   \   000026   12....       LCALL     `??bdb_setEpDescListToActiveEndpoint::?relay`; Banked call to: bdb_setEpDescListToActiveEndpoint
    333            
    334            pCurr = bdb_findRespondentNode(bdb_FindingBindingTargetSimpleDesc.EndPoint, pAddrRsp->nwkAddr);
   \   000029   8E82         MOV       DPL,R6
   \   00002B   8F83         MOV       DPH,R7
   \   00002D   A3           INC       DPTR
   \   00002E   8582..       MOV       ?V0,DPL
   \   000031   8583..       MOV       ?V1,DPH
   \   000034                ; Setup parameters for call to function bdb_findRespondentNode
   \   000034   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   000037   12....       LCALL     `??bdb_findRespondentNode::?relay`; Banked call to: bdb_findRespondentNode
   \   00003A   12....       LCALL     ?Subroutine4 & 0xFFFF
    335            
    336            //Does the entry exist and we were waiting an IEEE addr rsp from this device?
    337            if((pCurr != NULL) && (pCurr->attempts > FINDING_AND_BINDING_MISSING_IEEE_ADDR))
   \                     ??CrossCallReturnLabel_102:
   \   00003D   7003         JNZ       $+5
   \   00003F   02....       LJMP      ??bdb_ProcessIEEEAddrRsp_1 & 0xFFFF
   \   000042   85..82       MOV       DPL,?XSP + 0
   \   000045   85..83       MOV       DPH,?XSP + 1
   \   000048   A3           INC       DPTR
   \   000049   E0           MOVX      A,@DPTR
   \   00004A   C8           XCH       A,R0
   \   00004B   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   00004E   E0           MOVX      A,@DPTR
   \   00004F   C3           CLR       C
   \   000050   9481         SUBB      A,#-0x7f
   \   000052   407A         JC        ??bdb_ProcessIEEEAddrRsp_1
    338            {
    339              if(pAddrRsp->status == ZSuccess )
   \   000054   8E82         MOV       DPL,R6
   \   000056   8F83         MOV       DPH,R7
   \   000058   E0           MOVX      A,@DPTR
   \   000059   7069         JNZ       ??bdb_ProcessIEEEAddrRsp_2
    340              {
    341                uint8 extAddr[8]; 
    342                AddrMgrEntry_t entry;
    343                
    344                entry.nwkAddr = pAddrRsp->nwkAddr;
   \   00005B   85..82       MOV       DPL,?V0
   \   00005E   85..83       MOV       DPH,?V1
   \   000061   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   000064   7403         MOV       A,#0x3
   \   000066   12....       LCALL     ?XSTACK_DISP0_8
   \   000069   12....       LCALL     ??Subroutine39_0 & 0xFFFF
    345                entry.user = ADDRMGR_USER_BINDING;
   \                     ??CrossCallReturnLabel_45:
   \   00006C   7402         MOV       A,#0x2
   \   00006E   12....       LCALL     ?XSTACK_DISP0_8
   \   000071   7404         MOV       A,#0x4
   \   000073   F0           MOVX      @DPTR,A
    346                AddrMgrExtAddrSet(entry.extAddr, pAddrRsp->extAddr);
   \   000074                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   000074   EE           MOV       A,R6
   \   000075   2403         ADD       A,#0x3
   \   000077   FC           MOV       R4,A
   \   000078   E4           CLR       A
   \   000079   3F           ADDC      A,R7
   \   00007A   FD           MOV       R5,A
   \   00007B   7405         MOV       A,#0x5
   \   00007D   12....       LCALL     ?XSTACK_DISP0_8
   \   000080   AA82         MOV       R2,DPL
   \   000082   AB83         MOV       R3,DPH
   \   000084   12....       LCALL     `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
    347                
    348                //Add it as bind entry
    349                if(AddrMgrEntryUpdate(&entry) == FALSE)
   \   000087                ; Setup parameters for call to function AddrMgrEntryUpdate
   \   000087   7402         MOV       A,#0x2
   \   000089   12....       LCALL     ?XSTACK_DISP101_8
   \   00008C   12....       LCALL     `??AddrMgrEntryUpdate::?relay`; Banked call to: AddrMgrEntryUpdate
   \   00008F   E9           MOV       A,R1
   \   000090   7020         JNZ       ??bdb_ProcessIEEEAddrRsp_3
    350                {
    351                  //No space, then report F&B table full
    352                  //If periodic was triggered, then finish it
    353                  if(FINDING_AND_BINDING_PERIODIC_ENABLE == TRUE)                                  
    354                  {
    355                    bdb_FB_InitiatorCurrentCyclesNumber = 0;
   \   000092   12....       LCALL     ?Subroutine24 & 0xFFFF
    356                    osal_stop_timerEx(bdb_TaskID, BDB_FINDING_AND_BINDING_PERIOD_TIMEOUT);
    357                  }
   \                     ??CrossCallReturnLabel_32:
   \   000095   12....       LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
    358                  
    359                  bdb_zclSimpleDescClusterListClean( &bdb_FindingBindingTargetSimpleDesc );
   \   000098                ; Setup parameters for call to function bdb_zclSimpleDescClusterListClean
   \   000098   7A..         MOV       R2,#bdb_FindingBindingTargetSimpleDesc & 0xff
   \   00009A   7B..         MOV       R3,#(bdb_FindingBindingTargetSimpleDesc >> 8) & 0xff
   \   00009C   12....       LCALL     `??bdb_zclSimpleDescClusterListClean::?relay`; Banked call to: bdb_zclSimpleDescClusterListClean
    360                  osal_stop_timerEx( bdb_TaskID, BDB_RESPONDENT_PROCESS_TIMEOUT );
   \   00009F                ; Setup parameters for call to function osal_stop_timerEx
   \   00009F   7A00         MOV       R2,#0x0
   \   0000A1   7B40         MOV       R3,#0x40
   \   0000A3   90....       MOV       DPTR,#bdb_TaskID
   \   0000A6   E0           MOVX      A,@DPTR
   \   0000A7   F9           MOV       R1,A
   \   0000A8   12....       LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
    361                  bdb_exitFindingBindingWStatus( BDB_COMMISSIONING_FB_BINDING_TABLE_FULL );
   \   0000AB                ; Setup parameters for call to function bdb_exitFindingBindingWStatus
   \   0000AB   790C         MOV       R1,#0xc
   \   0000AD   12....       LCALL     `??bdb_exitFindingBindingWStatus::?relay`; Banked call to: bdb_exitFindingBindingWStatus
    362                  return;
   \   0000B0   8023         SJMP      ??bdb_ProcessIEEEAddrRsp_0
    363                }
    364          
    365                //search for the matching clusters to be added this time as we have the IEEE addrs
    366                bdb_checkMatchingEndpoints(TRUE, pAddrRsp->nwkAddr, &pCurr);
   \                     ??bdb_ProcessIEEEAddrRsp_3:
   \   0000B2                ; Setup parameters for call to function bdb_checkMatchingEndpoints
   \   0000B2   AC..         MOV       R4,?XSP + 0
   \   0000B4   AD..         MOV       R5,?XSP + 1
   \   0000B6   85..82       MOV       DPL,?V0
   \   0000B9   85..83       MOV       DPH,?V1
   \   0000BC   12....       LCALL     ??Subroutine43_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   0000BF   7901         MOV       R1,#0x1
   \   0000C1   12....       LCALL     `??bdb_checkMatchingEndpoints::?relay`; Banked call to: bdb_checkMatchingEndpoints
    367                (void)extAddr;  //dummy
    368              }
    369              //Bind cannot be added if the device was not found
    370              pCurr->attempts = FINDING_AND_BINDING_RESPONDENT_COMPLETE;
   \                     ??bdb_ProcessIEEEAddrRsp_2:
   \   0000C4   85..82       MOV       DPL,?XSP + 0
   \   0000C7   85..83       MOV       DPH,?XSP + 1
   \   0000CA   12....       LCALL     ?Subroutine12 & 0xFFFF
    371            }
   \                     ??CrossCallReturnLabel_14:
   \   0000CD   F0           MOVX      @DPTR,A
    372            
    373            //release the memory
    374            osal_mem_free( pAddrRsp );
   \                     ??bdb_ProcessIEEEAddrRsp_1:
   \   0000CE                ; Setup parameters for call to function osal_mem_free
   \   0000CE   EE           MOV       A,R6
   \   0000CF   FA           MOV       R2,A
   \   0000D0   EF           MOV       A,R7
   \   0000D1   FB           MOV       R3,A
   \   0000D2   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    375          }
   \                     ??bdb_ProcessIEEEAddrRsp_0:
   \   0000D5   740F         MOV       A,#0xf
   \   0000D7   02....       LJMP      ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   90....       MOV       DPTR,#bdb_FB_InitiatorCurrentCyclesNumber
   \   000003   E4           CLR       A
   \   000004   F0           MOVX      @DPTR,A
   \   000005                ; Setup parameters for call to function osal_stop_timerEx
   \   000005                ; Setup parameters for call to function osal_stop_timerEx
   \   000005                ; Setup parameters for call to function osal_stop_timerEx
   \   000005   7A40         MOV       R2,#0x40
   \   000007   FB           MOV       R3,A
   \   000008   90....       MOV       DPTR,#bdb_TaskID
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   F9           MOV       R1,A
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   12....       LCALL     ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_100:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   12....       LCALL     ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_98:
   \   000003   74FF         MOV       A,#-0x1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   12....       LCALL     ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   000003   90....       MOV       DPTR,#bdb_FindingBindingTargetSimpleDesc
   \   000006   E0           MOVX      A,@DPTR
   \   000007   F9           MOV       R1,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine43_0:
   \   000000   12....       LCALL     ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FB           MOV       R3,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine44_0
   \   000003                ; // Fall through to label ??Subroutine44_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine44_0:
   \   000000   7F02         MOV       R7,#0x2
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   C8           XCH       A,R0
   \   000005   12....       LCALL     ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_101:
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   240C         ADD       A,#0xc
   \   000002   F582         MOV       DPL,A
   \   000004   E4           CLR       A
   \   000005   38           ADDC      A,R0
   \   000006   F583         MOV       DPH,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006   EA           MOV       A,R2
   \   000007   F0           MOVX      @DPTR,A
   \   000008   A3           INC       DPTR
   \   000009   EB           MOV       A,R3
   \   00000A   F0           MOVX      @DPTR,A
   \   00000B   85..82       MOV       DPL,?XSP + 0
   \   00000E   85..83       MOV       DPH,?XSP + 1
   \   000011                REQUIRE ??Subroutine48_0
   \   000011                ; // Fall through to label ??Subroutine48_0
    376          
    377          
    378          /*********************************************************************
    379           * @fn      bdb_StopInitiatorFindingBinding
    380           *
    381           * @brief   Stops finding and binding for initiator devices.
    382           *
    383           * @param   none
    384           *
    385           * @return  none
    386           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    387          void bdb_StopInitiatorFindingBinding(void)
   \                     bdb_StopInitiatorFindingBinding:
    388          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    389            //If periodic was triggered, then finish it
    390            if(FINDING_AND_BINDING_PERIODIC_ENABLE == TRUE)                                  
    391            {
    392              bdb_FB_InitiatorCurrentCyclesNumber = 0;
   \   000004   12....       LCALL     ?Subroutine24 & 0xFFFF
    393              osal_stop_timerEx(bdb_TaskID, BDB_FINDING_AND_BINDING_PERIOD_TIMEOUT);
    394            }      
   \                     ??CrossCallReturnLabel_33:
   \   000007   12....       LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
    395            //Clean the respondent list and stop its timer
    396            bdb_zclRespondentListClean( &pRespondentHead );
   \   00000A                ; Setup parameters for call to function bdb_zclRespondentListClean
   \   00000A   7A..         MOV       R2,#pRespondentHead & 0xff
   \   00000C   7B..         MOV       R3,#(pRespondentHead >> 8) & 0xff
   \   00000E   12....       LCALL     `??bdb_zclRespondentListClean::?relay`; Banked call to: bdb_zclRespondentListClean
    397            osal_stop_timerEx( bdb_TaskID, BDB_RESPONDENT_PROCESS_TIMEOUT );
   \   000011                ; Setup parameters for call to function osal_stop_timerEx
   \   000011   7A00         MOV       R2,#0x0
   \   000013   7B40         MOV       R3,#0x40
   \   000015   90....       MOV       DPTR,#bdb_TaskID
   \   000018   E0           MOVX      A,@DPTR
   \   000019   F9           MOV       R1,A
   \   00001A   12....       LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
    398            
    399            //Notify status
    400            bdb_exitFindingBindingWStatus( BDB_COMMISSIONING_FB_NO_IDENTIFY_QUERY_RESPONSE );
   \   00001D                ; Setup parameters for call to function bdb_exitFindingBindingWStatus
   \   00001D   790B         MOV       R1,#0xb
   \   00001F   12....       LCALL     `??bdb_exitFindingBindingWStatus::?relay`; Banked call to: bdb_exitFindingBindingWStatus
    401          
    402          }
   \   000022   02....       LJMP      ??Subroutine37_0 & 0xFFFF
    403          
    404          
    405          /*********************************************************************
    406           * @fn      bdb_checkMatchingEndpoints
    407           *
    408           * @brief   Check active endpoints for F&B and the respondant simple descriptor 
    409           *          for matching application clusters
    410           *
    411           * @param   pRespondant - Respondant to be process
    412           * @param   bindIfMatch - Flag to indicate that binds for matching cluster must 
    413           *                        be done
    414           *
    415           * @return  status - Result of the operation
    416           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    417          void bdb_checkMatchingEndpoints(uint8 bindIfMatch, uint16 shortAddr, bdbFindingBindingRespondent_t **pCurr)
   \                     bdb_checkMatchingEndpoints:
    418          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV       A,#-0x9
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FF           MOV       R7,A
   \   00000C   8A..         MOV       ?V10,R2
   \   00000E   8B..         MOV       ?V11,R3
   \   000010   8C..         MOV       ?V6,R4
   \   000012   8D..         MOV       ?V7,R5
    419            uint8 matchFound;
    420            endPointDesc_t *bdb_CurrEpDescriptor;
    421            uint8 i, status;
    422            zAddrType_t dstAddr;
    423          #ifdef ZCL_GROUPS
    424            afAddrType_t afDstAddr;
    425          #endif  
    426            
    427            //Check all the endpoints active for F&B
    428            while(bdb_CurrEpDescriptorList != NULL)
   \   000014   90....       MOV       DPTR,#bdb_CurrEpDescriptorList
   \   000017   12....       LCALL     ??Subroutine48_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_106:
   \   00001A   7003         JNZ       $+5
   \   00001C   02....       LJMP      ??bdb_checkMatchingEndpoints_0 & 0xFFFF
    429            {
    430              matchFound = FALSE;
   \                     ??bdb_checkMatchingEndpoints_1:
   \   00001F   7E00         MOV       R6,#0x0
    431          
    432              bdb_CurrEpDescriptor = bdb_CurrEpDescriptorList->epDesc;
   \   000021   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   000024   F5..         MOV       ?V2,A
   \   000026   A3           INC       DPTR
   \   000027   E0           MOVX      A,@DPTR
   \   000028   F5..         MOV       ?V3,A
    433          
    434          #ifdef ZCL_GROUPS
    435              if ( bdbAttributes.bdbCommissioningGroupID != 0xFFFF )    
    436              {
    437                zcl_registerClusterOptionList(bdb_CurrEpDescriptor->endPoint,1,zcl_Groups_Options);      
    438                
    439                dstAddr.addr.shortAddr = bdbAttributes.bdbCommissioningGroupID;
    440                dstAddr.addrMode = AddrGroup;
    441              }
    442              else
    443          #endif
    444              {
    445                dstAddr.addrMode = Addr64Bit;
   \   00002A   7408         MOV       A,#0x8
   \   00002C   12....       LCALL     ?XSTACK_DISP0_8
   \   00002F   7403         MOV       A,#0x3
   \   000031   F0           MOVX      @DPTR,A
    446                if(bindIfMatch)
   \   000032   EF           MOV       A,R7
   \   000033   600B         JZ        ??bdb_checkMatchingEndpoints_2
    447                {
    448                  //if bind is to be created, then we should have the ext address in addr mgr
    449                  AddrMgrExtAddrLookup( shortAddr, dstAddr.addr.extAddr );
   \   000035                ; Setup parameters for call to function AddrMgrExtAddrLookup
   \   000035   AC..         MOV       R4,?XSP + 0
   \   000037   AD..         MOV       R5,?XSP + 1
   \   000039   AA..         MOV       R2,?V10
   \   00003B   AB..         MOV       R3,?V11
   \   00003D   12....       LCALL     `??AddrMgrExtAddrLookup::?relay`; Banked call to: AddrMgrExtAddrLookup
    450                }
    451              }
    452              for(i = 0; i < bdb_CurrEpDescriptor->simpleDesc->AppNumOutClusters; i++)
   \                     ??bdb_checkMatchingEndpoints_2:
   \   000040   75..00       MOV       ?V0,#0x0
   \   000043   E5..         MOV       A,?V2
   \   000045   2404         ADD       A,#0x4
   \   000047   F5..         MOV       ?V4,A
   \   000049   E4           CLR       A
   \   00004A   35..         ADDC      A,?V3
   \   00004C   F5..         MOV       ?V5,A
   \   00004E   8056         SJMP      ??bdb_checkMatchingEndpoints_3
    453              {
    454                //Filter for Application clusters (to bind app clusters only)
    455                status = bdb_zclFindingBindingAddBindEntry( bdb_CurrEpDescriptor->endPoint,
    456                                        bdb_CurrEpDescriptor->simpleDesc->pAppOutClusterList[i],
    457                                        bdb_FindingBindingTargetSimpleDesc.AppNumInClusters,
    458                                        bdb_FindingBindingTargetSimpleDesc.pAppInClusterList,
    459                                        &dstAddr, bdb_FindingBindingTargetSimpleDesc.EndPoint, bindIfMatch, TRUE );
   \                     ??bdb_checkMatchingEndpoints_4:
   \   000050                ; Setup parameters for call to function bdb_zclFindingBindingAddBindEntry
   \   000050   75..01       MOV       ?V1,#0x1
   \   000053   78..         MOV       R0,#?V1
   \   000055   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000058   EF           MOV       A,R7
   \   000059   F5..         MOV       ?V1,A
   \   00005B   78..         MOV       R0,#?V1
   \   00005D   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000060   7402         MOV       A,#0x2
   \   000062   12....       LCALL     ?XSTACK_DISP100_8
   \   000065   88..         MOV       ?V8,R0
   \   000067   89..         MOV       ?V9,R1
   \   000069   78..         MOV       R0,#?V8
   \   00006B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00006E   90....       MOV       DPTR,#bdb_FindingBindingTargetSimpleDesc + 7
   \   000071   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000074   90....       MOV       DPTR,#bdb_FindingBindingTargetSimpleDesc
   \   000077   E0           MOVX      A,@DPTR
   \   000078   FD           MOV       R5,A
   \   000079   90....       MOV       DPTR,#bdb_FindingBindingTargetSimpleDesc + 6
   \   00007C   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   00007F   A3           INC       DPTR
   \   000080   A3           INC       DPTR
   \   000081   A3           INC       DPTR
   \   000082   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   000085   12....       LCALL     `??bdb_zclFindingBindingAddBindEntry::?relay`; Banked call to: bdb_zclFindingBindingAddBindEntry
   \   000088   7406         MOV       A,#0x6
   \   00008A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00008D   E9           MOV       A,R1
   \   00008E   F5..         MOV       ?V1,A
    460                
    461                if ( status == ZApsTableFull )
   \   000090   74B2         MOV       A,#-0x4e
   \   000092   65..         XRL       A,?V1
   \   000094   7003         JNZ       $+5
   \   000096   02....       LJMP      ??bdb_checkMatchingEndpoints_5 & 0xFFFF
    462                {
    463                  break;
    464                }
    465                else if(status == ZSuccess)
   \   000099   E9           MOV       A,R1
   \   00009A   7008         JNZ       ??bdb_checkMatchingEndpoints_6
    466                {
    467                  matchFound = TRUE;
   \   00009C   7E01         MOV       R6,#0x1
    468                  //If a match is found and we are not adding due to lack of IEEE addrs, then skip looking
    469                  if(!bindIfMatch)
   \   00009E   EF           MOV       A,R7
   \   00009F   7003         JNZ       $+5
   \   0000A1   02....       LJMP      ??bdb_checkMatchingEndpoints_7 & 0xFFFF
    470                  {
    471                    break;
    472                  }
    473                }
    474              }
   \                     ??bdb_checkMatchingEndpoints_6:
   \   0000A4   05..         INC       ?V0
   \                     ??bdb_checkMatchingEndpoints_3:
   \   0000A6   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   0000A9   A3           INC       DPTR
   \   0000AA   A3           INC       DPTR
   \   0000AB   A3           INC       DPTR
   \   0000AC   E0           MOVX      A,@DPTR
   \   0000AD   F8           MOV       R0,A
   \   0000AE   E5..         MOV       A,?V0
   \   0000B0   C3           CLR       C
   \   0000B1   98           SUBB      A,R0
   \   0000B2   409C         JC        ??bdb_checkMatchingEndpoints_4
    475              
    476              //Only search for other matches if the table is not full and we have not 
    477              //found any match or we have to add bind as many as we can
    478              if( (status != ZApsTableFull) && (!matchFound || bindIfMatch) )      
   \   0000B4   74B2         MOV       A,#-0x4e
   \   0000B6   65..         XRL       A,?V1
   \   0000B8   6065         JZ        ??bdb_checkMatchingEndpoints_5
   \   0000BA   EE           MOV       A,R6
   \   0000BB   A2E0         MOV       C,0xE0 /* A   */.0
   \   0000BD   5003         JNC       ??bdb_checkMatchingEndpoints_8
   \   0000BF   EF           MOV       A,R7
   \   0000C0   605D         JZ        ??bdb_checkMatchingEndpoints_5
    479              {
    480                for(i = 0; i < bdb_CurrEpDescriptor->simpleDesc->AppNumInClusters; i++)
   \                     ??bdb_checkMatchingEndpoints_8:
   \   0000C2   75..00       MOV       ?V0,#0x0
   \   0000C5   800A         SJMP      ??bdb_checkMatchingEndpoints_9
    481                {
    482                  //Filter for Application clusters (to bind app clusters only)
    483                  status = bdb_zclFindingBindingAddBindEntry( bdb_CurrEpDescriptor->endPoint,
    484                                          bdb_CurrEpDescriptor->simpleDesc->pAppInClusterList[i],
    485                                          bdb_FindingBindingTargetSimpleDesc.AppNumOutClusters,
    486                                          bdb_FindingBindingTargetSimpleDesc.pAppOutClusterList,
    487                                          &dstAddr, bdb_FindingBindingTargetSimpleDesc.EndPoint, bindIfMatch, FALSE );
    488          
    489                  if ( status == ZApsTableFull )
    490                  {
    491                    break;
    492                  }
    493                  else if(status == ZSuccess)
   \                     ??bdb_checkMatchingEndpoints_10:
   \   0000C7   E9           MOV       A,R1
   \   0000C8   7005         JNZ       ??bdb_checkMatchingEndpoints_11
    494                  {
    495                    matchFound = TRUE;
   \   0000CA   7E01         MOV       R6,#0x1
    496                    
    497                    //If a match is found and we are not adding due to lack of IEEE addrs, then skip looking
    498                    if(!bindIfMatch)
   \   0000CC   EF           MOV       A,R7
   \   0000CD   6058         JZ        ??bdb_checkMatchingEndpoints_7
    499                    {
    500                      break;
    501                    }
    502                  }
   \                     ??bdb_checkMatchingEndpoints_11:
   \   0000CF   05..         INC       ?V0
   \                     ??bdb_checkMatchingEndpoints_9:
   \   0000D1   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   0000D4   E0           MOVX      A,@DPTR
   \   0000D5   F8           MOV       R0,A
   \   0000D6   E5..         MOV       A,?V0
   \   0000D8   C3           CLR       C
   \   0000D9   98           SUBB      A,R0
   \   0000DA   5043         JNC       ??bdb_checkMatchingEndpoints_5
   \   0000DC                ; Setup parameters for call to function bdb_zclFindingBindingAddBindEntry
   \   0000DC   75..00       MOV       ?V1,#0x0
   \   0000DF   78..         MOV       R0,#?V1
   \   0000E1   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000E4   EF           MOV       A,R7
   \   0000E5   F5..         MOV       ?V1,A
   \   0000E7   78..         MOV       R0,#?V1
   \   0000E9   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000EC   7402         MOV       A,#0x2
   \   0000EE   12....       LCALL     ?XSTACK_DISP100_8
   \   0000F1   88..         MOV       ?V8,R0
   \   0000F3   89..         MOV       ?V9,R1
   \   0000F5   78..         MOV       R0,#?V8
   \   0000F7   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000FA   90....       MOV       DPTR,#bdb_FindingBindingTargetSimpleDesc + 10
   \   0000FD   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000100   90....       MOV       DPTR,#bdb_FindingBindingTargetSimpleDesc
   \   000103   E0           MOVX      A,@DPTR
   \   000104   FD           MOV       R5,A
   \   000105   90....       MOV       DPTR,#bdb_FindingBindingTargetSimpleDesc + 9
   \   000108   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   00010B   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   00010E   12....       LCALL     `??bdb_zclFindingBindingAddBindEntry::?relay`; Banked call to: bdb_zclFindingBindingAddBindEntry
   \   000111   7406         MOV       A,#0x6
   \   000113   12....       LCALL     ?DEALLOC_XSTACK8
   \   000116   E9           MOV       A,R1
   \   000117   F5..         MOV       ?V1,A
   \   000119   74B2         MOV       A,#-0x4e
   \   00011B   65..         XRL       A,?V1
   \   00011D   70A8         JNZ       ??bdb_checkMatchingEndpoints_10
    503                }
    504              }
    505              
    506              //Check if we have found any match
    507              if( matchFound == TRUE )
   \                     ??bdb_checkMatchingEndpoints_5:
   \   00011F   EE           MOV       A,R6
   \   000120   A2E0         MOV       C,0xE0 /* A   */.0
   \   000122   5013         JNC       ??bdb_checkMatchingEndpoints_12
    508              {
    509                if(bindIfMatch)
   \   000124   EF           MOV       A,R7
   \   000125   7010         JNZ       ??bdb_checkMatchingEndpoints_12
    510                {
    511                  //Mark respondent as complete as simple desc has been process and we do 
    512                  //have IEEE addrs
    513                  (*pCurr)->attempts = FINDING_AND_BINDING_RESPONDENT_COMPLETE;
    514                }
    515                else
    516                {
    517                  //Mark as we need IEEE addrs
    518                  (*pCurr)->attempts = FINDING_AND_BINDING_MISSING_IEEE_ADDR;
   \                     ??bdb_checkMatchingEndpoints_7:
   \   000127   85..82       MOV       DPL,?V6
   \   00012A   85..83       MOV       DPH,?V7
   \   00012D   12....       LCALL     ??Subroutine45_0 & 0xFFFF
    519                }
    520          
    521          #ifdef ZCL_GROUPS
    522                if ( bdbAttributes.bdbCommissioningGroupID != 0xFFFF )
    523                {
    524                  afDstAddr.addr.shortAddr = shortAddr;
    525                  afDstAddr.addrMode = afAddr16Bit;
    526                  afDstAddr.endPoint = bdb_FindingBindingTargetSimpleDesc.EndPoint;
    527                      
    528                  zclGeneral_SendAddGroupRequest( bdb_CurrEpDescriptor->endPoint, &afDstAddr,
    529                                              COMMAND_GROUP_ADD, bdbAttributes.bdbCommissioningGroupID, grpName,
    530                                              TRUE, 0x00 );
    531                }
    532          #endif
    533              }
   \                     ??CrossCallReturnLabel_78:
   \   000130   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   000133   7480         MOV       A,#-0x80
   \   000135   8009         SJMP      ??CrossCallReturnLabel_15
    534              else
    535              {
    536                //No matching cluster, then we are done with this respondent
    537                (*pCurr)->attempts = FINDING_AND_BINDING_RESPONDENT_COMPLETE;
   \                     ??bdb_checkMatchingEndpoints_12:
   \   000137   85..82       MOV       DPL,?V6
   \   00013A   85..83       MOV       DPH,?V7
   \   00013D   12....       LCALL     ?Subroutine12 & 0xFFFF
    538              }
   \                     ??CrossCallReturnLabel_15:
   \   000140   F0           MOVX      @DPTR,A
    539              
    540              if ( status == ZApsTableFull )
   \   000141   74B2         MOV       A,#-0x4e
   \   000143   65..         XRL       A,?V1
   \   000145   7020         JNZ       ??bdb_checkMatchingEndpoints_13
    541              {
    542                //If periodic was triggered, then finish it
    543                if(FINDING_AND_BINDING_PERIODIC_ENABLE == TRUE)                                  
    544                {
    545                  bdb_FB_InitiatorCurrentCyclesNumber = 0;
   \   000147   12....       LCALL     ?Subroutine24 & 0xFFFF
    546                  osal_stop_timerEx(bdb_TaskID, BDB_FINDING_AND_BINDING_PERIOD_TIMEOUT);
    547                }      
   \                     ??CrossCallReturnLabel_34:
   \   00014A   12....       LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
    548                
    549                bdb_zclSimpleDescClusterListClean( &bdb_FindingBindingTargetSimpleDesc );
   \   00014D                ; Setup parameters for call to function bdb_zclSimpleDescClusterListClean
   \   00014D   7A..         MOV       R2,#bdb_FindingBindingTargetSimpleDesc & 0xff
   \   00014F   7B..         MOV       R3,#(bdb_FindingBindingTargetSimpleDesc >> 8) & 0xff
   \   000151   12....       LCALL     `??bdb_zclSimpleDescClusterListClean::?relay`; Banked call to: bdb_zclSimpleDescClusterListClean
    550                osal_stop_timerEx( bdb_TaskID, BDB_RESPONDENT_PROCESS_TIMEOUT );
   \   000154                ; Setup parameters for call to function osal_stop_timerEx
   \   000154   7A00         MOV       R2,#0x0
   \   000156   7B40         MOV       R3,#0x40
   \   000158   90....       MOV       DPTR,#bdb_TaskID
   \   00015B   E0           MOVX      A,@DPTR
   \   00015C   F9           MOV       R1,A
   \   00015D   12....       LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
    551                bdb_exitFindingBindingWStatus( BDB_COMMISSIONING_FB_BINDING_TABLE_FULL );
   \   000160                ; Setup parameters for call to function bdb_exitFindingBindingWStatus
   \   000160   790C         MOV       R1,#0xc
   \   000162   12....       LCALL     `??bdb_exitFindingBindingWStatus::?relay`; Banked call to: bdb_exitFindingBindingWStatus
    552                
    553                return;
   \   000165   8021         SJMP      ??bdb_checkMatchingEndpoints_0
    554              }
    555              
    556              //If an specific endpoint was requested, then don't go trough the rest of 
    557              //the endpoints
    558              if( bdbIndentifyActiveEndpoint != 0xFF )
   \                     ??bdb_checkMatchingEndpoints_13:
   \   000167   90....       MOV       DPTR,#bdbIndentifyActiveEndpoint
   \   00016A   E0           MOVX      A,@DPTR
   \   00016B   F4           CPL       A
   \   00016C   701A         JNZ       ??bdb_checkMatchingEndpoints_0
    559              {
    560                break;
    561              }
    562              else
    563              {
    564                //If active endpoints 'all' is attempted, then process the next endpoint in 
    565                //the list
    566                bdb_CurrEpDescriptorList = bdb_CurrEpDescriptorList->nextDesc;
   \   00016E   800D         SJMP      ??bdb_checkMatchingEndpoints_14
    567          
    568                while(bdb_CurrEpDescriptorList != NULL)
    569                {
    570                  //It has to be different from 0 or reserved for Zigbee
    571                  if((bdb_CurrEpDescriptorList->epDesc->endPoint != 0) && (bdb_CurrEpDescriptorList->epDesc->endPoint < BDB_ZIGBEE_RESERVED_ENDPOINTS_START))
   \                     ??bdb_checkMatchingEndpoints_15:
   \   000170   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   000173   6008         JZ        ??bdb_checkMatchingEndpoints_14
   \   000175   C3           CLR       C
   \   000176   94F1         SUBB      A,#-0xf
   \   000178   5003         JNC       $+5
   \   00017A   02....       LJMP      ??bdb_checkMatchingEndpoints_1 & 0xFFFF
    572                  {
    573                    break;
    574                  }
    575                  bdb_CurrEpDescriptorList = bdb_CurrEpDescriptorList->nextDesc;
   \                     ??bdb_checkMatchingEndpoints_14:
   \   00017D   12....       LCALL     ?Subroutine5 & 0xFFFF
    576                }
   \                     ??CrossCallReturnLabel_2:
   \   000180   90....       MOV       DPTR,#bdb_CurrEpDescriptorList
   \   000183   12....       LCALL     ??Subroutine48_0 & 0xFFFF
    577              }
    578            }
   \                     ??CrossCallReturnLabel_107:
   \   000186   70E8         JNZ       ??bdb_checkMatchingEndpoints_15
    579          }
   \                     ??bdb_checkMatchingEndpoints_0:
   \   000188   7409         MOV       A,#0x9
   \   00018A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00018D                REQUIRE ?Subroutine2
   \   00018D                ; // Fall through to label ?Subroutine2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7F0C         MOV       R7,#0xc
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FC           MOV       R4,A
   \   000002   A8..         MOV       R0,?V0
   \   000004   E8           MOV       A,R0
   \   000005   28           ADD       A,R0
   \   000006   F8           MOV       R0,A
   \   000007   E4           CLR       A
   \   000008   33           RLC       A
   \   000009   F9           MOV       R1,A
   \   00000A   8A82         MOV       DPL,R2
   \   00000C   8B83         MOV       DPH,R3
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   85..82       MOV       DPL,?V4
   \   000003   85..83       MOV       DPH,?V5
   \   000006   12....       LCALL     ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   000009   8A82         MOV       DPL,R2
   \   00000B   8B83         MOV       DPH,R3
   \   00000D   A3           INC       DPTR
   \   00000E   A3           INC       DPTR
   \   00000F   A3           INC       DPTR
   \   000010   A3           INC       DPTR
   \   000011   A3           INC       DPTR
   \   000012   A3           INC       DPTR
   \   000013   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   E0           MOVX      A,@DPTR
   \   000008   28           ADD       A,R0
   \   000009   FA           MOV       R2,A
   \   00000A   A3           INC       DPTR
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   39           ADDC      A,R1
   \   00000D   8A82         MOV       DPL,R2
   \   00000F   F583         MOV       DPH,A
   \   000011   12....       LCALL     ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   000014   85..83       MOV       DPH,?V3
   \   000017   E0           MOVX      A,@DPTR
   \   000018   F9           MOV       R1,A
   \   000019   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   12....       LCALL     ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   000003   85..82       MOV       DPL,?V2
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine45_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   C8           XCH       A,R0
   \   000005   22           RET
    580          
    581          
    582          
    583          /*********************************************************************
    584           * @fn      bdb_ProcessSimpleDesc
    585           *
    586           * @brief   Process simple descriptor requested by F&B. Binds will be added if 
    587           *          matching cluster is found and if IEEE addrs of the device is already 
    588           *          stored
    589           *
    590           * @param   msgPtr - pointer to simple descriptor response indication message
    591           *
    592           * @return  none
    593           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    594          void bdb_ProcessSimpleDesc( zdoIncomingMsg_t *msgPtr )
   \                     bdb_ProcessSimpleDesc:
    595          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 19
   \   000005   74ED         MOV       A,#-0x13
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
    596            zAddrType_t dstAddr;
    597            bdbFindingBindingRespondent_t *pCurr = NULL;
   \   00000E   85..82       MOV       DPL,?XSP + 0
   \   000011   85..83       MOV       DPH,?XSP + 1
   \   000014   E4           CLR       A
   \   000015   F0           MOVX      @DPTR,A
   \   000016   A3           INC       DPTR
   \   000017   F0           MOVX      @DPTR,A
    598            uint8 isRespondantReadyToBeAdded = FALSE;
   \   000018   75..00       MOV       ?V0,#0x0
    599          
    600            bdb_setEpDescListToActiveEndpoint();
   \   00001B                ; Setup parameters for call to function bdb_setEpDescListToActiveEndpoint
   \   00001B   12....       LCALL     `??bdb_setEpDescListToActiveEndpoint::?relay`; Banked call to: bdb_setEpDescListToActiveEndpoint
    601            
    602            if ( !(bdb_CurrEpDescriptorList->epDesc->epType & BDB_FINDING_AND_BINDING_INITIATOR )) 
   \   00001E   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   000021   12....       LCALL     ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   000024   A3           INC       DPTR
   \   000025   E0           MOVX      A,@DPTR
   \   000026   A2E0         MOV       C,0xE0 /* A   */.0
   \   000028   4003         JC        $+5
   \   00002A   02....       LJMP      ??bdb_ProcessSimpleDesc_0 & 0xFFFF
    603            {  
    604              //We should not be processing these commands as we are not initiator
    605              return;
    606            }
    607            
    608            dstAddr.addr.shortAddr = BUILD_UINT16( msgPtr->asdu[1], msgPtr->asdu[2] );
   \   00002D   EE           MOV       A,R6
   \   00002E   2413         ADD       A,#0x13
   \   000030   F582         MOV       DPL,A
   \   000032   E4           CLR       A
   \   000033   3F           ADDC      A,R7
   \   000034   F583         MOV       DPH,A
   \   000036   12....       LCALL     ??Subroutine36_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   000039   A3           INC       DPTR
   \   00003A   E0           MOVX      A,@DPTR
   \   00003B   FC           MOV       R4,A
   \   00003C   8882         MOV       DPL,R0
   \   00003E   8983         MOV       DPH,R1
   \   000040   A3           INC       DPTR
   \   000041   A3           INC       DPTR
   \   000042   E0           MOVX      A,@DPTR
   \   000043   FB           MOV       R3,A
   \   000044   EC           MOV       A,R4
   \   000045   FA           MOV       R2,A
   \   000046   7402         MOV       A,#0x2
   \   000048   12....       LCALL     ?XSTACK_DISP0_8
   \   00004B   12....       LCALL     ??Subroutine42_0 & 0xFFFF
    609            dstAddr.addrMode = Addr16Bit;
   \                     ??CrossCallReturnLabel_55:
   \   00004E   740A         MOV       A,#0xa
   \   000050   12....       LCALL     ?XSTACK_DISP0_8
   \   000053   7402         MOV       A,#0x2
   \   000055   F0           MOVX      @DPTR,A
    610            
    611            ZDO_ParseSimpleDescBuf( &msgPtr->asdu[4], &bdb_FindingBindingTargetSimpleDesc );
   \   000056                ; Setup parameters for call to function ZDO_ParseSimpleDescBuf
   \   000056   7C..         MOV       R4,#bdb_FindingBindingTargetSimpleDesc & 0xff
   \   000058   7D..         MOV       R5,#(bdb_FindingBindingTargetSimpleDesc >> 8) & 0xff
   \   00005A   E8           MOV       A,R0
   \   00005B   2404         ADD       A,#0x4
   \   00005D   FA           MOV       R2,A
   \   00005E   E4           CLR       A
   \   00005F   39           ADDC      A,R1
   \   000060   FB           MOV       R3,A
   \   000061   12....       LCALL     `??ZDO_ParseSimpleDescBuf::?relay`; Banked call to: ZDO_ParseSimpleDescBuf
    612            
    613            pCurr = bdb_findRespondentNode(bdb_FindingBindingTargetSimpleDesc.EndPoint, dstAddr.addr.shortAddr);
   \   000064                ; Setup parameters for call to function bdb_findRespondentNode
   \   000064   7402         MOV       A,#0x2
   \   000066   12....       LCALL     ?XSTACK_DISP0_8
   \   000069   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   00006C   12....       LCALL     `??bdb_findRespondentNode::?relay`; Banked call to: bdb_findRespondentNode
   \   00006F   12....       LCALL     ?Subroutine4 & 0xFFFF
    614            
    615            //Just for safety check this is a valid entry
    616            if(pCurr != NULL) 
   \                     ??CrossCallReturnLabel_103:
   \   000072   6058         JZ        ??bdb_ProcessSimpleDesc_0
    617            {
    618              uint8 extAddr[Z_EXTADDR_LEN]; 
    619              
    620              if(AddrMgrExtAddrLookup( pCurr->data.addr.shortAddr, extAddr ))
   \   000074                ; Setup parameters for call to function AddrMgrExtAddrLookup
   \   000074   740B         MOV       A,#0xb
   \   000076   12....       LCALL     ?XSTACK_DISP102_8
   \   000079   85..82       MOV       DPL,?XSP + 0
   \   00007C   85..83       MOV       DPH,?XSP + 1
   \   00007F   12....       LCALL     ??Subroutine40_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   000082   12....       LCALL     ??Subroutine43_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   000085   12....       LCALL     `??AddrMgrExtAddrLookup::?relay`; Banked call to: AddrMgrExtAddrLookup
   \   000088   E9           MOV       A,R1
   \   000089   6005         JZ        ??bdb_ProcessSimpleDesc_1
    621              {
    622                isRespondantReadyToBeAdded = TRUE;
   \   00008B   75..01       MOV       ?V0,#0x1
   \   00008E   8018         SJMP      ??bdb_ProcessSimpleDesc_2
    623              }
    624              else
    625              {
    626                //Save the simple desc to don't ask for it again
    627                pCurr->SimpleDescriptor = &bdb_FindingBindingTargetSimpleDesc;
   \                     ??bdb_ProcessSimpleDesc_1:
   \   000090   85..82       MOV       DPL,?XSP + 0
   \   000093   85..83       MOV       DPH,?XSP + 1
   \   000096   12....       LCALL     ??Subroutine45_0 & 0xFFFF
    628              }
   \                     ??CrossCallReturnLabel_79:
   \   000099   240D         ADD       A,#0xd
   \   00009B   F582         MOV       DPL,A
   \   00009D   E4           CLR       A
   \   00009E   38           ADDC      A,R0
   \   00009F   F583         MOV       DPH,A
   \   0000A1   74..         MOV       A,#bdb_FindingBindingTargetSimpleDesc & 0xff
   \   0000A3   F0           MOVX      @DPTR,A
   \   0000A4   A3           INC       DPTR
   \   0000A5   74..         MOV       A,#(bdb_FindingBindingTargetSimpleDesc >> 8) & 0xff
   \   0000A7   F0           MOVX      @DPTR,A
    629              (void)extAddr;  //dummy
    630            }
    631            else
    632            {
    633              //This simple desc rsp was not requested by BDB F&B
    634              return;
    635            } 
    636            
    637            bdb_checkMatchingEndpoints(isRespondantReadyToBeAdded, dstAddr.addr.shortAddr, &pCurr);
   \                     ??bdb_ProcessSimpleDesc_2:
   \   0000A8                ; Setup parameters for call to function bdb_checkMatchingEndpoints
   \   0000A8   AC..         MOV       R4,?XSP + 0
   \   0000AA   AD..         MOV       R5,?XSP + 1
   \   0000AC   7402         MOV       A,#0x2
   \   0000AE   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B1   12....       LCALL     ??Subroutine43_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   0000B4   A9..         MOV       R1,?V0
   \   0000B6   12....       LCALL     `??bdb_checkMatchingEndpoints::?relay`; Banked call to: bdb_checkMatchingEndpoints
    638            
    639            //If the respondent got process complete, then release the entry
    640            if(pCurr->attempts == FINDING_AND_BINDING_RESPONDENT_COMPLETE)
   \   0000B9   85..82       MOV       DPL,?XSP + 0
   \   0000BC   85..83       MOV       DPH,?XSP + 1
   \   0000BF   12....       LCALL     ??Subroutine47_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_96:
   \   0000C2   F4           CPL       A
   \   0000C3   7007         JNZ       ??bdb_ProcessSimpleDesc_0
    641            {
    642              bdb_zclSimpleDescClusterListClean( &bdb_FindingBindingTargetSimpleDesc );  
   \   0000C5                ; Setup parameters for call to function bdb_zclSimpleDescClusterListClean
   \   0000C5   7A..         MOV       R2,#bdb_FindingBindingTargetSimpleDesc & 0xff
   \   0000C7   7B..         MOV       R3,#(bdb_FindingBindingTargetSimpleDesc >> 8) & 0xff
   \   0000C9   12....       LCALL     `??bdb_zclSimpleDescClusterListClean::?relay`; Banked call to: bdb_zclSimpleDescClusterListClean
    643            }
    644          }
   \                     ??bdb_ProcessSimpleDesc_0:
   \   0000CC   7413         MOV       A,#0x13
   \   0000CE   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000D1                REQUIRE ?Subroutine3
   \   0000D1                ; // Fall through to label ?Subroutine3

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   7F01         MOV       R7,#0x1
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   F8           MOV       R0,A
   \   000001                REQUIRE ??Subroutine40_0
   \   000001                ; // Fall through to label ??Subroutine40_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine40_0:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine41_0
   \   000001                ; // Fall through to label ??Subroutine41_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine42_0:
   \   000000   EA           MOV       A,R2
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   EB           MOV       A,R3
   \   000004   F0           MOVX      @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine47_0:
   \   000000   12....       LCALL     ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_99:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET
    645          
    646          /*********************************************************************
    647           * @fn      bdb_zclFindingBindingEpType
    648           *
    649           * @brief   Gives the Ep Type according to application clusters in
    650           *          simple descriptor
    651           *
    652           * @return  epType - If Target, Initiator or both
    653           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    654          uint8 bdb_zclFindingBindingEpType( endPointDesc_t *epDesc )
   \                     bdb_zclFindingBindingEpType:
    655          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
    656            uint8 epType = 0;
   \   000005   75..00       MOV       ?V0,#0x0
    657            uint8 status;
    658            uint8 type1ClusterCnt;
    659            uint8 type2ClusterCnt;
    660            
    661            type1ClusterCnt = sizeof( bdb_ZclType1Clusters )/sizeof( uint16 );
    662            type2ClusterCnt = sizeof( bdb_ZclType2Clusters )/sizeof( uint16 );
    663            
    664          
    665            // Are there matching type 1 on server side?
    666            status = ZDO_AnyClusterMatches( epDesc->simpleDesc->AppNumInClusters, 
    667                                            epDesc->simpleDesc->pAppInClusterList,
    668                                            type1ClusterCnt,
    669                                            (uint16*)bdb_ZclType1Clusters);
    670            
    671            if( status == TRUE )
   \   000008   EA           MOV       A,R2
   \   000009   2404         ADD       A,#0x4
   \   00000B   FE           MOV       R6,A
   \   00000C   E4           CLR       A
   \   00000D   3B           ADDC      A,R3
   \   00000E   FF           MOV       R7,A
   \   00000F   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   000012   75....       MOV       ?V4,#bdb_ZclType1Clusters & 0xff
   \   000015   75....       MOV       ?V5,#(bdb_ZclType1Clusters >> 8) & 0xff
   \   000018                ; Setup parameters for call to function ZDO_AnyClusterMatches
   \   000018   78..         MOV       R0,#?V4
   \   00001A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001D   7C18         MOV       R4,#0x18
   \   00001F   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   000022   12....       LCALL     `??ZDO_AnyClusterMatches::?relay`; Banked call to: ZDO_AnyClusterMatches
   \   000025   7402         MOV       A,#0x2
   \   000027   12....       LCALL     ?DEALLOC_XSTACK8
   \   00002A   E9           MOV       A,R1
   \   00002B   6401         XRL       A,#0x1
   \   00002D   7003         JNZ       ??bdb_zclFindingBindingEpType_0
    672            {
    673              epType |= BDB_FINDING_AND_BINDING_TARGET;
   \   00002F   75..02       MOV       ?V0,#0x2
    674            }
    675            
    676            // Are there matching type 1 on client side?
    677            status = ZDO_AnyClusterMatches( epDesc->simpleDesc->AppNumOutClusters, 
    678                                            epDesc->simpleDesc->pAppOutClusterList,
    679                                            type1ClusterCnt,
    680                                            (uint16*)bdb_ZclType1Clusters);
    681            
    682            if( status == TRUE )
   \                     ??bdb_zclFindingBindingEpType_0:
   \   000032   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   000035                ; Setup parameters for call to function ZDO_AnyClusterMatches
   \   000035   78..         MOV       R0,#?V4
   \   000037   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003A   7C18         MOV       R4,#0x18
   \   00003C   85..82       MOV       DPL,?V2
   \   00003F   8983         MOV       DPH,R1
   \   000041   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   000044   85..82       MOV       DPL,?V2
   \   000047   8983         MOV       DPH,R1
   \   000049   A3           INC       DPTR
   \   00004A   A3           INC       DPTR
   \   00004B   A3           INC       DPTR
   \   00004C   A3           INC       DPTR
   \   00004D   A3           INC       DPTR
   \   00004E   A3           INC       DPTR
   \   00004F   A3           INC       DPTR
   \   000050   A3           INC       DPTR
   \   000051   A3           INC       DPTR
   \   000052   E0           MOVX      A,@DPTR
   \   000053   F9           MOV       R1,A
   \   000054   12....       LCALL     `??ZDO_AnyClusterMatches::?relay`; Banked call to: ZDO_AnyClusterMatches
   \   000057   7402         MOV       A,#0x2
   \   000059   12....       LCALL     ?DEALLOC_XSTACK8
   \   00005C   E9           MOV       A,R1
   \   00005D   6401         XRL       A,#0x1
   \   00005F   7006         JNZ       ??bdb_zclFindingBindingEpType_1
    683            {
    684              epType |= BDB_FINDING_AND_BINDING_INITIATOR;
   \   000061   E5..         MOV       A,?V0
   \   000063   D2E0         SETB      0xE0 /* A   */.0
   \   000065   F5..         MOV       ?V0,A
    685            }
    686            
    687            // Are there matching type 2 on server side?
    688            status = ZDO_AnyClusterMatches( epDesc->simpleDesc->AppNumInClusters, 
    689                                            epDesc->simpleDesc->pAppInClusterList,
    690                                            type2ClusterCnt,
    691                                            (uint16*)bdb_ZclType2Clusters);
    692            
    693            if( status == TRUE )
   \                     ??bdb_zclFindingBindingEpType_1:
   \   000067   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   00006A   75....       MOV       ?V4,#bdb_ZclType2Clusters & 0xff
   \   00006D   75....       MOV       ?V5,#(bdb_ZclType2Clusters >> 8) & 0xff
   \   000070                ; Setup parameters for call to function ZDO_AnyClusterMatches
   \   000070   78..         MOV       R0,#?V4
   \   000072   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000075   7C31         MOV       R4,#0x31
   \   000077   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   00007A   12....       LCALL     `??ZDO_AnyClusterMatches::?relay`; Banked call to: ZDO_AnyClusterMatches
   \   00007D   7402         MOV       A,#0x2
   \   00007F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000082   E9           MOV       A,R1
   \   000083   6401         XRL       A,#0x1
   \   000085   7006         JNZ       ??bdb_zclFindingBindingEpType_2
    694            {
    695              epType |= BDB_FINDING_AND_BINDING_INITIATOR;
   \   000087   E5..         MOV       A,?V0
   \   000089   D2E0         SETB      0xE0 /* A   */.0
   \   00008B   F5..         MOV       ?V0,A
    696            }
    697            
    698            // Are there matching type 2 on client side?
    699            status = ZDO_AnyClusterMatches( epDesc->simpleDesc->AppNumOutClusters, 
    700                                            epDesc->simpleDesc->pAppOutClusterList,
    701                                            type2ClusterCnt,
    702                                            (uint16*)bdb_ZclType2Clusters);
    703            
    704            if( status == TRUE )
   \                     ??bdb_zclFindingBindingEpType_2:
   \   00008D   8E82         MOV       DPL,R6
   \   00008F   8F83         MOV       DPH,R7
   \   000091   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   000094   E8           MOV       A,R0
   \   000095   FE           MOV       R6,A
   \   000096   E9           MOV       A,R1
   \   000097   FF           MOV       R7,A
   \   000098                ; Setup parameters for call to function ZDO_AnyClusterMatches
   \   000098   78..         MOV       R0,#?V4
   \   00009A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00009D   7C31         MOV       R4,#0x31
   \   00009F   8E82         MOV       DPL,R6
   \   0000A1   8F83         MOV       DPH,R7
   \   0000A3   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   0000A6   8E82         MOV       DPL,R6
   \   0000A8   8F83         MOV       DPH,R7
   \   0000AA   A3           INC       DPTR
   \   0000AB   A3           INC       DPTR
   \   0000AC   A3           INC       DPTR
   \   0000AD   A3           INC       DPTR
   \   0000AE   A3           INC       DPTR
   \   0000AF   A3           INC       DPTR
   \   0000B0   A3           INC       DPTR
   \   0000B1   A3           INC       DPTR
   \   0000B2   A3           INC       DPTR
   \   0000B3   E0           MOVX      A,@DPTR
   \   0000B4   F9           MOV       R1,A
   \   0000B5   12....       LCALL     `??ZDO_AnyClusterMatches::?relay`; Banked call to: ZDO_AnyClusterMatches
   \   0000B8   7402         MOV       A,#0x2
   \   0000BA   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000BD   E9           MOV       A,R1
   \   0000BE   6401         XRL       A,#0x1
   \   0000C0   7006         JNZ       ??bdb_zclFindingBindingEpType_3
    705            {
    706              epType |= BDB_FINDING_AND_BINDING_TARGET;
   \   0000C2   E5..         MOV       A,?V0
   \   0000C4   D2E1         SETB      0xE0 /* A   */.1
   \   0000C6   F5..         MOV       ?V0,A
    707            }
    708          
    709            return epType;
   \                     ??bdb_zclFindingBindingEpType_3:
   \   0000C8   A9..         MOV       R1,?V0
   \   0000CA   7F06         MOV       R7,#0x6
   \   0000CC   02....       LJMP      ?BANKED_LEAVE_XDATA
    710          
    711          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_114:
   \   000007   88..         MOV       ?V2,R0
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   85..82       MOV       DPL,?V2
   \   000003   8983         MOV       DPH,R1
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   A3           INC       DPTR
   \   00000C   12....       LCALL     ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   00000F   8983         MOV       DPH,R1
   \   000011   A3           INC       DPTR
   \   000012   A3           INC       DPTR
   \   000013   A3           INC       DPTR
   \   000014   A3           INC       DPTR
   \   000015   A3           INC       DPTR
   \   000016   A3           INC       DPTR
   \   000017   E0           MOVX      A,@DPTR
   \   000018   F9           MOV       R1,A
   \   000019   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A                REQUIRE ??Subroutine43_0
   \   00000A                ; // Fall through to label ??Subroutine43_0
    712          
    713          /*********************************************************************
    714           * @fn      bdb_zclFindingBindingAddBindEntry
    715           *
    716           * @brief   This function is used to Add an entry to the binding table
    717           *
    718           * @param   SrcEndpInt - source endpoint
    719           * @param   BindClusterId - cluster to try bind
    720           * @param   Cnt - list of remote clusters
    721           * @param   ClusterList - pointer to the Object ID list
    722           * @param   DstAddr - Address of remote node
    723           * @param   DstEndpInt - EndPoint of remote node
    724           * @param   addBind - Indicate wheter or not bind must be added or not
    725           * @param   isClusterOutput - True if the bind attempted is output cluster in the local device, false otherwise
    726           *
    727           * @return  status - Success if added
    728           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    729          static ZStatus_t bdb_zclFindingBindingAddBindEntry( byte SrcEndpInt,
   \                     bdb_zclFindingBindingAddBindEntry:
    730                                            uint16 BindClusterId,
    731                                            byte Cnt,                 
    732                                            uint16 * ClusterList,
    733                                            zAddrType_t *DstAddr, byte DstEndpInt, uint8 addBind, uint8 isClusterOutput )
    734          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   85..82       MOV       DPL,?XSP + 0
   \   00000D   85..83       MOV       DPH,?XSP + 1
   \   000010   12....       LCALL     ??Subroutine42_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   000013   E9           MOV       A,R1
   \   000014   FE           MOV       R6,A
   \   000015   EC           MOV       A,R4
   \   000016   FF           MOV       R7,A
   \   000017   8D..         MOV       ?V0,R5
    735            uint8 status;
    736          
    737            if ( bdb_FindIfAppCluster ( BindClusterId, isClusterOutput ) != SUCCESS )
   \   000019                ; Setup parameters for call to function bdb_FindIfAppCluster
   \   000019   7413         MOV       A,#0x13
   \   00001B   12....       LCALL     ?XSTACK_DISP0_8
   \   00001E   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   000021   E0           MOVX      A,@DPTR
   \   000022   FA           MOV       R2,A
   \   000023   12....       LCALL     `??bdb_FindIfAppCluster::?relay`; Banked call to: bdb_FindIfAppCluster
   \   000026   E9           MOV       A,R1
   \   000027   7024         JNZ       ??bdb_zclFindingBindingAddBindEntry_0
    738            {
    739              return ( ZApsFail ); // No App cluster
    740            }
    741          
    742            // Are there matching clusters?
    743            status = ZDO_AnyClusterMatches( Cnt, 
    744                                            ClusterList,
    745                                            1,
    746                                           &BindClusterId);
    747            if ( status == FALSE )
   \   000029                ; Setup parameters for call to function ZDO_AnyClusterMatches
   \   000029   A8..         MOV       R0,?XSP + 0
   \   00002B   A9..         MOV       R1,?XSP + 1
   \   00002D   88..         MOV       ?V2,R0
   \   00002F   89..         MOV       ?V3,R1
   \   000031   78..         MOV       R0,#?V2
   \   000033   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000036   7C01         MOV       R4,#0x1
   \   000038   7410         MOV       A,#0x10
   \   00003A   12....       LCALL     ?XSTACK_DISP0_8
   \   00003D   12....       LCALL     ??Subroutine43_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   000040   EF           MOV       A,R7
   \   000041   F9           MOV       R1,A
   \   000042   12....       LCALL     `??ZDO_AnyClusterMatches::?relay`; Banked call to: ZDO_AnyClusterMatches
   \   000045   7402         MOV       A,#0x2
   \   000047   12....       LCALL     ?DEALLOC_XSTACK8
   \   00004A   E9           MOV       A,R1
   \   00004B   7004         JNZ       ??bdb_zclFindingBindingAddBindEntry_1
    748            {
    749              return ( ZApsFail ); // No matched Cluster
   \                     ??bdb_zclFindingBindingAddBindEntry_0:
   \   00004D   79B1         MOV       R1,#-0x4f
   \   00004F   803F         SJMP      ??bdb_zclFindingBindingAddBindEntry_2
    750            }
    751          
    752            if(addBind)  
   \                     ??bdb_zclFindingBindingAddBindEntry_1:
   \   000051   7412         MOV       A,#0x12
   \   000053   12....       LCALL     ?XSTACK_DISP0_8
   \   000056   E0           MOVX      A,@DPTR
   \   000057   6035         JZ        ??bdb_zclFindingBindingAddBindEntry_3
    753            {
    754              if ( pbindAddEntry )
   \   000059   90....       MOV       DPTR,#pbindAddEntry
   \   00005C   12....       LCALL     ??Subroutine48_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_108:
   \   00005F   602D         JZ        ??bdb_zclFindingBindingAddBindEntry_3
    755              {
    756                // Add the entry into the binding table
    757                if (!pbindAddEntry( SrcEndpInt, DstAddr, DstEndpInt,
    758                                       1, &BindClusterId ) )
   \   000061                ; Setup parameters for indirect call
   \   000061   78..         MOV       R0,#?V2
   \   000063   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000066   7D01         MOV       R5,#0x1
   \   000068   AC..         MOV       R4,?V0
   \   00006A   7412         MOV       A,#0x12
   \   00006C   12....       LCALL     ?XSTACK_DISP0_8
   \   00006F   12....       LCALL     ??Subroutine43_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   000072   EE           MOV       A,R6
   \   000073   F9           MOV       R1,A
   \   000074   90....       MOV       DPTR,#pbindAddEntry
   \   000077   E0           MOVX      A,@DPTR
   \   000078   12....       LCALL     ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   00007B   12....       LCALL     ?CALL_IND
   \   00007E   7402         MOV       A,#0x2
   \   000080   12....       LCALL     ?DEALLOC_XSTACK8
   \   000083   8B..         MOV       ?V3,R3
   \   000085   EA           MOV       A,R2
   \   000086   45..         ORL       A,?V3
   \   000088   7004         JNZ       ??bdb_zclFindingBindingAddBindEntry_3
    759                {
    760                  return ( ZApsTableFull );
   \   00008A   79B2         MOV       R1,#-0x4e
   \   00008C   8002         SJMP      ??bdb_zclFindingBindingAddBindEntry_2
    761                }
    762              }
    763            }
    764            
    765            return ( ZSuccess );
   \                     ??bdb_zclFindingBindingAddBindEntry_3:
   \   00008E   7900         MOV       R1,#0x0
   \                     ??bdb_zclFindingBindingAddBindEntry_2:
   \   000090   7402         MOV       A,#0x2
   \   000092   12....       LCALL     ?DEALLOC_XSTACK8
   \   000095   7F04         MOV       R7,#0x4
   \   000097   02....       LJMP      ?BANKED_LEAVE_XDATA
    766          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F9           MOV       R1,A
   \   000002   85..82       MOV       DPL,?XSP + 0
   \   000005   85..83       MOV       DPH,?XSP + 1
   \   000008   22           RET
    767          
    768          /*********************************************************************
    769           * @fn      bdb_exitFindingBindingWStatus
    770           *
    771           * @brief   Clean respondent list and reports the status to bdb state machine
    772           *
    773           * @return  
    774           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    775          void bdb_exitFindingBindingWStatus( uint8 status )
   \                     bdb_exitFindingBindingWStatus:
    776          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
    777            // bdb report status
    778            bdbAttributes.bdbCommissioningStatus = status;
   \   000006   90....       MOV       DPTR,#bdbAttributes + 10
   \   000009   F0           MOVX      @DPTR,A
    779            
    780            bdb_reportCommissioningState( BDB_COMMISSIONING_STATE_FINDING_BINDING, TRUE );
   \   00000A                ; Setup parameters for call to function bdb_reportCommissioningState
   \   00000A   7A01         MOV       R2,#0x1
   \   00000C   7906         MOV       R1,#0x6
   \   00000E   12....       LCALL     `??bdb_reportCommissioningState::?relay`; Banked call to: bdb_reportCommissioningState
    781          }
   \   000011   02....       LJMP      ?Subroutine3 & 0xFFFF
    782          
    783          /*********************************************************************
    784           * @fn      bdb_zclSimpleDescClusterListClean
    785           *
    786           * @brief   This function free Simple Descriptor cluster lists
    787           *
    788           * @param   pSimpleDesc - pointer to simple descriptor
    789           *
    790           * @return  status
    791           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    792          static void bdb_zclSimpleDescClusterListClean( SimpleDescriptionFormat_t *pSimpleDesc )
   \                     bdb_zclSimpleDescClusterListClean:
    793          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    794            if(pSimpleDesc->pAppInClusterList != NULL)
   \   000009   EE           MOV       A,R6
   \   00000A   2407         ADD       A,#0x7
   \   00000C   F8           MOV       R0,A
   \   00000D   E4           CLR       A
   \   00000E   3F           ADDC      A,R7
   \   00000F   F9           MOV       R1,A
   \   000010   88..         MOV       ?V0,R0
   \   000012   89..         MOV       ?V1,R1
   \   000014   8882         MOV       DPL,R0
   \   000016   F583         MOV       DPH,A
   \   000018   12....       LCALL     ??Subroutine43_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   00001B   EA           MOV       A,R2
   \   00001C   4B           ORL       A,R3
   \   00001D   600D         JZ        ??bdb_zclSimpleDescClusterListClean_0
    795            {
    796              osal_mem_free( pSimpleDesc->pAppInClusterList );
   \   00001F                ; Setup parameters for call to function osal_mem_free
   \   00001F   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    797              pSimpleDesc->pAppInClusterList = ( cId_t* )NULL;
   \   000022   85..82       MOV       DPL,?V0
   \   000025   85..83       MOV       DPH,?V1
   \   000028   E4           CLR       A
   \   000029   F0           MOVX      @DPTR,A
   \   00002A   A3           INC       DPTR
   \   00002B   F0           MOVX      @DPTR,A
    798            }
    799            if(pSimpleDesc->pAppOutClusterList != NULL)
   \                     ??bdb_zclSimpleDescClusterListClean_0:
   \   00002C   EE           MOV       A,R6
   \   00002D   240A         ADD       A,#0xa
   \   00002F   F8           MOV       R0,A
   \   000030   E4           CLR       A
   \   000031   3F           ADDC      A,R7
   \   000032   F9           MOV       R1,A
   \   000033   E8           MOV       A,R0
   \   000034   FE           MOV       R6,A
   \   000035   E9           MOV       A,R1
   \   000036   FF           MOV       R7,A
   \   000037   8E82         MOV       DPL,R6
   \   000039   8F83         MOV       DPH,R7
   \   00003B   12....       LCALL     ??Subroutine43_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   00003E   EA           MOV       A,R2
   \   00003F   4B           ORL       A,R3
   \   000040   600B         JZ        ??bdb_zclSimpleDescClusterListClean_1
    800            {
    801              osal_mem_free( pSimpleDesc->pAppOutClusterList );
   \   000042                ; Setup parameters for call to function osal_mem_free
   \   000042   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    802              pSimpleDesc->pAppOutClusterList = ( cId_t* )NULL;
   \   000045   8E82         MOV       DPL,R6
   \   000047   8F83         MOV       DPH,R7
   \   000049   E4           CLR       A
   \   00004A   F0           MOVX      @DPTR,A
   \   00004B   A3           INC       DPTR
   \   00004C   F0           MOVX      @DPTR,A
    803            }
    804          }
   \                     ??bdb_zclSimpleDescClusterListClean_1:
   \   00004D   80..         SJMP      ??Subroutine44_0
    805          
    806          /*********************************************************************
    807           * @fn      bdb_RegisterIdentifyTimeChangeCB
    808           *
    809           * @brief   Register an Application's Identify Time change callback function
    810           *          to let know the application when identify is active or not.
    811           *
    812           * @param   pfnIdentify - application callback
    813           *
    814           * @return  none
    815           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL     ??Subroutine42_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   000003                REQUIRE ??Subroutine37_0
   \   000003                ; // Fall through to label ??Subroutine37_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    816          void bdb_RegisterIdentifyTimeChangeCB( bdbGCB_IdentifyTimeChange_t pfnIdentifyTimeChange )
   \                     bdb_RegisterIdentifyTimeChangeCB:
    817          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    818            pfnIdentifyTimeChangeCB = pfnIdentifyTimeChange;
   \   000004   90....       MOV       DPTR,#pfnIdentifyTimeChangeCB
   \   000007   02....       LJMP      ?Subroutine0 & 0xFFFF
    819          }
    820          
    821          #if (FINDING_AND_BINDING_PERIODIC_ENABLE==TRUE)
    822          /*********************************************************************
    823           * @fn      bdb_GetFBInitiatorStatus
    824           *
    825           * @brief   Get the F&B initiator status for periodic requests.
    826           *
    827           * @param   RemainingTime - in seconds
    828           * @param   AttemptsLeft - number of attempts to be done
    829           * @param   MatchesFound - Add the number of matches to this parameter
    830           *                         since the last bdb_GetFBInitiatorStatus call
    831           *
    832           * @return  none
    833           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    834          void bdb_GetFBInitiatorStatus(uint8 *RemainingTime, uint8* AttemptsLeft)
   \                     bdb_GetFBInitiatorStatus:
    835          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV       A,#-0x14
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   8C..         MOV       ?V0,R4
   \   00000B   8D..         MOV       ?V1,R5
    836            if(RemainingTime != NULL)  
   \   00000D   EE           MOV       A,R6
   \   00000E   4F           ORL       A,R7
   \   00000F   6048         JZ        ??bdb_GetFBInitiatorStatus_0
    837            {
    838              if (bdb_FB_InitiatorCurrentCyclesNumber == 0)
   \   000011   90....       MOV       DPTR,#bdb_FB_InitiatorCurrentCyclesNumber
   \   000014   E0           MOVX      A,@DPTR
   \   000015   7007         JNZ       ??bdb_GetFBInitiatorStatus_1
    839              {
    840                *RemainingTime = 0;
   \   000017   8E82         MOV       DPL,R6
   \   000019   8F83         MOV       DPH,R7
   \   00001B   E4           CLR       A
   \   00001C   803A         SJMP      ??bdb_GetFBInitiatorStatus_2
    841              }
    842              else
    843              {
    844                *RemainingTime = (bdb_FB_InitiatorCurrentCyclesNumber - 1) * FINDING_AND_BINDING_PERIODIC_TIME + ((osal_get_timeoutEx(bdb_TaskID, BDB_FINDING_AND_BINDING_PERIOD_TIMEOUT) + 999) / 1000);
   \                     ??bdb_GetFBInitiatorStatus_1:
   \   00001E                ; Setup parameters for call to function osal_get_timeoutEx
   \   00001E   7A40         MOV       R2,#0x40
   \   000020   7B00         MOV       R3,#0x0
   \   000022   90....       MOV       DPTR,#bdb_TaskID
   \   000025   E0           MOVX      A,@DPTR
   \   000026   F9           MOV       R1,A
   \   000027   12....       LCALL     `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
   \   00002A   8A..         MOV       ?V4,R2
   \   00002C   8B..         MOV       ?V5,R3
   \   00002E   8C..         MOV       ?V6,R4
   \   000030   8D..         MOV       ?V7,R5
   \   000032   90....       MOV       DPTR,#__Constant_3e7
   \   000035   78..         MOV       R0,#?V4
   \   000037   12....       LCALL     ?L_ADD_X
   \   00003A   90....       MOV       DPTR,#__Constant_3e8
   \   00003D   78..         MOV       R0,#?V8
   \   00003F   12....       LCALL     ?L_MOV_X
   \   000042   78..         MOV       R0,#?V4
   \   000044   79..         MOV       R1,#?V8
   \   000046   12....       LCALL     ?UL_DIV_MOD
   \   000049   75F00F       MOV       B,#0xf
   \   00004C   90....       MOV       DPTR,#bdb_FB_InitiatorCurrentCyclesNumber
   \   00004F   E0           MOVX      A,@DPTR
   \   000050   14           DEC       A
   \   000051   A4           MUL       AB
   \   000052   25..         ADD       A,?V4
   \   000054   8E82         MOV       DPL,R6
   \   000056   8F83         MOV       DPH,R7
   \                     ??bdb_GetFBInitiatorStatus_2:
   \   000058   F0           MOVX      @DPTR,A
    845              }
    846            }
    847            
    848            if(AttemptsLeft != NULL)
   \                     ??bdb_GetFBInitiatorStatus_0:
   \   000059   E5..         MOV       A,?V0
   \   00005B   45..         ORL       A,?V1
   \   00005D   600B         JZ        ??bdb_GetFBInitiatorStatus_3
    849            {
    850              *AttemptsLeft = bdb_FB_InitiatorCurrentCyclesNumber;
   \   00005F   90....       MOV       DPTR,#bdb_FB_InitiatorCurrentCyclesNumber
   \   000062   E0           MOVX      A,@DPTR
   \   000063   85..82       MOV       DPL,?V0
   \   000066   85..83       MOV       DPH,?V1
   \   000069   F0           MOVX      @DPTR,A
    851            }
    852          }
   \                     ??bdb_GetFBInitiatorStatus_3:
   \   00006A   02....       LJMP      ?Subroutine2 & 0xFFFF
    853          #endif
    854          
    855          /*********************************************************************
    856           * @fn      bdb_RegisterBindNotificationCB
    857           *
    858           * @brief   Register an Application's notification callback function to let 
    859           *          know the application when a new bind is added to the binding table.
    860           *
    861           * @param   pfnIdentify - application callback
    862           *
    863           * @return  none
    864           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    865          void bdb_RegisterBindNotificationCB( bdbGCB_BindNotification_t pfnBindNotification )
   \                     bdb_RegisterBindNotificationCB:
    866          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    867            pfnBindNotificationCB = pfnBindNotification;
   \   000004   90....       MOV       DPTR,#pfnBindNotificationCB
   \   000007   02....       LJMP      ?Subroutine0 & 0xFFFF
    868          }
    869          
    870          /*********************************************************************
    871           * @fn      bdb_SendIdentifyQuery
    872           *
    873           * @brief   Sends Identify query from the given endpoint
    874           *
    875           * @param   endpoint
    876           *
    877           * @return  ZStatus_t
    878           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    879          ZStatus_t bdb_SendIdentifyQuery( uint8 endpoint )
   \                     bdb_SendIdentifyQuery:
    880          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV       A,#-0xc
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FF           MOV       R7,A
    881            afAddrType_t dstAddr;
    882            ZStatus_t    status;
    883            
    884            dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVALL;
   \   00000C   85..82       MOV       DPL,?XSP + 0
   \   00000F   85..83       MOV       DPH,?XSP + 1
   \   000012   74FF         MOV       A,#-0x1
   \   000014   F0           MOVX      @DPTR,A
   \   000015   A3           INC       DPTR
   \   000016   F0           MOVX      @DPTR,A
    885            dstAddr.addrMode = afAddr16Bit;
   \   000017   7408         MOV       A,#0x8
   \   000019   12....       LCALL     ?XSTACK_DISP0_8
   \   00001C   7402         MOV       A,#0x2
   \   00001E   F0           MOVX      @DPTR,A
    886            dstAddr.endPoint = 0xFF;
   \   00001F   7409         MOV       A,#0x9
   \   000021   12....       LCALL     ?XSTACK_DISP0_8
   \   000024   74FF         MOV       A,#-0x1
   \   000026   F0           MOVX      @DPTR,A
    887          
    888            status = zclGeneral_SendIdentifyQuery( endpoint, &dstAddr, TRUE, bdb_getZCLFrameCounter() ); 
   \   000027                ; Setup parameters for call to function bdb_getZCLFrameCounter
   \   000027   12....       LCALL     `??bdb_getZCLFrameCounter::?relay`; Banked call to: bdb_getZCLFrameCounter
   \   00002A   E9           MOV       A,R1
   \   00002B   F9           MOV       R1,A
   \   00002C                ; Setup parameters for call to function zcl_SendCommand
   \   00002C   E4           CLR       A
   \   00002D   F5..         MOV       ?V0,A
   \   00002F   F5..         MOV       ?V1,A
   \   000031   78..         MOV       R0,#?V0
   \   000033   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000036   78..         MOV       R0,#?V0
   \   000038   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003B   E9           MOV       A,R1
   \   00003C   F5..         MOV       ?V0,A
   \   00003E   78..         MOV       R0,#?V0
   \   000040   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000043   E4           CLR       A
   \   000044   F5..         MOV       ?V0,A
   \   000046   78..         MOV       R0,#?V0
   \   000048   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004B   75..01       MOV       ?V0,#0x1
   \   00004E   78..         MOV       R0,#?V0
   \   000050   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000053   75..00       MOV       ?V0,#0x0
   \   000056   78..         MOV       R0,#?V0
   \   000058   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00005B   75..01       MOV       ?V0,#0x1
   \   00005E   78..         MOV       R0,#?V0
   \   000060   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000063   78..         MOV       R0,#?V0
   \   000065   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000068   7C03         MOV       R4,#0x3
   \   00006A   7D00         MOV       R5,#0x0
   \   00006C   740B         MOV       A,#0xb
   \   00006E   12....       LCALL     ?XSTACK_DISP101_8
   \   000071   EF           MOV       A,R7
   \   000072   F9           MOV       R1,A
   \   000073   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   000076   740B         MOV       A,#0xb
   \   000078   12....       LCALL     ?DEALLOC_XSTACK8
   \   00007B   E9           MOV       A,R1
   \   00007C   FE           MOV       R6,A
    889            
    890            if(status == ZSuccess)
   \   00007D   7017         JNZ       ??bdb_SendIdentifyQuery_0
    891            {
    892              osal_start_timerEx( bdb_TaskID, BDB_RESPONDENT_PROCESS_TIMEOUT, IDENTIFY_QUERY_RSP_TIMEOUT );
   \   00007F                ; Setup parameters for call to function osal_start_timerEx
   \   00007F   90....       MOV       DPTR,#__Constant_2710
   \   000082   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000085   7A00         MOV       R2,#0x0
   \   000087   7B40         MOV       R3,#0x40
   \   000089   90....       MOV       DPTR,#bdb_TaskID
   \   00008C   E0           MOVX      A,@DPTR
   \   00008D   F9           MOV       R1,A
   \   00008E   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000091   7404         MOV       A,#0x4
   \   000093   12....       LCALL     ?DEALLOC_XSTACK8
    893            }
    894            
    895            return status;
   \                     ??bdb_SendIdentifyQuery_0:
   \   000096   EE           MOV       A,R6
   \   000097   F9           MOV       R1,A
   \   000098   740C         MOV       A,#0xc
   \   00009A   02....       LJMP      ?Subroutine1 & 0xFFFF
    896          }
    897          
    898          /*********************************************************************
    899           * @fn      bdb_ZclIdentifyQueryCmdInd
    900           *
    901           * @brief   Callback from the ZCL General Cluster Library when
    902           *          it received an Identity Query Response Command for this 
    903           *          application.
    904           *
    905           * @param   srcAddr - source address and endpoint of the response message
    906           * @param   identifyTime - the number of seconds to identify yourself
    907           *
    908           * @return  none
    909           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    910          void bdb_ZclIdentifyQueryCmdInd( zclIdentifyQueryRsp_t *pCmd )
   \                     bdb_ZclIdentifyQueryCmdInd:
    911          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    912            bdbFindingBindingRespondent_t *pCurr;
    913            
    914            // Stop the timer before refresh
    915            osal_stop_timerEx( bdb_TaskID, BDB_RESPONDENT_PROCESS_TIMEOUT );
   \   000009                ; Setup parameters for call to function osal_stop_timerEx
   \   000009   7A00         MOV       R2,#0x0
   \   00000B   7B40         MOV       R3,#0x40
   \   00000D   90....       MOV       DPTR,#bdb_TaskID
   \   000010   E0           MOVX      A,@DPTR
   \   000011   F9           MOV       R1,A
   \   000012   12....       LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
    916            
    917            // add new node to the list
    918            pCurr = bdb_AddRespondentNode( &pRespondentHead, pCmd );
   \   000015                ; Setup parameters for call to function bdb_AddRespondentNode
   \   000015   EE           MOV       A,R6
   \   000016   FC           MOV       R4,A
   \   000017   EF           MOV       A,R7
   \   000018   FD           MOV       R5,A
   \   000019   7A..         MOV       R2,#pRespondentHead & 0xff
   \   00001B   7B..         MOV       R3,#(pRespondentHead >> 8) & 0xff
   \   00001D   12....       LCALL     `??bdb_AddRespondentNode::?relay`; Banked call to: bdb_AddRespondentNode
    919            
    920            if(pCurr != NULL)
   \   000020   EA           MOV       A,R2
   \   000021   4B           ORL       A,R3
   \   000022   605C         JZ        ??bdb_ZclIdentifyQueryCmdInd_0
    921            {
    922              pCurr->data.addrMode = pCmd->srcAddr->addrMode;
   \   000024   8E82         MOV       DPL,R6
   \   000026   8F83         MOV       DPH,R7
   \   000028   12....       LCALL     ??Subroutine36_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   00002B   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   00002E   F0           MOVX      @DPTR,A
    923              pCurr->data.addr.shortAddr = pCmd->srcAddr->addr.shortAddr;
   \   00002F   8882         MOV       DPL,R0
   \   000031   8983         MOV       DPH,R1
   \   000033   E0           MOVX      A,@DPTR
   \   000034   FC           MOV       R4,A
   \   000035   A3           INC       DPTR
   \   000036   E0           MOVX      A,@DPTR
   \   000037   FD           MOV       R5,A
   \   000038   8A82         MOV       DPL,R2
   \   00003A   8B83         MOV       DPH,R3
   \   00003C   EC           MOV       A,R4
   \   00003D   F0           MOVX      @DPTR,A
   \   00003E   A3           INC       DPTR
   \   00003F   ED           MOV       A,R5
   \   000040   F0           MOVX      @DPTR,A
    924              pCurr->data.endPoint = pCmd->srcAddr->endPoint;
   \   000041   8882         MOV       DPL,R0
   \   000043   8983         MOV       DPH,R1
   \   000045   A3           INC       DPTR
   \   000046   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   000049   A3           INC       DPTR
   \   00004A   F0           MOVX      @DPTR,A
    925              pCurr->data.panId = pCmd->srcAddr->panId;
   \   00004B   8E82         MOV       DPL,R6
   \   00004D   8F83         MOV       DPH,R7
   \   00004F   12....       LCALL     ??Subroutine45_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   000052   240A         ADD       A,#0xa
   \   000054   F582         MOV       DPL,A
   \   000056   E4           CLR       A
   \   000057   38           ADDC      A,R0
   \   000058   F583         MOV       DPH,A
   \   00005A   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   00005D   8A82         MOV       DPL,R2
   \   00005F   8B83         MOV       DPH,R3
   \   000061   A3           INC       DPTR
   \   000062   A3           INC       DPTR
   \   000063   A3           INC       DPTR
   \   000064   A3           INC       DPTR
   \   000065   A3           INC       DPTR
   \   000066   A3           INC       DPTR
   \   000067   A3           INC       DPTR
   \   000068   A3           INC       DPTR
   \   000069   A3           INC       DPTR
   \   00006A   A3           INC       DPTR
   \   00006B   12....       LCALL     ??Subroutine39_0 & 0xFFFF
    926              pCurr->attempts = FINDING_AND_BINDING_NEW_RESPONDENT;
   \                     ??CrossCallReturnLabel_46:
   \   00006E   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   000071   E4           CLR       A
   \   000072   F0           MOVX      @DPTR,A
    927              pCurr->SimpleDescriptor = NULL;
   \   000073   EA           MOV       A,R2
   \   000074   240D         ADD       A,#0xd
   \   000076   F582         MOV       DPL,A
   \   000078   E4           CLR       A
   \   000079   3B           ADDC      A,R3
   \   00007A   F583         MOV       DPH,A
   \   00007C   E4           CLR       A
   \   00007D   F0           MOVX      @DPTR,A
   \   00007E   A3           INC       DPTR
   \   00007F   F0           MOVX      @DPTR,A
    928            }
    929            
    930            //Process the identify query rsp
    931            osal_set_event(bdb_TaskID, BDB_RESPONDENT_PROCESS_TIMEOUT);
   \                     ??bdb_ZclIdentifyQueryCmdInd_0:
   \   000080                ; Setup parameters for call to function osal_set_event
   \   000080   7A00         MOV       R2,#0x0
   \   000082   7B40         MOV       R3,#0x40
   \   000084   90....       MOV       DPTR,#bdb_TaskID
   \   000087   E0           MOVX      A,@DPTR
   \   000088   F9           MOV       R1,A
   \   000089   12....       LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
    932          }
   \   00008C   02....       LJMP      ??Subroutine44_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   E0           MOVX      A,@DPTR
   \   000009   8A82         MOV       DPL,R2
   \   00000B   8B83         MOV       DPH,R3
   \   00000D   A3           INC       DPTR
   \   00000E   A3           INC       DPTR
   \   00000F   A3           INC       DPTR
   \   000010   A3           INC       DPTR
   \   000011   A3           INC       DPTR
   \   000012   A3           INC       DPTR
   \   000013   A3           INC       DPTR
   \   000014   A3           INC       DPTR
   \   000015   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   EA           MOV       A,R2
   \   000001   240C         ADD       A,#0xc
   \   000003   F582         MOV       DPL,A
   \   000005   E4           CLR       A
   \   000006   3B           ADDC      A,R3
   \   000007   F583         MOV       DPH,A
   \   000009   22           RET
    933          
    934          /*********************************************************************
    935           * @fn      bdb_ProcessRespondentList
    936           *
    937           * @brief   Process the respondent list by sending Simple Descriptor request to 
    938           *          devices respondent in the list. Also send IEEE Addr Req to those 
    939           *          device for which a bind is created buy IEEE addr is missing.
    940           *
    941           * @param   none
    942           *
    943           * @return  none
    944           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   90....       MOV       DPTR,#pRespondentCurr
   \   000003                REQUIRE ??Subroutine42_0
   \   000003                ; // Fall through to label ??Subroutine42_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   90....       MOV       DPTR,#pRespondentCurr
   \   000003                REQUIRE ??Subroutine45_0
   \   000003                ; // Fall through to label ??Subroutine45_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    945          void bdb_ProcessRespondentList( void )
   \                     bdb_ProcessRespondentList:
    946          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV       A,#-0x9
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    947            zAddrType_t dstAddr = { 0 };
   \   00000A   90....       MOV       DPTR,#`?<Constant {{0}}>`
   \   00000D   AC..         MOV       R4,?XSP + 0
   \   00000F   AD..         MOV       R5,?XSP + 1
   \   000011   7409         MOV       A,#0x9
   \   000013   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    948            
    949            // Look for the first respondent
    950            if ( pRespondentCurr == NULL )
   \   000016   90....       MOV       DPTR,#pRespondentCurr
   \   000019   12....       LCALL     ??Subroutine48_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_109:
   \   00001C   7020         JNZ       ??bdb_ProcessRespondentList_0
    951            {
    952              pRespondentCurr = bdb_getRespondentRetry(pRespondentHead);
   \   00001E                ; Setup parameters for call to function bdb_getRespondentRetry
   \   00001E   90....       MOV       DPTR,#pRespondentHead
   \   000021   12....       LCALL     ??Subroutine43_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   000024   12....       LCALL     `??bdb_getRespondentRetry::?relay`; Banked call to: bdb_getRespondentRetry
   \   000027   12....       LCALL     ?Subroutine25 & 0xFFFF
    953              
    954              // If null, then no responses from Identify query request
    955              if ( (pRespondentCurr == NULL) )
   \                     ??CrossCallReturnLabel_59:
   \   00002A   90....       MOV       DPTR,#pRespondentCurr
   \   00002D   12....       LCALL     ??Subroutine48_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_110:
   \   000030   7052         JNZ       ??CrossCallReturnLabel_47
    956              {
    957                //No responses, then no responses
    958                if(pRespondentHead == NULL)
   \   000032   90....       MOV       DPTR,#pRespondentHead
   \   000035   12....       LCALL     ??Subroutine48_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_111:
   \   000038   703C         JNZ       ??bdb_ProcessRespondentList_1
    959                {
    960                  bdb_exitFindingBindingWStatus( BDB_COMMISSIONING_FB_NO_IDENTIFY_QUERY_RESPONSE );
   \   00003A                ; Setup parameters for call to function bdb_exitFindingBindingWStatus
   \   00003A   790B         MOV       R1,#0xb
   \   00003C   803A         SJMP      ??bdb_ProcessRespondentList_2
    961                }
    962                //Responses and binded to all clusters possible
    963                else
    964                {
    965                  bdb_exitFindingBindingWStatus( BDB_COMMISSIONING_SUCCESS );
    966                }
    967                return;
    968              }
    969            }
    970            else
    971            {
    972              //Validate that we are not processing a missing IEEE Address before chaning 
    973              //the current respondent to be process
    974              if((pRespondentCurr->attempts & FINDING_AND_BINDING_MISSING_IEEE_ADDR) &&
    975                 ((pRespondentCurr->attempts & (~FINDING_AND_BINDING_MISSING_IEEE_ADDR)) >= FINDING_AND_BINDING_MAX_ATTEMPTS))
   \                     ??bdb_ProcessRespondentList_0:
   \   00003E   90....       MOV       DPTR,#pRespondentCurr
   \   000041   E0           MOVX      A,@DPTR
   \   000042   240C         ADD       A,#0xc
   \   000044   F8           MOV       R0,A
   \   000045   A3           INC       DPTR
   \   000046   E0           MOVX      A,@DPTR
   \   000047   3400         ADDC      A,#0x0
   \   000049   F9           MOV       R1,A
   \   00004A   8882         MOV       DPL,R0
   \   00004C   8983         MOV       DPH,R1
   \   00004E   E0           MOVX      A,@DPTR
   \   00004F   A2E7         MOV       C,0xE0 /* A   */.7
   \   000051   5031         JNC       ??CrossCallReturnLabel_47
   \   000053   547F         ANL       A,#0x7f
   \   000055   C3           CLR       C
   \   000056   9404         SUBB      A,#0x4
   \   000058   402A         JC        ??CrossCallReturnLabel_47
    976              {
    977                if(pRespondentNext == NULL)
   \   00005A   90....       MOV       DPTR,#pRespondentNext
   \   00005D   12....       LCALL     ??Subroutine48_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_112:
   \   000060   701C         JNZ       ??bdb_ProcessRespondentList_3
    978                {
    979                  //Review the whole list if we have simple desc that we need to attempt.
    980                  pRespondentCurr = bdb_getRespondentRetry(pRespondentHead);
   \   000062                ; Setup parameters for call to function bdb_getRespondentRetry
   \   000062   90....       MOV       DPTR,#pRespondentHead
   \   000065   12....       LCALL     ??Subroutine43_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   000068   12....       LCALL     `??bdb_getRespondentRetry::?relay`; Banked call to: bdb_getRespondentRetry
   \   00006B   12....       LCALL     ?Subroutine25 & 0xFFFF
    981                    
    982                  if(pRespondentCurr == NULL)
   \                     ??CrossCallReturnLabel_60:
   \   00006E   90....       MOV       DPTR,#pRespondentCurr
   \   000071   12....       LCALL     ??Subroutine48_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_113:
   \   000074   700E         JNZ       ??CrossCallReturnLabel_47
    983                  {
    984                    bdb_exitFindingBindingWStatus( BDB_COMMISSIONING_SUCCESS );
   \   000076                ; Setup parameters for call to function bdb_exitFindingBindingWStatus
   \                     ??bdb_ProcessRespondentList_1:
   \   000076   7900         MOV       R1,#0x0
   \                     ??bdb_ProcessRespondentList_2:
   \   000078   12....       LCALL     `??bdb_exitFindingBindingWStatus::?relay`; Banked call to: bdb_exitFindingBindingWStatus
    985                    return;
   \   00007B   02....       LJMP      ??CrossCallReturnLabel_57 & 0xFFFF
    986                  }
    987                }
    988                else
    989                {
    990                  pRespondentCurr = pRespondentNext;
   \                     ??bdb_ProcessRespondentList_3:
   \   00007E   90....       MOV       DPTR,#pRespondentCurr
   \   000081   12....       LCALL     ??Subroutine39_0 & 0xFFFF
    991                }
    992              }
    993            }
    994            
    995            //Start the timer to process the next respondent
    996            osal_start_timerEx( bdb_TaskID, BDB_RESPONDENT_PROCESS_TIMEOUT, SIMPLEDESC_RESPONSE_TIMEOUT );
   \                     ??CrossCallReturnLabel_47:
   \   000084                ; Setup parameters for call to function osal_start_timerEx
   \   000084   90....       MOV       DPTR,#zgPollRate
   \   000087   78..         MOV       R0,#?V0
   \   000089   12....       LCALL     ?L_MOV_X
   \   00008C   90....       MOV       DPTR,#__Constant_3
   \   00008F   78..         MOV       R0,#?V4
   \   000091   12....       LCALL     ?L_MOV_X
   \   000094   78..         MOV       R0,#?V0
   \   000096   79..         MOV       R1,#?V4
   \   000098   12....       LCALL     ?L_MUL
   \   00009B   78..         MOV       R0,#?V0
   \   00009D   12....       LCALL     ?PUSH_XSTACK_I_FOUR
   \   0000A0   7A00         MOV       R2,#0x0
   \   0000A2   7B40         MOV       R3,#0x40
   \   0000A4   90....       MOV       DPTR,#bdb_TaskID
   \   0000A7   E0           MOVX      A,@DPTR
   \   0000A8   F9           MOV       R1,A
   \   0000A9   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   0000AC   7404         MOV       A,#0x4
   \   0000AE   12....       LCALL     ?DEALLOC_XSTACK8
    997            
    998            //If ParentLost is reported, then do not attempt send SimpleDesc, mark those as pending, 
    999            //if Parent Lost is restored, then these simpleDesc attempts will be restored to 0
   1000            if(bdbCommissioningProcedureState.bdbCommissioningState != BDB_PARENT_LOST)
   \   0000B1   90....       MOV       DPTR,#bdbCommissioningProcedureState
   \   0000B4   E0           MOVX      A,@DPTR
   \   0000B5   6408         XRL       A,#0x8
   \   0000B7   90....       MOV       DPTR,#pRespondentCurr
   \   0000BA   6068         JZ        ??bdb_ProcessRespondentList_4
   1001            {
   1002              dstAddr.addr.shortAddr = pRespondentCurr->data.addr.shortAddr;
   \   0000BC   12....       LCALL     ??Subroutine46_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_84:
   \   0000BF   F8           MOV       R0,A
   \   0000C0   A3           INC       DPTR
   \   0000C1   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   0000C4   12....       LCALL     ??Subroutine39_0 & 0xFFFF
   1003              dstAddr.addrMode = pRespondentCurr->data.addrMode;
   \                     ??CrossCallReturnLabel_48:
   \   0000C7   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_81:
   \   0000CA   2408         ADD       A,#0x8
   \   0000CC   F582         MOV       DPL,A
   \   0000CE   E4           CLR       A
   \   0000CF   38           ADDC      A,R0
   \   0000D0   F583         MOV       DPH,A
   \   0000D2   E0           MOVX      A,@DPTR
   \   0000D3   C0E0         PUSH      A
   \   0000D5   7408         MOV       A,#0x8
   \   0000D7   12....       LCALL     ?XSTACK_DISP0_8
   \   0000DA   D0E0         POP       A
   \   0000DC   12....       LCALL     ?Subroutine6 & 0xFFFF
   1004          
   1005              //Update the attempts, ahead of actually sending the frame, as this is done just below
   1006              pRespondentCurr->attempts++;
   \                     ??CrossCallReturnLabel_94:
   \   0000DF   04           INC       A
   \   0000E0   12....       LCALL     ?Subroutine6 & 0xFFFF
   1007              
   1008              //Send IEEE addr request or simple desc req
   1009              if(pRespondentCurr->attempts & FINDING_AND_BINDING_MISSING_IEEE_ADDR)
   \                     ??CrossCallReturnLabel_95:
   \   0000E3   A2E7         MOV       C,0xE0 /* A   */.7
   \   0000E5   5012         JNC       ??bdb_ProcessRespondentList_5
   1010              {
   1011                ZDP_IEEEAddrReq(pRespondentCurr->data.addr.shortAddr,0,0,0);
   \   0000E7                ; Setup parameters for call to function ZDP_IEEEAddrReq
   \   0000E7   7D00         MOV       R5,#0x0
   \   0000E9   7C00         MOV       R4,#0x0
   \   0000EB   7900         MOV       R1,#0x0
   \   0000ED   12....       LCALL     ?Subroutine13 & 0xFFFF
   1012              }
   \                     ??CrossCallReturnLabel_85:
   \   0000F0   FA           MOV       R2,A
   \   0000F1   A3           INC       DPTR
   \   0000F2   E0           MOVX      A,@DPTR
   \   0000F3   FB           MOV       R3,A
   \   0000F4   12....       LCALL     `??ZDP_IEEEAddrReq::?relay`; Banked call to: ZDP_IEEEAddrReq
   \   0000F7   8031         SJMP      ??bdb_ProcessRespondentList_6
   1013              else
   1014              {
   1015                //Send simple descriptor
   1016                ZDP_SimpleDescReq( &dstAddr, pRespondentCurr->data.addr.shortAddr, pRespondentCurr->data.endPoint, 0 );
   \                     ??bdb_ProcessRespondentList_5:
   \   0000F9                ; Setup parameters for call to function ZDP_SimpleDescReq
   \   0000F9   75..00       MOV       ?V0,#0x0
   \   0000FC   78..         MOV       R0,#?V0
   \   0000FE   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000101   12....       LCALL     ?Subroutine15 & 0xFFFF
   1017              }
   1018            }
   \                     ??CrossCallReturnLabel_82:
   \   000104   2409         ADD       A,#0x9
   \   000106   F582         MOV       DPL,A
   \   000108   E4           CLR       A
   \   000109   38           ADDC      A,R0
   \   00010A   F583         MOV       DPH,A
   \   00010C   E0           MOVX      A,@DPTR
   \   00010D   F9           MOV       R1,A
   \   00010E   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_86:
   \   000111   FC           MOV       R4,A
   \   000112   A3           INC       DPTR
   \   000113   E0           MOVX      A,@DPTR
   \   000114   FD           MOV       R5,A
   \   000115   7401         MOV       A,#0x1
   \   000117   12....       LCALL     ?XSTACK_DISP101_8
   \   00011A   12....       LCALL     `??ZDP_SimpleDescReq::?relay`; Banked call to: ZDP_SimpleDescReq
   \   00011D   7401         MOV       A,#0x1
   \   00011F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000122   8006         SJMP      ??bdb_ProcessRespondentList_6
   1019            else
   1020            {
   1021              //Stop any attempt due to parent lost
   1022              pRespondentCurr->attempts |= FINDING_AND_BINDING_PARENT_LOST;
   \                     ??bdb_ProcessRespondentList_4:
   \   000124   12....       LCALL     ??Subroutine47_0 & 0xFFFF
   1023            }
   \                     ??CrossCallReturnLabel_97:
   \   000127   D2E6         SETB      0xE0 /* A   */.6
   \   000129   F0           MOVX      @DPTR,A
   1024            
   1025            //Search for the next respondant that has not enough tries in the list
   1026            pRespondentNext = bdb_getRespondentRetry(pRespondentCurr->pNext);
   \                     ??bdb_ProcessRespondentList_6:
   \   00012A                ; Setup parameters for call to function bdb_getRespondentRetry
   \   00012A   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   00012D   240F         ADD       A,#0xf
   \   00012F   F582         MOV       DPL,A
   \   000131   E4           CLR       A
   \   000132   38           ADDC      A,R0
   \   000133   F583         MOV       DPH,A
   \   000135   12....       LCALL     ??Subroutine43_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   000138   12....       LCALL     `??bdb_getRespondentRetry::?relay`; Banked call to: bdb_getRespondentRetry
   \   00013B   90....       MOV       DPTR,#pRespondentNext
   \   00013E   12....       LCALL     ??Subroutine42_0 & 0xFFFF
   1027          }
   \                     ??CrossCallReturnLabel_57:
   \   000141   7409         MOV       A,#0x9
   \   000143   12....       LCALL     ?DEALLOC_XSTACK8
   \   000146   7F08         MOV       R7,#0x8
   \   000148   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   90....       MOV       DPTR,#pRespondentCurr
   \   000003                REQUIRE ??Subroutine46_0
   \   000003                ; // Fall through to label ??Subroutine46_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine46_0:
   \   000000   12....       LCALL     ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_89:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   90....       MOV       DPTR,#pRespondentCurr
   \   000004                REQUIRE ??Subroutine47_0
   \   000004                ; // Fall through to label ??Subroutine47_0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {{0}}>`:
   \   000000   0000         DW 0
   \   000002   00000000     DB 0, 0, 0, 0, 0, 0
   \            0000    
   \   000008   00           DB 0
   1028          
   1029          /*********************************************************************
   1030           * @fn      bdb_FindIfAppCluster
   1031           *
   1032           * @brief   To verify if cluster is application type and should the local device create a bind for it
   1033           *
   1034           * @param   ClusterId - cluster ID to be verified
   1035           * @param   isClusterOutput - True if the bind attempted is output cluster in the local device, false otherwise
   1036           *
   1037           * @return  true if success
   1038           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1039          uint8 bdb_FindIfAppCluster( cId_t ClusterId, uint8 isClusterOutput )
   \                     bdb_FindIfAppCluster:
   1040          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   1041            uint8 i;
   1042            uint8 ClusterCnt;
   1043          
   1044            if(isClusterOutput)
   \   000006   7800         MOV       R0,#0x0
   \   000008   6023         JZ        ??bdb_FindIfAppCluster_0
   1045            {
   1046                ClusterCnt = sizeof( bdb_ZclType1Clusters )/sizeof( uint16 );
   1047          
   1048                for ( i = 0; i < ClusterCnt; i++ )
   1049                {
   1050                  if ( bdb_ZclType1Clusters[i] == ClusterId )
   \                     ??bdb_FindIfAppCluster_1:
   \   00000A   E8           MOV       A,R0
   \   00000B   25E0         ADD       A,0xE0 /* A   */
   \   00000D   FC           MOV       R4,A
   \   00000E   E4           CLR       A
   \   00000F   33           RLC       A
   \   000010   FD           MOV       R5,A
   \   000011   74..         MOV       A,#bdb_ZclType1Clusters & 0xff
   \   000013   2C           ADD       A,R4
   \   000014   F582         MOV       DPL,A
   \   000016   74..         MOV       A,#(bdb_ZclType1Clusters >> 8) & 0xff
   \   000018   3D           ADDC      A,R5
   \   000019   F583         MOV       DPH,A
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   6A           XRL       A,R2
   \   00001D   7003         JNZ       ??bdb_FindIfAppCluster_2
   \   00001F   A3           INC       DPTR
   \   000020   E0           MOVX      A,@DPTR
   \   000021   6B           XRL       A,R3
   \                     ??bdb_FindIfAppCluster_2:
   \   000022   6023         JZ        ??bdb_FindIfAppCluster_3
   1051                  {
   1052                    return ( SUCCESS );
   1053                  }
   1054                }
   \   000024   08           INC       R0
   \   000025   E8           MOV       A,R0
   \   000026   C3           CLR       C
   \   000027   9418         SUBB      A,#0x18
   \   000029   5027         JNC       ??bdb_FindIfAppCluster_4
   \   00002B   80DD         SJMP      ??bdb_FindIfAppCluster_1
   1055            }
   1056            else
   1057            {
   1058                ClusterCnt = sizeof( bdb_ZclType2Clusters )/sizeof( uint16 );
   1059          
   1060                for ( i = 0; i < ClusterCnt; i++ )
   1061                {
   1062                  if ( bdb_ZclType2Clusters[i] == ClusterId )
   \                     ??bdb_FindIfAppCluster_0:
   \   00002D   E8           MOV       A,R0
   \   00002E   25E0         ADD       A,0xE0 /* A   */
   \   000030   FC           MOV       R4,A
   \   000031   E4           CLR       A
   \   000032   33           RLC       A
   \   000033   FD           MOV       R5,A
   \   000034   74..         MOV       A,#bdb_ZclType2Clusters & 0xff
   \   000036   2C           ADD       A,R4
   \   000037   F582         MOV       DPL,A
   \   000039   74..         MOV       A,#(bdb_ZclType2Clusters >> 8) & 0xff
   \   00003B   3D           ADDC      A,R5
   \   00003C   F583         MOV       DPH,A
   \   00003E   E0           MOVX      A,@DPTR
   \   00003F   6A           XRL       A,R2
   \   000040   7003         JNZ       ??bdb_FindIfAppCluster_5
   \   000042   A3           INC       DPTR
   \   000043   E0           MOVX      A,@DPTR
   \   000044   6B           XRL       A,R3
   \                     ??bdb_FindIfAppCluster_5:
   \   000045   7004         JNZ       ??bdb_FindIfAppCluster_6
   1063                  {
   1064                    return ( SUCCESS );
   \                     ??bdb_FindIfAppCluster_3:
   \   000047   7900         MOV       R1,#0x0
   \   000049   8009         SJMP      ??bdb_FindIfAppCluster_7
   1065                  }
   1066                }
   \                     ??bdb_FindIfAppCluster_6:
   \   00004B   08           INC       R0
   \   00004C   E8           MOV       A,R0
   \   00004D   C3           CLR       C
   \   00004E   9431         SUBB      A,#0x31
   \   000050   40DB         JC        ??bdb_FindIfAppCluster_0
   1067            }
   1068            
   1069            // If not found, take it as application cluster it will be filtered
   1070            // by simple descriptor at some point
   1071            return ( FAILURE );
   \                     ??bdb_FindIfAppCluster_4:
   \   000052   7901         MOV       R1,#0x1
   \                     ??bdb_FindIfAppCluster_7:
   \   000054   02....       LJMP      ?Subroutine3 & 0xFFFF
   1072          }
   1073          
   1074          
   1075          /*********************************************************************
   1076           * @fn      bdb_getRespondentRetry
   1077           *
   1078           * @brief   Get the next Respondant entry to retry
   1079           *
   1080           * @param   pHead - pointer to a pointer of the list head
   1081           *
   1082           * @return  respondant entry if found, otherwise NULL
   1083           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1084          bdbFindingBindingRespondent_t* bdb_getRespondentRetry(bdbFindingBindingRespondent_t* pRespondentHead)
   \                     bdb_getRespondentRetry:
   1085          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1086            bdbFindingBindingRespondent_t *pTemp;
   1087            
   1088            pTemp = pRespondentHead;
   \   000004   800C         SJMP      ??CrossCallReturnLabel_71
   1089            
   1090            while(pTemp != NULL)
   1091            {
   1092              //does the next entry requires to perform an attempt on simple desc req or IEEE addr req?
   1093              if((pTemp->attempts & ~FINDING_AND_BINDING_MISSING_IEEE_ADDR) < FINDING_AND_BINDING_MAX_ATTEMPTS)
   1094              {
   1095                return pTemp;
   1096              }
   1097             
   1098              pTemp = pTemp->pNext;
   \                     ??bdb_getRespondentRetry_0:
   \   000006   EA           MOV       A,R2
   \   000007   240F         ADD       A,#0xf
   \   000009   F582         MOV       DPL,A
   \   00000B   E4           CLR       A
   \   00000C   3B           ADDC      A,R3
   \   00000D   F583         MOV       DPH,A
   \   00000F   12....       LCALL     ??Subroutine43_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   000012   EA           MOV       A,R2
   \   000013   4B           ORL       A,R3
   \   000014   600D         JZ        ??bdb_getRespondentRetry_1
   \   000016   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   547F         ANL       A,#0x7f
   \   00001C   C3           CLR       C
   \   00001D   9404         SUBB      A,#0x4
   \   00001F   50E5         JNC       ??bdb_getRespondentRetry_0
   \   000021   8004         SJMP      ??bdb_getRespondentRetry_2
   1099            }
   1100            return NULL;
   \                     ??bdb_getRespondentRetry_1:
   \   000023   7A00         MOV       R2,#0x0
   \   000025   7B00         MOV       R3,#0x0
   \                     ??bdb_getRespondentRetry_2:
   \   000027   02....       LJMP      ??Subroutine37_0 & 0xFFFF
   1101          }
   1102          
   1103          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1104          bdbFindingBindingRespondent_t* bdb_findRespondentNode(uint8 endpoint, uint16 shortAddress)
   \                     bdb_findRespondentNode:
   1105          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1106            bdbFindingBindingRespondent_t* pTemp = pRespondentHead;
   \   000004   90....       MOV       DPTR,#pRespondentHead
   \   000007   8009         SJMP      ??bdb_findRespondentNode_0
   1107            
   1108            while(pTemp != NULL)  
   1109            {
   1110              if((pTemp->data.addr.shortAddr == shortAddress) && (pTemp->data.endPoint == endpoint))
   1111              {
   1112                return pTemp;
   1113              }
   1114              
   1115              pTemp = pTemp->pNext;
   \                     ??bdb_findRespondentNode_1:
   \   000009   EC           MOV       A,R4
   \   00000A   240F         ADD       A,#0xf
   \   00000C   F582         MOV       DPL,A
   \   00000E   E4           CLR       A
   \   00000F   3D           ADDC      A,R5
   \   000010   F583         MOV       DPH,A
   \                     ??bdb_findRespondentNode_0:
   \   000012   E0           MOVX      A,@DPTR
   \   000013   FC           MOV       R4,A
   \   000014   A3           INC       DPTR
   \   000015   E0           MOVX      A,@DPTR
   \   000016   FD           MOV       R5,A
   \   000017   EC           MOV       A,R4
   \   000018   4D           ORL       A,R5
   \   000019   6024         JZ        ??bdb_findRespondentNode_2
   \   00001B   8C82         MOV       DPL,R4
   \   00001D   8D83         MOV       DPH,R5
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   6A           XRL       A,R2
   \   000021   7003         JNZ       ??bdb_findRespondentNode_3
   \   000023   A3           INC       DPTR
   \   000024   E0           MOVX      A,@DPTR
   \   000025   6B           XRL       A,R3
   \                     ??bdb_findRespondentNode_3:
   \   000026   70E1         JNZ       ??bdb_findRespondentNode_1
   \   000028   8C82         MOV       DPL,R4
   \   00002A   8D83         MOV       DPH,R5
   \   00002C   A3           INC       DPTR
   \   00002D   A3           INC       DPTR
   \   00002E   A3           INC       DPTR
   \   00002F   A3           INC       DPTR
   \   000030   A3           INC       DPTR
   \   000031   A3           INC       DPTR
   \   000032   A3           INC       DPTR
   \   000033   A3           INC       DPTR
   \   000034   A3           INC       DPTR
   \   000035   E0           MOVX      A,@DPTR
   \   000036   69           XRL       A,R1
   \   000037   70D0         JNZ       ??bdb_findRespondentNode_1
   \   000039   EC           MOV       A,R4
   \   00003A   FA           MOV       R2,A
   \   00003B   ED           MOV       A,R5
   \   00003C   FB           MOV       R3,A
   \   00003D   8004         SJMP      ??bdb_findRespondentNode_4
   1116            }
   1117            
   1118            return NULL;
   \                     ??bdb_findRespondentNode_2:
   \   00003F   7A00         MOV       R2,#0x0
   \   000041   7B00         MOV       R3,#0x0
   \                     ??bdb_findRespondentNode_4:
   \   000043   02....       LJMP      ??Subroutine37_0 & 0xFFFF
   1119          }

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for grpName>`:
   \   000000   47           DB 71
   \   000001   72           DB 114
   \   000002   6F           DB 111
   \   000003   75           DB 117
   \   000004   70           DB 112
   \   000005   00           DB 0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for bdbIndentifyActiveEndpoint>`:
   \   000000   FF           DB 255

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3e7:
   \   000000   E7030000     DD 999

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3e8:
   \   000000   E8030000     DD 1000

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_2710:
   \   000000   10270000     DD 10000

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3:
   \   000000   03000000     DD 3

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_SetIdentifyActiveEndpoint::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_SetIdentifyActiveEndpoint

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_setEpDescListToActiveEndpoint::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_setEpDescListToActiveEndpoint

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_ProcessIEEEAddrRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_ProcessIEEEAddrRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_StopInitiatorFindingBinding::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_StopInitiatorFindingBinding

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_checkMatchingEndpoints::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_checkMatchingEndpoints

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_ProcessSimpleDesc::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_ProcessSimpleDesc

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_zclFindingBindingEpType::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_zclFindingBindingEpType

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_zclFindingBindingAddBindEntry::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_zclFindingBindingAddBindEntry

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_exitFindingBindingWStatus::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_exitFindingBindingWStatus

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_zclSimpleDescClusterListClean::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_zclSimpleDescClusterListClean

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_RegisterIdentifyTimeChangeCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_RegisterIdentifyTimeChangeCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_GetFBInitiatorStatus::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_GetFBInitiatorStatus

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_RegisterBindNotificationCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_RegisterBindNotificationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_SendIdentifyQuery::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_SendIdentifyQuery

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_ZclIdentifyQueryCmdInd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_ZclIdentifyQueryCmdInd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_ProcessRespondentList::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_ProcessRespondentList

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_FindIfAppCluster::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_FindIfAppCluster

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_getRespondentRetry::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_getRespondentRetry

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bdb_findRespondentNode::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bdb_findRespondentNode
   1120          
   1121          #endif  
   1122          
   1123          /*********************************************************************
   1124          *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0     23   bdb_FindIfAppCluster
      1     20   bdb_GetFBInitiatorStatus
        0     20   -> osal_get_timeoutEx
      0     25   bdb_ProcessIEEEAddrRsp
        0     25   -> AddrMgrEntryUpdate
        0     25   -> AddrMgrExtAddrSet
        0     25   -> ZDO_ParseAddrRsp
        0     25   -> bdb_checkMatchingEndpoints
        0     25   -> bdb_exitFindingBindingWStatus
        0     25   -> bdb_findRespondentNode
        0     25   -> bdb_setEpDescListToActiveEndpoint
        0     25   -> bdb_zclSimpleDescClusterListClean
        0     25   -> osal_mem_free
        0     25   -> osal_stop_timerEx
      1     29   bdb_ProcessRespondentList
        0     25   -> ZDP_IEEEAddrReq
        0     26   -> ZDP_SimpleDescReq
        0     25   -> bdb_exitFindingBindingWStatus
        0     25   -> bdb_getRespondentRetry
        0     29   -> osal_start_timerEx
      0     28   bdb_ProcessSimpleDesc
        0     28   -> AddrMgrExtAddrLookup
        0     28   -> ZDO_ParseSimpleDescBuf
        0     28   -> bdb_checkMatchingEndpoints
        0     28   -> bdb_findRespondentNode
        0     28   -> bdb_setEpDescListToActiveEndpoint
        0     28   -> bdb_zclSimpleDescClusterListClean
      2      0   bdb_RegisterBindNotificationCB
      2      0   bdb_RegisterIdentifyTimeChangeCB
      0     33   bdb_SendIdentifyQuery
        0     22   -> bdb_getZCLFrameCounter
        0     26   -> osal_start_timerEx
        0     33   -> zcl_SendCommand
      2      0   bdb_SetIdentifyActiveEndpoint
      2      0   bdb_StopInitiatorFindingBinding
        2      0   -> bdb_exitFindingBindingWStatus
        2      0   -> bdb_zclRespondentListClean
        2      0   -> osal_stop_timerEx
      1     10   bdb_ZclIdentifyQueryCmdInd
        0     10   -> bdb_AddRespondentNode
        0     10   -> osal_set_event
        0     10   -> osal_stop_timerEx
      0     63   bdb_checkMatchingEndpoints
        0     29   -> AddrMgrExtAddrLookup
        0     29   -> bdb_exitFindingBindingWStatus
        0     35   -> bdb_zclFindingBindingAddBindEntry
        0     29   -> bdb_zclSimpleDescClusterListClean
        0     29   -> osal_stop_timerEx
      0     38   bdb_exitFindingBindingWStatus
        0      9   -> bdb_reportCommissioningState
      2     28   bdb_findRespondentNode
      2     25   bdb_getRespondentRetry
      2     28   bdb_setEpDescListToActiveEndpoint
      0     51   bdb_zclFindingBindingAddBindEntry
        0     16   -> ZDO_AnyClusterMatches
        0     14   -> bdb_FindIfAppCluster
      0     16   bdb_zclFindingBindingEpType
        0     16   -> ZDO_AnyClusterMatches
      0     39   bdb_zclSimpleDescClusterListClean
        0     10   -> osal_mem_free


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       9  ?<Constant {{0}}>
       1  ?<Initializer for bdbIndentifyActiveEndpoint>
       6  ?<Initializer for grpName>
       8  ??Subroutine36_0
       7  ??Subroutine37_0
       6  ??Subroutine38_0
       6  ??Subroutine39_0
       1  ??Subroutine40_0
       4  ??Subroutine41_0
       6  ??Subroutine42_0
       4  ??Subroutine43_0
       5  ??Subroutine44_0
       6  ??Subroutine45_0
       4  ??Subroutine46_0
       5  ??Subroutine47_0
       6  ??Subroutine48_0
       3  ?Subroutine0
       3  ?Subroutine1
       9  ?Subroutine10
      20  ?Subroutine11
       6  ?Subroutine12
       3  ?Subroutine13
      15  ?Subroutine14
       3  ?Subroutine15
      22  ?Subroutine16
       2  ?Subroutine17
      10  ?Subroutine18
       4  ?Subroutine19
       5  ?Subroutine2
       9  ?Subroutine20
      10  ?Subroutine21
       1  ?Subroutine22
       9  ?Subroutine23
      14  ?Subroutine24
       3  ?Subroutine25
       4  ?Subroutine26
      10  ?Subroutine27
       5  ?Subroutine28
       9  ?Subroutine29
       5  ?Subroutine3
       6  ?Subroutine30
       7  ?Subroutine31
       3  ?Subroutine32
       6  ?Subroutine33
       3  ?Subroutine34
       9  ?Subroutine35
      17  ?Subroutine4
      14  ?Subroutine5
       4  ?Subroutine6
      26  ?Subroutine7
      10  ?Subroutine8
      26  ?Subroutine9
       4  __Constant_2710
       4  __Constant_3
       4  __Constant_3e7
       4  __Constant_3e8
       1  bdbIndentifyActiveEndpoint
      87  bdb_FindIfAppCluster
       6  bdb_FindIfAppCluster::?relay
      12  bdb_FindingBindingTargetSimpleDesc
     109  bdb_GetFBInitiatorStatus
       6  bdb_GetFBInitiatorStatus::?relay
     218  bdb_ProcessIEEEAddrRsp
       6  bdb_ProcessIEEEAddrRsp::?relay
     331  bdb_ProcessRespondentList
       6  bdb_ProcessRespondentList::?relay
     209  bdb_ProcessSimpleDesc
       6  bdb_ProcessSimpleDesc::?relay
      10  bdb_RegisterBindNotificationCB
       6  bdb_RegisterBindNotificationCB::?relay
      10  bdb_RegisterIdentifyTimeChangeCB
       6  bdb_RegisterIdentifyTimeChangeCB::?relay
     157  bdb_SendIdentifyQuery
       6  bdb_SendIdentifyQuery::?relay
      83  bdb_SetIdentifyActiveEndpoint
       6  bdb_SetIdentifyActiveEndpoint::?relay
      37  bdb_StopInitiatorFindingBinding
       6  bdb_StopInitiatorFindingBinding::?relay
     143  bdb_ZclIdentifyQueryCmdInd
       6  bdb_ZclIdentifyQueryCmdInd::?relay
      48  bdb_ZclType1Clusters
      98  bdb_ZclType2Clusters
     397  bdb_checkMatchingEndpoints
       6  bdb_checkMatchingEndpoints::?relay
      20  bdb_exitFindingBindingWStatus
       6  bdb_exitFindingBindingWStatus::?relay
      70  bdb_findRespondentNode
       6  bdb_findRespondentNode::?relay
      42  bdb_getRespondentRetry
       6  bdb_getRespondentRetry::?relay
      88  bdb_setEpDescListToActiveEndpoint
       6  bdb_setEpDescListToActiveEndpoint::?relay
     154  bdb_zclFindingBindingAddBindEntry
       6  bdb_zclFindingBindingAddBindEntry::?relay
     207  bdb_zclFindingBindingEpType
       6  bdb_zclFindingBindingEpType::?relay
      79  bdb_zclSimpleDescClusterListClean
       6  bdb_zclSimpleDescClusterListClean::?relay
       6  grpName
       2  pfnBindNotificationCB
       2  pfnIdentifyTimeChangeCB

 
 2 834 bytes in segment BANKED_CODE
   114 bytes in segment BANK_RELAYS
     7 bytes in segment XDATA_I
     7 bytes in segment XDATA_ID
   171 bytes in segment XDATA_ROM_C
    16 bytes in segment XDATA_Z
 
   121 bytes of CODE     memory
   155 bytes of CONST    memory (+ 16 bytes shared)
 2 834 bytes of HUGECODE memory
    23 bytes of XDATA    memory

Errors: none
Warnings: none
